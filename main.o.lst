ca65 V2.19 - Git 4dfbccfaf
Main file   : src/main.asm
Current file: src/main.asm

000000r 1               .feature string_escapes
000000r 1               
000000r 1               .segment "INES"
000000r 1  4E 45 53 1A  .byte $4E,$45,$53,$1A
000004r 1  08           .byte 8         ; size of prg rom in 16kb units
000005r 1  08           .byte 8         ; size of chr rom in 8kb units
000006r 1  40           .byte %01000000 ; flags 6 -- switchable nametable mirroring, mapper 4
000007r 1  08           .byte %00001000 ; flags 7 -- NES 2.0 header
000008r 1  00           .byte %00000000 ; mapper msb / submapper
000009r 1  00           .byte %00000000 ; prg-rom / chr-rom size msb
00000Ar 1  05           .byte %00000101 ; prg-ram / eeprom size (64 << 5 == 2048)
00000Br 1  00           .byte %00000000 ; chr-ram size
00000Cr 1  00           .byte %00000000 ; cpu/ppu timing mode
00000Dr 1  00           .byte %00000000 ; vs. system type
00000Er 1  00           .byte %00000000 ; misc ROMs
00000Fr 1  00           .byte %00000000 ; default exp device
000010r 1               
000010r 1               ; mapper 1 -- MMC1
000010r 1               
000010r 1               .include "defines.asm"
000010r 2               ; Copyright (C) 2024 iProgramInCpp
000010r 2               
000010r 2               ; Addresses
000010r 2               ppu_ctrl    = $2000
000010r 2               ppu_mask    = $2001
000010r 2               ppu_status  = $2002
000010r 2               oam_addr    = $2003
000010r 2               oam_data    = $2004
000010r 2               ppu_scroll  = $2005
000010r 2               ppu_addr    = $2006
000010r 2               ppu_data    = $2007
000010r 2               palette_mem = $3F00
000010r 2               apu_pulse1  = $4000
000010r 2               apu_pulse2  = $4004
000010r 2               apu_triang  = $4008
000010r 2               apu_noise   = $400C
000010r 2               apu_dmc_cfg = $4010
000010r 2               apu_oam_dma = $4014
000010r 2               apu_status  = $4015
000010r 2               apu_joypad1 = $4016
000010r 2               apu_joypad2 = $4017
000010r 2               apu_frctr   = $4017
000010r 2               mmc3_bsel   = $8000
000010r 2               mmc3_bdat   = $8001
000010r 2               mmc3_mirror = $A000
000010r 2               mmc3_pram   = $A001
000010r 2               mmc3_irqla  = $C000
000010r 2               mmc3_irqrl  = $C001
000010r 2               mmc3_irqdi  = $E000
000010r 2               mmc3_irqen  = $E001
000010r 2               mmc3bk_bg0  = 0
000010r 2               mmc3bk_bg1  = 1
000010r 2               mmc3bk_spr0 = 2
000010r 2               mmc3bk_spr1 = 3
000010r 2               mmc3bk_spr2 = 4
000010r 2               mmc3bk_spr3 = 5
000010r 2               mmc3bk_prg0 = 6   ; prg0 controls $C000-$DFFF
000010r 2               mmc3bk_prg1 = 7   ; prg1 controls $A000-$BFFF
000010r 2               
000010r 2               ; Offsets in Sprite Struct
000010r 2               
000010r 2               ; The sprite struct is 16 bytes.
000010r 2               ; The sprite struct is spread across 16 segments of 16 bytes each, for a total of 256.
000010r 2               ; So first, the sp_kind segment, then the sp_x segment, etc.
000010r 2               ; This allows easy indexing via the X/Y registers as you can simply do:
000010r 2               ;   lda sprspace + sp_kind, x
000010r 2               
000010r 2               sp_max      = $10   ; maximum of 16 sprites.
000010r 2               
000010r 2               sp_kind     = (sp_max * 0)   ; kind of sprite (see Entity Types)
000010r 2               sp_flags    = (sp_max * 1)   ; flags
000010r 2               sp_x        = (sp_max * 2)   ; X coordinate within a page
000010r 2               sp_x_lo     = (sp_max * 3)   ; X coordinate subpixels (used for things like crystal hearts for smooth bounceback)
000010r 2               sp_y        = (sp_max * 4)   ; Y coordinate
000010r 2               sp_y_lo     = (sp_max * 5)   ; Y coordinate subpixels
000010r 2               sp_x_pg     = (sp_max * 6)   ; X coordinate in pages
000010r 2               sp_wid      = (sp_max * 7)   ; sprite hit box width / entity specific
000010r 2               sp_hei      = (sp_max * 8)   ; sprite hit box height / entity specific
000010r 2               sp_vel_x    = (sp_max * 9)   ; sprite velocity X / entity specific (used by gm_ent_move_x)
000010r 2               sp_vel_y    = (sp_max *10)   ; sprite velocity Y / entity specific (used by gm_ent_move_y)
000010r 2               sp_vel_x_lo = (sp_max *11)   ; sprite velocity X low / entity specific (used by gm_ent_move_x)
000010r 2               sp_vel_y_lo = (sp_max *12)   ; sprite velocity X low / entity specific (used by gm_ent_move_y)
000010r 2               sp_entspec1 = (sp_max *13)   ; entity specific 1
000010r 2               sp_entspec2 = (sp_max *14)   ; entity specific 2
000010r 2               sp_entspec3 = (sp_max *15)   ; entity specific 3
000010r 2               
000010r 2               ; synonyms for entspec fields
000010r 2               sp_oscill_timer = sp_entspec1
000010r 2               sp_refill_flags = sp_entspec2
000010r 2               sp_refill_oldos = sp_entspec3
000010r 2               sp_strawb_flags = sp_entspec2
000010r 2               sp_strawb_colid = sp_entspec3
000010r 2               sp_points_count = sp_entspec1
000010r 2               sp_points_timer = sp_entspec2
000010r 2               
000010r 2               sp_part_entty = sp_entspec1
000010r 2               sp_part_vel_x = sp_vel_x
000010r 2               sp_part_vel_y = sp_vel_y
000010r 2               sp_part_timer = sp_entspec2
000010r 2               sp_part_chrti = sp_wid
000010r 2               sp_part_chrat = sp_hei
000010r 2               sp_part_gravi = sp_entspec3
000010r 2               
000010r 2               sp_l0ic_state = sp_entspec1  ; 0 - hanging, 1 - falling, 2 - fallen
000010r 2               sp_l0ic_timer = sp_entspec2
000010r 2               sp_l0ic_vel_y = sp_vel_y
000010r 2               sp_l0ic_vsu_y = sp_vel_y_lo
000010r 2               sp_l0bm_state = sp_entspec1  ; 0 - waiting, 1 - falling
000010r 2               sp_l0bm_blidx = sp_entspec2  ; index of block to trigger to fall
000010r 2               sp_l0bm_timer = sp_entspec3
000010r 2               
000010r 2               ; entity flags
000010r 2               ef_collidable = $01
000010r 2               ef_oddroom    = $02 ;
000010r 2               
000010r 2               ; Entity Types
000010r 2               ; NOTE(iProgram): Keep this up to date with LEVELEDITOR\Entity.cs (public enum eEntityType)
000010r 2               ;                 and LEVELEDITOR\MainGame.cs (GetByteFromString)
000010r 2               e_none      = $00
000010r 2               e_strawb    = $01
000010r 2               e_refill    = $02
000010r 2               e_spring    = $03
000010r 2               e_key       = $04
000010r 2               e_particle  = $05 ; INTERNAL: shatter particle
000010r 2               e_refillhd  = $06 ; INTERNAL: place holder for refill
000010r 2               e_points    = $07 ; INTERNAL: points when a strawberry is collected
000010r 2               e_l0introcr = $08 ; LEVEL 0: intro crusher
000010r 2               e_box       = $09 ; box with collision against the player
000010r 2               e_l0bridge  = $0A ; LEVEL 0: bridge manager
000010r 2               
000010r 2               ; Entity types that turn into other entities on load
000010r 2               e_rerefill  = $FF ; refill with respawn flag set
000010r 2               
000010r 2               ; Entity Commands
000010r 2               ec_scrnext  = $FE
000010r 2               ec_dataend  = $FF
000010r 2               
000010r 2               ; Entity flags
000010r 2               erf_regen   = $01
000010r 2               esb_picked  = $01
000010r 2               
000010r 2               ; Sprite Indices
000010r 2               plr_idle1_l = $04
000010r 2               plr_idle1_r = $06
000010r 2               plr_jump_l  = $08
000010r 2               plr_jump_r  = $0A
000010r 2               plr_lkup_l  = $28   ; look up
000010r 2               plr_lkup_r  = $2A
000010r 2               plr_flip_l  = $0C
000010r 2               plr_flip_r  = $0E
000010r 2               plr_fall_l  = $10
000010r 2               plr_fall_r  = $12
000010r 2               plr_push1_l = $24
000010r 2               plr_push1_r = $26
000010r 2               plr_clim1_l = $1C   ; climb
000010r 2               plr_clim1_r = $1E
000010r 2               plr_dang1_l = $20   ; dangle
000010r 2               plr_dang1_r = $22
000010r 2               plr_dash_l  = $2C
000010r 2               plr_dash_r  = $2E
000010r 2               plr_walk1_l = $14
000010r 2               plr_walk1_r = $16
000010r 2               plr_walk2_l = $18
000010r 2               plr_walk2_r = $1A
000010r 2               plr_hasta_l = $32   ; hair stationary
000010r 2               plr_hasta_r = $30
000010r 2               plr_hamvr_l = $34   ; hair move right
000010r 2               plr_hamvr_r = $30
000010r 2               plr_hamsr_l = $36   ; hair move slight right
000010r 2               plr_hamsr_r = $30
000010r 2               plr_hamvu_l = $38   ; hair move up
000010r 2               plr_hamvu_r = $30
000010r 2               plr_hamvd_l = $3A   ; hair move down
000010r 2               plr_hamvd_r = $30
000010r 2               plr_haflp_l = $9C   ; hair flip
000010r 2               plr_haflp_r = $9E
000010r 2               plr_hadsh_l = $3C   ; hair dash
000010r 2               plr_hadsh_r = $3E
000010r 2               
000010r 2               ; Level Bank Format
000010r 2               metatiles     = $A000 ; address of metatile character data
000010r 2               metatile_info = $A100 ; address of metatile information
000010r 2               level_data    = $A200 ; address of actual level data
000010r 2               
000010r 2               ; SPRITE BANKS
000010r 2               ;
000010r 2               ; notes:
000010r 2               ;   plrsp0 and plrsp1 belong at $0000
000010r 2               ;   anisp0.....anisp3 belong at $0C00
000010r 2               ;   gensp1 and gensp2 belong at $0800 and $0400 respectively.
000010r 2               
000010r 2               chrb_plrsp0 = $00   ; player sprite banks  \.
000010r 2               chrb_plrsp1 = $01   ;                      |  PART OF "sp_player.chr"
000010r 2               chrb_anisp0 = $02   ; animated sprites     |
000010r 2               chrb_anisp1 = $03   ;                      /
000010r 2               chrb_anisp2 = $04   ;                      \.
000010r 2               chrb_anisp3 = $05   ;                      |  PART OF "sprites.chr"
000010r 2               chrb_gensp1 = $06   ;                      |
000010r 2               chrb_gensp2 = $07   ;                      /
000010r 2               
000010r 2               ; don't know when these will be used.
000010r 2               chrb_gesp10 = $08   ; generic sprite 1
000010r 2               chrb_gesp11 = $09
000010r 2               chrb_gesp12 = $0A
000010r 2               chrb_gesp13 = $0B
000010r 2               chrb_gesp20 = $0C   ; generic sprite 2
000010r 2               chrb_gesp21 = $0D
000010r 2               chrb_gesp22 = $0E
000010r 2               chrb_gesp23 = $0F
000010r 2               
000010r 2               chrb_owsp00 = $10   ; sprite banks for Overworld
000010r 2               chrb_owsp01 = $11
000010r 2               chrb_owsp02 = $12
000010r 2               chrb_owsp03 = $13
000010r 2               ; BACKGROUND BANKS
000010r 2               chrb_bgttl  = $14   ; graphics bank for title screen
000010r 2               chrb_bgowd  = $18   ; graphics bank for Overworld
000010r 2               chrb_lvl0   = $1C   ; graphics bank for level 0 "Prologue"
000010r 2               chrb_lvl1   = $20   ; graphics bank for level 1 "Forsaken City"
000010r 2               chrb_lvl2   = $24   ; graphics bank for level 2 "Old Site"
000010r 2               chrb_lvl3   = $28   ; graphics bank for level 3 "Celestial Resort"
000010r 2               chrb_lvl4   = $2C   ; graphics bank for level 4 "Golden Ridge"
000010r 2               ;chrb_lvl5   = $30   ; graphics bank for level 5 "Mirror Temple"
000010r 2               ;chrb_lvl6   = $34   ; graphics bank for level 6 "Reflection"
000010r 2               ;chrb_lvl7   = $38   ; graphics bank for level 7 "The Summit"
000010r 2               ;chrb_lvl8   = $3C   ; graphics bank for level 8 "Core"
000010r 2               chrb_dmain  = $30
000010r 2               chrb_dmade  = $34   ; graphics bank for dialog with Madeline
000010r 2               chrb_dtheo  = $38   ; graphics bank for dialog with Theo
000010r 2               chrb_dgran  = $3C   ; graphics bank for dialog with Granny
000010r 2               ; PRGROM BANKS
000010r 2               prgb_lvl0   = $00   ; Main level data ($A000)
000010r 2               prgb_lvl1   = $01
000010r 2               prgb_lvl2   = $02
000010r 2               prgb_lvl3   = $03
000010r 2               prgb_lvl4   = $04
000010r 2               prgb_lvl5   = $05
000010r 2               prgb_lvl6   = $06
000010r 2               prgb_lvl7   = $07
000010r 2               prgb_lvl8   = $08
000010r 2               prgb_lvl9   = $09
000010r 2               prgb_lvla   = $0A   ; Shared level data ($C000)
000010r 2               prgb_lvlb   = $0B
000010r 2               prgb_dial   = $0C
000010r 2               prgb_ttle   = $0D
000010r 2               prgb_game   = $0E   ; bank containing game engine code.  This is fixed at $8000
000010r 2               prgb_main   = $0F   ; bank containing main code.  This is fixed at $E000
000010r 2               
000010r 2               ; NMI Control
000010r 2               nc_turnon   = $01   ; turn on screen (set ppumask to default)
000010r 2               nc_updlvlnm = $02   ; Overworld: update level name (should be refactored in the overworld itself?)
000010r 2               nc_prolclr  = $04   ; Prologue:  clear dialog line
000010r 2               nc_clearenq = $08   ; Game: enqueued clear
000010r 2               nc_flushrow = $10   ; Game: flush 1 row
000010r 2               nc_flushpal = $20   ; Game: flush 1 row of palettes
000010r 2               nc_flushcol = $40   ; Game: flush 1 column
000010r 2               nc_flshpalv = $80   ; Game: flush 1 column of palettes
000010r 2               nc2_clrcol  = $01   ; Game: clear two columns (death cutscene)
000010r 2               nc2_setl0ic = $02   ; Game: set Level 0 Intro Crusher
000010r 2               
000010r 2               ; Constants
000010r 2               def_mmc3_bn = %01000000 ; default mmc3 bank config.
000010r 2                                       ; two 2K banks at $0000-$0FFF, four 1K banks at $1000-$1FFF
000010r 2                                       ; PRG ROM fixed at $8000-$9FFF and $E000-$FFFF
000010r 2               blank_tile  = $00
000010r 2               apu_irq_off = $40
000010r 2               obj_fliphz  = $40   ; flip horizontally
000010r 2               obj_flipvt  = $80   ; flip vertically
000010r 2               obj_backgd  = $20   ; behind background
000010r 2               miscdata    = $E000
000010r 2               palettepage = $FF00
000010r 2               pctl_nmi_on = %10000000
000010r 2               pctl_adv32  = %00000100
000010r 2               pctl_sprsz  = %00100000
000010r 2               pctl_bgpat  = %00010000
000010r 2               pctl_sppat  = %00001000
000010r 2               pctl_highx  = %00000001 ; +256 to screen scroll
000010r 2               pctl_highy  = %00000010 ; +240 to screen scroll
000010r 2               def_ppu_msk = %00011110
000010r 2               gm_game     = $00   ; Game Modes
000010r 2               gm_title    = $01
000010r 2               gm_titletra = $02   ; title transition
000010r 2               gm_overwld  = $03   ; overworld
000010r 2               gm_prologue = $04
000010r 2               tm_gametra  = 30    ; frames until the title->game transition ends
000010r 2               cont_a      = $80
000010r 2               cont_b      = $40
000010r 2               cont_select = $20
000010r 2               cont_start  = $10
000010r 2               cont_up     = $08
000010r 2               cont_down   = $04
000010r 2               cont_left   = $02
000010r 2               cont_right  = $01
000010r 2               ts_1stfr    = $01   ; first frame of title screen
000010r 2               os_1stfr    = $01   ; first frame of overworld screen
000010r 2               os_leftmov  = $08   ; level selector moving left
000010r 2               os_rightmov = $10   ; level selector moving right
000010r 2               ps_1stfr    = $01   ; first frame of prologue screen
000010r 2               ps_clear    = $04   ; clear 32 bytes of pl_ppuaddr
000010r 2               ps_dofade   = $08   ; reupload palette to faded version
000010r 2               pls_ldtext  = $00   ; prologue: load text state
000010r 2               pls_wrtext  = $01   ; prologue: write text state
000010r 2               pls_fade    = $02   ; prologue: wait state
000010r 2               pls_wait    = $03   ; prologue: fade state
000010r 2               gs_1stfr    = $01   ; first frame of game screen
000010r 2               ;TODO: gs_vertical = $02   ; is the level vertical?
000010r 2               gs_scrstodR = $04   ; rightward camera scrolling is disabled
000010r 2               gs_scrstopR = $08   ; there is a camera limit to the right
000010r 2               gs_dontgen  = $80   ; don't generate more tiles
000010r 2               g2_autojump = $04   ; pretend the jump button is being held until landing
000010r 2               g2_noclrall = $08   ; don't clear everything
000010r 2               g3_transitR = $01   ; is in a RIGHT transition
000010r 2               g3_transitU = $02   ; is in an UP transition
000010r 2               g3_transitL = $04   ; is in a LEFT transition
000010r 2               g3_transitD = $08   ; is in a DOWN transition
000010r 2               	g3_transitA = $0F ; all transition types, for checking whether any kind of transition is active
000010r 2               ;TODO: lf_vertical = $01   ; level flag: is this level vertical
000010r 2               pl_left     = $01   ; player is facing left
000010r 2               pl_ground   = $02   ; player is grounded
000010r 2               pl_pushing  = $04   ; player is pushing against a wall - either sliding or ground-pushing
000010r 2               pl_wallleft = $08   ; player is sliding along a wall on their LEFT side
000010r 2               pl_dashed   = $10   ; player has dashed before touching the ground
000010r 2               pl_dead     = $20   ; player has died and will be taken back to the beginning soon
000010r 2               am_idle     = $00
000010r 2               am_walk     = $01
000010r 2               am_jump     = $02
000010r 2               am_fall     = $03
000010r 2               am_push     = $04
000010r 2               am_climb    = $05
000010r 2               am_dash     = $06
000010r 2               am_flip     = $07
000010r 2               am_climbidl = $08
000010r 2               af_none     = $00   ; animation flags
000010r 2               af_2frame   = $01   ; 2 frame animation. interpret player L and R as a pointer to a table
000010r 2               af_4frame   = $02   ; 4 frame animation. interpret player L and R as a pointer to a table
000010r 2               af_noloop   = $04   ; don't loop
000010r 2               af_wlkspd   = $08   ; advance timer by walk speed
000010r 2               af_oddryth  = $10   ; on odd frames, add 1 to the spryoff
000010r 2               af_lock     = $20   ; lock the anim timer to 0
000010r 2               af_lockto1  = $40   ; lock the anim timer to 1
000010r 2               tilesahead  = 36    ; tiles ahead of camera X
000010r 2               camspeed    = 8     ; maximum pixels advanced per frame by camera
000010r 2               maxvelyhi   = $06   ; max Y velocity in pixels
000010r 2               maxvelxhi   = $06   ; max X velocity in pixels
000010r 2               gravity     = $40   ; Celeste uses a value of 900 px/s^2, converted it would be about 0.25 spx/fr^2 for us
000010r 2               lograthresh = $C0   ; if Math.Abs(Speed.Y) <= lograthresh (40f in Celeste), and holding C, then apply half the gravity
000010r 2               ctrpull     = $18   ; acceleration imposed by player pressing buttons
000010r 2               scrolllimit = $78   ; around halfway to the screen
000010r 2               jumpsustain = $0C   ; sustain the max jump velocity for at most twelve frames
000010r 2               accel       = $47   ; acceleration. equivalent of RunAccel in Celeste
000010r 2               accelred    = $1C   ; reduced accel. equivalent of RunReduce in Celeste
000010r 2               accelair    = $2E   ; acceleration in mid-air. multiplied by ~0.65
000010r 2               accelredair = $12   ; reduced accel in mid-air. multiplied by ~0.65
000010r 2               jumpvel     = $01C0 ; jump velocity
000010r 2               walljump    = $022A ; wall jump velocity
000010r 2               maxwalk     = $0180 ; max walk speed in pixels
000010r 2               maxfall     = $02AA ; max fall speed
000010r 2               plrwidth    = $08   ; player hitbox width - 8 pixels wide
000010r 2               plrheight   = $0A   ; player hitbox height - 10 pixels wide
000010r 2               maxdashes   = 1     ; TODO: change to 2
000010r 2               defdashtime = 12    ; time to perform a dash
000010r 2               dashchrgtm  = 2     ; time to charge the dash (after this, the dash direction is checked)
000010r 2               dashgrndtm  = 6     ; time to wait until the grounded check should be performed
000010r 2               maxwalkad   = $40   ; maximum walk approach delta in subpixels
000010r 2               dragamount  = $47   ; drag amount per frame (around 17 px/fr^2 in Celeste)
000010r 2               superjmphhi = $04   ; super jump boost pixel part
000010r 2               superjmphlo = $55   ; super jump boost subpixel part
000010r 2               wjfxtval    = $0B   ; wall jump force X timer value. in Celeste this is 0.16f which is about ten frames.
000010r 2               animspd     = $10   ; 256/animspd is the amount of frames per animation up-tick (for 32, it's 8 fr)
000010r 2               maxslidespd = $80   ; maximum slide speed in subpixels
000010r 2               defjmpbuff  = $04   ; 4 frames of buffering a jump
000010r 2               defjmpcoyot = $06   ; 6 frames of coyote time
000010r 2               defwjmpcoyo = $03   ; 3 frames of wall coyote time
000010r 2               jmphboost   = 170   ; boost applied to the player's jump when running
000010r 2               wjgrace     = 3     ; walls are checked this many pixels away from the hitbox for a wall jump. Celeste uses 3 here
000010r 2               ct_none     = $00   ; no collision
000010r 2               ct_full     = $01   ; the entire tile has collision
000010r 2               ct_deadly   = $02   ; the tile is UP spike shaped
000010r 2               ct_jumpthru = $03   ; the tile is a jump through
000010r 2               ow_maxlvl   = $07   ; maximum level number
000010r 2               jtheight    = 3     ; height of jump through blocks
000010r 2               swjgrace    = 5     ; grace time for a super wall jump TODO
000010r 2               
000010r 2               maxfallHI   = (maxfall >> 8)
000010r 2               maxfallLO   = (maxfall & $FF)
000010r 2               
000010r 2               maxwalkHI   = (maxwalk >> 8)
000010r 2               maxwalkLO   = (maxwalk & $FF)
000010r 2               maxwalkNHI  = (((-maxwalk) >> 8) & $FF)
000010r 2               maxwalkNLO  = ((-maxwalk) & $FF)
000010r 2               
000010r 2               walljumpHI  = (walljump >> 8)
000010r 2               walljumpLO  = (walljump & $FF)
000010r 2               walljumpNHI = (((-walljump) >> 8) & $FF)
000010r 2               walljumpNLO = ((-walljump) & $FF)
000010r 2               
000010r 2               jumpvelHI   = (((-jumpvel) >> 8) & $FF)
000010r 2               jumpvelLO   = ((-jumpvel) & $FF)
000010r 2               sjumpvelHI  = (((-(jumpvel / 2)) >> 8) & $FF)
000010r 2               sjumpvelLO  = ((-(jumpvel / 2)) & $FF)
000010r 2               
000010r 2               ; player proportions
000010r 2               plr_y_bot      = 16
000010r 2               plr_y_bot_wall = 14 ; for wall checking
000010r 2               plr_y_top      = (plr_y_bot - plrheight)
000010r 2               plr_y_mid      = (plr_y_bot_wall - plrheight / 2)
000010r 2               plr_x_left     = (8 - plrwidth / 2)
000010r 2               plr_x_right    = (15 - plrwidth / 2)
000010r 2               plr_x_wj_left  = (plr_x_left  - wjgrace)
000010r 2               plr_x_wj_right = (plr_x_right + wjgrace)
000010r 2               plr_x_mid      = 8
000010r 2               
000010r 2               FAMISTUDIO_CFG_C_BINDINGS = 0
000010r 2               
000010r 1               .include "globals.asm"
000010r 2               ; Copyright (C) 2024 iProgramInCpp
000010r 2               
000010r 2               .segment "ZEROPAGE"
000000r 2               
000000r 2  xx           temp1       : .res 1
000001r 2  xx           temp2       : .res 1
000002r 2  xx           temp3       : .res 1
000003r 2  xx           temp4       : .res 1
000004r 2  xx           temp5       : .res 1
000005r 2  xx           temp6       : .res 1
000006r 2  xx           temp7       : .res 1
000007r 2  xx           temp8       : .res 1
000008r 2  xx           temp9       : .res 1
000009r 2  xx           temp10      : .res 1 ; NEW
00000Ar 2               
00000Ar 2  xx           gamemode    : .res 1 ; active game mode
00000Br 2  xx           framectr    : .res 1 ; continuously increasing frame counter
00000Cr 2  xx           nmicount    : .res 1
00000Dr 2  xx           nmienable   : .res 1
00000Er 2  xx           ctl_flags   : .res 1 ; copied into ppuctrl
00000Fr 2  xx           gamestate   : .res 1 ; reused by every game mode
000010r 2               	titlectrl = gamestate
000010r 2               	gamectrl  = gamestate
000010r 2               	owldctrl  = gamestate
000010r 2               	prolctrl  = gamestate
000010r 2               
000010r 2  xx           nmictrl     : .res 1 ; nc_*
000011r 2  xx           nmictrl2    : .res 1 ; nc2_*
000012r 2               
000012r 2  xx           spr0_bknum  : .res 1
000013r 2  xx           spr1_bknum  : .res 1
000014r 2  xx           spr2_bknum  : .res 1
000015r 2  xx           spr3_bknum  : .res 1
000016r 2  xx           bg0_bknum   : .res 1
000017r 2  xx           bg1_bknum   : .res 1
000018r 2               
000018r 2  xx           spr0_bkspl  : .res 1
000019r 2  xx           spr1_bkspl  : .res 1
00001Ar 2  xx           spr2_bkspl  : .res 1
00001Br 2  xx           spr3_bkspl  : .res 1
00001Cr 2  xx           bg0_bkspl   : .res 1
00001Dr 2  xx           bg1_bkspl   : .res 1
00001Er 2               
00001Er 2  xx           mmc3_shadow : .res 1
00001Fr 2  xx           currA000bank: .res 1 ; current bank index loaded at $A000-$BFFF.
000020r 2  xx           oam_wrhead  : .res 1 ; OAM buffer write head
000021r 2  xx xx        wr_str_temp : .res 2 ; address of current character of string
000023r 2  xx           x_crd_temp  : .res 1 ; used by oam_putsprite and h_get_tile, MUST be x before y!
000024r 2  xx           y_crd_temp  : .res 1 ; used by oam_putsprite
000025r 2  xx           scrollsplit : .res 1 ; Y position of the scroll split
000026r 2  xx           scroll_x    : .res 1
000027r 2  xx           scroll_y    : .res 1
000028r 2  xx           scroll_flags: .res 1 ; the FLAGS for the scroll split part of PPUCTRL
000029r 2               
000029r 2  xx           rng_state   : .res 1
00002Ar 2  xx           p1_cont     : .res 1
00002Br 2  xx           p1_conto    : .res 1
00002Cr 2  xx xx        paladdr     : .res 2 ; currently loaded palette address.
00002Er 2               
00002Er 2  xx           player_x    : .res 1 ; offset by the camera's position!
00002Fr 2  xx           player_y    : .res 1
000030r 2  xx           player_sp_x : .res 1 ; subpixel memory X
000031r 2  xx           player_sp_y : .res 1 ; subpixel memory Y
000032r 2  xx           camera_x    : .res 1
000033r 2  xx           camera_y    : .res 1
000034r 2  xx           camera_x_hi : .res 1
000035r 2  xx           camera_y_hi : .res 1
000036r 2               
000036r 2               ; TODO: Merge These Into Each Other
000036r 2               ; title
000036r 2  xx           tl_timer    : .res 1
000037r 2  xx           tl_gametime : .res 1
000038r 2               
000038r 2               ; overworld
000038r 2  xx           ow_temp1    : .res 1
000039r 2  xx           ow_temp2    : .res 1
00003Ar 2  xx           ow_temp3    : .res 1
00003Br 2  xx           ow_temp4    : .res 1
00003Cr 2  xx           ow_temp5    : .res 1
00003Dr 2  xx           ow_timer    : .res 1
00003Er 2  xx           ow_sellvl   : .res 1 ; selected level
00003Fr 2  xx           ow_iconoff  : .res 1
000040r 2  xx           ow_slidetmr : .res 1
000041r 2               
000041r 2               ; Prologue specific addresses
000041r 2  xx           pl_state    : .res 1 ; 0 - load text, 1 - writing text, 2 - waiting, 3 - fadeout
000042r 2  xx xx        pl_ppuaddr  : .res 2
000044r 2  xx           pl_ppudata  : .res 1
000045r 2  xx xx        p_textaddr  : .res 2 ; current address in text string
000047r 2  xx           p_textlen   : .res 1 ; length of current text string
000048r 2  xx           p_textnum   : .res 1
000049r 2  xx           p_textoffs  : .res 1
00004Ar 2  xx           p_texttimer : .res 1
00004Br 2               
00004Br 2               ; Game specific addresses
00004Br 2  xx           gamectrl2   : .res 1 ; second game control flags
00004Cr 2  xx           gamectrl3   : .res 1 ; third game control flags
00004Dr 2  xx           ntwrhead    : .res 1 ; name table write head (up to 64 columns)
00004Er 2  xx           arwrhead    : .res 1 ; area space write head (up to 32 columns)
00004Fr 2  xx           camera_x_pg : .res 1
000050r 2  xx           lvlptrlo    : .res 1 ; level pointer
000051r 2  xx           lvlptrhi    : .res 1
000052r 2  xx           roomptrlo   : .res 1 ; room pointer
000053r 2  xx           roomptrhi   : .res 1
000054r 2  xx           arrdheadlo  : .res 1 ; area read head
000055r 2  xx           arrdheadhi  : .res 1
000056r 2  xx           entrdheadlo : .res 1 ; entity read head
000057r 2  xx           entrdheadhi : .res 1
000058r 2  xx           lvladdr     : .res 1 ; temporaries used by h_get_tile and h_set_tile
000059r 2  xx           lvladdrhi   : .res 1
00005Ar 2  xx           tr_scrnpos  : .res 1 ; active screen position
00005Br 2  xx           playerctrl  : .res 1
00005Cr 2  xx           player_vl_x : .res 1 ; velocity X, pixels
00005Dr 2  xx           player_vs_x : .res 1 ; velocity X, subpixels
00005Er 2  xx           player_vl_y : .res 1 ; velocity Y, pixels
00005Fr 2  xx           player_vs_y : .res 1 ; velocity Y, subpixels
000060r 2  xx           plh_attrs   : .res 1 ; player hair attributes
000061r 2  xx           dashtime    : .res 1
000062r 2  xx           dashcount   : .res 1 ; times player has dashed
000063r 2  xx           dashdir     : .res 1 ; dash direction X (controller inputs at time of dash SHIFTED LEFT by 2)
000064r 2  xx           currroom    : .res 1 ; current room
000065r 2  xx           spryoff     : .res 1 ; hair sprite Y offset
000066r 2  xx           animmode    : .res 1 ; current animation mode
000067r 2  xx           animtimer   : .res 1 ; current animation timer. It has a subunitary component because
000068r 2  xx           animtimersb : .res 1 ; the upper component is directly used as the frame index.
000069r 2  xx           animflags   : .res 1 ; animation flags copied from anim data
00006Ar 2  xx           anfrptrlo   : .res 1 ; animation frame pointer low
00006Br 2  xx           anfrptrhi   : .res 1 ; animation frame pointer high
00006Cr 2  xx           sprxoff     : .res 1 ; hair sprite X offset
00006Dr 2  xx           spryoffbase : .res 1 ; hair sprite Y offset base (used for af_oddryth)
00006Er 2  xx           jumpbuff    : .res 1 ; jump buff time
00006Fr 2  xx           jumpcoyote  : .res 1 ; jump coyote time, if not zero, player may jump
000070r 2  xx           wjumpcoyote : .res 1 ; wall jump coyote time
000071r 2  xx           player_yo   : .res 1 ; player Y old. used for spike collision
000072r 2  xx           player_xo   : .res 1 ; player Y old. used for horizontal spike collision
000073r 2  xx           transoff    : .res 1
000074r 2  xx           ptscount    : .res 1 ; last points count given
000075r 2  xx           ptstimer    : .res 1 ; time the ptscount is valid in frames
000076r 2  xx           palrdheadlo : .res 1 ; palette read head
000077r 2  xx           palrdheadhi : .res 1
000078r 2  xx           camlimit    : .res 1
000079r 2  xx           camlimithi  : .res 1
00007Ar 2  xx           transtimer  : .res 1
00007Br 2  xx           trantmp3    : .res 1
00007Cr 2  xx           trarwrhead  : .res 1
00007Dr 2  xx           scrchklo    : .res 1 ; temporaries used for scroll checking
00007Er 2  xx           scrchkhi    : .res 1
00007Fr 2  xx           lvlyoff     : .res 1 ; level Y offset when writing name table data
000080r 2  xx           trantmp1    : .res 1 ; temporaries used for transitioning
000081r 2  xx           trantmp2    : .res 1
000082r 2  xx           camera_rev  : .res 1 ; revealed pixels - if it goes above 8, request a column to be generated
000083r 2  xx           plr_spr_l   : .res 1 ; player sprite left
000084r 2  xx           plr_spr_r   : .res 1 ; player sprite right
000085r 2  xx           plh_spr_l   : .res 1 ; player hair sprite left
000086r 2  xx           plh_spr_r   : .res 1 ; player hair sprite right
000087r 2  xx           deathtimer  : .res 1
000088r 2  xx           palallochd  : .res 1
000089r 2  xx           roombeglo   : .res 1 ; beginning of room in pixels.  Used for entity placement
00008Ar 2  xx           roombeghi   : .res 1
00008Br 2  xx           roombeglo2  : .res 1 ; beginning of room in tiles.
00008Cr 2  xx           plrtrahd    : .res 1 ; plr trace head
00008Dr 2  xx           plrstrawbs  : .res 1 ; strawberries following this player
00008Er 2  xx           ntrowhead   : .res 1
00008Fr 2  xx           ntrowhead2  : .res 1
000090r 2  xx           camdst_x    : .res 1 ; temporary used by gm_leaveroomU
000091r 2  xx           camdst_x_pg : .res 1 ; temporary used by gm_leaveroomU
000092r 2  xx           wrcountHP1  : .res 1 ; write count for HP1
000093r 2  xx xx        ppuaddrHP1  : .res 2 ; ppuaddr to write palH1 to
000095r 2  xx xx        ppuaddrHP2  : .res 2 ; ppuaddr to write palH2 to
000097r 2  xx xx        ppuaddrHR1  : .res 2 ; ppuaddr to write row1 to
000099r 2  xx xx        ppuaddrHR2  : .res 2 ; ppuaddr to write row2 to
00009Br 2  xx           wrcountHP2  : .res 1 ; write count for HP2
00009Cr 2  xx           wrcountHR1  : .res 1 ; write count for HR1
00009Dr 2  xx           wrcountHR2  : .res 1 ; write count for HR2
00009Er 2  xx           camoff_H    : .res 1 ; temporaries used by gm_leaveroomU
00009Fr 2  xx           camoff_M    : .res 1
0000A0r 2  xx           camoff_L    : .res 1
0000A1r 2  xx           camoff_sub  : .res 1
0000A2r 2  xx           player_x_d  : .res 1
0000A3r 2  xx           camoff2_M   : .res 1
0000A4r 2  xx           camoff2_L   : .res 1
0000A5r 2  xx           jcountdown  : .res 1 ; jump countdown
0000A6r 2  xx           forcemovext : .res 1
0000A7r 2  xx           forcemovex  : .res 1
0000A8r 2  xx           quaketimer  : .res 1
0000A9r 2  xx           quakeflags  : .res 1 ; directions are the same as controller flags
0000AAr 2  xx           l0crshidx   : .res 1
0000ABr 2  xx           plattemp1   : .res 1 ; TODO: replace with a regular temp
0000ACr 2  xx           plattemp2   : .res 1 ; TODO: replace with a regular temp
0000ADr 2  xx           entground   : .res 1 ; entity ID the player is standing on
0000AEr 2  xx           musicbank   : .res 1 ; music is active in this bank
0000AFr 2  xx           musicbank2  : .res 1
0000B0r 2  xx xx        musictable  : .res 2 ; currently active table of songs
0000B2r 2  xx           musicdiff   : .res 1 ; should the music be re-initialized?
0000B3r 2  xx           clearpalo   : .res 1 ; enqueued name table clear, ppu address low
0000B4r 2  xx           clearpahi   : .res 1 ; enqueued name table clear, ppu address high
0000B5r 2  xx           clearsizex  : .res 1 ; enqueued name table clear, size X
0000B6r 2  xx           clearsizey  : .res 1 ; enqueued name table clear, size Y
0000B7r 2  xx           roomnumber  : .res 1 ; incremented every time a room transition happens
0000B8r 2               
0000B8r 2               ; this is where the room header is copied, when a room is loaded.
0000B8r 2  xx           roomsize    : .res 1 ; room size in tiles. 0 if the room is long/1-directional.
0000B9r 2  xx           roomspare2  : .res 1 ; spare bytes
0000BAr 2  xx           roomspare3  : .res 1 ; spare bytes
0000BBr 2  xx           startpx     : .res 1 ; starting player X position
0000BCr 2  xx           startpy     : .res 1 ; starting player Y position
0000BDr 2  xx           warp_u      : .res 1 ; destination warp numbers
0000BEr 2  xx           warp_d      : .res 1
0000BFr 2  xx           warp_l      : .res 1
0000C0r 2  xx           warp_r      : .res 1
0000C1r 2  xx           warp_u_x    : .res 1 ; destination X or Y coordinates depending on warp side
0000C2r 2  xx           warp_d_x    : .res 1
0000C3r 2  xx           warp_l_y    : .res 1
0000C4r 2  xx           warp_r_y    : .res 1
0000C5r 2  xx           rm_paloffs  : .res 1
0000C6r 2               
0000C6r 2               roomhdrfirst = roomsize
0000C6r 2               roomhdrlast  = rm_paloffs + 1
0000C6r 2               
0000C6r 2  xx xx xx xx  tl_snow_y   : .res 16
0000CAr 2  xx xx xx xx  
0000CEr 2  xx xx xx xx  
0000D6r 2  xx xx xx xx  tl_snow_x   : .res 16
0000DAr 2  xx xx xx xx  
0000DEr 2  xx xx xx xx  
0000E6r 2               
0000E6r 2               .segment "OAMBUF"
000000r 2  xx xx xx xx  oam_buf     : .res $100
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
000100r 2               
000100r 2               .segment "ENTITIES"
000000r 2  xx xx xx xx  sprspace    : .res $100
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
000100r 2               
000100r 2               .segment "PLTRACES"
000000r 2  xx xx xx xx  plr_trace_x : .res $40
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
000040r 2  xx xx xx xx  plr_trace_y : .res $40
000044r 2  xx xx xx xx  
000048r 2  xx xx xx xx  
000080r 2               
000080r 2               .segment "DRAWTEMP"
000000r 2  xx xx xx xx  tempcol     : .res $20  ; 32 bytes - temporary column to be flushed to the screen
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
000020r 2  xx xx xx xx  allocpals   : .res $10  ; 16 bytes - logical to physical palette TODO
000024r 2  xx xx xx xx  
000028r 2  xx xx xx xx  
000030r 2  xx xx xx xx  palsallocd  : .res $10  ; 16 bytes - physical to logical palette TODO
000034r 2  xx xx xx xx  
000038r 2  xx xx xx xx  
000040r 2  xx xx xx xx  temppal     : .res $8   ; 8 bytes  - temp palette column to be flushed to the screen
000044r 2  xx xx xx xx  
000048r 2  xx xx xx xx  temppalH1   : .res $8   ; 8 bytes  - temporary row in nametable 8
00004Cr 2  xx xx xx xx  
000050r 2  xx xx xx xx  temppalH2   : .res $8   ; 8 bytes  - temporary row in nametable 1
000054r 2  xx xx xx xx  
000058r 2  xx xx xx xx  spare8bytes : .res $8   ; 8 bytes  - SPARE SPARE
00005Cr 2  xx xx xx xx  
000060r 2  xx xx xx xx  temprow1    : .res $20  ; 32 bytes - temporary row in nametable 0
000064r 2  xx xx xx xx  
000068r 2  xx xx xx xx  
000080r 2  xx xx xx xx  temprow2    : .res $20  ; 32 bytes - temporary row in nametable 1
000084r 2  xx xx xx xx  
000088r 2  xx xx xx xx  
0000A0r 2  xx xx xx xx  lastcolumn  : .res $20  ; 30 bytes - temporary storage for last column, used during decompression
0000A4r 2  xx xx xx xx  
0000A8r 2  xx xx xx xx  
0000C0r 2  xx xx xx xx  loadedpals  : .res $40  ; 64 bytes - temporary storage for loaded palettes during vertical transitions
0000C4r 2  xx xx xx xx  
0000C8r 2  xx xx xx xx  
000100r 2               
000100r 2               .segment "CARTWRAM" ; $6000 - Cartridge WRAM
000000r 2  xx xx xx xx  areaspace   : .res $800
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
000800r 2               
000800r 1               
000800r 1               .include "level0/bank_0.asm"
000800r 2               ; Copyright (C) 2024 iProgramInCpp
000800r 2               
000800r 2               .segment "PRG_LVL0"
000000r 2               .include "metatile.asm"
000000r 3               ; Copyright (C) 2024 iProgramInCpp
000000r 3               
000000r 3               ; Metatile Data for "Prologue" (Level 0)
000000r 3               
000000r 3               ; Metatiles
000000r 3               ;
000000r 3               ; For a single metatile ID, the following properties:
000000r 3               ; - metatiles: The char tiles that make up the visual representation of the metatile
000000r 3               ; - metatile_palette: The palette used for the metatile
000000r 3               ; - metatile_collision: The collision mask for the metatile.
000000r 3               
000000r 3               ; These are the metatiles for the Intro level.
000000r 3               ; Eventually the metatile bank will be swappable with different level banks.
000000r 3               
000000r 3               ;metatiles:
000000r 3               .align $100
000000r 3  00           	.byte $00 ; Air
000001r 3  60 64 70 74  	.byte $60,$64,$70,$74 ; Dirt Corners
000005r 3  61 62 63     	.byte $61,$62,$63     ; Dirt Tops
000008r 3  71 72 73     	.byte $71,$72,$73     ; Dirt Bottoms
00000Br 3  67 77 68 67  	.byte $67,$77,$68,$67 ; Dirt Left
00000Fr 3  69 79 6A 7A  	.byte $69,$79,$6A,$7A ; Dirt Right
000013r 3  6B 6C 6D 6E  	.byte $6B,$6C,$6D,$6E,$7B,$7C,$7D,$A5 ; Dirt Middles
000017r 3  7B 7C 7D A5  
00001Br 3  6F 78        	.byte $6F,$78         ; Dirt Left, Right Ends
00001Dr 3  80 84 83 87  	.byte $80,$84,$83,$87 ; Snow Corners
000021r 3  88 8C 8A     	.byte $88,$8C,$8A     ; Snow Tops
000024r 3  8F 93 91     	.byte $8F,$93,$91     ; Snow Bottoms
000027r 3  81 82        	.byte $81,$82         ; Snow Left
000029r 3  85 86        	.byte $85,$86         ; Snow Right
00002Br 3  8D 89 8E 92  	.byte $8D,$89,$8E,$92,$90,$98,$99,$9A,$9B ; Snow Middles
00002Fr 3  90 98 99 9A  
000033r 3  9B           
000034r 3  94 96 95 97  	.byte $94,$96,$95,$97 ; Snow In-corners
000038r 3  65 66 75 76  	.byte $65,$66,$75,$76 ; Dirt In-corners
00003Cr 3  A2 A3 A4     	.byte $A2,$A3,$A4     ; Jump Through
00003Fr 3  AA           	.byte $AA             ; Spikes
000040r 3  AA AB AC AD  	.byte $AA,$AB,$AC,$AD ; Grass Decals
000044r 3  B0 B1 B2 B3  	.byte $B0,$B1,$B2,$B3,$B4 ; House Layer 0
000048r 3  B4           
000049r 3  B5 B6 B7 B8  	.byte $B5,$B6,$B7,$B8,$B9,$BA,$BC,$BD ; House Layer 1
00004Dr 3  B9 BA BC BD  
000051r 3  C0 C1 C2 C3  	.byte $C0,$C1,$C2,$C3,$C4,$C5,$C6,$C7,$C8,$C9,$CA,$CC ; House Layer 2
000055r 3  C4 C5 C6 C7  
000059r 3  C8 C9 CA CC  
00005Dr 3  D3 D4 D5 D6  	.byte $D3,$D4,$D5,$D6,$D7,$D8,$D9,$DA,$DB,$DC,$DD,$DE,$DF ; House Layer 3
000061r 3  D7 D8 D9 DA  
000065r 3  DB DC DD DE  
00006Ar 3  E3 E4 E5 E6  	.byte $E3,$E4,$E5,$E6,$E7,$E8,$E9,$EA,$EB,$EC,$ED,$EE,$EF ; House Layer 4
00006Er 3  E7 E8 E9 EA  
000072r 3  EB EC ED EE  
000077r 3  F3 F4 F5 F6  	.byte $F3,$F4,$F5,$F6,$F7,$F8,$F9,$FA,$FB,$FC,$FD,$CD,$CE ; House Layer 5
00007Br 3  F7 F8 F9 FA  
00007Fr 3  FB FC FD CD  
000084r 3  01 02 03 04  	.byte $01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F ; House Layer 6
000088r 3  05 06 07 08  
00008Cr 3  09 0A 0B 0C  
000093r 3  2F 2D 2E 14  	.byte $2F,$2D,$2E,$14,$15,$16,$17,$18,$19,$1A,$1B,$1C,$1D,$1E,$1F ; House Layer 7
000097r 3  15 16 17 18  
00009Br 3  19 1A 1B 1C  
0000A2r 3  CB BB        	.byte $CB,$BB         ; House Addenda
0000A4r 3  10 11 12 13  	.byte $10,$11,$12,$13,$24,$25,$26,$27,$28,$29,$2A,$2B ; Bridge 1
0000A8r 3  24 25 26 27  
0000ACr 3  28 29 2A 2B  
0000B0r 3  3C 3D 7E 7F  	.byte $3C,$3D,$7E,$7F,$BE,$BF,$CF,$D2,$D0,$D1,$E0,$E1 ; Bridge 2
0000B4r 3  BE BF CF D2  
0000B8r 3  D0 D1 E0 E1  
0000BCr 3  F0 F1 A8     	.byte $F0,$F1,$A8     ; Bridge 3
0000BFr 3  E2 F2 3E 2C  	.byte $E2,$F2,$3E,$2C,$A0,$A1 ; Bridge Pole
0000C3r 3  A0 A1        
0000C5r 3  00           	.byte $00             ; Blank Tile for Intro Crusher
0000C6r 3  CF D2 E2 F2  	.byte $CF,$D2,$E2,$F2 ; Bridge Pole (Gray)
0000CAr 3  60 67        	.byte $60,$67         ; Dirt (Gray)
0000CCr 3               
0000CCr 3               ;metatile_info:
0000CCr 3  xx xx xx xx  .align $100
0000D0r 3  xx xx xx xx  
0000D4r 3  xx xx xx xx  
000100r 3  00           	.byte ct_none                ; Air
000101r 3  01 01 01 01  	.res  28, ct_full            ; Dirt
000105r 3  01 01 01 01  
000109r 3  01 01 01 01  
00011Dr 3  01 01 01 01  	.res  27, ct_full            ; Snow
000121r 3  01 01 01 01  
000125r 3  01 01 01 01  
000138r 3  01 01 01 01  	.res   4, ct_full            ; Dirt
00013Cr 3  03 03 03     	.res   3, ct_jumpthru        ; Jump Through
00013Fr 3  02           	.byte ct_deadly              ; Spikes
000140r 3  00 00 00 00  	.res   4, ct_none            ; Grass Decals
000144r 3  00 00 00 00  	.res  96, ct_none            ; House Decal
000148r 3  00 00 00 00  
00014Cr 3  00 00 00 00  
0001A4r 3               	;.res  18, ct_full            ; Bridge
0001A4r 3  03 00 03 00  	.byte ct_jumpthru, ct_none, ct_jumpthru, ct_none, ct_jumpthru, ct_none, ct_jumpthru, ct_none
0001A8r 3  03 00 03 00  
0001ACr 3  03 00 03 00  	.byte ct_jumpthru, ct_none, ct_jumpthru, ct_none, ct_jumpthru, ct_none, ct_jumpthru, ct_none
0001B0r 3  03 00 03 00  
0001B4r 3  03 00        	.byte ct_jumpthru, ct_none
0001B6r 3  00 00        	.res   2, ct_none            ; Bridge Pole
0001B8r 3               	;.res   7, ct_full            ; Bridge
0001B8r 3  03 00 03 00  	.byte ct_jumpthru, ct_none, ct_jumpthru, ct_none, ct_jumpthru, ct_none, ct_none
0001BCr 3  03 00 00     
0001BFr 3  00 00 00 00  	.res   6, ct_none            ; Bridge Pole
0001C3r 3  00 00        
0001C5r 3  00           	.res   1, ct_none            ; Blank Tile for Intro Crusher
0001C6r 3  00 00 00 00  	.res   4, ct_none            ; Bridge Pole (Gray)
0001CAr 3  01 01        	.res   2, ct_full            ; Dirt (Gray)
0001CCr 3               
0001CCr 3  xx xx xx xx  .align $100
0001D0r 3  xx xx xx xx  
0001D4r 3  xx xx xx xx  
000200r 3               
000200r 2               .include "roomdata.asm"
000200r 3               level0_r1_p:
000200r 3  00 00 00 00  	.byte $00,$00,$00,$00,$F0,$05,$00,$00
000204r 3  F0 05 00 00  
000208r 3  FE 00 00 00  	.byte $FE,$00,$00,$00,$00,$F0,$09,$00
00020Cr 3  00 F0 09 00  
000210r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$90,$82,$88
000214r 3  00 90 82 88  
000218r 3  08 00 00 00  	.byte $08,$00,$00,$00,$00,$20,$22,$02
00021Cr 3  00 20 22 02  
000220r 3  00 00 00 4C  	.byte $00,$00,$00,$4C,$00,$00,$44,$44
000224r 3  00 00 44 44  
000228r 3  04 44 04 13  	.byte $04,$44,$04,$13,$00,$4C,$55,$44
00022Cr 3  00 4C 55 44  
000230r 3  05 50 85 00  	.byte $05,$50,$85,$00,$00,$00,$11,$11
000234r 3  00 00 11 11  
000238r 3  00 00 A2 AA  	.byte $00,$00,$A2,$AA,$AA,$AA,$55,$55
00023Cr 3  AA AA 55 55  
000240r 3  04 40 65 AA  	.byte $04,$40,$65,$AA,$AA,$AA,$15,$51
000244r 3  AA AA 15 51  
000248r 3  05 55 00 00  	.byte $05,$55,$00,$00,$00,$00,$04,$00
00024Cr 3  00 00 04 00  
000250r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$4C,$55,$55
000254r 3  00 4C 55 55  
000258r 3  05 00 00 00  	.byte $05,$00,$00,$00,$00,$13,$11,$10
00025Cr 3  00 13 11 10  
000260r 3  01 00 00 00  	.byte $01,$00,$00,$00,$00,$00,$5F,$55
000264r 3  00 00 5F 55  
000268r 3  04 FF        	.byte $04,$FF
00026Ar 3               level0_r1_e:
00026Ar 3  C0 98 01     	.byte $C0,$98,$01
00026Dr 3  D0 40 FF     	.byte $D0,$40,$FF
000270r 3  FE           	.byte $FE
000271r 3  00 40 08     	.byte $00,$40,$08
000274r 3  60 98 03     	.byte $60,$98,$03
000277r 3  FF           	.byte $FF
000278r 3               level0_r1_t:
000278r 3  D3 40 05 13  	.byte $D3,$40,$05,$13,$C8,$93,$41,$05
00027Cr 3  C8 93 41 05  
000280r 3  1A 88 93 42  	.byte $1A,$88,$93,$42,$05,$13,$88,$93
000284r 3  05 13 88 93  
000288r 3  43 07 14 88  	.byte $43,$07,$14,$88,$93,$40,$05,$16
00028Cr 3  93 40 05 16  
000290r 3  88 93 41 07  	.byte $88,$93,$41,$07,$17,$88,$93,$42
000294r 3  17 88 93 42  
000298r 3  05 14 88 93  	.byte $05,$14,$88,$93,$43,$07,$1A,$88
00029Cr 3  43 07 1A 88  
0002A0r 3  93 40 06 17  	.byte $93,$40,$06,$17,$88,$93,$41,$05
0002A4r 3  88 93 41 05  
0002A8r 3  1A 88 93 42  	.byte $1A,$88,$93,$42,$21,$2C,$88,$93
0002ACr 3  21 2C 88 93  
0002B0r 3  43 23 32 88  	.byte $43,$23,$32,$88,$93,$00,$22,$33
0002B4r 3  93 00 22 33  
0002B8r 3  88 92 01 0D  	.byte $88,$92,$01,$0D,$37,$C9,$92,$21
0002BCr 3  37 C9 92 21  
0002C0r 3  32 C6 2B 2D  	.byte $32,$C6,$2B,$2D,$2E,$31,$93,$2D
0002C4r 3  2E 31 93 2D  
0002C8r 3  82 2F 2C 31  	.byte $82,$2F,$2C,$31,$34,$29,$2A,$2A
0002CCr 3  34 29 2A 2A  
0002D0r 3  29 92 23 2C  	.byte $29,$92,$23,$2C,$2D,$34,$2A,$2A
0002D4r 3  2D 34 2A 2A  
0002D8r 3  29 20 C4 92  	.byte $29,$20,$C4,$92,$1E,$29,$29,$20
0002DCr 3  1E 29 29 20  
0002E0r 3  C8 92 CC 9E  	.byte $C8,$92,$CC,$9E,$9E,$9E,$98,$01
0002E4r 3  9E 9E 98 01  
0002E8r 3  0D 0E 03 82  	.byte $0D,$0E,$03,$82,$89,$41,$01,$03
0002ECr 3  89 41 01 03  
0002F0r 3  89 01 0E 0E  	.byte $89,$01,$0E,$0E,$3B,$13,$13,$39
0002F4r 3  3B 13 13 39  
0002F8r 3  0E 0E 89 42  	.byte $0E,$0E,$89,$42,$07,$08,$89,$05
0002FCr 3  07 08 89 05  
000300r 3  13 1A C4 14  	.byte $13,$1A,$C4,$14,$15,$89,$43,$02
000304r 3  15 89 43 02  
000308r 3  04 8A 14 C7  	.byte $04,$8A,$14,$C7,$0E,$03,$87,$C8
00030Cr 3  0E 03 87 C8  
000310r 3  41 01 0E 0E  	.byte $41,$01,$0E,$0E,$3B,$C5,$14,$16
000314r 3  3B C5 14 16  
000318r 3  17 17 39 0E  	.byte $17,$17,$39,$0E,$0D,$0D,$03,$8B
00031Cr 3  0D 0D 03 8B  
000320r 3  42 02 10 3A  	.byte $42,$02,$10,$3A,$15,$16,$17,$18
000324r 3  15 16 17 18  
000328r 3  19 38 0F 10  	.byte $19,$38,$0F,$10,$0F,$00,$00,$19
00032Cr 3  0F 00 00 19  
000330r 3  13 38 04 8B  	.byte $13,$38,$04,$8B,$00,$00,$00,$02
000334r 3  00 00 00 02  
000338r 3  A5 10 04 00  	.byte $A5,$10,$04,$00,$00,$00,$82,$00
00033Cr 3  00 00 82 00  
000340r 3  15 09 D9 83  	.byte $15,$09,$D9,$83,$13,$08,$99,$83
000344r 3  13 08 99 83  
000348r 3  00 39 0B 1F  	.byte $00,$39,$0B,$1F,$97,$84,$00,$2F
00034Cr 3  97 84 00 2F  
000350r 3  35 1F 1D 27  	.byte $35,$1F,$1D,$27,$28,$1F,$A7,$C5
000354r 3  28 1F A7 C5  
000358r 3  1D 8A 85 00  	.byte $1D,$8A,$85,$00,$33,$24,$21,$2C
00035Cr 3  33 24 21 2C  
000360r 3  2D 24 87 21  	.byte $2D,$24,$87,$21,$0E,$0D,$0D,$0E
000364r 3  0E 0D 0D 0E  
000368r 3  0D 0C 0E 03  	.byte $0D,$0C,$0E,$03,$82,$86,$32,$26
00036Cr 3  82 86 32 26  
000370r 3  23 2E 2F 26  	.byte $23,$2E,$2F,$26,$87,$23,$15,$16
000374r 3  87 23 15 16  
000378r 3  13 14 14 13  	.byte $13,$14,$14,$13,$19,$39,$0E,$0D
00037Cr 3  19 39 0E 0D  
000380r 3  86 31 25 22  	.byte $86,$31,$25,$22,$2B,$2E,$25,$87
000384r 3  2B 2E 25 87  
000388r 3  22 18 C7 19  	.byte $22,$18,$C7,$19,$1A,$86,$30,$24
00038Cr 3  1A 86 30 24  
000390r 3  82 31 24 87  	.byte $82,$31,$24,$87,$21,$17,$17,$13
000394r 3  21 17 17 13  
000398r 3  19 19 16 16  	.byte $19,$19,$16,$16,$00,$00,$00,$85
00039Cr 3  00 00 00 85  
0003A0r 3  19 2B 25 21  	.byte $19,$2B,$25,$21,$2C,$2E,$26,$87
0003A4r 3  2C 2E 26 87  
0003A8r 3  22 38 11 0F  	.byte $22,$38,$11,$0F,$11,$0F,$11,$3A
0003ACr 3  11 0F 11 3A  
0003B0r 3  19 1A 17 84  	.byte $19,$1A,$17,$84,$38,$0F,$10,$10
0003B4r 3  38 0F 10 10  
0003B8r 3  1E 29 2A 20  	.byte $1E,$29,$2A,$20,$87,$1E,$04,$C5
0003BCr 3  87 1E 04 C5  
0003C0r 3  02 0F 12 0F  	.byte $02,$0F,$12,$0F,$83,$38,$04,$D9
0003C4r 3  83 38 04 D9  
0003C8r 3  82 15 09 DA  	.byte $82,$15,$09,$DA,$15,$19,$38,$04
0003CCr 3  15 19 38 04  
0003D0r 3  9A 0F 12 04  	.byte $9A,$0F,$12,$04,$DB,$D5,$3E,$88
0003D4r 3  DB D5 3E 88  
0003D8r 3  95 01 0E 03  	.byte $95,$01,$0E,$03,$86,$95,$05,$13
0003DCr 3  86 95 05 13  
0003E0r 3  39 0E 0D 0E  	.byte $39,$0E,$0D,$0E,$0C,$0D,$0B,$96
0003E4r 3  0C 0D 0B 96  
0003E8r 3  14 13 15 14  	.byte $14,$13,$15,$14,$19,$18,$17,$15
0003ECr 3  19 18 17 15  
0003F0r 3  91 42 01 0E  	.byte $91,$42,$01,$0E,$0E,$3B,$38,$0F
0003F4r 3  0E 3B 38 0F  
0003F8r 3  10 12 3A 1A  	.byte $10,$12,$3A,$1A,$16,$14,$91,$40
0003FCr 3  16 14 91 40  
000400r 3  02 0F 0F 0F  	.byte $02,$0F,$0F,$0F,$04,$00,$00,$00
000404r 3  04 00 00 00  
000408r 3  02 0F 10 0F  	.byte $02,$0F,$10,$0F,$91,$CD,$9E,$9E
00040Cr 3  91 CD 9E 9E  
000410r 3  95 41 1B 87  	.byte $95,$41,$1B,$87,$95,$43,$05,$0D
000414r 3  95 43 05 0D  
000418r 3  0E 0C 03 83  	.byte $0E,$0C,$03,$83,$95,$42,$05,$17
00041Cr 3  95 42 05 17  
000420r 3  15 17 39 0C  	.byte $15,$17,$39,$0C,$0B,$0D,$95,$40
000424r 3  0B 0D 95 40  
000428r 3  07 15 00 00  	.byte $07,$15,$00,$00,$13,$14,$15,$16
00042Cr 3  13 14 15 16  
000430r 3  FF           	.byte $FF
000431r 3               level0_r1:
000431r 3  38 00 00     	.byte 56, 0, 0
000434r 3  10 90        	.byte 16, 144
000436r 3  FF FF FF 02  	.byte 255, 255, 255, 2
00043Ar 3  FF FF FF FE  	.byte 255, 255, 255, 254
00043Er 3  00           	.byte 0
00043Fr 3  rr rr        	.word level0_r1_t
000441r 3  rr rr        	.word level0_r1_p
000443r 3  rr rr        	.word level0_r1_e
000445r 3               level0_r2_p:
000445r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$5F,$00,$00
000449r 3  00 5F 00 00  
00044Dr 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$A0,$AA,$00
000451r 3  00 A0 AA 00  
000455r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000459r 3  00 00 00 00  
00045Dr 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$99,$55,$00
000461r 3  00 99 55 00  
000465r 3  00 00 00 A0  	.byte $00,$00,$00,$A0,$AA,$AA,$55,$00
000469r 3  AA AA 55 00  
00046Dr 3  00 00 00 20  	.byte $00,$00,$00,$20,$02,$00,$00,$00
000471r 3  02 00 00 00  
000475r 3  00 00 00 00  	.byte $00,$00,$00,$00,$A0,$5A,$55,$00
000479r 3  A0 5A 55 00  
00047Dr 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000481r 3  00 00 00 00  
000485r 3  00 00 A0 AA  	.byte $00,$00,$A0,$AA,$8A,$58,$44,$00
000489r 3  8A 58 44 00  
00048Dr 3  00 00 00 00  	.byte $00,$00,$00,$00,$AA,$98,$99,$00
000491r 3  AA 98 99 00  
000495r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$80,$00,$00
000499r 3  00 80 00 00  
00049Dr 3  00 AA 6A A6  	.byte $00,$AA,$6A,$A6,$00,$A8,$55,$00
0004A1r 3  00 A8 55 00  
0004A5r 3  00 00 00 00  	.byte $00,$00,$00,$00,$A0,$12,$01,$00
0004A9r 3  A0 12 01 00  
0004ADr 3  00 00 C0 44  	.byte $00,$00,$C0,$44,$44,$44,$44,$00
0004B1r 3  44 44 44 00  
0004B5r 3  00 00 30 15  	.byte $00,$00,$30,$15,$01,$10,$11,$00
0004B9r 3  01 10 11 00  
0004BDr 3  FF           	.byte $FF
0004BEr 3               level0_r2_e:
0004BEr 3  30 60 01     	.byte $30,$60,$01
0004C1r 3  40 60 02     	.byte $40,$60,$02
0004C4r 3  50 60 03     	.byte $50,$60,$03
0004C7r 3  FE           	.byte $FE
0004C8r 3  10 50 04     	.byte $10,$50,$04
0004CBr 3  FF           	.byte $FF
0004CCr 3               level0_r2_t:
0004CCr 3  D8 05 13 C4  	.byte $D8,$05,$13,$C4,$97,$43,$05,$14
0004D0r 3  97 43 05 14  
0004D4r 3  84 97 42 05  	.byte $84,$97,$42,$05,$15,$84,$97,$41
0004D8r 3  15 84 97 41  
0004DCr 3  05 16 84 97  	.byte $05,$16,$84,$97,$00,$23,$2B,$82
0004E0r 3  00 23 2B 82  
0004E4r 3  2B 2C 98 21  	.byte $2B,$2C,$98,$21,$2B,$2C,$2B,$34
0004E8r 3  2B 2C 2B 34  
0004ECr 3  29 98 23 29  	.byte $29,$98,$23,$29,$29,$29,$20,$00
0004F0r 3  29 29 20 00  
0004F4r 3  98 1E C5 98  	.byte $98,$1E,$C5,$98,$C6,$9E,$9E,$9E
0004F8r 3  C6 9E 9E 9E  
0004FCr 3  97 1B 86 97  	.byte $97,$1B,$86,$97,$05,$0D,$0E,$0E
000500r 3  05 0D 0E 0E  
000504r 3  0E 03 00 97  	.byte $0E,$03,$00,$97,$21,$2D,$00,$13
000508r 3  21 2D 00 13  
00050Cr 3  15 39 0E 97  	.byte $15,$39,$0E,$97,$23,$2B,$00,$00
000510r 3  23 2B 00 00  
000514r 3  00 16 17 90  	.byte $00,$16,$17,$90,$1D,$28,$27,$27
000518r 3  1D 28 27 27  
00051Cr 3  27 28 28 37  	.byte $27,$28,$28,$37,$32,$83,$00,$17
000520r 3  32 83 00 17  
000524r 3  90 21 A6 2B  	.byte $90,$21,$A6,$2B,$32,$00,$00,$13
000528r 3  32 00 00 13  
00052Cr 3  15 16 10 91  	.byte $15,$16,$10,$91,$2F,$00,$00,$2F
000530r 3  2F 00 00 2F  
000534r 3  2D 2C 2C 2B  	.byte $2D,$2C,$2C,$2B,$34,$38,$10,$10
000538r 3  34 38 10 10  
00053Cr 3  00 91 2B 2B  	.byte $00,$91,$2B,$2B,$34,$29,$2A,$29
000540r 3  34 29 2A 29  
000544r 3  29 2A 20 C4  	.byte $29,$2A,$20,$C4,$90,$1E,$2A,$2A
000548r 3  90 1E 2A 2A  
00054Cr 3  20 CA 90 CE  	.byte $20,$CA,$90,$CE,$9E,$9E,$94,$1D
000550r 3  9E 9E 94 1D  
000554r 3  1F 88 94 23  	.byte $1F,$88,$94,$23,$35,$28,$27,$0C
000558r 3  35 28 27 0C  
00055Cr 3  0D 0B 0C 0B  	.byte $0D,$0B,$0C,$0B,$0D,$94,$22,$2E
000560r 3  0D 94 22 2E  
000564r 3  34 29 11 12  	.byte $34,$29,$11,$12,$10,$3A,$13,$14
000568r 3  10 3A 13 14  
00056Cr 3  94 1E 29 20  	.byte $94,$1E,$29,$20,$C4,$02,$12,$11
000570r 3  C4 02 12 11  
000574r 3  94 CA 9E 9E  	.byte $94,$CA,$9E,$9E,$9E,$98,$3C,$85
000578r 3  9E 98 3C 85  
00057Cr 3  8D 1D 28 27  	.byte $8D,$1D,$28,$27,$27,$28,$1F,$85
000580r 3  27 28 1F 85  
000584r 3  3E 85 8D 1E  	.byte $3E,$85,$8D,$1E,$29,$2A,$36,$2F
000588r 3  29 2A 36 2F  
00058Cr 3  35 28 27 28  	.byte $35,$28,$27,$28,$27,$28,$03,$85
000590r 3  27 28 03 85  
000594r 3  8D 00 00 00  	.byte $8D,$00,$00,$00,$1E,$29,$2A,$36
000598r 3  1E 29 2A 36  
00059Cr 3  2B 2B 2C 2B  	.byte $2B,$2B,$2C,$2B,$39,$A5,$0E,$90
0005A0r 3  39 A5 0E 90  
0005A4r 3  00 00 00 21  	.byte $00,$00,$00,$21,$30,$C4,$13,$14
0005A8r 3  30 C4 13 14  
0005ACr 3  15 16 17 93  	.byte $15,$16,$17,$93,$22,$2D,$84,$C5
0005B0r 3  22 2D 84 C5  
0005B4r 3  93 23 2B 2C  	.byte $93,$23,$2B,$2C,$2D,$2E,$2F,$30
0005B8r 3  2D 2E 2F 30  
0005BCr 3  31 31 32 33  	.byte $31,$31,$32,$33,$93,$1E,$29,$2A
0005C0r 3  93 1E 29 2A  
0005C4r 3  29 2A 29 29  	.byte $29,$2A,$29,$29,$2A,$2A,$29,$2A
0005C8r 3  2A 2A 29 2A  
0005CCr 3  93 CB 9E 9E  	.byte $93,$CB,$9E,$9E,$98,$1D,$85,$98
0005D0r 3  98 1D 85 98  
0005D4r 3  21 85 87 1D  	.byte $21,$85,$87,$1D,$A8,$28,$1F,$87
0005D8r 3  A8 28 1F 87  
0005DCr 3  22 27 0E 0C  	.byte $22,$27,$0E,$0C,$0D,$0B,$87,$21
0005E0r 3  0D 0B 87 21  
0005E4r 3  2B 2C 2D 2E  	.byte $2B,$2C,$2D,$2E,$38,$0F,$0F,$12
0005E8r 3  38 0F 0F 12  
0005ECr 3  20 86 1D 37  	.byte $20,$86,$1D,$37,$00,$13,$14,$15
0005F0r 3  00 13 14 15  
0005F4r 3  16 87 1E 2A  	.byte $16,$87,$1E,$2A,$29,$29,$2A,$04
0005F8r 3  29 29 2A 04  
0005FCr 3  CA 22 00 00  	.byte $CA,$22,$00,$00,$38,$10,$0F,$10
000600r 3  38 10 0F 10  
000604r 3  87 CE 1D 27  	.byte $87,$CE,$1D,$27,$37,$18,$38,$04
000608r 3  37 18 38 04  
00060Cr 3  00 00 00 95  	.byte $00,$00,$00,$95,$22,$29,$29,$10
000610r 3  22 29 29 10  
000614r 3  04 C4 95 1E  	.byte $04,$C4,$95,$1E,$C8,$95,$C9,$9E
000618r 3  C8 95 C9 9E  
00061Cr 3  9E 94 01 0C  	.byte $9E,$94,$01,$0C,$0D,$03,$86,$8D
000620r 3  0D 03 86 8D  
000624r 3  40 01 0D 0C  	.byte $40,$01,$0D,$0C,$0C,$0C,$0B,$3B
000628r 3  0C 0C 0B 3B  
00062Cr 3  13 15 39 0B  	.byte $13,$15,$39,$0B,$0C,$0B,$0C,$0D
000630r 3  0C 0B 0C 0D  
000634r 3  0B 8D 00 05  	.byte $0B,$8D,$00,$05,$13,$14,$15,$13
000638r 3  13 14 15 13  
00063Cr 3  15 C5 14 15  	.byte $15,$C5,$14,$15,$13,$14,$15,$8D
000640r 3  13 14 15 8D  
000644r 3  42 06 14 CE  	.byte $42,$06,$14,$CE,$8D,$00,$05,$13
000648r 3  8D 00 05 13  
00064Cr 3  8E 8F 14 8E  	.byte $8E,$8F,$14,$8E,$FF
000650r 3  FF           
000651r 3               level0_r2:
000651r 3  3C 00 00     	.byte 60, 0, 0
000654r 3  10 B0        	.byte 16, 176
000656r 3  FF FF FF 04  	.byte 255, 255, 255, 4
00065Ar 3  FF FF FF F8  	.byte 255, 255, 255, 248
00065Er 3  07           	.byte 7
00065Fr 3  rr rr        	.word level0_r2_t
000661r 3  rr rr        	.word level0_r2_p
000663r 3  rr rr        	.word level0_r2_e
000665r 3               level0_r3_p:
000665r 3  00 00 C0 05  	.byte $00,$00,$C0,$05,$00,$00,$00,$00
000669r 3  00 00 00 00  
00066Dr 3  00 00 B0 0A  	.byte $00,$00,$B0,$0A,$00,$00,$00,$00
000671r 3  00 00 00 00  
000675r 3  00 80 2A 00  	.byte $00,$80,$2A,$00,$00,$00,$00,$00
000679r 3  00 00 00 00  
00067Dr 3  44 A5 00 00  	.byte $44,$A5,$00,$00,$00,$00,$00,$00
000681r 3  00 00 00 00  
000685r 3  55 A5 00 00  	.byte $55,$A5,$00,$00,$00,$00,$00,$05
000689r 3  00 00 00 05  
00068Dr 3  FE 55 65 00  	.byte $FE,$55,$65,$00,$00,$00,$00,$00
000691r 3  00 00 00 00  
000695r 3  01 00 13 05  	.byte $01,$00,$13,$05,$00,$00,$00,$00
000699r 3  00 00 00 00  
00069Dr 3  00 00 00 09  	.byte $00,$00,$00,$09,$00,$00,$00,$00
0006A1r 3  00 00 00 00  
0006A5r 3  00 00 F0 06  	.byte $00,$00,$F0,$06,$00,$00,$00,$00
0006A9r 3  00 00 00 00  
0006ADr 3  00 FF        	.byte $00,$FF
0006AFr 3               level0_r3_e:
0006AFr 3  FF           	.byte $FF
0006B0r 3               level0_r3_t:
0006B0r 3  D6 05 19 C6  	.byte $D6,$05,$19,$C6,$97,$18,$86,$97
0006B4r 3  97 18 86 97  
0006B8r 3  1A 86 95 40  	.byte $1A,$86,$95,$40,$05,$16,$86,$95
0006BCr 3  05 16 86 95  
0006C0r 3  41 21 32 86  	.byte $41,$21,$32,$86,$95,$00,$21,$33
0006C4r 3  95 00 21 33  
0006C8r 3  86 97 2F 86  	.byte $86,$97,$2F,$86,$95,$1D,$37,$30
0006CCr 3  95 1D 37 30  
0006D0r 3  86 93 1D 28  	.byte $86,$93,$1D,$28,$37,$C8,$93,$21
0006D4r 3  37 C8 93 21  
0006D8r 3  2C C9 90 1D  	.byte $2C,$C9,$90,$1D,$28,$28,$37,$CA
0006DCr 3  28 28 37 CA  
0006E0r 3  90 21 2B 32  	.byte $90,$21,$2B,$32,$CB,$8E,$A1,$84
0006E4r 3  CB 8E A1 84  
0006E8r 3  A1 93 21 2C  	.byte $A1,$93,$21,$2C,$CC,$8E,$A1,$85
0006ECr 3  CC 8E A1 85  
0006F0r 3  A1 94 21 2B  	.byte $A1,$94,$21,$2B,$8C,$8A,$51,$5D
0006F4r 3  8C 8A 51 5D  
0006F8r 3  6A 77 A1 86  	.byte $6A,$77,$A1,$86,$A1,$95,$21,$2D
0006FCr 3  A1 95 21 2D  
000700r 3  8C 8A 52 5E  	.byte $8C,$8A,$52,$5E,$6B,$78,$A1,$87
000704r 3  6B 78 A1 87  
000708r 3  A1 96 21 2C  	.byte $A1,$96,$21,$2C,$8C,$89,$49,$53
00070Cr 3  8C 89 49 53  
000710r 3  5F 6C 79 A1  	.byte $5F,$6C,$79,$A1,$88,$A1,$97,$21
000714r 3  88 A1 97 21  
000718r 3  2E 8C 89 4A  	.byte $2E,$8C,$89,$4A,$54,$60,$6D,$7A
00071Cr 3  54 60 6D 7A  
000720r 3  A1 89 A1 98  	.byte $A1,$89,$A1,$98,$21,$2B,$8C,$88
000724r 3  21 2B 8C 88  
000728r 3  44 4B 55 61  	.byte $44,$4B,$55,$61,$6E,$7B,$A1,$8A
00072Cr 3  6E 7B A1 8A  
000730r 3  A1 99 21 2F  	.byte $A1,$99,$21,$2F,$8C,$88,$45,$4C
000734r 3  8C 88 45 4C  
000738r 3  56 62 6F 7C  	.byte $56,$62,$6F,$7C,$A1,$8B,$A1,$9A
00073Cr 3  A1 8B A1 9A  
000740r 3  21 30 8C 88  	.byte $21,$30,$8C,$88,$46,$4D,$57,$63
000744r 3  46 4D 57 63  
000748r 3  70 7D A1 8C  	.byte $70,$7D,$A1,$8C,$A1,$9B,$21,$2F
00074Cr 3  A1 9B 21 2F  
000750r 3  8C 88 47 4E  	.byte $8C,$88,$47,$4E,$58,$64,$71,$7E
000754r 3  58 64 71 7E  
000758r 3  A1 8D A1 9C  	.byte $A1,$8D,$A1,$9C,$21,$2B,$8C,$88
00075Cr 3  21 2B 8C 88  
000760r 3  48 A1 A3 59  	.byte $48,$A1,$A3,$59,$65,$72,$7F,$A1
000764r 3  65 72 7F A1  
000768r 3  8E A1 9D 21  	.byte $8E,$A1,$9D,$21,$2F,$8C,$88,$00
00076Cr 3  2F 8C 88 00  
000770r 3  4F 5A 66 73  	.byte $4F,$5A,$66,$73,$80,$A1,$8F,$A1
000774r 3  80 A1 8F A1  
000778r 3  9E 21 2D 8C  	.byte $9E,$21,$2D,$8C,$89,$50,$5B,$67
00077Cr 3  89 50 5B 67  
000780r 3  74 A1 81 A1  	.byte $74,$A1,$81,$A1,$90,$A1,$9F,$21
000784r 3  90 A1 9F 21  
000788r 3  CD 89 00 A1  	.byte $CD,$89,$00,$A1,$A2,$68,$75,$A1
00078Cr 3  A2 68 75 A1  
000790r 3  82 A1 91 A0  	.byte $82,$A1,$91,$A0,$8E,$8A,$5C,$69
000794r 3  8E 8A 5C 69  
000798r 3  76 A1 83 A1  	.byte $76,$A1,$83,$A1,$92,$A1,$A1,$05
00079Cr 3  92 A1 A1 05  
0007A0r 3  8D 8A C6 05  	.byte $8D,$8A,$C6,$05,$14,$8C,$8F,$40
0007A4r 3  14 8C 8F 40  
0007A8r 3  05 15 8C 8F  	.byte $05,$15,$8C,$8F,$41,$02,$11,$3A
0007ACr 3  41 02 11 3A  
0007B0r 3  8B 8F 00 00  	.byte $8B,$8F,$00,$00,$00,$05,$8B,$93
0007B4r 3  00 05 8B 93  
0007B8r 3  13 8A 92 07  	.byte $13,$8A,$92,$07,$14,$8A,$93,$15
0007BCr 3  14 8A 93 15  
0007C0r 3  8A 92 21 CB  	.byte $8A,$92,$21,$CB,$9E,$93,$2D,$8A
0007C4r 3  9E 93 2D 8A  
0007C8r 3  91 42 8C 91  	.byte $91,$42,$8C,$91,$43,$05,$15,$8A
0007CCr 3  43 05 15 8A  
0007D0r 3  91 00 05 14  	.byte $91,$00,$05,$14,$8A,$FF
0007D4r 3  8A FF        
0007D6r 3               level0_r3:
0007D6r 3  28 00 00     	.byte 40, 0, 0
0007D9r 3  10 A0        	.byte 16, 160
0007DBr 3  00 00 00 06  	.byte 0, 0, 0, 6
0007DFr 3  00 00 00 FC  	.byte 0, 0, 0, 252
0007E3r 3  05           	.byte 5
0007E4r 3  rr rr        	.word level0_r3_t
0007E6r 3  rr rr        	.word level0_r3_p
0007E8r 3  rr rr        	.word level0_r3_e
0007EAr 3               level0_r4_p:
0007EAr 3  00 00 09 44  	.byte $00,$00,$09,$44,$00,$00,$00,$00
0007EEr 3  00 00 00 00  
0007F2r 3  00 00 AA 11  	.byte $00,$00,$AA,$11,$00,$00,$00,$00
0007F6r 3  00 00 00 00  
0007FAr 3  00 00 10 11  	.byte $00,$00,$10,$11,$00,$00,$00,$00
0007FEr 3  00 00 00 00  
000802r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000806r 3  00 00 00 00  
00080Ar 3  00 00 40 44  	.byte $00,$00,$40,$44,$00,$00,$00,$00
00080Er 3  00 00 00 00  
000812r 3  00 00 40 55  	.byte $00,$00,$40,$55,$00,$00,$00,$00
000816r 3  00 00 00 00  
00081Ar 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
00081Er 3  00 00 00 00  
000822r 3  00 00 40 44  	.byte $00,$00,$40,$44,$00,$00,$00,$00
000826r 3  00 00 00 00  
00082Ar 3  00 00 40 55  	.byte $00,$00,$40,$55,$00,$00,$00,$00
00082Er 3  00 00 00 00  
000832r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000836r 3  00 00 00 00  
00083Ar 3  FE 00 00 10  	.byte $FE,$00,$00,$10,$55,$00,$00,$00
00083Er 3  55 00 00 00  
000842r 3  00 00 00 10  	.byte $00,$00,$00,$10,$11,$00,$00,$00
000846r 3  11 00 00 00  
00084Ar 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
00084Er 3  00 00 00 00  
000852r 3  00 00 00 10  	.byte $00,$00,$00,$10,$55,$00,$00,$00
000856r 3  55 00 00 00  
00085Ar 3  00 00 00 10  	.byte $00,$00,$00,$10,$11,$00,$00,$00
00085Er 3  11 00 00 00  
000862r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000866r 3  00 00 00 00  
00086Ar 3  00 00 00 40  	.byte $00,$00,$00,$40,$44,$00,$00,$00
00086Er 3  44 00 00 00  
000872r 3  00 00 00 40  	.byte $00,$00,$00,$40,$55,$00,$00,$00
000876r 3  55 00 00 00  
00087Ar 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
00087Er 3  00 00 00 00  
000882r 3  00 00 00 40  	.byte $00,$00,$00,$40,$44,$00,$00,$00
000886r 3  44 00 00 00  
00088Ar 3  00 00 00 40  	.byte $00,$00,$00,$40,$55,$00,$00,$00
00088Er 3  55 00 00 00  
000892r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000896r 3  00 00 00 00  
00089Ar 3  00 FE 00 00  	.byte $00,$FE,$00,$00,$10,$55,$00,$00
00089Er 3  10 55 00 00  
0008A2r 3  00 00 00 00  	.byte $00,$00,$00,$00,$10,$11,$00,$00
0008A6r 3  10 11 00 00  
0008AAr 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
0008AEr 3  00 00 00 00  
0008B2r 3  00 00 00 00  	.byte $00,$00,$00,$00,$10,$55,$00,$00
0008B6r 3  10 55 00 00  
0008BAr 3  00 00 00 C0  	.byte $00,$00,$00,$C0,$54,$11,$00,$00
0008BEr 3  54 11 00 00  
0008C2r 3  00 00 00 F0  	.byte $00,$00,$00,$F0,$16,$45,$00,$00
0008C6r 3  16 45 00 00  
0008CAr 3  00 00 4C 54  	.byte $00,$00,$4C,$54,$01,$00,$00,$00
0008CEr 3  01 00 00 00  
0008D2r 3  00 00 FF     	.byte $00,$00,$FF
0008D5r 3               level0_r4_e:
0008D5r 3  40 80 01     	.byte $40,$80,$01
0008D8r 3  40 B0 0A     	.byte $40,$B0,$0A
0008DBr 3  A8 B0 0A     	.byte $A8,$B0,$0A
0008DEr 3  FE           	.byte $FE
0008DFr 3  10 B0 0A     	.byte $10,$B0,$0A
0008E2r 3  78 B0 0A     	.byte $78,$B0,$0A
0008E5r 3  E0 B0 0A     	.byte $E0,$B0,$0A
0008E8r 3  FE           	.byte $FE
0008E9r 3  48 B0 0A     	.byte $48,$B0,$0A
0008ECr 3  B0 B0 0A     	.byte $B0,$B0,$0A
0008EFr 3  FE           	.byte $FE
0008F0r 3  18 B0 0A     	.byte $18,$B0,$0A
0008F3r 3  FF           	.byte $FF
0008F4r 3               level0_r4_t:
0008F4r 3  D6 06 13 C6  	.byte $D6,$06,$13,$C6,$96,$05,$14,$86
0008F8r 3  96 05 14 86  
0008FCr 3  96 23 C7 96  	.byte $96,$23,$C7,$96,$22,$84,$16,$15
000900r 3  22 84 16 15  
000904r 3  14 96 21 2D  	.byte $14,$96,$21,$2D,$82,$38,$0F,$10
000908r 3  82 38 0F 10  
00090Cr 3  12 96 22 2D  	.byte $12,$96,$22,$2D,$34,$29,$04,$00
000910r 3  34 29 04 00  
000914r 3  00 00 96 21  	.byte $00,$00,$96,$21,$29,$20,$C5,$96
000918r 3  29 20 C5 96  
00091Cr 3  1E C7 96 A1  	.byte $1E,$C7,$96,$A1,$A4,$A1,$A5,$A1
000920r 3  A4 A1 A5 A1  
000924r 3  B6 A1 BF A1  	.byte $B6,$A1,$BF,$A1,$C1,$A3,$C3,$96
000928r 3  C1 A3 C3 96  
00092Cr 3  A1 A6 A1 A7  	.byte $A1,$A6,$A1,$A7,$A1,$B7,$C0,$A1
000930r 3  A1 B7 C0 A1  
000934r 3  C2 A3 C4 96  	.byte $C2,$A3,$C4,$96,$A1,$A8,$A1,$A9
000938r 3  A1 A8 A1 A9  
00093Cr 3  C6 96 A1 AA  	.byte $C6,$96,$A1,$AA,$A1,$AB,$86,$96
000940r 3  A1 AB 86 96  
000944r 3  A1 AC A1 AD  	.byte $A1,$AC,$A1,$AD,$86,$96,$A1,$AE
000948r 3  86 96 A1 AE  
00094Cr 3  A1 AF 86 96  	.byte $A1,$AF,$86,$96,$A1,$B0,$A1,$B1
000950r 3  A1 B0 A1 B1  
000954r 3  86 96 A1 B2  	.byte $86,$96,$A1,$B2,$A1,$B3,$86,$96
000958r 3  A1 B3 86 96  
00095Cr 3  A1 B4 A1 B5  	.byte $A1,$B4,$A1,$B5,$86,$96,$A1,$A8
000960r 3  86 96 A1 A8  
000964r 3  A1 A9 86 96  	.byte $A1,$A9,$86,$96,$A1,$B8,$A1,$B9
000968r 3  A1 B8 A1 B9  
00096Cr 3  A1 B6 A1 BF  	.byte $A1,$B6,$A1,$BF,$A1,$C1,$A3,$C3
000970r 3  A1 C1 A3 C3  
000974r 3  96 A1 BA A1  	.byte $96,$A1,$BA,$A1,$BB,$A1,$B7,$C0
000978r 3  BB A1 B7 C0  
00097Cr 3  A1 C2 A3 C4  	.byte $A1,$C2,$A3,$C4,$96,$A1,$BC,$A1
000980r 3  96 A1 BC A1  
000984r 3  BD A1 BE C5  	.byte $BD,$A1,$BE,$C5,$96,$A1,$A4,$A1
000988r 3  96 A1 A4 A1  
00098Cr 3  A5 A1 C6 A1  	.byte $A5,$A1,$C6,$A1,$C8,$A1,$C1,$A3
000990r 3  C8 A1 C1 A3  
000994r 3  C3 96 A1 A6  	.byte $C3,$96,$A1,$A6,$A1,$A7,$A1,$B7
000998r 3  A1 A7 A1 B7  
00099Cr 3  C0 A1 C2 A3  	.byte $C0,$A1,$C2,$A3,$C4,$96,$A1,$A8
0009A0r 3  C4 96 A1 A8  
0009A4r 3  A1 A9 C6 96  	.byte $A1,$A9,$C6,$96,$A1,$AA,$A1,$AB
0009A8r 3  A1 AA A1 AB  
0009ACr 3  86 96 A1 AC  	.byte $86,$96,$A1,$AC,$A1,$AD,$86,$96
0009B0r 3  A1 AD 86 96  
0009B4r 3  A1 AE A1 AF  	.byte $A1,$AE,$A1,$AF,$86,$96,$A1,$B0
0009B8r 3  86 96 A1 B0  
0009BCr 3  A1 B1 86 96  	.byte $A1,$B1,$86,$96,$A1,$B2,$A1,$B3
0009C0r 3  A1 B2 A1 B3  
0009C4r 3  86 96 A1 B4  	.byte $86,$96,$A1,$B4,$A1,$B5,$86,$96
0009C8r 3  A1 B5 86 96  
0009CCr 3  A1 A8 A1 A9  	.byte $A1,$A8,$A1,$A9,$86,$96,$A1,$B8
0009D0r 3  86 96 A1 B8  
0009D4r 3  A1 B9 A1 B6  	.byte $A1,$B9,$A1,$B6,$A1,$BF,$A1,$C1
0009D8r 3  A1 BF A1 C1  
0009DCr 3  A3 C3 96 A1  	.byte $A3,$C3,$96,$A1,$BA,$A1,$BB,$A1
0009E0r 3  BA A1 BB A1  
0009E4r 3  C7 A1 C9 A1  	.byte $C7,$A1,$C9,$A1,$C2,$A3,$C4,$96
0009E8r 3  C2 A3 C4 96  
0009ECr 3  A1 BC A1 BD  	.byte $A1,$BC,$A1,$BD,$A1,$BE,$C5,$96
0009F0r 3  A1 BE C5 96  
0009F4r 3  A1 A4 A1 A5  	.byte $A1,$A4,$A1,$A5,$A1,$B6,$A1,$BF
0009F8r 3  A1 B6 A1 BF  
0009FCr 3  A1 C1 A3 C3  	.byte $A1,$C1,$A3,$C3,$96,$A1,$A6,$A1
000A00r 3  96 A1 A6 A1  
000A04r 3  A7 A1 B7 C0  	.byte $A7,$A1,$B7,$C0,$A1,$C2,$A3,$C4
000A08r 3  A1 C2 A3 C4  
000A0Cr 3  96 A1 A8 A1  	.byte $96,$A1,$A8,$A1,$A9,$C6,$96,$A1
000A10r 3  A9 C6 96 A1  
000A14r 3  AA A1 AB 86  	.byte $AA,$A1,$AB,$86,$96,$A1,$AC,$A1
000A18r 3  96 A1 AC A1  
000A1Cr 3  AD 86 96 A1  	.byte $AD,$86,$96,$A1,$AE,$A1,$AF,$86
000A20r 3  AE A1 AF 86  
000A24r 3  96 A1 B0 A1  	.byte $96,$A1,$B0,$A1,$B1,$86,$96,$A1
000A28r 3  B1 86 96 A1  
000A2Cr 3  B2 A1 B3 86  	.byte $B2,$A1,$B3,$86,$96,$A1,$B4,$A1
000A30r 3  96 A1 B4 A1  
000A34r 3  B5 86 96 A1  	.byte $B5,$86,$96,$A1,$A8,$A1,$A9,$86
000A38r 3  A8 A1 A9 86  
000A3Cr 3  96 A1 B8 A1  	.byte $96,$A1,$B8,$A1,$B9,$A1,$B6,$A1
000A40r 3  B9 A1 B6 A1  
000A44r 3  BF A1 C1 A3  	.byte $BF,$A1,$C1,$A3,$C3,$96,$A1,$BA
000A48r 3  C3 96 A1 BA  
000A4Cr 3  A1 BB A1 B7  	.byte $A1,$BB,$A1,$B7,$C0,$A1,$C2,$A3
000A50r 3  C0 A1 C2 A3  
000A54r 3  C4 96 A1 BC  	.byte $C4,$96,$A1,$BC,$A1,$BD,$A1,$BE
000A58r 3  A1 BD A1 BE  
000A5Cr 3  C5 96 A1 A4  	.byte $C5,$96,$A1,$A4,$A1,$A5,$A1,$C6
000A60r 3  A1 A5 A1 C6  
000A64r 3  A1 C8 A1 C1  	.byte $A1,$C8,$A1,$C1,$A3,$C3,$96,$A1
000A68r 3  A3 C3 96 A1  
000A6Cr 3  A6 A1 A7 A1  	.byte $A6,$A1,$A7,$A1,$B7,$C0,$A1,$C2
000A70r 3  B7 C0 A1 C2  
000A74r 3  A3 C4 96 A1  	.byte $A3,$C4,$96,$A1,$A8,$A1,$A9,$C6
000A78r 3  A8 A1 A9 C6  
000A7Cr 3  96 A1 AA A1  	.byte $96,$A1,$AA,$A1,$AB,$86,$96,$A1
000A80r 3  AB 86 96 A1  
000A84r 3  AC A1 AD 86  	.byte $AC,$A1,$AD,$86,$96,$A1,$AE,$A1
000A88r 3  96 A1 AE A1  
000A8Cr 3  AF 86 96 A1  	.byte $AF,$86,$96,$A1,$B0,$A1,$B1,$86
000A90r 3  B0 A1 B1 86  
000A94r 3  96 A1 B2 A1  	.byte $96,$A1,$B2,$A1,$B3,$86,$96,$A1
000A98r 3  B3 86 96 A1  
000A9Cr 3  B4 A1 B5 86  	.byte $B4,$A1,$B5,$86,$96,$A1,$A8,$A1
000AA0r 3  96 A1 A8 A1  
000AA4r 3  A9 86 96 A1  	.byte $A9,$86,$96,$A1,$B8,$A1,$B9,$A1
000AA8r 3  B8 A1 B9 A1  
000AACr 3  B6 A1 BF A1  	.byte $B6,$A1,$BF,$A1,$C1,$A3,$C3,$96
000AB0r 3  C1 A3 C3 96  
000AB4r 3  A1 BA A1 BB  	.byte $A1,$BA,$A1,$BB,$A1,$C7,$A1,$C9
000AB8r 3  A1 C7 A1 C9  
000ABCr 3  A1 C2 A3 C4  	.byte $A1,$C2,$A3,$C4,$96,$A1,$BC,$A1
000AC0r 3  96 A1 BC A1  
000AC4r 3  BD A1 BE C5  	.byte $BD,$A1,$BE,$C5,$96,$A1,$A4,$A1
000AC8r 3  96 A1 A4 A1  
000ACCr 3  A5 A1 B6 A1  	.byte $A5,$A1,$B6,$A1,$BF,$A1,$C1,$A3
000AD0r 3  BF A1 C1 A3  
000AD4r 3  C3 96 A1 A6  	.byte $C3,$96,$A1,$A6,$A1,$A7,$A1,$B7
000AD8r 3  A1 A7 A1 B7  
000ADCr 3  C0 A1 C2 A3  	.byte $C0,$A1,$C2,$A3,$C4,$96,$C8,$9E
000AE0r 3  C4 96 C8 9E  
000AE4r 3  9E 9E 96 A1  	.byte $9E,$9E,$96,$A1,$B0,$A1,$B1,$86
000AE8r 3  B0 A1 B1 86  
000AECr 3  96 A1 B2 A1  	.byte $96,$A1,$B2,$A1,$B3,$86,$96,$A1
000AF0r 3  B3 86 96 A1  
000AF4r 3  B4 A1 B5 86  	.byte $B4,$A1,$B5,$86,$96,$A1,$A8,$A1
000AF8r 3  96 A1 A8 A1  
000AFCr 3  A9 86 96 A1  	.byte $A9,$86,$96,$A1,$B8,$A1,$B9,$A1
000B00r 3  B8 A1 B9 A1  
000B04r 3  B6 A1 BF A1  	.byte $B6,$A1,$BF,$A1,$C1,$A3,$C3,$96
000B08r 3  C1 A3 C3 96  
000B0Cr 3  A1 BA A1 BB  	.byte $A1,$BA,$A1,$BB,$A1,$B7,$C0,$A1
000B10r 3  A1 B7 C0 A1  
000B14r 3  C2 A3 C4 96  	.byte $C2,$A3,$C4,$96,$A1,$BC,$A1,$BD
000B18r 3  A1 BC A1 BD  
000B1Cr 3  A1 BE C5 96  	.byte $A1,$BE,$C5,$96,$A1,$A4,$A1,$A5
000B20r 3  A1 A4 A1 A5  
000B24r 3  A1 C6 A1 C8  	.byte $A1,$C6,$A1,$C8,$A1,$C1,$A3,$C3
000B28r 3  A1 C1 A3 C3  
000B2Cr 3  96 A1 A6 A1  	.byte $96,$A1,$A6,$A1,$A7,$A1,$B7,$C0
000B30r 3  A7 A1 B7 C0  
000B34r 3  A1 C2 A3 C4  	.byte $A1,$C2,$A3,$C4,$96,$A1,$A8,$A1
000B38r 3  96 A1 A8 A1  
000B3Cr 3  A9 C6 96 A1  	.byte $A9,$C6,$96,$A1,$AA,$A1,$AB,$86
000B40r 3  AA A1 AB 86  
000B44r 3  96 A1 AC A1  	.byte $96,$A1,$AC,$A1,$AD,$86,$96,$A1
000B48r 3  AD 86 96 A1  
000B4Cr 3  AE A1 AF 86  	.byte $AE,$A1,$AF,$86,$96,$A1,$B0,$A1
000B50r 3  96 A1 B0 A1  
000B54r 3  B1 86 96 A1  	.byte $B1,$86,$96,$A1,$B2,$A1,$B3,$86
000B58r 3  B2 A1 B3 86  
000B5Cr 3  96 A1 B4 A1  	.byte $96,$A1,$B4,$A1,$B5,$86,$96,$A1
000B60r 3  B5 86 96 A1  
000B64r 3  A8 A1 A9 86  	.byte $A8,$A1,$A9,$86,$96,$A1,$B8,$A1
000B68r 3  96 A1 B8 A1  
000B6Cr 3  B9 A1 B6 A1  	.byte $B9,$A1,$B6,$A1,$BF,$A1,$C1,$A3
000B70r 3  BF A1 C1 A3  
000B74r 3  C3 96 A1 BA  	.byte $C3,$96,$A1,$BA,$A1,$BB,$A1,$C7
000B78r 3  A1 BB A1 C7  
000B7Cr 3  A1 C9 A1 C2  	.byte $A1,$C9,$A1,$C2,$A3,$C4,$96,$A1
000B80r 3  A3 C4 96 A1  
000B84r 3  BC A1 BD A1  	.byte $BC,$A1,$BD,$A1,$BE,$C5,$96,$A1
000B88r 3  BE C5 96 A1  
000B8Cr 3  A4 A1 A5 A1  	.byte $A4,$A1,$A5,$A1,$B6,$A1,$BF,$A1
000B90r 3  B6 A1 BF A1  
000B94r 3  C1 A3 C3 96  	.byte $C1,$A3,$C3,$96,$A1,$A6,$A1,$A7
000B98r 3  A1 A6 A1 A7  
000B9Cr 3  A1 B7 C0 A1  	.byte $A1,$B7,$C0,$A1,$C2,$A3,$C4,$96
000BA0r 3  C2 A3 C4 96  
000BA4r 3  A1 A8 A1 A9  	.byte $A1,$A8,$A1,$A9,$C6,$96,$A1,$AA
000BA8r 3  C6 96 A1 AA  
000BACr 3  A1 AB 86 96  	.byte $A1,$AB,$86,$96,$A1,$AC,$A1,$AD
000BB0r 3  A1 AC A1 AD  
000BB4r 3  86 96 A1 AE  	.byte $86,$96,$A1,$AE,$A1,$AF,$86,$96
000BB8r 3  A1 AF 86 96  
000BBCr 3  A1 B0 A1 B1  	.byte $A1,$B0,$A1,$B1,$86,$96,$A1,$B2
000BC0r 3  86 96 A1 B2  
000BC4r 3  A1 B3 86 96  	.byte $A1,$B3,$86,$96,$A1,$B4,$A1,$B5
000BC8r 3  A1 B4 A1 B5  
000BCCr 3  86 96 A1 A8  	.byte $86,$96,$A1,$A8,$A1,$A9,$86,$96
000BD0r 3  A1 A9 86 96  
000BD4r 3  A1 B8 A1 B9  	.byte $A1,$B8,$A1,$B9,$A1,$B6,$A1,$BF
000BD8r 3  A1 B6 A1 BF  
000BDCr 3  A1 C1 A3 C3  	.byte $A1,$C1,$A3,$C3,$96,$A1,$BA,$A1
000BE0r 3  96 A1 BA A1  
000BE4r 3  BB A1 B7 C0  	.byte $BB,$A1,$B7,$C0,$A1,$C2,$A3,$C4
000BE8r 3  A1 C2 A3 C4  
000BECr 3  96 A1 BC A1  	.byte $96,$A1,$BC,$A1,$BD,$A1,$BE,$C5
000BF0r 3  BD A1 BE C5  
000BF4r 3  96 A1 A4 A1  	.byte $96,$A1,$A4,$A1,$A5,$A1,$C6,$A1
000BF8r 3  A5 A1 C6 A1  
000BFCr 3  C8 A1 C1 A3  	.byte $C8,$A1,$C1,$A3,$C3,$96,$A1,$A6
000C00r 3  C3 96 A1 A6  
000C04r 3  A1 A7 A1 B7  	.byte $A1,$A7,$A1,$B7,$C0,$A1,$C2,$A3
000C08r 3  C0 A1 C2 A3  
000C0Cr 3  C4 96 A1 A8  	.byte $C4,$96,$A1,$A8,$A1,$A9,$C6,$96
000C10r 3  A1 A9 C6 96  
000C14r 3  A1 AA A1 AB  	.byte $A1,$AA,$A1,$AB,$86,$96,$A1,$AC
000C18r 3  86 96 A1 AC  
000C1Cr 3  A1 AD 86 96  	.byte $A1,$AD,$86,$96,$A1,$AE,$A1,$AF
000C20r 3  A1 AE A1 AF  
000C24r 3  86 96 A1 B0  	.byte $86,$96,$A1,$B0,$A1,$B1,$86,$96
000C28r 3  A1 B1 86 96  
000C2Cr 3  A1 B2 A1 B3  	.byte $A1,$B2,$A1,$B3,$86,$96,$A1,$B4
000C30r 3  86 96 A1 B4  
000C34r 3  A1 B5 86 96  	.byte $A1,$B5,$86,$96,$A1,$A8,$A1,$A9
000C38r 3  A1 A8 A1 A9  
000C3Cr 3  86 96 A1 B8  	.byte $86,$96,$A1,$B8,$A1,$B9,$A1,$B6
000C40r 3  A1 B9 A1 B6  
000C44r 3  A1 BF A1 C1  	.byte $A1,$BF,$A1,$C1,$A3,$C3,$96,$A1
000C48r 3  A3 C3 96 A1  
000C4Cr 3  BA A1 BB A1  	.byte $BA,$A1,$BB,$A1,$C7,$A1,$C9,$A1
000C50r 3  C7 A1 C9 A1  
000C54r 3  C2 A3 C4 96  	.byte $C2,$A3,$C4,$96,$A1,$BC,$A1,$BD
000C58r 3  A1 BC A1 BD  
000C5Cr 3  A1 BE C5 96  	.byte $A1,$BE,$C5,$96,$A1,$A4,$A1,$A5
000C60r 3  A1 A4 A1 A5  
000C64r 3  A1 B6 A1 BF  	.byte $A1,$B6,$A1,$BF,$A1,$C1,$A3,$C3
000C68r 3  A1 C1 A3 C3  
000C6Cr 3  96 A1 CA A1  	.byte $96,$A1,$CA,$A1,$CB,$0B,$03,$A1
000C70r 3  CB 0B 03 A1  
000C74r 3  C2 A3 C4 95  	.byte $C2,$A3,$C4,$95,$42,$07,$17,$16
000C78r 3  42 07 17 16  
000C7Cr 3  09 C4 95 40  	.byte $09,$C4,$95,$40,$07,$13,$15,$85
000C80r 3  07 13 15 85  
000C84r 3  95 41 21 2B  	.byte $95,$41,$21,$2B,$00,$39,$03,$83
000C88r 3  00 39 03 83  
000C8Cr 3  95 43 23 2C  	.byte $95,$43,$23,$2C,$00,$14,$08,$83
000C90r 3  00 14 08 83  
000C94r 3  95 00 06 15  	.byte $95,$00,$06,$15,$00,$00,$39,$0E
000C98r 3  00 00 39 0E  
000C9Cr 3  0B 0E 95 43  	.byte $0B,$0E,$95,$43,$06,$17,$82,$00
000CA0r 3  06 17 82 00  
000CA4r 3  19 14 16 95  	.byte $19,$14,$16,$95,$00,$06,$13,$83
000CA8r 3  00 06 13 83  
000CACr 3  00 00 00 95  	.byte $00,$00,$00,$95,$01,$3B,$C7,$93
000CB0r 3  01 3B C7 93  
000CB4r 3  01 0D 3B C8  	.byte $01,$0D,$3B,$C8,$8F,$43,$01,$0C
000CB8r 3  8F 43 01 0C  
000CBCr 3  0B 3B 16 C9  	.byte $0B,$3B,$16,$C9,$FF
000CC0r 3  FF           
000CC1r 3               level0_r4:
000CC1r 3  00 00 00     	.byte 0, 0, 0
000CC4r 3  10 A0        	.byte 16, 160
000CC6r 3  00 00 00 00  	.byte 0, 0, 0, 0
000CCAr 3  00 00 00 00  	.byte 0, 0, 0, 0
000CCEr 3  04           	.byte 4
000CCFr 3  rr rr        	.word level0_r4_t
000CD1r 3  rr rr        	.word level0_r4_p
000CD3r 3  rr rr        	.word level0_r4_e
000CD5r 3               level0:
000CD5r 3  rr rr        	.word level0_music	; music table
000CD7r 3  00           	.byte $00	; environment type
000CD8r 3  04           	.byte $04	; room count
000CD9r 3  rr rr        	.word level0_r1
000CDBr 3  rr rr        	.word level0_r2
000CDDr 3  rr rr        	.word level0_r3
000CDFr 3  rr rr        	.word level0_r4
000CE1r 3               
000CE1r 2               .include "entity.asm"
000CE1r 3               ; Copyright (C) 2024 iProgramInCpp
000CE1r 3               ; Level 0 specific entities.
000CE1r 3               
000CE1r 3               ; ** Entity Draw/Update routines
000CE1r 3               ; Parameters:
000CE1r 3               ;   temp1 - Entity Index (passed in through X too)
000CE1r 3               ;   temp2 - X Screen Position
000CE1r 3               ;   temp3 - Y Screen Position
000CE1r 3               ;   temp4 - X High Position
000CE1r 3               
000CE1r 3               ; ** ENTITY: level0_bridge_manager
000CE1r 3               ; desc: This entity manages a single bridge instance  (13 tiles wide) and
000CE1r 3               ;       initiates the fall sequence for each.
000CE1r 3               level0_bridge_manager:
000CE1r 3  BD rr rr     	lda sprspace+sp_l0bm_state, x
000CE4r 3  D0 2A        	bne @state_Falling
000CE6r 3               
000CE6r 3               	; idle state. Check if the player has approached this entity's position
000CE6r 3  A5 rr        	lda player_x
000CE8r 3  18           	clc
000CE9r 3  65 rr        	adc camera_x
000CEBr 3  85 rr        	sta temp5
000CEDr 3               
000CEDr 3  A5 rr        	lda camera_x_pg
000CEFr 3  69 00        	adc #0
000CF1r 3  85 rr        	sta temp6
000CF3r 3               
000CF3r 3               	; check if that X position exceeds the bridge manager's
000CF3r 3  A5 rr        	lda temp6
000CF5r 3  DD rr rr     	cmp sprspace+sp_x_pg, x
000CF8r 3               
000CF8r 3  90 13        	bcc @noFallInit   ; player X <<< bman X
000CFAr 3  D0 07        	bne @forceFall    ; player X >>> bman X
000CFCr 3               
000CFCr 3  A5 rr        	lda temp5
000CFEr 3  DD rr rr     	cmp sprspace+sp_x, x
000D01r 3  90 0A        	bcc @noFallInit
000D03r 3               
000D03r 3               @forceFall:
000D03r 3               	; start falling immediately
000D03r 3  A9 01        	lda #1
000D05r 3  9D rr rr     	sta sprspace+sp_l0bm_state, x
000D08r 3  A9 14        	lda #20
000D0Ar 3  9D rr rr     	sta sprspace+sp_l0bm_timer, x
000D0Dr 3               
000D0Dr 3               @noFallInit:
000D0Dr 3  A9 00        	lda #0
000D0Fr 3  60           	rts
000D10r 3               	;jmp @drawSprite
000D10r 3               
000D10r 3               @state_Falling:
000D10r 3               	; Falling state. If the timer is zero, determine which block to fall, and
000D10r 3               	; make it fall.
000D10r 3               
000D10r 3               	; if player somehow outruns the default rhythm, just set the timer to zero.
000D10r 3  BD rr rr     	lda sprspace+sp_l0bm_blidx, x
000D13r 3  0A           	asl
000D14r 3  0A           	asl
000D15r 3  0A           	asl
000D16r 3  18           	clc
000D17r 3  7D rr rr     	adc sprspace+sp_x, x
000D1Ar 3  85 rr        	sta temp7
000D1Cr 3               
000D1Cr 3  BD rr rr     	lda sprspace+sp_x_pg, x
000D1Fr 3  69 00        	adc #0
000D21r 3  85 rr        	sta temp8
000D23r 3               
000D23r 3  A9 18        	lda #24
000D25r 3  65 rr        	adc temp7
000D27r 3  85 rr        	sta temp7
000D29r 3  90 02        	bcc :+
000D2Br 3  E6 rr        	inc temp8
000D2Dr 3               
000D2Dr 3  A5 rr        :	lda player_x
000D2Fr 3  18           	clc
000D30r 3  65 rr        	adc camera_x
000D32r 3  85 rr        	sta temp5
000D34r 3               
000D34r 3  A5 rr        	lda camera_x_pg
000D36r 3  69 00        	adc #0
000D38r 3  85 rr        	sta temp6
000D3Ar 3               
000D3Ar 3  A5 rr        	lda temp6
000D3Cr 3  30 11        	bmi @noSpeedUp
000D3Er 3  C5 rr        	cmp temp8
000D40r 3               
000D40r 3  90 0D        	bcc @noSpeedUp
000D42r 3  D0 06        	bne @forceNow
000D44r 3               
000D44r 3  A5 rr        	lda temp5
000D46r 3  C5 rr        	cmp temp7
000D48r 3  90 05        	bcc @noSpeedUp
000D4Ar 3               
000D4Ar 3               @forceNow:
000D4Ar 3  A9 01        	lda #1
000D4Cr 3  9D rr rr     	sta sprspace+sp_l0bm_timer, x
000D4Fr 3               
000D4Fr 3               @noSpeedUp:
000D4Fr 3  DE rr rr     	dec sprspace+sp_l0bm_timer, x
000D52r 3  D0 74        	bne @returnEarly
000D54r 3               	;bne @drawSprite_Bne
000D54r 3               
000D54r 3               	; falling !
000D54r 3  BD rr rr     	lda sprspace+sp_x_pg, x
000D57r 3  4A           	lsr                      ; shift bit 1 in the carry
000D58r 3  BD rr rr     	lda sprspace+sp_x, x
000D5Br 3  6A           	ror                      ; shift sp_x right by 1, and shift the carry in
000D5Cr 3  4A           	lsr
000D5Dr 3  4A           	lsr                      ; finish the division by eight
000D5Er 3               
000D5Er 3               	; OK. Now load the block index to overwrite
000D5Er 3  18           	clc
000D5Fr 3  7D rr rr     	adc sprspace+sp_l0bm_blidx, x
000D62r 3  85 rr        	sta temp2
000D64r 3               
000D64r 3  BC rr rr     	ldy sprspace+sp_l0bm_blidx, x
000D67r 3  B9 rr rr     	lda l0bm_block_widths, y
000D6Ar 3  85 rr        	sta temp8
000D6Cr 3  85 rr        	sta clearsizex
000D6Er 3  A9 08        	lda #8
000D70r 3  85 rr        	sta clearsizey
000D72r 3               
000D72r 3  BD rr rr     	lda sprspace+sp_y, x
000D75r 3  4A           	lsr
000D76r 3  4A           	lsr
000D77r 3  4A           	lsr
000D78r 3  85 rr        	sta temp3
000D7Ar 3               
000D7Ar 3               	; check if a clear is already enqueued.
000D7Ar 3  A9 08        	lda #nc_clearenq
000D7Cr 3  24 rr        	bit nmictrl
000D7Er 3  F0 05        	beq :+
000D80r 3               
000D80r 3               	; clear is already enqueued. Simply wait one more frame
000D80r 3  FE rr rr     	inc sprspace+sp_l0bm_timer, x
000D83r 3  D0 43        	bne @returnEarly
000D85r 3               	;bne @drawSprite_Bne
000D85r 3               
000D85r 3  05 rr        :	ora gamectrl2
000D87r 3  85 rr        	sta gamectrl2
000D89r 3               
000D89r 3  20 rr rr     	jsr h_calcppuaddr
000D8Cr 3               
000D8Cr 3               	; clear the tiles
000D8Cr 3  A2 00        	ldx #0
000D8Er 3               @loop:
000D8Er 3  86 rr        	stx temp7
000D90r 3               
000D90r 3  A4 rr        	ldy temp3
000D92r 3  A6 rr        	ldx temp2
000D94r 3  20 rr rr     	jsr h_comp_addr
000D97r 3  E8           	inx
000D98r 3  86 rr        	stx temp2
000D9Ar 3               
000D9Ar 3  A2 03        	ldx #3
000D9Cr 3  A9 00        	lda #0
000D9Er 3  91 rr        :	sta (lvladdr), y
000DA0r 3  C8           	iny
000DA1r 3  CA           	dex
000DA2r 3  D0 FA        	bne :-
000DA4r 3               
000DA4r 3  A6 rr        	ldx temp7
000DA6r 3  E8           	inx
000DA7r 3  E4 rr        	cpx temp8
000DA9r 3  D0 E3        	bne @loop
000DABr 3               
000DABr 3  A6 rr        	ldx temp1
000DADr 3               
000DADr 3               	; done. Now advance and set a timer
000DADr 3  A9 14        	lda #20
000DAFr 3  9D rr rr     	sta sprspace+sp_l0bm_timer, x
000DB2r 3               
000DB2r 3  BC rr rr     	ldy sprspace+sp_l0bm_blidx, x
000DB5r 3  B9 rr rr     	lda l0bm_block_widths, y
000DB8r 3               
000DB8r 3  18           	clc
000DB9r 3  7D rr rr     	adc sprspace+sp_l0bm_blidx, x
000DBCr 3  9D rr rr     	sta sprspace+sp_l0bm_blidx, x
000DBFr 3               
000DBFr 3  C9 0D        	cmp #13   ; the maximum tile index
000DC1r 3  90 05        	bcc @returnEarly
000DC3r 3               
000DC3r 3               	; ok. so despawn the Entity
000DC3r 3  A9 00        	lda #0
000DC5r 3  9D rr rr     	sta sprspace+sp_kind, x
000DC8r 3               
000DC8r 3               @returnEarly:
000DC8r 3  60           	rts
000DC9r 3               
000DC9r 3               ;@drawSprite_Bne:
000DC9r 3               ;	bne @drawSprite
000DC9r 3               
000DC9r 3               ;@drawSprite:
000DC9r 3               ;	sta temp5
000DC9r 3               ;	sta temp8
000DC9r 3               ;	lda #$F4
000DC9r 3               ;	sta temp6
000DC9r 3               ;	lda #$F6
000DC9r 3               ;	sta temp7
000DC9r 3               ;	jmp gm_draw_common
000DC9r 3               
000DC9r 3               l0bm_block_widths:
000DC9r 3  02 00 01 01  	.byte 2,0,1,1,1,1,1,1,1,1,2,0,1
000DCDr 3  01 01 01 01  
000DD1r 3  01 01 02 00  
000DD6r 3               l0bs_sprites:
000DD6r 3  10 12 24 26  	.byte $10,$12,$24,$26,$28,$2A,$3C,$7E,$BE,$24,$D0,$E0,$F0
000DDAr 3  28 2A 3C 7E  
000DDEr 3  BE 24 D0 E0  
000DE3r 3               
000DE3r 3               ; ** ENTITY: level0_intro_crusher
000DE3r 3               ; desc: The intro crusher from the Prologue.
000DE3r 3               ;       Draws itself in two halves which alternate their order every frame.
000DE3r 3               ;       This way, at least some of the crusher is visible even if the
000DE3r 3               ;       player is horizontally adjacent.
000DE3r 3               l0ic_dormant  = $00
000DE3r 3               l0ic_shaking  = $01
000DE3r 3               l0ic_falling  = $02
000DE3r 3               l0ic_fallen   = $03
000DE3r 3               
000DE3r 3               l0ic_maxy        = 120
000DE3r 3               l0ic_defshaketmr = (256 - 20)
000DE3r 3               l0ic_palette     = $2
000DE3r 3               
000DE3r 3               level0_intro_crusher:
000DE3r 3  A9 00        	lda #0
000DE5r 3  85 rr        	sta temp7
000DE7r 3  A6 rr        	ldx temp1
000DE9r 3               
000DE9r 3               	; This sprite is collidable at all times.
000DE9r 3  A9 01        	lda #ef_collidable
000DEBr 3  1D rr rr     	ora sprspace+sp_flags, x
000DEEr 3  9D rr rr     	sta sprspace+sp_flags, x
000DF1r 3               
000DF1r 3  A9 38        	lda #56
000DF3r 3  9D rr rr     	sta sprspace+sp_wid, x
000DF6r 3  A9 20        	lda #32
000DF8r 3  9D rr rr     	sta sprspace+sp_hei, x
000DFBr 3               
000DFBr 3  BD rr rr     	lda sprspace+sp_l0ic_state, x
000DFEr 3               	; cmp #1
000DFEr 3               	; bne @returnEarly
000DFEr 3  85 rr        	sta temp6 ; TEMP
000E00r 3               
000E00r 3  C9 00        	cmp #l0ic_dormant
000E02r 3  D0 26        	bne @notDormant
000E04r 3               
000E04r 3               	; Is dormant
000E04r 3  A5 rr        	lda player_x
000E06r 3  38           	sec
000E07r 3  E9 1E        	sbc #30
000E09r 3  90 1F        	bcc @notDormant
000E0Br 3  C5 rr        	cmp temp2
000E0Dr 3  90 1A        	bcc @returnEarly
000E0Fr 3               
000E0Fr 3               	; trigger a fall.
000E0Fr 3  FE rr rr     	inc sprspace+sp_l0ic_state, x
000E12r 3  A9 EC        	lda #l0ic_defshaketmr
000E14r 3  9D rr rr     	sta sprspace+sp_l0ic_timer, x
000E17r 3               
000E17r 3  A5 rr        	lda temp2
000E19r 3  48           	pha
000E1Ar 3  A5 rr        	lda temp3
000E1Cr 3  48           	pha
000E1Dr 3  20 rr rr     	jsr @clearTilesForIC
000E20r 3  68           	pla
000E21r 3  85 rr        	sta temp3
000E23r 3  68           	pla
000E24r 3  85 rr        	sta temp2
000E26r 3               
000E26r 3  4C rr rr     	jmp @drawSprite
000E29r 3               
000E29r 3               @returnEarly:
000E29r 3  60           	rts
000E2Ar 3               
000E2Ar 3               @notDormant:
000E2Ar 3  C9 01        	cmp #l0ic_shaking
000E2Cr 3  D0 26        	bne @notShaking
000E2Er 3               
000E2Er 3  BD rr rr     	lda sprspace+sp_l0ic_timer, x
000E31r 3  D0 10        	bne @doShake
000E33r 3               
000E33r 3               	; sprite timer hit 0! time to fall!!
000E33r 3  FE rr rr     	inc sprspace+sp_l0ic_state, x
000E36r 3  A9 00        	lda #0
000E38r 3  9D rr rr     	sta sprspace+sp_y_lo, x
000E3Br 3  9D rr rr     	sta sprspace+sp_l0ic_vel_y, x
000E3Er 3  9D rr rr     	sta sprspace+sp_l0ic_vsu_y, x
000E41r 3               
000E41r 3  D0 55        	bne @drawSprite
000E43r 3               
000E43r 3               @doShake:
000E43r 3  BD rr rr     	lda sprspace+sp_l0ic_timer, x
000E46r 3  29 03        	and #3
000E48r 3  A8           	tay
000E49r 3  B9 rr rr     	lda l0ic_shake_table, y
000E4Cr 3  18           	clc
000E4Dr 3  65 rr        	adc temp2
000E4Fr 3  85 rr        	sta temp2
000E51r 3  4C rr rr     	jmp @drawSprite
000E54r 3               
000E54r 3               @notShaking:
000E54r 3  C9 02        	cmp #l0ic_falling
000E56r 3  D0 3F        	bne @notFalling
000E58r 3               
000E58r 3               	; is falling
000E58r 3               	; accelerate
000E58r 3  18           	clc
000E59r 3  BD rr rr     	lda sprspace+sp_l0ic_vsu_y, x
000E5Cr 3  69 20        	adc #$20
000E5Er 3  9D rr rr     	sta sprspace+sp_l0ic_vsu_y, x
000E61r 3  90 03        	bcc :+
000E63r 3  FE rr rr     	inc sprspace+sp_l0ic_vel_y, x
000E66r 3               
000E66r 3               	; pull
000E66r 3  A5 rr        :	lda temp1
000E68r 3  48           	pha
000E69r 3  A5 rr        	lda temp2
000E6Br 3  48           	pha
000E6Cr 3  A5 rr        	lda temp3
000E6Er 3  48           	pha
000E6Fr 3               
000E6Fr 3  8A           	txa
000E70r 3  A8           	tay
000E71r 3  20 rr rr     	jsr gm_ent_move_y
000E74r 3               
000E74r 3  68           	pla
000E75r 3  85 rr        	sta temp3
000E77r 3  68           	pla
000E78r 3  85 rr        	sta temp2
000E7Ar 3  68           	pla
000E7Br 3  85 rr        	sta temp1
000E7Dr 3               
000E7Dr 3  A6 rr        	ldx temp1
000E7Fr 3  BD rr rr     	lda sprspace+sp_y, x
000E82r 3  C9 78        	cmp #l0ic_maxy
000E84r 3  90 12        	bcc @drawSprite
000E86r 3               
000E86r 3               	; has fallen
000E86r 3  A9 78        	lda #l0ic_maxy
000E88r 3  9D rr rr     	sta sprspace+sp_y, x
000E8Br 3  FE rr rr     	inc sprspace+sp_l0ic_state, x
000E8Er 3               
000E8Er 3  A9 07        	lda #$7
000E90r 3  85 rr        	sta quakeflags
000E92r 3  85 rr        	sta quaketimer
000E94r 3               
000E94r 3  20 rr rr     	jsr @setTilesForIC
000E97r 3               
000E97r 3               @notFalling:
000E97r 3               	; Is fallen
000E97r 3  60           	rts
000E98r 3               
000E98r 3               @drawSprite:
000E98r 3  FE rr rr     	inc sprspace+sp_l0ic_timer, x
000E9Br 3  BD rr rr     	lda sprspace+sp_l0ic_timer, x
000E9Er 3  29 01        	and #1
000EA0r 3  D0 07        	bne @drawFirstHalfFirst
000EA2r 3               	; draw second half first.
000EA2r 3  20 rr rr     	jsr @secondHalf
000EA5r 3  20 rr rr     	jsr @firstHalf
000EA8r 3  60           	rts
000EA9r 3               @drawFirstHalfFirst:
000EA9r 3               	; draw first half first.
000EA9r 3  20 rr rr     	jsr @firstHalf
000EACr 3  20 rr rr     	jsr @secondHalf
000EAFr 3  60           	rts
000EB0r 3               
000EB0r 3               ; Draws the first half.
000EB0r 3               @firstHalf:
000EB0r 3  20 rr rr     	jsr @firstHalfUp
000EB3r 3  20 rr rr     	jsr @firstHalfDown
000EB6r 3  60           	rts
000EB7r 3               
000EB7r 3               @secondHalf:
000EB7r 3  20 rr rr     	jsr @secondHalfUp
000EBAr 3  20 rr rr     	jsr @secondHalfDown
000EBDr 3  60           	rts
000EBEr 3               
000EBEr 3               @firstHalfUp:
000EBEr 3  A5 rr        	lda temp2
000EC0r 3  85 rr        	sta x_crd_temp
000EC2r 3  A5 rr        	lda temp3
000EC4r 3  85 rr        	sta y_crd_temp
000EC6r 3               
000EC6r 3  A0 00        	ldy #0
000EC8r 3  84 rr        :	sty temp5
000ECAr 3  B9 rr rr     	lda l0ic_dataFHU, y
000ECDr 3  A8           	tay
000ECEr 3  A9 02        	lda #l0ic_palette
000ED0r 3  20 rr rr     	jsr oam_putsprite
000ED3r 3               
000ED3r 3  20 rr rr     	jsr @incrementX
000ED6r 3  B0 07        	bcs @return_fhu
000ED8r 3               
000ED8r 3  A4 rr        	ldy temp5
000EDAr 3  C8           	iny
000EDBr 3  C0 04        	cpy #4
000EDDr 3  D0 E9        	bne :-
000EDFr 3               
000EDFr 3               @return_fhu:
000EDFr 3  60           	rts
000EE0r 3               
000EE0r 3               @firstHalfDown:
000EE0r 3  A5 rr        	lda temp2
000EE2r 3  85 rr        	sta x_crd_temp
000EE4r 3  A5 rr        	lda temp3
000EE6r 3  18           	clc
000EE7r 3  69 10        	adc #16
000EE9r 3  85 rr        	sta y_crd_temp
000EEBr 3  B0 19        	bcs @return_fhd
000EEDr 3               
000EEDr 3  A0 00        	ldy #0
000EEFr 3  84 rr        :	sty temp5
000EF1r 3  B9 rr rr     	lda l0ic_dataFHD, y
000EF4r 3  A8           	tay
000EF5r 3  A9 02        	lda #l0ic_palette
000EF7r 3  20 rr rr     	jsr oam_putsprite
000EFAr 3               
000EFAr 3  20 rr rr     	jsr @incrementX
000EFDr 3  B0 07        	bcs @return_fhd
000EFFr 3               
000EFFr 3  A4 rr        	ldy temp5
000F01r 3  C8           	iny
000F02r 3  C0 04        	cpy #4
000F04r 3  D0 E9        	bne :-
000F06r 3               
000F06r 3               @return_fhd:
000F06r 3  60           	rts
000F07r 3               
000F07r 3               @secondHalfUp:
000F07r 3  A5 rr        	lda temp2
000F09r 3  18           	clc
000F0Ar 3  69 20        	adc #32
000F0Cr 3  85 rr        	sta x_crd_temp
000F0Er 3  B0 1D        	bcs @return_shu
000F10r 3  A5 rr        	lda temp3
000F12r 3  85 rr        	sta y_crd_temp
000F14r 3               
000F14r 3  A0 00        	ldy #0
000F16r 3  84 rr        :	sty temp5
000F18r 3  B9 rr rr     	lda l0ic_dataSHU, y
000F1Br 3  A8           	tay
000F1Cr 3  A9 02        	lda #l0ic_palette
000F1Er 3  20 rr rr     	jsr oam_putsprite
000F21r 3               
000F21r 3  20 rr rr     	jsr @incrementX
000F24r 3  B0 07        	bcs @return_shu
000F26r 3               
000F26r 3  A4 rr        	ldy temp5
000F28r 3  C8           	iny
000F29r 3  C0 03        	cpy #3
000F2Br 3  D0 E9        	bne :-
000F2Dr 3               
000F2Dr 3               @return_shu:
000F2Dr 3  60           	rts
000F2Er 3               
000F2Er 3               @secondHalfDown:
000F2Er 3  A5 rr        	lda temp2
000F30r 3  18           	clc
000F31r 3  69 20        	adc #32
000F33r 3  85 rr        	sta x_crd_temp
000F35r 3  B0 22        	bcs @return_shd
000F37r 3  A5 rr        	lda temp3
000F39r 3  18           	clc
000F3Ar 3  69 10        	adc #16
000F3Cr 3  85 rr        	sta y_crd_temp
000F3Er 3  B0 19        	bcs @return_shd
000F40r 3               
000F40r 3  A0 00        	ldy #0
000F42r 3  84 rr        :	sty temp5
000F44r 3  B9 rr rr     	lda l0ic_dataSHD, y
000F47r 3  A8           	tay
000F48r 3  A9 02        	lda #l0ic_palette
000F4Ar 3  20 rr rr     	jsr oam_putsprite
000F4Dr 3               
000F4Dr 3  20 rr rr     	jsr @incrementX
000F50r 3  B0 07        	bcs @return_shd
000F52r 3               
000F52r 3  A4 rr        	ldy temp5
000F54r 3  C8           	iny
000F55r 3  C0 03        	cpy #3
000F57r 3  D0 E9        	bne :-
000F59r 3               
000F59r 3               @return_shd:
000F59r 3  60           	rts
000F5Ar 3               
000F5Ar 3               @incrementX:
000F5Ar 3  A5 rr        	lda x_crd_temp
000F5Cr 3  18           	clc
000F5Dr 3  69 08        	adc #8
000F5Fr 3  85 rr        	sta x_crd_temp
000F61r 3  60           	rts
000F62r 3               
000F62r 3               @clearTilesForIC:
000F62r 3               	; Set the flags that will clear the crusher's nametable visually.
000F62r 3  86 rr        	stx l0crshidx
000F64r 3               
000F64r 3               	; Enqueue a clear for the size of the intro crusher..
000F64r 3  A9 08        	lda #nc_clearenq
000F66r 3  05 rr        	ora nmictrl
000F68r 3  85 rr        	sta nmictrl
000F6Ar 3               
000F6Ar 3  A9 07        	lda #7
000F6Cr 3  85 rr        	sta clearsizex
000F6Er 3  A9 04        	lda #4
000F70r 3  85 rr        	sta clearsizey
000F72r 3               
000F72r 3               	; Initiate the clearing process.
000F72r 3  20 rr rr     	jsr level0_ic_calcpos ; calculate tile pos in (temp2, temp3)
000F75r 3  20 rr rr     	jsr h_calcppuaddr     ; use said tile pos to prepare for the g2_clrcru NMI.
000F78r 3               
000F78r 3  A2 00        	ldx #0
000F7Ar 3               @loop:
000F7Ar 3  86 rr        	stx temp4
000F7Cr 3               
000F7Cr 3  A4 rr        	ldy temp3
000F7Er 3  A6 rr        	ldx temp2
000F80r 3  20 rr rr     	jsr h_comp_addr
000F83r 3  E8           	inx
000F84r 3  86 rr        	stx temp2
000F86r 3               
000F86r 3  A2 04        	ldx #4
000F88r 3  A9 00        	lda #0
000F8Ar 3  91 rr        :	sta (lvladdr), y
000F8Cr 3  C8           	iny
000F8Dr 3  CA           	dex
000F8Er 3  D0 FA        	bne :-
000F90r 3               
000F90r 3  A6 rr        	ldx temp4
000F92r 3  E8           	inx
000F93r 3  E0 07        	cpx #7
000F95r 3  D0 E3        	bne @loop
000F97r 3               
000F97r 3               	; need to restore X since we proceed to use it after calling this func
000F97r 3  A6 rr        	ldx l0crshidx
000F99r 3               
000F99r 3  60           	rts
000F9Ar 3               
000F9Ar 3               @setTilesForIC:
000F9Ar 3               	; Set the flags that will clear the crusher's nametable visually.
000F9Ar 3  86 rr        	stx l0crshidx
000F9Cr 3               
000F9Cr 3  A9 02        	lda #nc2_setl0ic
000F9Er 3  05 rr        	ora nmictrl2
000FA0r 3  85 rr        	sta nmictrl2
000FA2r 3               
000FA2r 3               	; Initiate the setting process.
000FA2r 3  20 rr rr     	jsr level0_ic_calcpos ; calculate tile pos in (temp2, temp3)
000FA5r 3  20 rr rr     	jsr h_calcppuaddr     ; use said tile pos to prepare for the n2_setl0ic NMI.
000FA8r 3               
000FA8r 3  A2 00        	ldx #0
000FAAr 3  86 rr        	stx temp6
000FACr 3               @loop1:
000FACr 3  86 rr        	stx temp4
000FAEr 3               
000FAEr 3  A4 rr        	ldy temp3
000FB0r 3  A6 rr        	ldx temp2
000FB2r 3  20 rr rr     	jsr h_comp_addr
000FB5r 3  E8           	inx
000FB6r 3  86 rr        	stx temp2
000FB8r 3               
000FB8r 3  A9 01        	lda #1
000FBAr 3  A2 04        	ldx #4
000FBCr 3  91 rr        :	sta (lvladdr), y
000FBEr 3  C8           	iny
000FBFr 3  CA           	dex
000FC0r 3  D0 FA        	bne :-
000FC2r 3               
000FC2r 3  A6 rr        	ldx temp4
000FC4r 3  E8           	inx
000FC5r 3  E0 07        	cpx #7
000FC7r 3  D0 E3        	bne @loop1
000FC9r 3               
000FC9r 3               	; no need to restore X as there's a return immediately after
000FC9r 3               
000FC9r 3  60           	rts
000FCAr 3               
000FCAr 3               ; ** SUBROUTINE: level0_ic_calcpos
000FCAr 3               ; desc: Calculates the tile position of the IntroCrusher into [temp2, temp3].
000FCAr 3               level0_ic_calcpos:
000FCAr 3               	; Initiate the setting process.
000FCAr 3  BD rr rr     	lda sprspace + sp_y, x
000FCDr 3  4A           	lsr
000FCEr 3  4A           	lsr
000FCFr 3  4A           	lsr
000FD0r 3  85 rr        	sta temp3
000FD2r 3  A8           	tay
000FD3r 3               
000FD3r 3  BD rr rr     	lda sprspace + sp_x_pg, x
000FD6r 3  6A           	ror
000FD7r 3  6A           	ror
000FD8r 3  6A           	ror
000FD9r 3  6A           	ror
000FDAr 3  29 20        	and #%00100000
000FDCr 3  85 rr        	sta temp2
000FDEr 3               
000FDEr 3  BD rr rr     	lda sprspace + sp_x, x
000FE1r 3  4A           	lsr
000FE2r 3  4A           	lsr
000FE3r 3  4A           	lsr
000FE4r 3  05 rr        	ora temp2
000FE6r 3  85 rr        	sta temp2
000FE8r 3               
000FE8r 3  60           	rts
000FE9r 3               
000FE9r 3  81 89 8B 8D  l0ic_dataFHU:	.byte $81, $89, $8B, $8D
000FEDr 3  83 8F 91 93  l0ic_dataFHD:	.byte $83, $8F, $91, $93
000FF1r 3  8D 89 85     l0ic_dataSHU:	.byte $8D, $89, $85
000FF4r 3  8F 93 87     l0ic_dataSHD:	.byte $8F, $93, $87
000FF7r 3  01 00 FF 00  l0ic_shake_table:	.byte $01, $00, $FF, $00
000FFBr 3               
000FFBr 3               l0ic_chardata:
000FFBr 3  80 88 8A 8C  	.byte $80,$88,$8A,$8C,$8C,$88,$84
000FFFr 3  8C 88 84     
001002r 3  81 89 8B 8D  	.byte $81,$89,$8B,$8D,$8D,$89,$85
001006r 3  8D 89 85     
001009r 3  82 8E 90 92  	.byte $82,$8E,$90,$92,$99,$92,$86
00100Dr 3  99 92 86     
001010r 3  83 8F 91 93  	.byte $83,$8F,$91,$93,$8F,$93,$87
001014r 3  8F 93 87     
001017r 3               
001017r 2               .include "music.asm"
001017r 3               ; Copyright (C) 2024 iProgramInCpp
001017r 3               
001017r 3               .include "testmusic.asm"
001017r 4               ; This file is for the FamiStudio Sound Engine and was generated by FamiStudio
001017r 4               
001017r 4               .if FAMISTUDIO_CFG_C_BINDINGS
001017r 4               .export _music_data_prologue=music_data_prologue
001017r 4               .endif
001017r 4               
001017r 4               music_data_prologue:
001017r 4  02           	.byte 2
001018r 4  rr rr        	.word @instruments
00101Ar 4  rr rr        	.word @samples-4
00101Cr 4               ; 00 : intro_loop
00101Cr 4  rr rr        	.word @song0ch0
00101Er 4  rr rr        	.word @song0ch1
001020r 4  rr rr        	.word @song0ch2
001022r 4  rr rr        	.word @song0ch3
001024r 4  rr rr        	.word @song0ch4
001026r 4  33 01 00 01  	.word 307,256
00102Ar 4               ; 01 : bridge_oneshot
00102Ar 4  rr rr        	.word @song1ch0
00102Cr 4  rr rr        	.word @song1ch1
00102Er 4  rr rr        	.word @song1ch2
001030r 4  rr rr        	.word @song1ch3
001032r 4  rr rr        	.word @song1ch4
001034r 4  33 01 00 01  	.word 307,256
001038r 4               
001038r 4               .export music_data_prologue
001038r 4               .global FAMISTUDIO_DPCM_PTR
001038r 4               
001038r 4               @instruments:
001038r 4  rr rr rr rr  	.word @env1,@env2,@env6,@env0 ; 00 : Piano
00103Cr 4  rr rr rr rr  
001040r 4  rr rr rr rr  	.word @env3,@env2,@env7,@env0 ; 01 : Piano 1
001044r 4  rr rr rr rr  
001048r 4  rr rr rr rr  	.word @env4,@env2,@env6,@env0 ; 02 : BassPiano
00104Cr 4  rr rr rr rr  
001050r 4  rr rr rr rr  	.word @env8,@env2,@env5,@env0 ; 03 : Percussion
001054r 4  rr rr rr rr  
001058r 4  rr rr rr rr  	.word @env9,@env2,@env5,@env0 ; 04 : Instrument 1
00105Cr 4  rr rr rr rr  
001060r 4               
001060r 4               @env0:
001060r 4  00 C0 7F 00  	.byte $00,$c0,$7f,$00,$02
001064r 4  02           
001065r 4               @env1:
001065r 4  00 CC CE CF  	.byte $00,$cc,$ce,$cf,$cd,$cb,$c9,$c8,$c7,$c6,$c5,$c4,$c3,$c2,$c1,$00,$0e
001069r 4  CD CB C9 C8  
00106Dr 4  C7 C6 C5 C4  
001076r 4               @env2:
001076r 4  C0 7F 00 01  	.byte $c0,$7f,$00,$01
00107Ar 4               @env3:
00107Ar 4  00 CF CF CE  	.byte $00,$cf,$cf,$ce,$cc,$ca,$c8,$c7,$c5,$c4,$c3,$c2,$c1,$00,$0c
00107Er 4  CC CA C8 C7  
001082r 4  C5 C4 C3 C2  
001089r 4               @env4:
001089r 4  00 CE CD CC  	.byte $00,$ce,$cd,$cc,$ca,$c9,$c8,$c7,$c6,$c5,$c4,$c3,$c2,$c0,$00,$0d
00108Dr 4  CA C9 C8 C7  
001091r 4  C6 C5 C4 C3  
001099r 4               @env5:
001099r 4  7F 00 00     	.byte $7f,$00,$00
00109Cr 4               @env6:
00109Cr 4  C2 7F 00 00  	.byte $c2,$7f,$00,$00
0010A0r 4               @env7:
0010A0r 4  C1 7F 00 00  	.byte $c1,$7f,$00,$00
0010A4r 4               @env8:
0010A4r 4  00 CF CB C8  	.byte $00,$cf,$cb,$c8,$c5,$c3,$c2,$c1,$c0,$00,$08
0010A8r 4  C5 C3 C2 C1  
0010ACr 4  C0 00 08     
0010AFr 4               @env9:
0010AFr 4  00 CF CF CE  	.byte $00,$cf,$cf,$ce,$ce,$cd,$cd,$cc,$02,$cb,$02,$ca,$02,$c9,$04,$c8,$03,$c7,$04,$c6,$06,$c5,$05,$c4,$06,$c3,$05,$c2,$07,$c1,$16,$c0,$00,$1f
0010B3r 4  CE CD CD CC  
0010B7r 4  02 CB 02 CA  
0010D1r 4               
0010D1r 4               @samples:
0010D1r 4               
0010D1r 4               @song0ch0:
0010D1r 4  46 01 80 29  	.byte $46, $01, $80, $29, $bd, $30, $bd, $37, $bd, $35, $bd, $bf, $3c, $ff, $bd, $ff, $00, $fd
0010D5r 4  BD 30 BD 37  
0010D9r 4  BD 35 BD BF  
0010E3r 4               @song0ch0loop:
0010E3r 4               @song0ref20:
0010E3r 4  FF 27 BD 30  	.byte $ff, $27, $bd, $30, $bd, $37, $bd, $35, $fd, $3c, $bd, $ff, $ff, $00, $ff, $fd, $29, $bd, $30, $bd, $37, $bd, $35, $bd
0010E7r 4  BD 37 BD 35  
0010EBr 4  FD 3C BD FF  
0010FBr 4  BF 3C FF BD  	.byte $bf, $3c, $ff, $bd, $ff, $00, $fd
0010FFr 4  FF 00 FD     
001102r 4  41 1F        	.byte $41, $1f
001104r 4  rr rr        	.word @song0ref20
001106r 4  41 1F        	.byte $41, $1f
001108r 4  rr rr        	.word @song0ref20
00110Ar 4  42           	.byte $42
00110Br 4  rr rr        	.word @song0ch0loop
00110Dr 4               @song0ch1:
00110Dr 4  FF FF FF FF  	.byte $ff, $ff, $ff, $ff, $ff, $82, $39, $bd, $00, $bd
001111r 4  FF 82 39 BD  
001115r 4  00 BD        
001117r 4               @song0ch1loop:
001117r 4  37 BD 35 BD  	.byte $37, $bd, $35, $bd, $33, $bd, $00, $bd, $ff, $ff, $ff, $ff, $35, $bd, $37, $bd, $39, $bd, $3a, $bd, $3c, $9d, $00, $ff
00111Br 4  33 BD 00 BD  
00111Fr 4  FF FF FF FF  
00112Fr 4  DD FF FF FF  	.byte $dd, $ff, $ff, $ff, $ff, $40, $4d, $fd, $3f, $9d, $00, $dd, $ff, $ff, $ff, $ff, $ff, $3e, $bd, $3a, $bd, $3c, $9d, $00
001133r 4  FF 40 4D FD  
001137r 4  3F 9D 00 DD  
001147r 4  FF DD FF FF  	.byte $ff, $dd, $ff, $ff, $ff, $35, $bd, $37, $bd, $39, $bd, $3a, $bd, $37, $9d, $00, $dd, $ff, $ff, $ff, $ff, $ff, $35, $bd
00114Br 4  FF 35 BD 37  
00114Fr 4  BD 39 BD 3A  
00115Fr 4  00 BD 35 9D  	.byte $00, $bd, $35, $9d, $00, $ff, $dd, $ff, $ff, $ff, $39, $bd, $00, $bd, $42
001163r 4  00 FF DD FF  
001167r 4  FF FF 39 BD  
00116Er 4  rr rr        	.word @song0ch1loop
001170r 4               @song0ch2:
001170r 4  FF FF FF FF  	.byte $ff, $ff, $ff, $ff, $ff, $ff
001174r 4  FF FF        
001176r 4               @song0ch2loop:
001176r 4               @song0ref167:
001176r 4  FF FF FF FF  	.byte $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff, $ff
00117Ar 4  FF FF FF FF  
00117Er 4  FF FF FF FF  
00118Br 4  41 15        	.byte $41, $15
00118Dr 4  rr rr        	.word @song0ref167
00118Fr 4  42           	.byte $42
001190r 4  rr rr        	.word @song0ch2loop
001192r 4               @song0ch3:
001192r 4  FF FF FF FF  	.byte $ff, $ff, $ff, $ff, $ff, $ff
001196r 4  FF FF        
001198r 4               @song0ch3loop:
001198r 4  41 15        	.byte $41, $15
00119Ar 4  rr rr        	.word @song0ref167
00119Cr 4  41 15        	.byte $41, $15
00119Er 4  rr rr        	.word @song0ref167
0011A0r 4  42           	.byte $42
0011A1r 4  rr rr        	.word @song0ch3loop
0011A3r 4               @song0ch4:
0011A3r 4  FF FF FF FF  	.byte $ff, $ff, $ff, $ff, $ff, $ff
0011A7r 4  FF FF        
0011A9r 4               @song0ch4loop:
0011A9r 4  41 15        	.byte $41, $15
0011ABr 4  rr rr        	.word @song0ref167
0011ADr 4  41 15        	.byte $41, $15
0011AFr 4  rr rr        	.word @song0ref167
0011B1r 4  42           	.byte $42
0011B2r 4  rr rr        	.word @song0ch4loop
0011B4r 4               @song1ch0:
0011B4r 4  46 01        	.byte $46, $01
0011B6r 4               @song1ch0loop:
0011B6r 4  80           	.byte $80
0011B7r 4               @song1ref5:
0011B7r 4  29 8B 30 8B  	.byte $29, $8b, $30, $8b, $35, $8b, $37, $8b, $29, $8b, $30, $8b, $35, $8b, $37, $8b
0011BBr 4  35 8B 37 8B  
0011BFr 4  29 8B 30 8B  
0011C7r 4  41 10        	.byte $41, $10
0011C9r 4  rr rr        	.word @song1ref5
0011CBr 4               @song1ref24:
0011CBr 4  2C 8B 30 8B  	.byte $2c, $8b, $30, $8b, $35, $8b, $37, $8b, $2c, $8b, $30, $8b, $35, $8b, $37, $8b
0011CFr 4  35 8B 37 8B  
0011D3r 4  2C 8B 30 8B  
0011DBr 4  41 10        	.byte $41, $10
0011DDr 4  rr rr        	.word @song1ref24
0011DFr 4               @song1ref43:
0011DFr 4  2E 8B 30 8B  	.byte $2e, $8b, $30, $8b, $35, $8b, $37, $8b, $2e, $8b, $30, $8b, $35, $8b, $37, $8b
0011E3r 4  35 8B 37 8B  
0011E7r 4  2E 8B 30 8B  
0011EFr 4  41 10        	.byte $41, $10
0011F1r 4  rr rr        	.word @song1ref43
0011F3r 4               @song1ref62:
0011F3r 4  2F 8B 30 8B  	.byte $2f, $8b, $30, $8b, $35, $8b, $37, $8b, $2f, $8b, $30, $8b, $35, $8b, $37, $8b
0011F7r 4  35 8B 37 8B  
0011FBr 4  2F 8B 30 8B  
001203r 4  41 10        	.byte $41, $10
001205r 4  rr rr        	.word @song1ref62
001207r 4  B7 00 FF A5  	.byte $b7, $00, $ff, $a5, $ff, $df, $40, $54, $fb, $00, $df
00120Br 4  FF DF 40 54  
00120Fr 4  FB 00 DF     
001212r 4               @song1ref92:
001212r 4  FF DF FF DF  	.byte $ff, $df, $ff, $df, $ff, $df, $ff, $df, $ff, $df, $ff, $df, $ff, $df, $ff, $df, $ff, $df, $42
001216r 4  FF DF FF DF  
00121Ar 4  FF DF FF DF  
001225r 4  rr rr        	.word @song1ch0loop
001227r 4               @song1ch1:
001227r 4               @song1ch1loop:
001227r 4  41 12        	.byte $41, $12
001229r 4  rr rr        	.word @song1ref92
00122Br 4  41 0E        	.byte $41, $0e
00122Dr 4  rr rr        	.word @song1ref92
00122Fr 4  42           	.byte $42
001230r 4  rr rr        	.word @song1ch1loop
001232r 4               @song1ch2:
001232r 4               @song1ch2loop:
001232r 4  84 1D DF 00  	.byte $84, $1d, $df, $00, $8b, $1d, $df, $00, $8b, $20, $df, $00, $8b, $20, $df, $00, $8b, $1d, $a7, $00, $8b, $1d, $a7, $00
001236r 4  8B 1D DF 00  
00123Ar 4  8B 20 DF 00  
00124Ar 4  8B 1D A7 00  	.byte $8b, $1d, $a7, $00, $8b, $1d, $a7, $00, $8b, $23, $a7, $00, $8b, $23, $a7, $00, $8b, $23, $a7, $00, $8b, $23, $a7, $00
00124Er 4  8B 1D A7 00  
001252r 4  8B 23 A7 00  
001262r 4  8B           	.byte $8b
001263r 4  41 12        	.byte $41, $12
001265r 4  rr rr        	.word @song1ref92
001267r 4  FF DF FF DF  	.byte $ff, $df, $ff, $df, $ff, $df, $42
00126Br 4  FF DF 42     
00126Er 4  rr rr        	.word @song1ch2loop
001270r 4               @song1ch3:
001270r 4               @song1ch3loop:
001270r 4  86           	.byte $86
001271r 4               @song1ref187:
001271r 4  34 8B 00 8B  	.byte $34, $8b, $00, $8b, $32, $8b, $00, $a7, $32, $8b, $00, $8b
001275r 4  32 8B 00 A7  
001279r 4  32 8B 00 8B  
00127Dr 4  41 0C        	.byte $41, $0c
00127Fr 4  rr rr        	.word @song1ref187
001281r 4  41 0C        	.byte $41, $0c
001283r 4  rr rr        	.word @song1ref187
001285r 4  41 0C        	.byte $41, $0c
001287r 4  rr rr        	.word @song1ref187
001289r 4               @song1ref208:
001289r 4  34 8B 00 8B  	.byte $34, $8b, $00, $8b, $32, $8b, $00, $8b, $34, $8b, $00, $8b, $32, $8b, $00, $8b
00128Dr 4  32 8B 00 8B  
001291r 4  34 8B 00 8B  
001299r 4  41 10        	.byte $41, $10
00129Br 4  rr rr        	.word @song1ref208
00129Dr 4  41 10        	.byte $41, $10
00129Fr 4  rr rr        	.word @song1ref208
0012A1r 4  34 8B 00 8B  	.byte $34, $8b, $00, $8b, $32, $8b, $32, $8b, $34, $8b, $00, $8b, $88, $32, $99, $ff, $c3, $00, $99
0012A5r 4  32 8B 32 8B  
0012A9r 4  34 8B 00 8B  
0012B4r 4  41 12        	.byte $41, $12
0012B6r 4  rr rr        	.word @song1ref92
0012B8r 4  FF DF FF DF  	.byte $ff, $df, $ff, $df, $42
0012BCr 4  42           
0012BDr 4  rr rr        	.word @song1ch3loop
0012BFr 4               @song1ch4:
0012BFr 4               @song1ch4loop:
0012BFr 4  41 12        	.byte $41, $12
0012C1r 4  rr rr        	.word @song1ref92
0012C3r 4  41 0E        	.byte $41, $0e
0012C5r 4  rr rr        	.word @song1ref92
0012C7r 4  42           	.byte $42
0012C8r 4  rr rr        	.word @song1ch4loop
0012CAr 4               
0012CAr 4               
0012CAr 3               
0012CAr 3               level0_music:
0012CAr 3  rr rr        	.word music_data_prologue ; song list
0012CCr 3  00           	.byte $00                 ; default song
0012CDr 3               
0012CDr 2               
0012CDr 1               .include "level1/bank_0.asm"
0012CDr 2               ; Copyright (C) 2024 iProgramInCpp
0012CDr 2               
0012CDr 2               .segment "PRG_LVL1"
000000r 2               .include "metatile.asm"
000000r 3               ; Copyright (C) 2024 iProgramInCpp
000000r 3               
000000r 3               ; Metatile Data for "Forsaken City" (Level 1)
000000r 3               
000000r 3               ; Metatiles
000000r 3               ;
000000r 3               ; For a single metatile ID, the following properties:
000000r 3               ; - metatiles: The char tiles that make up the visual representation of the metatile
000000r 3               ; - metatile_palette: The palette used for the metatile
000000r 3               ; - metatile_collision: The collision mask for the metatile.
000000r 3               
000000r 3               ; These are the metatiles for the Intro level.
000000r 3               ; Eventually the metatile bank will be swappable with different level banks.
000000r 3               
000000r 3               ;metatiles:
000000r 3               .align $100
000000r 3  00           	.byte $00 ; Air
000001r 3  60 64 70 74  	.byte $60,$64,$70,$74 ; Dirt Corners
000005r 3  61 62 63     	.byte $61,$62,$63     ; Dirt Tops
000008r 3  71 72 73     	.byte $71,$72,$73     ; Dirt Bottoms
00000Br 3  67 77 68 67  	.byte $67,$77,$68,$67 ; Dirt Left
00000Fr 3  69 79 6A 7A  	.byte $69,$79,$6A,$7A ; Dirt Right
000013r 3  6B 6C 6D 6E  	.byte $6B,$6C,$6D,$6E,$7B,$7C,$7D,$9A ; Dirt Middles
000017r 3  7B 7C 7D 9A  
00001Br 3  6F 78        	.byte $6F,$78         ; Dirt Left, Right Ends
00001Dr 3  80 84 90 94  	.byte $80,$84,$90,$94 ; Snow Corners
000021r 3  81 82 83     	.byte $81,$82,$83     ; Snow Tops
000024r 3  91 92 93     	.byte $91,$92,$93     ; Snow Bottoms
000027r 3  87 97        	.byte $87,$97         ; Snow Left
000029r 3  88 98        	.byte $88,$98         ; Snow Right
00002Br 3  8B 8C 8D 8E  	.byte $8B,$8C,$8D,$8E,$8F,$9B,$9C,$9D,$9E ; Snow Middles
00002Fr 3  8F 9B 9C 9D  
000033r 3  9E           
000034r 3  85 86 95 96  	.byte $85,$86,$95,$96 ; Snow In-corners
000038r 3  65 66 75 76  	.byte $65,$66,$75,$76 ; Dirt In-corners
00003Cr 3  89 8A 99     	.byte $89,$8A,$99     ; Jump Through
00003Fr 3  C8           	.byte $C8             ; Spikes
000040r 3  C4 C5 C6 C7  	.byte $C4,$C5,$C6,$C7 ; Grass Decals
000044r 3  A0 A4 B0 B4  	.byte $A0,$A4,$B0,$B4 ; Cement Corners
000048r 3  A5 A6 B5 B6  	.byte $A5,$A6,$B5,$B6 ; Cement Corners Alt
00004Cr 3  A1 A2 A3     	.byte $A1,$A2,$A3     ; Cement Tops
00004Fr 3  B1 B2 B3     	.byte $B1,$B2,$B3     ; Cement Bottoms
000052r 3  A9 B9        	.byte $A9,$B9         ; Cement Left
000054r 3  AA BA        	.byte $AA,$BA         ; Cement Right
000056r 3  AB AC AD AE  	.byte $AB,$AC,$AD,$AE,$AF,$BB,$BC,$BD,$BE,$BF ; Cement Middles
00005Ar 3  AF BB BC BD  
00005Er 3  BE BF        
000060r 3  A7 A8 B7 B8  	.byte $A7,$A8,$B7,$B8 ; Cement Corners
000064r 3  C0 C1 C2 C3  	.byte $C0,$C1,$C2,$C3 ; Girders
000068r 3  C9 CA CB     	.byte $C9,$CA,$CB     ; Spikes
00006Br 3  89 8A 99     	.byte $89,$8A,$99     ; Grey Jump Through
00006Er 3  F4 F5        	.byte $F4,$F5         ; Memorial
000070r 3  F8 D9 F9 E7  	.byte $F8,$D9,$F9,$E7 ; Memorial
000074r 3  D0 D1 D2 D3  	.byte $D0,$D1,$D2,$D3 ; Memorial
000078r 3  E0 E1 E2 E3  	.byte $E0,$E1,$E2,$E3 ; Memorial
00007Cr 3  F6 D4 F7     	.byte $F6,$D4,$F7     ; Memorial
00007Fr 3  F0 F1 F2 F3  	.byte $F0,$F1,$F2,$F3 ; Memorial
000083r 3  D5 D6 D7 D8  	.byte $D5,$D6,$D7,$D8 ; Memorial
000087r 3  E4 E5 E6 E8  	.byte $E4,$E5,$E6,$E8,$E9 ; Memorial
00008Br 3  E9           
00008Cr 3  DA DB DC DD  	.byte $DA,$DB,$DC,$DD ; Campfire
000090r 3               
000090r 3               ;metatile_info:
000090r 3  xx xx xx xx  .align $100
000094r 3  xx xx xx xx  
000098r 3  xx xx xx xx  
000100r 3  00           	.byte ct_none                ; Air
000101r 3  01 01 01 01  	.res  28, ct_full            ; Dirt
000105r 3  01 01 01 01  
000109r 3  01 01 01 01  
00011Dr 3  01 01 01 01  	.res  27, ct_full            ; Snow
000121r 3  01 01 01 01  
000125r 3  01 01 01 01  
000138r 3  01 01 01 01  	.res   4, ct_full            ; Dirt
00013Cr 3  03 03 03     	.res   3, ct_jumpthru        ; Jump Through
00013Fr 3  02           	.byte ct_deadly              ; Spikes
000140r 3  00 00 00 00  	.res   4, ct_none            ; Grass Decals
000144r 3  01 01 01 01  	.res  32, ct_full            ; Cement
000148r 3  01 01 01 01  
00014Cr 3  01 01 01 01  
000164r 3  01 01 01 01  	.res   4, ct_full            ; Girder
000168r 3  02 02 02     	.res   3, ct_deadly          ; Spikes
00016Br 3  03 03 03     	.res   3, ct_jumpthru        ; Grey Jump Through
00016Er 3  00 00 00 00  	.res  30, ct_none            ; Memorial
000172r 3  00 00 00 00  
000176r 3  00 00 00 00  
00018Cr 3  00 00 00 00  	.res   4, ct_none            ; Campfire
000190r 3               
000190r 3  xx xx xx xx  .align $100
000194r 3  xx xx xx xx  
000198r 3  xx xx xx xx  
000200r 3               
000200r 2               .include "roomdata.asm"
000200r 3               level1_r1_p:
000200r 3  80 1A 01 00  	.byte $80,$1A,$01,$00,$00,$48,$04,$00
000204r 3  00 48 04 00  
000208r 3  80 08 00 00  	.byte $80,$08,$00,$00,$00,$11,$50,$00
00020Cr 3  00 11 50 00  
000210r 3  A0 02 00 00  	.byte $A0,$02,$00,$00,$40,$44,$10,$00
000214r 3  40 44 10 00  
000218r 3  20 55 05 00  	.byte $20,$55,$05,$00,$10,$01,$05,$00
00021Cr 3  10 01 05 00  
000220r 3  40 01 00 00  	.byte $40,$01,$00,$00,$80,$88,$06,$00
000224r 3  80 88 06 00  
000228r 3  40 00 00 00  	.byte $40,$00,$00,$00,$20,$08,$00,$00
00022Cr 3  20 08 00 00  
000230r 3  10 00 00 00  	.byte $10,$00,$00,$00,$00,$12,$45,$04
000234r 3  00 12 45 04  
000238r 3  00 00 80 08  	.byte $00,$00,$80,$08,$00,$00,$11,$01
00023Cr 3  00 00 11 01  
000240r 3  00 88 A8 88  	.byte $00,$88,$A8,$88,$00,$00,$00,$00
000244r 3  00 00 00 00  
000248r 3  00 02 02 20  	.byte $00,$02,$02,$20,$52,$45,$44,$04
00024Cr 3  52 45 44 04  
000250r 3  FF           	.byte $FF
000251r 3               level1_r1_e:
000251r 3  FF           	.byte $FF
000252r 3               level1_r1_t:
000252r 3  C4 2C 2B 16  	.byte $C4,$2C,$2B,$16,$15,$14,$13,$5D
000256r 3  15 14 13 5D  
00025Ar 3  64 A9 65 64  	.byte $64,$A9,$65,$64,$5F,$C7,$84,$34
00025Er 3  5F C7 84 34  
000262r 3  2A 11 12 10  	.byte $2A,$11,$12,$10,$0F,$54,$47,$C9
000266r 3  0F 54 47 C9  
00026Ar 3  4C 5A 87 83  	.byte $4C,$5A,$87,$83,$2C,$24,$D0,$23
00026Er 3  2C 24 D0 23  
000272r 3  18 87 83 2B  	.byte $18,$87,$83,$2B,$92,$1A,$19,$14
000276r 3  92 1A 19 14  
00027Ar 3  85 83 64 A5  	.byte $85,$83,$64,$A5,$65,$64,$8B,$02
00027Er 3  65 64 8B 02  
000282r 3  11 12 54 62  	.byte $11,$12,$54,$62,$84,$83,$66,$00
000286r 3  84 83 66 00  
00028Ar 3  00 67 00 00  	.byte $00,$67,$00,$00,$66,$8B,$00,$00
00028Er 3  66 8B 00 00  
000292r 3  00 3F 4C 18  	.byte $00,$3F,$4C,$18,$83,$83,$35,$1F
000296r 3  83 83 35 1F  
00029Ar 3  00 64 92 4D  	.byte $00,$64,$92,$4D,$13,$83,$83,$2F
00029Er 3  13 83 83 2F  
0002A2r 3  26 C4 67 8F  	.byte $26,$C4,$67,$8F,$4E,$14,$83,$83
0002A6r 3  4E 14 83 83  
0002AAr 3  34 29 1D 65  	.byte $34,$29,$1D,$65,$65,$65,$64,$90
0002AEr 3  65 65 64 90  
0002B2r 3  15 83 82 2B  	.byte $15,$83,$82,$2B,$24,$D4,$3F,$4D
0002B6r 3  24 D4 3F 4D  
0002BAr 3  16 83 82 2C  	.byte $16,$83,$82,$2C,$26,$8F,$01,$0B
0002BEr 3  26 8F 01 0B  
0002C2r 3  0C 0D 0C 52  	.byte $0C,$0D,$0C,$52,$63,$C4,$82,$2D
0002C6r 3  63 C4 82 2D  
0002CAr 3  25 8F 06 18  	.byte $25,$8F,$06,$18,$18,$18,$14,$5A
0002CEr 3  18 18 14 5A  
0002D2r 3  5F 84 82 2E  	.byte $5F,$84,$82,$2E,$24,$8F,$02,$0F
0002D6r 3  24 8F 02 0F  
0002DAr 3  10 55 62 C6  	.byte $10,$55,$62,$C6,$82,$00,$35,$0B
0002DEr 3  82 00 35 0B  
0002E2r 3  0B 0C 0D 03  	.byte $0B,$0C,$0D,$03,$8A,$00,$00,$00
0002E6r 3  8A 00 00 00  
0002EAr 3  3F 4C 18 85  	.byte $3F,$4C,$18,$85,$83,$00,$00,$13
0002EEr 3  83 00 00 13  
0002F2r 3  14 13 08 8E  	.byte $14,$13,$08,$8E,$4D,$19,$85,$84
0002F6r 3  4D 19 85 84  
0002FAr 3  14 38 10 0F  	.byte $14,$38,$10,$0F,$04,$8F,$1A,$85
0002FEr 3  04 8F 1A 85  
000302r 3  84 13 09 D0  	.byte $84,$13,$09,$D0,$3F,$4C,$2F,$85
000306r 3  3F 4C 2F 85  
00030Ar 3  84 38 04 91  	.byte $84,$38,$04,$91,$4D,$30,$85,$83
00030Er 3  4D 30 85 83  
000312r 3  13 64 C8 64  	.byte $13,$64,$C8,$64,$A4,$65,$27,$28
000316r 3  A4 65 27 28  
00031Ar 3  27 28 28 37  	.byte $27,$28,$28,$37,$02,$85,$83,$14
00031Er 3  02 85 83 14  
000322r 3  66 88 66 00  	.byte $66,$88,$66,$00,$00,$66,$00,$21
000326r 3  00 66 00 21  
00032Ar 3  2B 2C 2D 2E  	.byte $2B,$2C,$2D,$2E,$C7,$83,$00,$8D
00032Er 3  C7 83 00 8D  
000332r 3  64 37 CB 83  	.byte $64,$37,$CB,$83,$64,$65,$65,$64
000336r 3  64 65 65 64  
00033Ar 3  86 64 A4 65  	.byte $86,$64,$A4,$65,$2A,$36,$8A,$83
00033Er 3  2A 36 8A 83  
000342r 3  08 CE 3F 4C  	.byte $08,$CE,$3F,$4C,$2B,$89,$83,$09
000346r 3  2B 89 83 09  
00034Ar 3  8F 4D 2D 89  	.byte $8F,$4D,$2D,$89,$83,$0A,$8F,$4E
00034Er 3  83 0A 8F 4E  
000352r 3  2E 2E 13 14  	.byte $2E,$2E,$13,$14,$86,$83,$08,$8F
000356r 3  86 83 08 8F  
00035Ar 3  45 29 2A 10  	.byte $45,$29,$2A,$10,$3A,$15,$85,$82
00035Er 3  3A 15 85 82  
000362r 3  5C 4F 8E C4  	.byte $5C,$4F,$8E,$C4,$3F,$4C,$86,$82
000366r 3  3F 4C 86 82  
00036Ar 3  5D 94 4D 13  	.byte $5D,$94,$4D,$13,$15,$16,$17,$18
00036Er 3  15 16 17 18  
000372r 3  19 82 5E 50  	.byte $19,$82,$5E,$50,$93,$45,$02,$10
000376r 3  93 45 02 10  
00037Ar 3  10 11 12 10  	.byte $10,$11,$12,$10,$59,$5A,$5F,$51
00037Er 3  59 5A 5F 51  
000382r 3  92 C8 54 55  	.byte $92,$C8,$54,$55,$54,$47,$9A,$CA
000386r 3  54 47 9A CA  
00038Ar 3  1D 28 1F 91  	.byte $1D,$28,$1F,$91,$8B,$2B,$4F,$91
00038Er 3  8B 2B 4F 91  
000392r 3  8B 2C 50 6A  	.byte $8B,$2C,$50,$6A,$6A,$8F,$86,$1D
000396r 3  6A 8F 86 1D  
00039Ar 3  1F 83 2D 35  	.byte $1F,$83,$2D,$35,$27,$1F,$8F,$85
00039Er 3  27 1F 8F 85  
0003A2r 3  1D 37 35 28  	.byte $1D,$37,$35,$28,$27,$37,$00,$00
0003A6r 3  27 37 00 00  
0003AAr 3  2E 25 8F 52  	.byte $2E,$25,$8F,$52,$53,$52,$53,$28
0003AEr 3  53 52 53 28  
0003B2r 3  37 00 00 2D  	.byte $37,$00,$00,$2D,$2E,$C4,$35,$27
0003B6r 3  2E C4 35 27  
0003BAr 3  28 27 03 8B  	.byte $28,$27,$03,$8B,$5B,$5A,$5E,$59
0003BEr 3  5B 5A 5E 59  
0003C2r 3  2B CA 31 2C  	.byte $2B,$CA,$31,$2C,$2D,$39,$0E,$03
0003C6r 3  2D 39 0E 03  
0003CAr 3  89 D3 13 39  	.byte $89,$D3,$13,$39,$03,$88,$93,$00
0003CEr 3  03 88 93 00  
0003D2r 3  13 39 0B 0C  	.byte $13,$39,$0B,$0C,$0D,$0E,$0B,$0D
0003D6r 3  0D 0E 0B 0D  
0003DAr 3  0C 0E FF     	.byte $0C,$0E,$FF
0003DDr 3               level1_r1:
0003DDr 3  28 00 00     	.byte 40, 0, 0
0003E0r 3  10 98        	.byte 16, 152
0003E2r 3  02 FF FF 02  	.byte 2, 255, 255, 2
0003E6r 3  14 FF FF FE  	.byte 20, 255, 255, 254
0003EAr 3  00           	.byte 0
0003EBr 3  rr rr        	.word level1_r1_t
0003EDr 3  rr rr        	.word level1_r1_p
0003EFr 3  rr rr        	.word level1_r1_e
0003F1r 3               level1_r2_p:
0003F1r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
0003F5r 3  00 00 00 00  
0003F9r 3  FE 00 00 00  	.byte $FE,$00,$00,$00,$00,$00,$80,$08
0003FDr 3  00 00 80 08  
000401r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$20,$22
000405r 3  00 00 20 22  
000409r 3  02 00 00 00  	.byte $02,$00,$00,$00,$00,$00,$00,$00
00040Dr 3  00 00 00 00  
000411r 3  00 00 80 88  	.byte $00,$00,$80,$88,$00,$80,$88,$00
000415r 3  00 80 88 00  
000419r 3  00 00 A2 2A  	.byte $00,$00,$A2,$2A,$00,$A0,$00,$00
00041Dr 3  00 A0 00 00  
000421r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000425r 3  00 00 00 00  
000429r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$80,$0A,$00
00042Dr 3  00 80 0A 00  
000431r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$A0,$00,$00
000435r 3  00 A0 00 00  
000439r 3  00 00 00 00  	.byte $00,$00,$00,$00,$22,$22,$00,$00
00043Dr 3  22 22 00 00  
000441r 3  00 FF        	.byte $00,$FF
000443r 3               level1_r2_e:
000443r 3  68 58 01     	.byte $68,$58,$01
000446r 3  F8 58 01     	.byte $F8,$58,$01
000449r 3  FF           	.byte $FF
00044Ar 3               level1_r2_t:
00044Ar 3  DE 8E 5B 5C  	.byte $DE,$8E,$5B,$5C,$5D,$5E,$5F,$5D
00044Er 3  5D 5E 5F 5D  
000452r 3  5D 5A 5F 5A  	.byte $5D,$5A,$5F,$5A,$59,$5A,$5C,$5D
000456r 3  59 5A 5C 5D  
00045Ar 3  5B 5C 8A 5E  	.byte $5B,$5C,$8A,$5E,$57,$5F,$60,$54
00045Er 3  57 5F 60 54  
000462r 3  55 55 54 55  	.byte $55,$55,$54,$55,$55,$55,$A4,$54
000466r 3  55 55 A4 54  
00046Ar 3  55 55 55 54  	.byte $55,$55,$55,$54,$55,$84,$5A,$5F
00046Er 3  55 84 5A 5F  
000472r 3  5E 5D 5C 60  	.byte $5E,$5D,$5C,$60,$54,$55,$55,$47
000476r 3  54 55 55 47  
00047Ar 3  C9 6C C6 83  	.byte $C9,$6C,$C6,$83,$60,$65,$64,$65
00047Er 3  60 65 64 65  
000482r 3  64 65 66 CD  	.byte $64,$65,$66,$CD,$6B,$86,$82,$5F
000486r 3  6B 86 82 5F  
00048Ar 3  51 00 66 00  	.byte $51,$00,$66,$00,$66,$00,$95,$82
00048Er 3  66 00 95 82  
000492r 3  5E 50 9A 82  	.byte $5E,$50,$9A,$82,$60,$4B,$93,$6D
000496r 3  60 4B 93 6D  
00049Ar 3  86 00 5C 51  	.byte $86,$00,$5C,$51,$00,$00,$92,$44
00049Er 3  00 00 92 44  
0004A2r 3  52 52 53 53  	.byte $52,$52,$53,$53,$53,$52,$00,$5D
0004A6r 3  53 52 00 5D  
0004AAr 3  50 94 4C 59  	.byte $50,$94,$4C,$59,$5A,$5F,$5C,$5D
0004AEr 3  5A 5F 5C 5D  
0004B2r 3  5E 00 00 61  	.byte $5E,$00,$00,$61,$65,$65,$64,$65
0004B6r 3  65 65 64 65  
0004BAr 3  65 65 64 8D  	.byte $65,$65,$64,$8D,$22,$2C,$C5,$82
0004BEr 3  22 2C C5 82  
0004C2r 3  60 55 55 47  	.byte $60,$55,$55,$47,$D1,$21,$2D,$85
0004C6r 3  D1 21 2D 85  
0004CAr 3  82 00 4F D3  	.byte $82,$00,$4F,$D3,$21,$2E,$2B,$2C
0004CEr 3  21 2E 2B 2C  
0004D2r 3  2E 2F 30 83  	.byte $2E,$2F,$30,$83,$50,$93,$22,$29
0004D6r 3  50 93 22 29  
0004DAr 3  2A 29 29 2A  	.byte $2A,$29,$29,$2A,$2A,$83,$51,$93
0004DEr 3  2A 83 51 93  
0004E2r 3  66 C6 83 50  	.byte $66,$C6,$83,$50,$9A,$83,$64,$65
0004E6r 3  9A 83 64 65  
0004EAr 3  65 65 64 8D  	.byte $65,$65,$64,$8D,$64,$65,$64,$A6
0004EEr 3  64 65 64 A6  
0004F2r 3  65 83 4F D1  	.byte $65,$83,$4F,$D1,$82,$A7,$65,$83
0004F6r 3  82 A7 65 83  
0004FAr 3  61 46 90 C9  	.byte $61,$46,$90,$C9,$83,$5A,$4F,$99
0004FEr 3  83 5A 4F 99  
000502r 3  83 5B 50 99  	.byte $83,$5B,$50,$99,$83,$5C,$51,$99
000506r 3  83 5C 51 99  
00050Ar 3  83 00 00 53  	.byte $83,$00,$00,$53,$28,$1F,$88,$3F
00050Er 3  28 1F 88 3F  
000512r 3  44 28 1F 8A  	.byte $44,$28,$1F,$8A,$85,$00,$2C,$35
000516r 3  85 00 2C 35  
00051Ar 3  28 28 27 1F  	.byte $28,$28,$27,$1F,$85,$4C,$2B,$35
00051Er 3  85 4C 2B 35  
000522r 3  28 28 27 27  	.byte $28,$28,$27,$27,$52,$52,$53,$53
000526r 3  52 52 53 53  
00052Ar 3  53 52 86 00  	.byte $53,$52,$86,$00,$00,$2B,$33,$32
00052Er 3  00 2B 33 32  
000532r 3  26 85 4E 2C  	.byte $26,$85,$4E,$2C,$2B,$00,$56,$5F
000536r 3  2B 00 56 5F  
00053Ar 3  5B 5A 57 58  	.byte $5B,$5A,$57,$58,$59,$5A,$5B,$85
00053Er 3  59 5A 5B 85  
000542r 3  2E 2D 31 34  	.byte $2E,$2D,$31,$34,$29,$29,$20,$86
000546r 3  29 29 20 86  
00054Ar 3  34 2A 54 54  	.byte $34,$2A,$54,$54,$54,$62,$C6,$84
00054Er 3  54 62 C6 84  
000552r 3  60 54 2A 2A  	.byte $60,$54,$2A,$2A,$20,$C7,$3F,$45
000556r 3  20 C7 3F 45  
00055Ar 3  20 00 00 00  	.byte $20,$00,$00,$00,$3F,$4C,$5C,$85
00055Er 3  3F 4C 5C 85  
000562r 3  83 56 4F D1  	.byte $83,$56,$4F,$D1,$3F,$4D,$62,$85
000566r 3  3F 4D 62 85  
00056Ar 3  83 5F 50 91  	.byte $83,$5F,$50,$91,$00,$3F,$4D,$5D
00056Er 3  00 3F 4D 5D  
000572r 3  84 83 00 61  	.byte $84,$83,$00,$61,$46,$92,$4C,$5E
000576r 3  46 92 4C 5E  
00057Ar 3  84 84 00 51  	.byte $84,$84,$00,$51,$8F,$44,$53,$53
00057Er 3  8F 44 53 53  
000582r 3  63 C5 85 61  	.byte $63,$C5,$85,$61,$52,$53,$46,$8C
000586r 3  52 53 46 8C  
00058Ar 3  4C 5C 5F C6  	.byte $4C,$5C,$5F,$C6,$85,$00,$00,$5C
00058Er 3  85 00 00 5C  
000592r 3  50 8C 22 5B  	.byte $50,$8C,$22,$5B,$C7,$87,$59,$4F
000596r 3  C7 87 59 4F  
00059Ar 3  8C 23 5A 87  	.byte $8C,$23,$5A,$87,$5B,$5E,$5D,$5C
00059Er 3  5B 5E 5D 5C  
0005A2r 3  5F 5E 5E 5E  	.byte $5F,$5E,$5E,$5E,$61,$52,$53,$52
0005A6r 3  61 52 53 52  
0005AAr 3  46 85 1D 27  	.byte $46,$85,$1D,$27,$28,$37,$C8,$AE
0005AEr 3  28 37 C8 AE  
0005B2r 3  65 64 83 21  	.byte $65,$64,$83,$21,$2C,$2D,$C9,$D2
0005B6r 3  2C 2D C9 D2  
0005BAr 3  23 2E CA 93  	.byte $23,$2E,$CA,$93,$30,$8A,$92,$22
0005BEr 3  30 8A 92 22  
0005C2r 3  31 8A 92 21  	.byte $31,$8A,$92,$21,$32,$8A,$52,$52
0005C6r 3  32 8A 52 52  
0005CAr 3  A4 53 52 53  	.byte $A4,$53,$52,$53,$53,$53,$52,$52
0005CEr 3  53 53 52 52  
0005D2r 3  28 28 27 27  	.byte $28,$28,$27,$27,$28,$28,$37,$CB
0005D6r 3  28 28 37 CB  
0005DAr 3  00 00 00 58  	.byte $00,$00,$00,$58,$59,$5A,$5C,$5E
0005DEr 3  59 5A 5C 5E  
0005E2r 3  5D 5F 5E 5A  	.byte $5D,$5F,$5E,$5A,$2C,$2D,$2E,$2F
0005E6r 3  2C 2D 2E 2F  
0005EAr 3  30 31 CC 83  	.byte $30,$31,$CC,$83,$DB,$9E,$FF
0005EEr 3  DB 9E FF     
0005F1r 3               level1_r2:
0005F1r 3  2C 00 00     	.byte 44, 0, 0
0005F4r 3  20 A8        	.byte 32, 168
0005F6r 3  04 FF FF FF  	.byte 4, 255, 255, 255
0005FAr 3  14 FF FF FF  	.byte 20, 255, 255, 255
0005FEr 3  00           	.byte 0
0005FFr 3  rr rr        	.word level1_r2_t
000601r 3  rr rr        	.word level1_r2_p
000603r 3  rr rr        	.word level1_r2_e
000605r 3               level1_r3_p:
000605r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000609r 3  00 00 00 00  
00060Dr 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$05,$00
000611r 3  00 00 05 00  
000615r 3  00 00 80 08  	.byte $00,$00,$80,$08,$00,$00,$00,$00
000619r 3  00 00 00 00  
00061Dr 3  00 00 20 00  	.byte $00,$00,$20,$00,$00,$00,$00,$00
000621r 3  00 00 00 00  
000625r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000629r 3  00 00 00 00  
00062Dr 3  00 00 00 00  	.byte $00,$00,$00,$00,$22,$22,$00,$00
000631r 3  22 22 00 00  
000635r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000639r 3  00 00 00 00  
00063Dr 3  00 08 00 00  	.byte $00,$08,$00,$00,$00,$00,$00,$00
000641r 3  00 00 00 00  
000645r 3  00 02 A0 AA  	.byte $00,$02,$A0,$AA,$0A,$00,$00,$00
000649r 3  0A 00 00 00  
00064Dr 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
000651r 3  00 00 00 00  
000655r 3  22 22 22 A2  	.byte $22,$22,$22,$A2,$AA,$08,$00,$00
000659r 3  AA 08 00 00  
00065Dr 3  FF           	.byte $FF
00065Er 3               level1_r3_e:
00065Er 3  FF           	.byte $FF
00065Fr 3               level1_r3_t:
00065Fr 3  DE 89 58 57  	.byte $DE,$89,$58,$57,$56,$57,$58,$59
000663r 3  56 57 58 59  
000667r 3  5A 5B 5C 5D  	.byte $5A,$5B,$5C,$5D,$5E,$5F,$5E,$88
00066Br 3  5E 5F 5E 88  
00066Fr 3  87 5A 60 AD  	.byte $87,$5A,$60,$AD,$65,$64,$5D,$5C
000673r 3  65 64 5D 5C  
000677r 3  5B 5E 5F 5A  	.byte $5B,$5E,$5F,$5A,$5D,$86,$60,$54
00067Br 3  5D 86 60 54  
00067Fr 3  4B CD 64 A7  	.byte $4B,$CD,$64,$A7,$65,$85,$5C,$4F
000683r 3  65 85 5C 4F  
000687r 3  D1 3D C5 85  	.byte $D1,$3D,$C5,$85,$5D,$50,$91,$3C
00068Br 3  5D 50 91 3C  
00068Fr 3  85 85 5E 51  	.byte $85,$85,$5E,$51,$97,$84,$64,$65
000693r 3  97 84 64 65  
000697r 3  64 91 3E 85  	.byte $64,$91,$3E,$85,$84,$4F,$D3,$44
00069Br 3  84 4F D3 44  
00069Fr 3  53 53 52 53  	.byte $53,$53,$52,$53,$52,$83,$5E,$50
0006A3r 3  52 83 5E 50  
0006A7r 3  93 4D 56 5C  	.byte $93,$4D,$56,$5C,$5D,$5E,$5F,$83
0006ABr 3  5D 5E 5F 83  
0006AFr 3  5D 51 93 45  	.byte $5D,$51,$93,$45,$54,$55,$54,$55
0006B3r 3  54 55 54 55  
0006B7r 3  54 83 5C 87  	.byte $54,$83,$5C,$87,$1D,$1F,$8B,$C6
0006BBr 3  1D 1F 8B C6  
0006BFr 3  83 5B 50 86  	.byte $83,$5B,$50,$86,$22,$4F,$91,$83
0006C3r 3  22 4F 91 83  
0006C7r 3  5A 4F 86 1E  	.byte $5A,$4F,$86,$1E,$65,$65,$65,$64
0006CBr 3  65 65 65 64  
0006CFr 3  8E 83 59 50  	.byte $8E,$83,$59,$50,$86,$D3,$83,$5C
0006D3r 3  86 D3 83 5C  
0006D7r 3  9A 83 5F 51  	.byte $9A,$83,$5F,$51,$99,$83,$00,$61
0006DBr 3  99 83 00 61  
0006DFr 3  52 46 97 84  	.byte $52,$46,$97,$84,$00,$60,$47,$88
0006E3r 3  00 60 47 88  
0006E7r 3  64 65 65 65  	.byte $64,$65,$65,$65,$64,$8A,$84,$5F
0006EBr 3  64 8A 84 5F  
0006EFr 3  51 CB 4D 56  	.byte $51,$CB,$4D,$56,$4F,$8A,$84,$5C
0006F3r 3  4F 8A 84 5C  
0006F7r 3  4F 8B 21 31  	.byte $4F,$8B,$21,$31,$35,$28,$1F,$88
0006FBr 3  35 28 1F 88  
0006FFr 3  84 5B 50 8B  	.byte $84,$5B,$50,$8B,$1E,$29,$2A,$29
000703r 3  1E 29 2A 29  
000707r 3  29 20 87 84  	.byte $29,$20,$87,$84,$5C,$51,$8B,$CD
00070Br 3  5C 51 8B CD  
00070Fr 3  84 5E 50 98  	.byte $84,$5E,$50,$98,$84,$56,$4F,$98
000713r 3  84 56 4F 98  
000717r 3  84 59 51 90  	.byte $84,$59,$51,$90,$3F,$64,$A6,$65
00071Br 3  3F 64 A6 65  
00071Fr 3  84 56 50 91  	.byte $84,$56,$50,$91,$4C,$56,$5E,$5F
000723r 3  4C 56 5E 5F  
000727r 3  5C 5E 5F 84  	.byte $5C,$5E,$5F,$84,$57,$92,$4D,$5D
00072Br 3  57 92 4D 5D  
00072Fr 3  C5 84 64 65  	.byte $C5,$84,$64,$65,$65,$64,$8B,$3F
000733r 3  65 64 8B 3F  
000737r 3  48 53 52 63  	.byte $48,$53,$52,$63,$C6,$84,$50,$CE
00073Br 3  C6 84 50 CE  
00073Fr 3  3F 4D 5A 59  	.byte $3F,$4D,$5A,$59,$C7,$84,$26,$8F
000743r 3  C7 84 26 8F  
000747r 3  45 62 C8 93  	.byte $45,$62,$C8,$93,$00,$3F,$4C,$5F
00074Br 3  00 3F 4C 5F  
00074Fr 3  87 95 4D 58  	.byte $87,$95,$4D,$58,$87,$84,$35,$1F
000753r 3  87 84 35 1F  
000757r 3  85 1D A4 28  	.byte $85,$1D,$A4,$28,$1F,$84,$4C,$56
00075Br 3  1F 84 4C 56  
00075Fr 3  87 A6 65 64  	.byte $87,$A6,$65,$64,$85,$2B,$A4,$29
000763r 3  85 2B A4 29  
000767r 3  20 83 4E 5A  	.byte $20,$83,$4E,$5A,$87,$CB,$1E,$29
00076Br 3  87 CB 1E 29  
00076Fr 3  20 C6 3F 45  	.byte $20,$C6,$3F,$45,$54,$62,$86,$8B
000773r 3  54 62 86 8B  
000777r 3  CB 3F 4D 5E  	.byte $CB,$3F,$4D,$5E,$85,$97,$4C,$5F
00077Br 3  85 97 4C 5F  
00077Fr 3  85 9E A9 65  	.byte $85,$9E,$A9,$65,$64,$8D,$4D,$5A
000783r 3  64 8D 4D 5A  
000787r 3  85 2B 2C 2D  	.byte $85,$2B,$2C,$2D,$30,$2F,$31,$32
00078Br 3  30 2F 31 32  
00078Fr 3  33 32 35 A4  	.byte $33,$32,$35,$A4,$28,$87,$3F,$44
000793r 3  28 87 3F 44  
000797r 3  63 C6 CA 33  	.byte $63,$C6,$CA,$33,$32,$31,$2E,$A6
00079Br 3  32 31 2E A6  
00079Fr 3  28 52 52 63  	.byte $28,$52,$52,$63,$5C,$86,$8A,$C4
0007A3r 3  5C 86 8A C4  
0007A7r 3  2C 2D 2E 31  	.byte $2C,$2D,$2E,$31,$30,$32,$32,$32
0007ABr 3  30 32 32 32  
0007AFr 3  5F C7 8E D0  	.byte $5F,$C7,$8E,$D0,$FF
0007B3r 3  FF           
0007B4r 3               level1_r3:
0007B4r 3  2C 00 00     	.byte 44, 0, 0
0007B7r 3  28 B0        	.byte 40, 176
0007B9r 3  06 FF FF FF  	.byte 6, 255, 255, 255
0007BDr 3  14 00 00 00  	.byte 20, 0, 0, 0
0007C1r 3  00           	.byte 0
0007C2r 3  rr rr        	.word level1_r3_t
0007C4r 3  rr rr        	.word level1_r3_p
0007C6r 3  rr rr        	.word level1_r3_e
0007C8r 3               level1_r4_p:
0007C8r 3  00 80 AA AA  	.byte $00,$80,$AA,$AA,$22,$22,$22,$02
0007CCr 3  22 22 22 02  
0007D0r 3  00 2A 00 00  	.byte $00,$2A,$00,$00,$00,$00,$00,$00
0007D4r 3  00 00 00 00  
0007D8r 3  00 0A 00 04  	.byte $00,$0A,$00,$04,$40,$A0,$AA,$0A
0007DCr 3  40 A0 AA 0A  
0007E0r 3  A0 0A 00 00  	.byte $A0,$0A,$00,$00,$00,$00,$00,$00
0007E4r 3  00 00 00 00  
0007E8r 3  A0 8A 00 00  	.byte $A0,$8A,$00,$00,$00,$00,$00,$00
0007ECr 3  00 00 00 00  
0007F0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00
0007F4r 3  00 00 00 00  
0007F8r 3  88 08 00 00  	.byte $88,$08,$00,$00,$00,$00,$00,$00
0007FCr 3  00 00 00 00  
000800r 3  00 AA 0A 00  	.byte $00,$AA,$0A,$00,$00,$00,$00,$00
000804r 3  00 00 00 00  
000808r 3  80 0A 00 00  	.byte $80,$0A,$00,$00,$00,$00,$00,$00
00080Cr 3  00 00 00 00  
000810r 3  00 A2 88 88  	.byte $00,$A2,$88,$88,$88,$88,$88,$08
000814r 3  88 88 88 08  
000818r 3  FF           	.byte $FF
000819r 3               level1_r4_e:
000819r 3  90 B0 09     	.byte $90,$B0,$09
00081Cr 3  FF           	.byte $FF
00081Dr 3               level1_r4_t:
00081Dr 3  D1 2E 2D 2F  	.byte $D1,$2E,$2D,$2F,$32,$C9,$88,$2D
000821r 3  32 C9 88 2D  
000825r 3  2E 31 31 2C  	.byte $2E,$31,$31,$2C,$2E,$30,$32,$34
000829r 3  2E 30 32 34  
00082Dr 3  2A 2A 29 29  	.byte $2A,$2A,$29,$29,$36,$33,$2F,$2D
000831r 3  36 33 2F 2D  
000835r 3  2F 30 32 32  	.byte $2F,$30,$32,$32,$2D,$87,$34,$2A
000839r 3  2D 87 34 2A  
00083Dr 3  A4 29 2A 2A  	.byte $A4,$29,$2A,$2A,$29,$4B,$A4,$68
000841r 3  29 4B A4 68  
000845r 3  64 A8 65 86  	.byte $64,$A8,$65,$86,$2B,$25,$CF,$6C
000849r 3  2B 25 CF 6C  
00084Dr 3  C6 86 34 20  	.byte $C6,$86,$34,$20,$8F,$6B,$86,$85
000851r 3  8F 6B 86 85  
000855r 3  34 20 D0 87  	.byte $34,$20,$D0,$87,$84,$32,$25,$D1
000859r 3  84 32 25 D1  
00085Dr 3  6D 86 84 2D  	.byte $6D,$86,$84,$2D,$92,$64,$A6,$65
000861r 3  92 64 A6 65  
000865r 3  84 30 26 86  	.byte $84,$30,$26,$86,$64,$65,$64,$A4
000869r 3  64 65 64 A4  
00086Dr 3  6A 84 21 2D  	.byte $6A,$84,$21,$2D,$2D,$30,$2E,$33
000871r 3  2D 30 2E 33  
000875r 3  32 84 31 25  	.byte $32,$84,$31,$25,$88,$A4,$65,$64
000879r 3  88 A4 65 64  
00087Dr 3  84 23 2E 2E  	.byte $84,$23,$2E,$2E,$2B,$2E,$2E,$2E
000881r 3  2B 2E 2E 2E  
000885r 3  84 32 24 86  	.byte $84,$32,$24,$86,$3D,$00,$00,$00
000889r 3  3D 00 00 00  
00088Dr 3  3F 64 04 84  	.byte $3F,$64,$04,$84,$1E,$2A,$29,$2A
000891r 3  1E 2A 29 2A  
000895r 3  29 29 2A 84  	.byte $29,$29,$2A,$84,$34,$20,$86,$3C
000899r 3  34 20 86 3C  
00089Dr 3  85 CC 83 32  	.byte $85,$CC,$83,$32,$25,$D9,$83,$33
0008A1r 3  25 D9 83 33  
0008A5r 3  26 99 83 2F  	.byte $26,$99,$83,$2F,$25,$99,$83,$32
0008A9r 3  25 99 83 32  
0008ADr 3  24 99 83 2F  	.byte $24,$99,$83,$2F,$26,$99,$83,$33
0008B1r 3  26 99 83 33  
0008B5r 3  24 99 83 00  	.byte $24,$99,$83,$00,$35,$27,$27,$1F
0008B9r 3  35 27 27 1F  
0008BDr 3  96 83 2B 2B  	.byte $96,$83,$2B,$2B,$2B,$32,$25,$96
0008C1r 3  2B 32 25 96  
0008C5r 3  A9 65 64 94  	.byte $A9,$65,$64,$94,$DE,$9E,$9E,$9E
0008C9r 3  DE 9E 9E 9E  
0008CDr 3  A5 65 64 98  	.byte $A5,$65,$64,$98,$27,$28,$27,$28
0008D1r 3  27 28 27 28  
0008D5r 3  28 1F 98 2E  	.byte $28,$1F,$98,$2E,$2C,$2E,$2B,$2D
0008D9r 3  2C 2E 2B 2D  
0008DDr 3  35 46 A4 6A  	.byte $35,$46,$A4,$6A,$93,$C5,$2E,$35
0008E1r 3  93 C5 2E 35  
0008E5r 3  28 28 27 46  	.byte $28,$28,$27,$46,$93,$85,$00,$2B
0008E9r 3  93 85 00 2B  
0008EDr 3  2D 2B 34 A4  	.byte $2D,$2B,$34,$A4,$65,$64,$8F,$85
0008F1r 3  65 64 8F 85  
0008F5r 3  2F 30 31 2B  	.byte $2F,$30,$31,$2B,$24,$D4,$85,$34
0008F9r 3  24 D4 85 34  
0008FDr 3  29 2A 29 20  	.byte $29,$2A,$29,$20,$94,$84,$30,$25
000901r 3  94 84 30 25  
000905r 3  D8 84 2C 99  	.byte $D8,$84,$2C,$99,$84,$34,$20,$98
000909r 3  84 34 20 98  
00090Dr 3  83 2E 24 D9  	.byte $83,$2E,$24,$D9,$83,$00,$35,$27
000911r 3  83 00 35 27  
000915r 3  28 1F 96 84  	.byte $28,$1F,$96,$84,$00,$2C,$32,$26
000919r 3  00 2C 32 26  
00091Dr 3  96 85 00 00  	.byte $96,$85,$00,$00,$35,$27,$27,$27
000921r 3  35 27 27 27  
000925r 3  28 28 27 28  	.byte $28,$28,$27,$28,$1F,$8E,$87,$00
000929r 3  1F 8E 87 00  
00092Dr 3  2E 2F 32 33  	.byte $2E,$2F,$32,$33,$30,$2C,$32,$35
000931r 3  30 2C 32 35  
000935r 3  27 28 A7 27  	.byte $27,$28,$A7,$27,$28,$28,$27,$28
000939r 3  28 28 27 28  
00093Dr 3  27 FF        	.byte $27,$FF
00093Fr 3               level1_r4:
00093Fr 3  28 00 00     	.byte 40, 0, 0
000942r 3  20 A8        	.byte 32, 168
000944r 3  08 FF FF 08  	.byte 8, 255, 255, 8
000948r 3  08 00 00 00  	.byte 8, 0, 0, 0
00094Cr 3  00           	.byte 0
00094Dr 3  rr rr        	.word level1_r4_t
00094Fr 3  rr rr        	.word level1_r4_p
000951r 3  rr rr        	.word level1_r4_e
000953r 3               level1_rEnd_p:
000953r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$A0,$08,$00
000957r 3  00 A0 08 00  
00095Br 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$60,$22,$02
00095Fr 3  00 60 22 02  
000963r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$90,$AA,$0A
000967r 3  00 90 AA 0A  
00096Br 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$A0,$0A,$00
00096Fr 3  00 A0 0A 00  
000973r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$2A,$00,$00
000977r 3  00 2A 00 00  
00097Br 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$0A,$00,$00
00097Fr 3  00 0A 00 00  
000983r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$8A,$00,$00
000987r 3  00 8A 00 00  
00098Br 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$54,$00,$00
00098Fr 3  00 54 00 00  
000993r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$51,$00,$00
000997r 3  00 51 00 00  
00099Br 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$A0,$00,$00
00099Fr 3  00 A0 00 00  
0009A3r 3  FF           	.byte $FF
0009A4r 3               level1_rEnd_e:
0009A4r 3  FF           	.byte $FF
0009A5r 3               level1_rEnd_t:
0009A5r 3  D6 21 2F C6  	.byte $D6,$21,$2F,$C6,$96,$1E,$36,$86
0009A9r 3  96 1E 36 86  
0009ADr 3  96 00 22 33  	.byte $96,$00,$22,$33,$85,$97,$23,$2B
0009B1r 3  85 97 23 2B  
0009B5r 3  85 97 21 2C  	.byte $85,$97,$21,$2C,$2C,$33,$30,$2F
0009B9r 3  2C 33 30 2F  
0009BDr 3  2B 97 1E 29  	.byte $2B,$97,$1E,$29,$A5,$2A,$97,$3D
0009C1r 3  A5 2A 97 3D  
0009C5r 3  C6 97 3C 86  	.byte $C6,$97,$3C,$86,$97,$3E,$86,$97
0009C9r 3  97 3E 86 97  
0009CDr 3  01 28 27 27  	.byte $01,$28,$27,$27,$27,$28,$27,$97
0009D1r 3  27 28 27 97  
0009D5r 3  22 2D 33 33  	.byte $22,$2D,$33,$33,$30,$32,$2D,$97
0009D9r 3  30 32 2D 97  
0009DDr 3  23 30 C5 97  	.byte $23,$30,$C5,$97,$21,$2D,$85,$97
0009E1r 3  21 2D 85 97  
0009E5r 3  22 2C 85 97  	.byte $22,$2C,$85,$97,$21,$32,$85,$96
0009E9r 3  21 32 85 96  
0009EDr 3  1D 37 C6 95  	.byte $1D,$37,$C6,$95,$1D,$37,$C7,$92
0009F1r 3  1D 37 C7 92  
0009F5r 3  A1 87 1D 28  	.byte $A1,$87,$1D,$28,$37,$C8,$8C,$70
0009F9r 3  37 C8 8C 70  
0009FDr 3  74 78 7C 7F  	.byte $74,$78,$7C,$7F,$A1,$83,$A1,$88
000A01r 3  A1 83 A1 88  
000A05r 3  23 30 C9 8B  	.byte $23,$30,$C9,$8B,$6E,$71,$75,$79
000A09r 3  6E 71 75 79  
000A0Dr 3  7D 80 A1 84  	.byte $7D,$80,$A1,$84,$A1,$89,$21,$2D
000A11r 3  A1 89 21 2D  
000A15r 3  89 8B 6F 72  	.byte $89,$8B,$6F,$72,$76,$7A,$7D,$A1
000A19r 3  76 7A 7D A1  
000A1Dr 3  81 A1 85 82  	.byte $81,$A1,$85,$82,$33,$89,$8B,$00
000A21r 3  33 89 8B 00  
000A25r 3  73 77 7B 7E  	.byte $73,$77,$7B,$7E,$A1,$82,$A1,$86
000A29r 3  A1 82 A1 86  
000A2Dr 3  A1 8A 21 30  	.byte $A1,$8A,$21,$30,$89,$8C,$C6,$A1
000A31r 3  89 8C C6 A1  
000A35r 3  8B 1E 36 2D  	.byte $8B,$1E,$36,$2D,$88,$92,$00,$00
000A39r 3  88 92 00 00  
000A3Dr 3  23 89 95 2E  	.byte $23,$89,$95,$2E,$88,$94,$1E,$36
000A41r 3  88 94 1E 36  
000A45r 3  88 94 00 21  	.byte $88,$94,$00,$21,$31,$87,$95,$1E
000A49r 3  31 87 95 1E  
000A4Dr 3  36 87 95 00  	.byte $36,$87,$95,$00,$05,$87,$96,$07
000A51r 3  05 87 96 07  
000A55r 3  13 86 95 A1  	.byte $13,$86,$95,$A1,$8C,$07,$14,$86
000A59r 3  8C 07 14 86  
000A5Dr 3  95 A1 8D 05  	.byte $95,$A1,$8D,$05,$17,$86,$95,$A1
000A61r 3  17 86 95 A1  
000A65r 3  8E 05 1A 86  	.byte $8E,$05,$1A,$86,$95,$A1,$8F,$07
000A69r 3  95 A1 8F 07  
000A6Dr 3  13 86 95 00  	.byte $13,$86,$95,$00,$06,$19,$86,$97
000A71r 3  06 19 86 97  
000A75r 3  C7 96 22 87  	.byte $C7,$96,$22,$87,$97,$2E,$86,$96
000A79r 3  97 2E 86 96  
000A7Dr 3  23 2B 86 96  	.byte $23,$2B,$86,$96,$22,$32,$86,$FF
000A81r 3  22 32 86 FF  
000A85r 3               level1_rEnd:
000A85r 3  28 00 00     	.byte 40, 0, 0
000A88r 3  30 A8        	.byte 48, 168
000A8Ar 3  FF FF FF FF  	.byte 255, 255, 255, 255
000A8Er 3  00 00 00 00  	.byte 0, 0, 0, 0
000A92r 3  00           	.byte 0
000A93r 3  rr rr        	.word level1_rEnd_t
000A95r 3  rr rr        	.word level1_rEnd_p
000A97r 3  rr rr        	.word level1_rEnd_e
000A99r 3               level1:
000A99r 3  rr rr        	.word level1_music ; music table
000A9Br 3  01           	.byte $01	; environment type
000A9Cr 3  05           	.byte $05	; room count
000A9Dr 3  rr rr        	.word level1_r1
000A9Fr 3  rr rr        	.word level1_r2
000AA1r 3  rr rr        	.word level1_r3
000AA3r 3  rr rr        	.word level1_r4
000AA5r 3  rr rr        	.word level1_rEnd
000AA7r 3               
000AA7r 2               
000AA7r 1               .include "level1/bank_1.asm"
000AA7r 2               ; Copyright (C) 2024 iProgramInCpp
000AA7r 2               
000AA7r 2               .segment "PRG_LVLA"
000000r 2               
000000r 2               .include "music.asm"
000000r 3               ; Copyright (C) 2024 iProgramInCpp
000000r 3               
000000r 3               .include "testmusic.asm"
000000r 4               ; This file is for the FamiStudio Sound Engine and was generated by FamiStudio
000000r 4               
000000r 4               .if FAMISTUDIO_CFG_C_BINDINGS
000000r 4               .export _music_data_ch1=music_data_ch1
000000r 4               .endif
000000r 4               
000000r 4               music_data_ch1:
000000r 4  01           	.byte 1
000001r 4  rr rr        	.word @instruments
000003r 4  rr rr        	.word @samples-4
000005r 4               ; 00 : MUS - first steps
000005r 4  rr rr        	.word @song0ch0
000007r 4  rr rr        	.word @song0ch1
000009r 4  rr rr        	.word @song0ch2
00000Br 4  rr rr        	.word @song0ch3
00000Dr 4  rr rr        	.word @song0ch4
00000Fr 4  33 01 00 01  	.word 307,256
000013r 4               
000013r 4               .export music_data_ch1
000013r 4               .global FAMISTUDIO_DPCM_PTR
000013r 4               
000013r 4               @instruments:
000013r 4  rr rr rr rr  	.word @env8,@env10,@env16,@env0 ; 00 : DPCM
000017r 4  rr rr rr rr  
00001Br 4  rr rr rr rr  	.word @env33,@env34,@env16,@env0 ; 01 : N hat
00001Fr 4  rr rr rr rr  
000023r 4  rr rr rr rr  	.word @env5,@env7,@env21,@env0 ; 02 : N kick
000027r 4  rr rr rr rr  
00002Br 4  rr rr rr rr  	.word @env6,@env10,@env17,@env0 ; 03 : decending
00002Fr 4  rr rr rr rr  
000033r 4  rr rr rr rr  	.word @env8,@env19,@env16,@env0 ; 04 : triangle
000037r 4  rr rr rr rr  
00003Br 4  rr rr rr rr  	.word @env3,@env2,@env31,@env0 ; 05 : N snare
00003Fr 4  rr rr rr rr  
000043r 4  rr rr rr rr  	.word @env32,@env10,@env17,@env0 ; 06 : pad
000047r 4  rr rr rr rr  
00004Br 4  rr rr rr rr  	.word @env8,@env11,@env20,@env0 ; 07 : flute
00004Fr 4  rr rr rr rr  
000053r 4  rr rr rr rr  	.word @env1,@env10,@env17,@env0 ; 08 : soft piano
000057r 4  rr rr rr rr  
00005Br 4               
00005Br 4               @env0:
00005Br 4  00 C0 7F 00  	.byte $00,$c0,$7f,$00,$02
00005Fr 4  02           
000060r 4               @env1:
000060r 4  00 CF CE CD  	.byte $00,$cf,$ce,$cd,$c7,$cb,$ca,$c9,$c5,$c8,$c7,$c7,$c4,$c6,$c6,$c5,$c3,$c4,$c3,$c3,$c2,$00,$11
000064r 4  C7 CB CA C9  
000068r 4  C5 C8 C7 C7  
000077r 4               @env2:
000077r 4  C8 C2 C1 C0  	.byte $c8,$c2,$c1,$c0,$c8,$00,$04
00007Br 4  C8 00 04     
00007Er 4               @env3:
00007Er 4  00 CF CD CC  	.byte $00,$cf,$cd,$cc,$cb,$ca,$c9,$c8,$c8,$c7,$c6,$02,$c5,$c4,$c4,$c3,$c3,$c2,$c2,$c1,$c1,$c0,$00,$15
000082r 4  CB CA C9 C8  
000086r 4  C8 C7 C6 02  
000096r 4               @env4:
000096r 4  00 C0 BE BE  	.byte $00,$c0,$be,$be,$c0,$c2,$c2,$00,$01
00009Ar 4  C0 C2 C2 00  
00009Er 4  01           
00009Fr 4               @env5:
00009Fr 4  00 C9 CF CF  	.byte $00,$c9,$cf,$cf,$c8,$c7,$c6,$c5,$c5,$c4,$c3,$c2,$c1,$00,$0c
0000A3r 4  C8 C7 C6 C5  
0000A7r 4  C5 C4 C3 C2  
0000AEr 4               @env6:
0000AEr 4  00 C5 C9 CE  	.byte $00,$c5,$c9,$ce,$c2,$00,$04
0000B2r 4  C2 00 04     
0000B5r 4               @env7:
0000B5r 4  CB C0 C0 CB  	.byte $cb,$c0,$c0,$cb,$00,$03
0000B9r 4  00 03        
0000BBr 4               @env8:
0000BBr 4  00 CF 7F 00  	.byte $00,$cf,$7f,$00,$02
0000BFr 4  02           
0000C0r 4               @env9:
0000C0r 4  00 C0 BF BF  	.byte $00,$c0,$bf,$bf,$be,$02,$bf,$bf,$c0,$c1,$c1,$c2,$02,$c1,$c1,$00,$01
0000C4r 4  BE 02 BF BF  
0000C8r 4  C0 C1 C1 C2  
0000D1r 4               @env10:
0000D1r 4  C0 7F 00 01  	.byte $c0,$7f,$00,$01
0000D5r 4               @env11:
0000D5r 4  BF C0 00 01  	.byte $bf,$c0,$00,$01
0000D9r 4               @env12:
0000D9r 4  C0 CC C5 00  	.byte $c0,$cc,$c5,$00,$00
0000DDr 4  00           
0000DEr 4               @env13:
0000DEr 4  C0 CC C4 00  	.byte $c0,$cc,$c4,$00,$00
0000E2r 4  00           
0000E3r 4               @env14:
0000E3r 4  00 C0 C0 BF  	.byte $00,$c0,$c0,$bf,$04,$c0,$02,$c1,$04,$c0,$00,$01
0000E7r 4  04 C0 02 C1  
0000EBr 4  04 C0 00 01  
0000EFr 4               @env15:
0000EFr 4  00 C0 BE BD  	.byte $00,$c0,$be,$bd,$bd,$bf,$c1,$c3,$c3,$c2,$00,$01
0000F3r 4  BD BF C1 C3  
0000F7r 4  C3 C2 00 01  
0000FBr 4               @env16:
0000FBr 4  7F 00 00     	.byte $7f,$00,$00
0000FEr 4               @env17:
0000FEr 4  C2 7F 00 00  	.byte $c2,$7f,$00,$00
000102r 4               @env18:
000102r 4  00 C0 C0 BF  	.byte $00,$c0,$c0,$bf,$02,$be,$06,$bf,$02,$c0,$02,$c1,$02,$c2,$06,$c1,$02,$c0,$00,$01
000106r 4  02 BE 06 BF  
00010Ar 4  02 C0 02 C1  
000116r 4               @env19:
000116r 4  E7 E4 E2 DC  	.byte $e7,$e4,$e2,$dc,$d9,$d6,$d5,$00,$06
00011Ar 4  D9 D6 D5 00  
00011Er 4  06           
00011Fr 4               @env20:
00011Fr 4  C1 7F 00 00  	.byte $c1,$7f,$00,$00
000123r 4               @env21:
000123r 4  C0 C1 C1 C0  	.byte $c0,$c1,$c1,$c0,$00,$03
000127r 4  00 03        
000129r 4               @env22:
000129r 4  00 C0 BF BE  	.byte $00,$c0,$bf,$be,$02,$bf,$c1,$c2,$02,$c1,$00,$01
00012Dr 4  02 BF C1 C2  
000131r 4  02 C1 00 01  
000135r 4               @env23:
000135r 4  C0 C0 CC 00  	.byte $c0,$c0,$cc,$00,$00
000139r 4  00           
00013Ar 4               @env24:
00013Ar 4  C0 C0 CA 00  	.byte $c0,$c0,$ca,$00,$00
00013Er 4  00           
00013Fr 4               @env25:
00013Fr 4  C0 C0 C2 00  	.byte $c0,$c0,$c2,$00,$00
000143r 4  00           
000144r 4               @env26:
000144r 4  C0 C0 C6 00  	.byte $c0,$c0,$c6,$00,$00
000148r 4  00           
000149r 4               @env27:
000149r 4  C0 C0 C7 00  	.byte $c0,$c0,$c7,$00,$00
00014Dr 4  00           
00014Er 4               @env28:
00014Er 4  C0 C0 C5 00  	.byte $c0,$c0,$c5,$00,$00
000152r 4  00           
000153r 4               @env29:
000153r 4  00 C0 BC C0  	.byte $00,$c0,$bc,$c0,$c4,$00,$01
000157r 4  C4 00 01     
00015Ar 4               @env30:
00015Ar 4  C0 C0 C4 00  	.byte $c0,$c0,$c4,$00,$00
00015Er 4  00           
00015Fr 4               @env31:
00015Fr 4  C0 C1 02 C0  	.byte $c0,$c1,$02,$c0,$00,$03
000163r 4  00 03        
000165r 4               @env32:
000165r 4  00 C6 C9 CF  	.byte $00,$c6,$c9,$cf,$00,$03
000169r 4  00 03        
00016Br 4               @env33:
00016Br 4  00 CC CA C9  	.byte $00,$cc,$ca,$c9,$c8,$c7,$c7,$c6,$c5,$c5,$c4,$c3,$02,$c2,$c2,$c1,$00,$0f
00016Fr 4  C8 C7 C7 C6  
000173r 4  C5 C5 C4 C3  
00017Dr 4               @env34:
00017Dr 4  CD 7F 00 00  	.byte $cd,$7f,$00,$00
000181r 4               
000181r 4               @samples:
000181r 4  07 18 09 40  	.byte $07+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$09,$40 ; 00 piano-002 (Pitch:9)
000185r 4  07 18 0C 40  	.byte $07+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$0c,$40 ; 01 piano-002 (Pitch:12)
000189r 4  00 18 01 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$01,$40 ; 02 piano-003 (Pitch:1)
00018Dr 4  00 18 02 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$02,$40 ; 03 piano-003 (Pitch:2)
000191r 4  00 18 03 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$03,$40 ; 04 piano-003 (Pitch:3)
000195r 4  00 18 04 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$04,$40 ; 05 piano-003 (Pitch:4)
000199r 4  00 18 05 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$05,$40 ; 06 piano-003 (Pitch:5)
00019Dr 4  00 18 06 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$06,$40 ; 07 piano-003 (Pitch:6)
0001A1r 4  00 18 07 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$07,$40 ; 08 piano-003 (Pitch:7)
0001A5r 4  00 18 08 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$08,$40 ; 09 piano-003 (Pitch:8)
0001A9r 4  00 18 0A 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$0a,$40 ; 0a piano-003 (Pitch:10)
0001ADr 4  00 18 0B 40  	.byte $00+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$0b,$40 ; 0b piano-003 (Pitch:11)
0001B1r 4  0E 18 03 40  	.byte $0e+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$03,$40 ; 0c piano-004 (Pitch:3)
0001B5r 4  0E 18 04 40  	.byte $0e+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$04,$40 ; 0d piano-004 (Pitch:4)
0001B9r 4  0E 18 07 40  	.byte $0e+.lobyte(FAMISTUDIO_DPCM_PTR),$18,$07,$40 ; 0e piano-004 (Pitch:7)
0001BDr 4               
0001BDr 4               @song0ch0:
0001BDr 4  46 05        	.byte $46, $05
0001BFr 4               @song0ref3:
0001BFr 4  7E           	.byte $7e
0001C0r 4               @song0ref4:
0001C0r 4  4F 02        	.byte $4f, $02
0001C2r 4               @song0ref6:
0001C2r 4  86 35 74 80  	.byte $86, $35, $74, $80, $29, $7e, $86, $30, $74, $80, $35, $7e, $86, $2e, $74, $80, $30, $7e, $86, $29, $74, $80, $2e, $7e
0001C6r 4  29 7E 86 30  
0001CAr 4  74 80 35 7E  
0001DAr 4  86 35 74 80  	.byte $86, $35, $74, $80, $29, $7e, $86, $30, $74, $80, $35, $7e, $86, $2e, $74, $80, $30, $7e, $86, $29, $74, $80, $2e, $7e
0001DEr 4  29 7E 86 30  
0001E2r 4  74 80 35 7E  
0001F2r 4  41 10        	.byte $41, $10
0001F4r 4  rr rr        	.word @song0ref6
0001F6r 4  7E           	.byte $7e
0001F7r 4  41 10        	.byte $41, $10
0001F9r 4  rr rr        	.word @song0ref6
0001FBr 4  7E           	.byte $7e
0001FCr 4  41 10        	.byte $41, $10
0001FEr 4  rr rr        	.word @song0ref6
000200r 4               @song0ch0loop:
000200r 4  4C           	.byte $4c
000201r 4  41 10        	.byte $41, $10
000203r 4  rr rr        	.word @song0ref3
000205r 4  7E           	.byte $7e
000206r 4  41 10        	.byte $41, $10
000208r 4  rr rr        	.word @song0ref6
00020Ar 4  7E           	.byte $7e
00020Br 4  41 10        	.byte $41, $10
00020Dr 4  rr rr        	.word @song0ref6
00020Fr 4  7E           	.byte $7e
000210r 4  41 10        	.byte $41, $10
000212r 4  rr rr        	.word @song0ref6
000214r 4  41 10        	.byte $41, $10
000216r 4  rr rr        	.word @song0ref3
000218r 4  7E           	.byte $7e
000219r 4  41 10        	.byte $41, $10
00021Br 4  rr rr        	.word @song0ref6
00021Dr 4  7E           	.byte $7e
00021Er 4  41 10        	.byte $41, $10
000220r 4  rr rr        	.word @song0ref6
000222r 4  7E           	.byte $7e
000223r 4  41 10        	.byte $41, $10
000225r 4  rr rr        	.word @song0ref6
000227r 4  41 10        	.byte $41, $10
000229r 4  rr rr        	.word @song0ref3
00022Br 4  7E           	.byte $7e
00022Cr 4  41 10        	.byte $41, $10
00022Er 4  rr rr        	.word @song0ref6
000230r 4  7E           	.byte $7e
000231r 4  41 10        	.byte $41, $10
000233r 4  rr rr        	.word @song0ref6
000235r 4  7E           	.byte $7e
000236r 4  41 10        	.byte $41, $10
000238r 4  rr rr        	.word @song0ref6
00023Ar 4               @song0ref112:
00023Ar 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $02
00023Er 4  4F 02        
000240r 4               @song0ref118:
000240r 4  1D 75 81 7A  	.byte $1d, $75, $81, $7a, $4b, .lobyte(@env28), .hibyte(@env28), $1f, $75, $4b, .lobyte(@env23), .hibyte(@env23), $1d, $7a
000244r 4  4B rr rr 1F  
000248r 4  75 4B rr rr  
00024Er 4  4D 21 75 4B  	.byte $4d, $21, $75, $4b, .lobyte(@env28), .hibyte(@env28), $1f, $7a, $4d, $1d, $75, $81, $7a, $4b, .lobyte(@env23), .hibyte(@env23)
000252r 4  rr rr 1F 7A  
000256r 4  4D 1D 75 81  
00025Er 4  1D 75 81 7A  	.byte $1d, $75, $81, $7a, $4b, .lobyte(@env28), .hibyte(@env28), $1f, $75, $4b, .lobyte(@env23), .hibyte(@env23), $1d, $7a
000262r 4  4B rr rr 1F  
000266r 4  75 4B rr rr  
00026Cr 4  4D 21 75 4B  	.byte $4d, $21, $75, $4b, .lobyte(@env28), .hibyte(@env28), $1f, $7a, $4d, $1d, $75, $81, $7a, $4b, .lobyte(@env23), .hibyte(@env23)
000270r 4  rr rr 1F 7A  
000274r 4  4D 1D 75 81  
00027Cr 4  4F 03        	.byte $4f, $03
00027Er 4  41 10        	.byte $41, $10
000280r 4  rr rr        	.word @song0ref118
000282r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000286r 4  4F 00        
000288r 4  41 10        	.byte $41, $10
00028Ar 4  rr rr        	.word @song0ref118
00028Cr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
000290r 4  4F 01        
000292r 4  41 10        	.byte $41, $10
000294r 4  rr rr        	.word @song0ref118
000296r 4  41 10        	.byte $41, $10
000298r 4  rr rr        	.word @song0ref112
00029Ar 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00029Er 4  4F 03        
0002A0r 4  41 10        	.byte $41, $10
0002A2r 4  rr rr        	.word @song0ref118
0002A4r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
0002A8r 4  4F 00        
0002AAr 4  41 10        	.byte $41, $10
0002ACr 4  rr rr        	.word @song0ref118
0002AEr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
0002B2r 4  4F 01        
0002B4r 4  41 10        	.byte $41, $10
0002B6r 4  rr rr        	.word @song0ref118
0002B8r 4  41 10        	.byte $41, $10
0002BAr 4  rr rr        	.word @song0ref112
0002BCr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0002C0r 4  4F 03        
0002C2r 4  41 10        	.byte $41, $10
0002C4r 4  rr rr        	.word @song0ref118
0002C6r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
0002CAr 4  4F 00        
0002CCr 4  41 10        	.byte $41, $10
0002CEr 4  rr rr        	.word @song0ref118
0002D0r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
0002D4r 4  4F 01        
0002D6r 4  41 10        	.byte $41, $10
0002D8r 4  rr rr        	.word @song0ref118
0002DAr 4  41 10        	.byte $41, $10
0002DCr 4  rr rr        	.word @song0ref112
0002DEr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0002E2r 4  4F 03        
0002E4r 4  41 10        	.byte $41, $10
0002E6r 4  rr rr        	.word @song0ref118
0002E8r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
0002ECr 4  4F 00        
0002EEr 4  41 10        	.byte $41, $10
0002F0r 4  rr rr        	.word @song0ref118
0002F2r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
0002F6r 4  4F 01        
0002F8r 4  41 10        	.byte $41, $10
0002FAr 4  rr rr        	.word @song0ref118
0002FCr 4               @song0ref291:
0002FCr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $02
000300r 4  4F 02        
000302r 4               @song0ref297:
000302r 4  1D 75 4B rr  	.byte $1d, $75, $4b, .lobyte(@env10), .hibyte(@env10), $4c, $22, $7a, $4b, .lobyte(@env26), .hibyte(@env26), $1f, $75, $4b
000306r 4  rr 4C 22 7A  
00030Ar 4  4B rr rr 1F  
000310r 4  rr rr 1D 7A  	.byte .lobyte(@env23), .hibyte(@env23), $1d, $7a, $4b, .lobyte(@env30), .hibyte(@env30), $20, $75, $4b, .lobyte(@env26), .hibyte(@env26)
000314r 4  4B rr rr 20  
000318r 4  75 4B rr rr  
00031Cr 4  1F 7A 4B rr  	.byte $1f, $7a, $4b, .lobyte(@env10), .hibyte(@env10), $4c, $22, $75, $4b, .lobyte(@env30), .hibyte(@env30), $20, $7a, $4b
000320r 4  rr 4C 22 75  
000324r 4  4B rr rr 20  
00032Ar 4  rr rr 1D 75  	.byte .lobyte(@env23), .hibyte(@env23), $1d, $75, $4b, .lobyte(@env10), .hibyte(@env10), $4c, $22, $7a, $4b, .lobyte(@env26)
00032Er 4  4B rr rr 4C  
000332r 4  22 7A 4B rr  
000336r 4  rr 1F 75 4B  	.byte .hibyte(@env26), $1f, $75, $4b, .lobyte(@env23), .hibyte(@env23), $1d, $7a, $4b, .lobyte(@env30), .hibyte(@env30), $20
00033Ar 4  rr rr 1D 7A  
00033Er 4  4B rr rr 20  
000342r 4  75 4B rr rr  	.byte $75, $4b, .lobyte(@env26), .hibyte(@env26), $1f, $7a, $4b, .lobyte(@env10), .hibyte(@env10), $4c, $22, $75, $4b, .lobyte(@env30)
000346r 4  1F 7A 4B rr  
00034Ar 4  rr 4C 22 75  
000350r 4  rr 20 7A 4B  	.byte .hibyte(@env30), $20, $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
000354r 4  rr rr 4F 03  
000358r 4  41 10        	.byte $41, $10
00035Ar 4  rr rr        	.word @song0ref297
00035Cr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000360r 4  4F 00        
000362r 4  41 10        	.byte $41, $10
000364r 4  rr rr        	.word @song0ref297
000366r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
00036Ar 4  4F 01        
00036Cr 4  41 10        	.byte $41, $10
00036Er 4  rr rr        	.word @song0ref297
000370r 4               @song0ref404:
000370r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $02
000374r 4  4F 02        
000376r 4               @song0ref410:
000376r 4  1D 75 4B rr  	.byte $1d, $75, $4b, .lobyte(@env28), .hibyte(@env28), $1d, $7a, $4d, $20, $75, $4b, .lobyte(@env23), .hibyte(@env23), $1d
00037Ar 4  rr 1D 7A 4D  
00037Er 4  20 75 4B rr  
000384r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env25), .hibyte(@env25), $22, $75, $4b, .lobyte(@env28), .hibyte(@env28), $20, $7a, $4d, $1d, $75
000388r 4  22 75 4B rr  
00038Cr 4  rr 20 7A 4D  
000392r 4  4B rr rr 22  	.byte $4b, .lobyte(@env25), .hibyte(@env25), $22, $7a, $4b, .lobyte(@env23), .hibyte(@env23), $1d, $75, $4b, .lobyte(@env28)
000396r 4  7A 4B rr rr  
00039Ar 4  1D 75 4B rr  
00039Er 4  rr 1D 7A 4D  	.byte .hibyte(@env28), $1d, $7a, $4d, $20, $75, $4b, .lobyte(@env23), .hibyte(@env23), $1d, $7a, $4b, .lobyte(@env25), .hibyte(@env25)
0003A2r 4  20 75 4B rr  
0003A6r 4  rr 1D 7A 4B  
0003ACr 4  22 75 4B rr  	.byte $22, $75, $4b, .lobyte(@env28), .hibyte(@env28), $20, $7a, $4d, $1d, $75, $4b, .lobyte(@env25), .hibyte(@env25), $22
0003B0r 4  rr 20 7A 4D  
0003B4r 4  1D 75 4B rr  
0003BAr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0003BEr 4  4F 03        
0003C0r 4  41 10        	.byte $41, $10
0003C2r 4  rr rr        	.word @song0ref410
0003C4r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
0003C8r 4  4F 00        
0003CAr 4  41 10        	.byte $41, $10
0003CCr 4  rr rr        	.word @song0ref410
0003CEr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
0003D2r 4  4F 01        
0003D4r 4  41 10        	.byte $41, $10
0003D6r 4  rr rr        	.word @song0ref410
0003D8r 4  41 10        	.byte $41, $10
0003DAr 4  rr rr        	.word @song0ref291
0003DCr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0003E0r 4  4F 03        
0003E2r 4  41 10        	.byte $41, $10
0003E4r 4  rr rr        	.word @song0ref297
0003E6r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
0003EAr 4  4F 00        
0003ECr 4  41 10        	.byte $41, $10
0003EEr 4  rr rr        	.word @song0ref297
0003F0r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
0003F4r 4  4F 01        
0003F6r 4  41 10        	.byte $41, $10
0003F8r 4  rr rr        	.word @song0ref297
0003FAr 4  41 10        	.byte $41, $10
0003FCr 4  rr rr        	.word @song0ref404
0003FEr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
000402r 4  4F 03        
000404r 4  41 10        	.byte $41, $10
000406r 4  rr rr        	.word @song0ref410
000408r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
00040Cr 4  4F 00        
00040Er 4  41 10        	.byte $41, $10
000410r 4  rr rr        	.word @song0ref410
000412r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
000416r 4  4F 01        
000418r 4  41 10        	.byte $41, $10
00041Ar 4  rr rr        	.word @song0ref410
00041Cr 4  41 10        	.byte $41, $10
00041Er 4  rr rr        	.word @song0ref291
000420r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
000424r 4  4F 03        
000426r 4  41 10        	.byte $41, $10
000428r 4  rr rr        	.word @song0ref297
00042Ar 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
00042Er 4  4F 00        
000430r 4  41 10        	.byte $41, $10
000432r 4  rr rr        	.word @song0ref297
000434r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
000438r 4  4F 01        
00043Ar 4  41 10        	.byte $41, $10
00043Cr 4  rr rr        	.word @song0ref297
00043Er 4  41 10        	.byte $41, $10
000440r 4  rr rr        	.word @song0ref291
000442r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
000446r 4  4F 03        
000448r 4  41 10        	.byte $41, $10
00044Ar 4  rr rr        	.word @song0ref297
00044Cr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000450r 4  4F 00        
000452r 4  41 10        	.byte $41, $10
000454r 4  rr rr        	.word @song0ref297
000456r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
00045Ar 4  4F 01        
00045Cr 4  41 10        	.byte $41, $10
00045Er 4  rr rr        	.word @song0ref297
000460r 4  41 10        	.byte $41, $10
000462r 4  rr rr        	.word @song0ref291
000464r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
000468r 4  4F 03        
00046Ar 4  41 10        	.byte $41, $10
00046Cr 4  rr rr        	.word @song0ref297
00046Er 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000472r 4  4F 00        
000474r 4  41 10        	.byte $41, $10
000476r 4  rr rr        	.word @song0ref297
000478r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
00047Cr 4  4F 01        
00047Er 4  41 10        	.byte $41, $10
000480r 4  rr rr        	.word @song0ref297
000482r 4  41 10        	.byte $41, $10
000484r 4  rr rr        	.word @song0ref291
000486r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00048Ar 4  4F 03        
00048Cr 4  41 10        	.byte $41, $10
00048Er 4  rr rr        	.word @song0ref297
000490r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000494r 4  4F 00        
000496r 4  41 10        	.byte $41, $10
000498r 4  rr rr        	.word @song0ref297
00049Ar 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
00049Er 4  4F 01        
0004A0r 4  41 10        	.byte $41, $10
0004A2r 4  rr rr        	.word @song0ref297
0004A4r 4               @song0ref685:
0004A4r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $02
0004A8r 4  4F 02        
0004AAr 4               @song0ref691:
0004AAr 4  20 75 81 7A  	.byte $20, $75, $81, $7a, $4b, .lobyte(@env28), .hibyte(@env28), $22, $75, $4b, .lobyte(@env23), .hibyte(@env23), $20, $7a
0004AEr 4  4B rr rr 22  
0004B2r 4  75 4B rr rr  
0004B8r 4  4D 24 75 4B  	.byte $4d, $24, $75, $4b, .lobyte(@env28), .hibyte(@env28), $22, $7a, $4d, $20, $75, $81, $7a, $4b, .lobyte(@env23), .hibyte(@env23)
0004BCr 4  rr rr 22 7A  
0004C0r 4  4D 20 75 81  
0004C8r 4  20 75 81 7A  	.byte $20, $75, $81, $7a, $4b, .lobyte(@env28), .hibyte(@env28), $22, $75, $4b, .lobyte(@env23), .hibyte(@env23), $20, $7a
0004CCr 4  4B rr rr 22  
0004D0r 4  75 4B rr rr  
0004D6r 4  4D 24 75 4B  	.byte $4d, $24, $75, $4b, .lobyte(@env28), .hibyte(@env28), $22, $7a, $4d, $20, $75, $81, $7a, $4b, .lobyte(@env23), .hibyte(@env23)
0004DAr 4  rr rr 22 7A  
0004DEr 4  4D 20 75 81  
0004E6r 4  4F 03        	.byte $4f, $03
0004E8r 4  41 10        	.byte $41, $10
0004EAr 4  rr rr        	.word @song0ref691
0004ECr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
0004F0r 4  4F 00        
0004F2r 4  41 10        	.byte $41, $10
0004F4r 4  rr rr        	.word @song0ref691
0004F6r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
0004FAr 4  4F 01        
0004FCr 4  41 10        	.byte $41, $10
0004FEr 4  rr rr        	.word @song0ref691
000500r 4  41 10        	.byte $41, $10
000502r 4  rr rr        	.word @song0ref685
000504r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
000508r 4  4F 03        
00050Ar 4  41 10        	.byte $41, $10
00050Cr 4  rr rr        	.word @song0ref691
00050Er 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000512r 4  4F 00        
000514r 4  41 10        	.byte $41, $10
000516r 4  rr rr        	.word @song0ref691
000518r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
00051Cr 4  4F 01        
00051Er 4  41 10        	.byte $41, $10
000520r 4  rr rr        	.word @song0ref691
000522r 4  41 10        	.byte $41, $10
000524r 4  rr rr        	.word @song0ref685
000526r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00052Ar 4  4F 03        
00052Cr 4  41 10        	.byte $41, $10
00052Er 4  rr rr        	.word @song0ref691
000530r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000534r 4  4F 00        
000536r 4  41 10        	.byte $41, $10
000538r 4  rr rr        	.word @song0ref691
00053Ar 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
00053Er 4  4F 01        
000540r 4  41 10        	.byte $41, $10
000542r 4  rr rr        	.word @song0ref691
000544r 4  41 10        	.byte $41, $10
000546r 4  rr rr        	.word @song0ref685
000548r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00054Cr 4  4F 03        
00054Er 4  41 10        	.byte $41, $10
000550r 4  rr rr        	.word @song0ref691
000552r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000556r 4  4F 00        
000558r 4  41 10        	.byte $41, $10
00055Ar 4  rr rr        	.word @song0ref691
00055Cr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
000560r 4  4F 01        
000562r 4  41 10        	.byte $41, $10
000564r 4  rr rr        	.word @song0ref691
000566r 4  41 10        	.byte $41, $10
000568r 4  rr rr        	.word @song0ref291
00056Ar 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00056Er 4  4F 03        
000570r 4  41 10        	.byte $41, $10
000572r 4  rr rr        	.word @song0ref297
000574r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000578r 4  4F 00        
00057Ar 4  41 10        	.byte $41, $10
00057Cr 4  rr rr        	.word @song0ref297
00057Er 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
000582r 4  4F 01        
000584r 4  41 10        	.byte $41, $10
000586r 4  rr rr        	.word @song0ref297
000588r 4  41 10        	.byte $41, $10
00058Ar 4  rr rr        	.word @song0ref404
00058Cr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
000590r 4  4F 03        
000592r 4  41 10        	.byte $41, $10
000594r 4  rr rr        	.word @song0ref410
000596r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
00059Ar 4  4F 00        
00059Cr 4  41 10        	.byte $41, $10
00059Er 4  rr rr        	.word @song0ref410
0005A0r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
0005A4r 4  4F 01        
0005A6r 4  41 10        	.byte $41, $10
0005A8r 4  rr rr        	.word @song0ref410
0005AAr 4  41 10        	.byte $41, $10
0005ACr 4  rr rr        	.word @song0ref291
0005AEr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0005B2r 4  4F 03        
0005B4r 4  41 10        	.byte $41, $10
0005B6r 4  rr rr        	.word @song0ref297
0005B8r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
0005BCr 4  4F 00        
0005BEr 4  41 10        	.byte $41, $10
0005C0r 4  rr rr        	.word @song0ref297
0005C2r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
0005C6r 4  4F 01        
0005C8r 4  41 10        	.byte $41, $10
0005CAr 4  rr rr        	.word @song0ref297
0005CCr 4  41 10        	.byte $41, $10
0005CEr 4  rr rr        	.word @song0ref404
0005D0r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0005D4r 4  4F 03        
0005D6r 4  41 10        	.byte $41, $10
0005D8r 4  rr rr        	.word @song0ref410
0005DAr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
0005DEr 4  4F 00        
0005E0r 4  41 10        	.byte $41, $10
0005E2r 4  rr rr        	.word @song0ref410
0005E4r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
0005E8r 4  4F 01        
0005EAr 4  41 10        	.byte $41, $10
0005ECr 4  rr rr        	.word @song0ref410
0005EEr 4  41 10        	.byte $41, $10
0005F0r 4  rr rr        	.word @song0ref291
0005F2r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0005F6r 4  4F 03        
0005F8r 4  41 10        	.byte $41, $10
0005FAr 4  rr rr        	.word @song0ref297
0005FCr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000600r 4  4F 00        
000602r 4  41 10        	.byte $41, $10
000604r 4  rr rr        	.word @song0ref297
000606r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
00060Ar 4  4F 01        
00060Cr 4  41 10        	.byte $41, $10
00060Er 4  rr rr        	.word @song0ref297
000610r 4  41 10        	.byte $41, $10
000612r 4  rr rr        	.word @song0ref291
000614r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
000618r 4  4F 03        
00061Ar 4  41 10        	.byte $41, $10
00061Cr 4  rr rr        	.word @song0ref297
00061Er 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000622r 4  4F 00        
000624r 4  41 10        	.byte $41, $10
000626r 4  rr rr        	.word @song0ref297
000628r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
00062Cr 4  4F 01        
00062Er 4  41 10        	.byte $41, $10
000630r 4  rr rr        	.word @song0ref297
000632r 4  41 10        	.byte $41, $10
000634r 4  rr rr        	.word @song0ref291
000636r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00063Ar 4  4F 03        
00063Cr 4  41 10        	.byte $41, $10
00063Er 4  rr rr        	.word @song0ref297
000640r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000644r 4  4F 00        
000646r 4  41 10        	.byte $41, $10
000648r 4  rr rr        	.word @song0ref297
00064Ar 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
00064Er 4  4F 01        
000650r 4  41 10        	.byte $41, $10
000652r 4  rr rr        	.word @song0ref297
000654r 4  41 10        	.byte $41, $10
000656r 4  rr rr        	.word @song0ref291
000658r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00065Cr 4  4F 03        
00065Er 4  41 10        	.byte $41, $10
000660r 4  rr rr        	.word @song0ref297
000662r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $00
000666r 4  4F 00        
000668r 4  41 10        	.byte $41, $10
00066Ar 4  rr rr        	.word @song0ref297
00066Cr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $01
000670r 4  4F 01        
000672r 4  41 10        	.byte $41, $10
000674r 4  rr rr        	.word @song0ref297
000676r 4  41 10        	.byte $41, $10
000678r 4  rr rr        	.word @song0ref291
00067Ar 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00067Er 4  4F 03        
000680r 4  41 10        	.byte $41, $10
000682r 4  rr rr        	.word @song0ref297
000684r 4  41 10        	.byte $41, $10
000686r 4  rr rr        	.word @song0ref291
000688r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00068Cr 4  4F 03        
00068Er 4  41 10        	.byte $41, $10
000690r 4  rr rr        	.word @song0ref297
000692r 4  41 10        	.byte $41, $10
000694r 4  rr rr        	.word @song0ref291
000696r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
00069Ar 4  4F 03        
00069Cr 4  41 10        	.byte $41, $10
00069Er 4  rr rr        	.word @song0ref297
0006A0r 4  41 10        	.byte $41, $10
0006A2r 4  rr rr        	.word @song0ref291
0006A4r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0006A8r 4  4F 03        
0006AAr 4  41 10        	.byte $41, $10
0006ACr 4  rr rr        	.word @song0ref297
0006AEr 4  41 10        	.byte $41, $10
0006B0r 4  rr rr        	.word @song0ref291
0006B2r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0006B6r 4  4F 03        
0006B8r 4  41 10        	.byte $41, $10
0006BAr 4  rr rr        	.word @song0ref297
0006BCr 4  41 10        	.byte $41, $10
0006BEr 4  rr rr        	.word @song0ref291
0006C0r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0006C4r 4  4F 03        
0006C6r 4  41 10        	.byte $41, $10
0006C8r 4  rr rr        	.word @song0ref297
0006CAr 4  41 10        	.byte $41, $10
0006CCr 4  rr rr        	.word @song0ref291
0006CEr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0006D2r 4  4F 03        
0006D4r 4  41 10        	.byte $41, $10
0006D6r 4  rr rr        	.word @song0ref297
0006D8r 4  41 10        	.byte $41, $10
0006DAr 4  rr rr        	.word @song0ref291
0006DCr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env23), .hibyte(@env23), $4f, $03
0006E0r 4  4F 03        
0006E2r 4  41 10        	.byte $41, $10
0006E4r 4  rr rr        	.word @song0ref297
0006E6r 4  77 4B rr rr  	.byte $77, $4b, .lobyte(@env10), .hibyte(@env10), $4c
0006EAr 4  4C           
0006EBr 4               @song0ref1205:
0006EBr 4  4F 02        	.byte $4f, $02
0006EDr 4               @song0ref1207:
0006EDr 4  35 73 29 77  	.byte $35, $73, $29, $77, $31, $73, $35, $77, $30, $73, $31, $77, $29, $73, $30, $77, $35, $73, $29, $77, $31, $73, $35, $77
0006F1r 4  31 73 35 77  
0006F5r 4  30 73 31 77  
000705r 4  30 73 31 77  	.byte $30, $73, $31, $77, $29, $73, $30, $77
000709r 4  29 73 30 77  
00070Dr 4  41 10        	.byte $41, $10
00070Fr 4  rr rr        	.word @song0ref1207
000711r 4  77           	.byte $77
000712r 4  41 10        	.byte $41, $10
000714r 4  rr rr        	.word @song0ref1207
000716r 4  77           	.byte $77
000717r 4  41 10        	.byte $41, $10
000719r 4  rr rr        	.word @song0ref1207
00071Br 4  77           	.byte $77
00071Cr 4  41 10        	.byte $41, $10
00071Er 4  rr rr        	.word @song0ref1205
000720r 4  77           	.byte $77
000721r 4  41 10        	.byte $41, $10
000723r 4  rr rr        	.word @song0ref1207
000725r 4  77           	.byte $77
000726r 4  41 10        	.byte $41, $10
000728r 4  rr rr        	.word @song0ref1207
00072Ar 4  77           	.byte $77
00072Br 4  41 10        	.byte $41, $10
00072Dr 4  rr rr        	.word @song0ref1207
00072Fr 4  77           	.byte $77
000730r 4  41 10        	.byte $41, $10
000732r 4  rr rr        	.word @song0ref1205
000734r 4  77           	.byte $77
000735r 4  41 10        	.byte $41, $10
000737r 4  rr rr        	.word @song0ref1207
000739r 4  77           	.byte $77
00073Ar 4  41 10        	.byte $41, $10
00073Cr 4  rr rr        	.word @song0ref1207
00073Er 4  77           	.byte $77
00073Fr 4  41 10        	.byte $41, $10
000741r 4  rr rr        	.word @song0ref1207
000743r 4  77           	.byte $77
000744r 4  41 10        	.byte $41, $10
000746r 4  rr rr        	.word @song0ref1205
000748r 4  77           	.byte $77
000749r 4  41 10        	.byte $41, $10
00074Br 4  rr rr        	.word @song0ref1207
00074Dr 4  77           	.byte $77
00074Er 4  41 10        	.byte $41, $10
000750r 4  rr rr        	.word @song0ref1207
000752r 4  77           	.byte $77
000753r 4  41 10        	.byte $41, $10
000755r 4  rr rr        	.word @song0ref1207
000757r 4               @song0ref1298:
000757r 4  77 4F 02     	.byte $77, $4f, $02
00075Ar 4               @song0ref1301:
00075Ar 4  35 73 2E 77  	.byte $35, $73, $2e, $77, $31, $73, $35, $77, $30, $73, $31, $77, $2e, $73, $30, $77, $35, $73, $2e, $77, $31, $73, $35, $77
00075Er 4  31 73 35 77  
000762r 4  30 73 31 77  
000772r 4  30 73 31 77  	.byte $30, $73, $31, $77, $2e, $73, $30, $77
000776r 4  2E 73 30 77  
00077Ar 4  41 10        	.byte $41, $10
00077Cr 4  rr rr        	.word @song0ref1301
00077Er 4  77           	.byte $77
00077Fr 4  41 10        	.byte $41, $10
000781r 4  rr rr        	.word @song0ref1301
000783r 4  77           	.byte $77
000784r 4  41 10        	.byte $41, $10
000786r 4  rr rr        	.word @song0ref1301
000788r 4  41 10        	.byte $41, $10
00078Ar 4  rr rr        	.word @song0ref1298
00078Cr 4  77           	.byte $77
00078Dr 4  41 10        	.byte $41, $10
00078Fr 4  rr rr        	.word @song0ref1301
000791r 4  77           	.byte $77
000792r 4  41 10        	.byte $41, $10
000794r 4  rr rr        	.word @song0ref1301
000796r 4  77           	.byte $77
000797r 4  41 10        	.byte $41, $10
000799r 4  rr rr        	.word @song0ref1301
00079Br 4  77           	.byte $77
00079Cr 4  41 10        	.byte $41, $10
00079Er 4  rr rr        	.word @song0ref1205
0007A0r 4  77           	.byte $77
0007A1r 4  41 10        	.byte $41, $10
0007A3r 4  rr rr        	.word @song0ref1207
0007A5r 4  77           	.byte $77
0007A6r 4  41 10        	.byte $41, $10
0007A8r 4  rr rr        	.word @song0ref1207
0007AAr 4  77           	.byte $77
0007ABr 4  41 10        	.byte $41, $10
0007ADr 4  rr rr        	.word @song0ref1207
0007AFr 4  77           	.byte $77
0007B0r 4  41 10        	.byte $41, $10
0007B2r 4  rr rr        	.word @song0ref1205
0007B4r 4  77           	.byte $77
0007B5r 4  41 10        	.byte $41, $10
0007B7r 4  rr rr        	.word @song0ref1207
0007B9r 4  77           	.byte $77
0007BAr 4  41 10        	.byte $41, $10
0007BCr 4  rr rr        	.word @song0ref1207
0007BEr 4  77           	.byte $77
0007BFr 4  41 10        	.byte $41, $10
0007C1r 4  rr rr        	.word @song0ref1207
0007C3r 4               @song0ref1391:
0007C3r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $02
0007C7r 4  4F 02        
0007C9r 4               @song0ref1397:
0007C9r 4  1D 75 4B rr  	.byte $1d, $75, $4b, .lobyte(@env10), .hibyte(@env10), $4c, $22, $7a, $4b, .lobyte(@env24), .hibyte(@env24), $1f, $75, $4d
0007CDr 4  rr 4C 22 7A  
0007D1r 4  4B rr rr 1F  
0007D7r 4  1D 7A 4B rr  	.byte $1d, $7a, $4b, .lobyte(@env27), .hibyte(@env27), $20, $75, $4b, .lobyte(@env24), .hibyte(@env24), $1f, $7a, $4b, .lobyte(@env10)
0007DBr 4  rr 20 75 4B  
0007DFr 4  rr rr 1F 7A  
0007E5r 4  rr 4C 22 75  	.byte .hibyte(@env10), $4c, $22, $75, $4b, .lobyte(@env27), .hibyte(@env27), $20, $7a, $4b, .lobyte(@env24), .hibyte(@env24)
0007E9r 4  4B rr rr 20  
0007EDr 4  7A 4B rr rr  
0007F1r 4  1D 75 4B rr  	.byte $1d, $75, $4b, .lobyte(@env10), .hibyte(@env10), $4c, $22, $7a, $4b, .lobyte(@env24), .hibyte(@env24), $1f, $75, $4d
0007F5r 4  rr 4C 22 7A  
0007F9r 4  4B rr rr 1F  
0007FFr 4  1D 7A 4B rr  	.byte $1d, $7a, $4b, .lobyte(@env27), .hibyte(@env27), $20, $75, $4b, .lobyte(@env24), .hibyte(@env24), $1f, $7a, $4b, .lobyte(@env10)
000803r 4  rr 20 75 4B  
000807r 4  rr rr 1F 7A  
00080Dr 4  rr 4C 22 75  	.byte .hibyte(@env10), $4c, $22, $75, $4b, .lobyte(@env27), .hibyte(@env27), $20, $7a, $4b, .lobyte(@env24), .hibyte(@env24)
000811r 4  4B rr rr 20  
000815r 4  7A 4B rr rr  
000819r 4  4F 03        	.byte $4f, $03
00081Br 4  41 10        	.byte $41, $10
00081Dr 4  rr rr        	.word @song0ref1397
00081Fr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $00
000823r 4  4F 00        
000825r 4  41 10        	.byte $41, $10
000827r 4  rr rr        	.word @song0ref1397
000829r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $01
00082Dr 4  4F 01        
00082Fr 4  41 10        	.byte $41, $10
000831r 4  rr rr        	.word @song0ref1397
000833r 4  41 10        	.byte $41, $10
000835r 4  rr rr        	.word @song0ref1391
000837r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $03
00083Br 4  4F 03        
00083Dr 4  41 10        	.byte $41, $10
00083Fr 4  rr rr        	.word @song0ref1397
000841r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $00
000845r 4  4F 00        
000847r 4  41 10        	.byte $41, $10
000849r 4  rr rr        	.word @song0ref1397
00084Br 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $01
00084Fr 4  4F 01        
000851r 4  41 10        	.byte $41, $10
000853r 4  rr rr        	.word @song0ref1397
000855r 4  41 10        	.byte $41, $10
000857r 4  rr rr        	.word @song0ref1391
000859r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $03
00085Dr 4  4F 03        
00085Fr 4  41 10        	.byte $41, $10
000861r 4  rr rr        	.word @song0ref1397
000863r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $00
000867r 4  4F 00        
000869r 4  41 10        	.byte $41, $10
00086Br 4  rr rr        	.word @song0ref1397
00086Dr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $01
000871r 4  4F 01        
000873r 4  41 10        	.byte $41, $10
000875r 4  rr rr        	.word @song0ref1397
000877r 4  41 10        	.byte $41, $10
000879r 4  rr rr        	.word @song0ref1391
00087Br 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $03
00087Fr 4  4F 03        
000881r 4  41 10        	.byte $41, $10
000883r 4  rr rr        	.word @song0ref1397
000885r 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $00
000889r 4  4F 00        
00088Br 4  41 10        	.byte $41, $10
00088Dr 4  rr rr        	.word @song0ref1397
00088Fr 4  7A 4B rr rr  	.byte $7a, $4b, .lobyte(@env24), .hibyte(@env24), $4f, $01
000893r 4  4F 01        
000895r 4  41 10        	.byte $41, $10
000897r 4  rr rr        	.word @song0ref1397
000899r 4  7E 4B rr rr  	.byte $7e, $4b, .lobyte(@env10), .hibyte(@env10), $4c
00089Dr 4  4C           
00089Er 4  41 10        	.byte $41, $10
0008A0r 4  rr rr        	.word @song0ref4
0008A2r 4  7E           	.byte $7e
0008A3r 4  41 10        	.byte $41, $10
0008A5r 4  rr rr        	.word @song0ref6
0008A7r 4  7E           	.byte $7e
0008A8r 4  41 10        	.byte $41, $10
0008AAr 4  rr rr        	.word @song0ref6
0008ACr 4  7E           	.byte $7e
0008ADr 4  41 10        	.byte $41, $10
0008AFr 4  rr rr        	.word @song0ref6
0008B1r 4  42           	.byte $42
0008B2r 4  rr rr        	.word @song0ch0loop
0008B4r 4               @song0ch1:
0008B4r 4  00 FD        	.byte $00, $fd
0008B6r 4               @song0ch1loop:
0008B6r 4  4C 00 FD 7F  	.byte $4c, $00, $fd, $7f, $4f, $00, $80
0008BAr 4  4F 00 80     
0008BDr 4               @song0ref1623:
0008BDr 4  1D 75 22 7F  	.byte $1d, $75, $22, $7f, $1f, $75, $1d, $7f, $21, $75, $1f, $7f, $22, $75, $21, $7f, $4f, $01, $1d, $75, $22, $7f, $1f, $75
0008C1r 4  1F 75 1D 7F  
0008C5r 4  21 75 1F 7F  
0008D5r 4  1D 7F 21 75  	.byte $1d, $7f, $21, $75, $1f, $7f, $22, $75, $21, $7f, $4f, $02, $1d, $75, $22, $7f, $1f, $75, $1d, $7f, $21, $75, $1f, $7f
0008D9r 4  1F 7F 22 75  
0008DDr 4  21 7F 4F 02  
0008EDr 4  22 75 21 7F  	.byte $22, $75, $21, $7f, $4f, $03, $1d, $75, $22, $7f, $1f, $75, $1d, $7f, $21, $75, $1f, $7f, $22, $75, $21, $7f, $4f, $00
0008F1r 4  4F 03 1D 75  
0008F5r 4  22 7F 1F 75  
000905r 4  41 20        	.byte $41, $20
000907r 4  rr rr        	.word @song0ref1623
000909r 4  7F 4F 00     	.byte $7f, $4f, $00
00090Cr 4  41 20        	.byte $41, $20
00090Er 4  rr rr        	.word @song0ref1623
000910r 4  7F 4F 00     	.byte $7f, $4f, $00
000913r 4  41 20        	.byte $41, $20
000915r 4  rr rr        	.word @song0ref1623
000917r 4  7D 51 F9 30  	.byte $7d, $51, $f9, $30, $49, .lobyte(@env18), .hibyte(@env18), $8c, $29, $87, $51, $0a, $c0, $85, $8c, $29, $76, $81, $7d
00091Br 4  49 rr rr 8C  
00091Fr 4  29 87 51 0A  
00092Ar 4  24 76 29 7D  	.byte $24, $76, $29, $7d, $2b, $76, $24, $7d, $51, $fd, $40, $2d, $89, $49, .lobyte(@env15), .hibyte(@env15), $8f, $7d, $49
00092Er 4  2B 76 24 7D  
000932r 4  51 FD 40 2D  
00093Dr 4  rr rr 4A 8E  	.byte .lobyte(@env0), .hibyte(@env0), $4a, $8e, $2d, $72, $81, $7d, $2e, $76, $2d, $7f, $51, $fb, $30, $49, .lobyte(@env14)
000941r 4  2D 72 81 7D  
000945r 4  2E 76 2D 7F  
00094Er 4  rr 30 8F 7F  	.byte .hibyte(@env14), $30, $8f, $7f, $51, $f9, $d0, $8e, $30, $7f, $51, $fc, $a0, $32, $85, $7f, $51, $fb, $c0, $30, $81
000952r 4  51 F9 D0 8E  
000956r 4  30 7F 51 FC  
000963r 4  7F 2E 81 77  	.byte $7f, $2e, $81, $77, $30, $81, $7f, $2d, $81, $77, $2e, $81, $7f, $2b, $81, $77, $2d, $81, $7f, $29, $77, $2b, $7f, $81
000967r 4  30 81 7F 2D  
00096Br 4  81 77 2E 81  
00097Br 4  77 29 7F 51  	.byte $77, $29, $7f, $51, $fc, $a0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $2d, $81, $49, .lobyte(@env29), .hibyte(@env29)
00097Fr 4  FC A0 49 rr  
000983r 4  rr 4A 2D 81  
00098Ar 4  83 7F 51 FB  	.byte $83, $7f, $51, $fb, $c0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $83, $7f, $51, $fb, $c0, $8e, $2e, $81, $7f, $51
00098Er 4  C0 49 rr rr  
000992r 4  4A 83 7F 51  
00099Dr 4  FE 00 4F 02  	.byte $fe, $00, $4f, $02, $30, $8d, $49, .lobyte(@env9), .hibyte(@env9), $9f, $87, $7f, $51, $f3, $b0, $49, .lobyte(@env0)
0009A1r 4  30 8D 49 rr  
0009A5r 4  rr 9F 87 7F  
0009AEr 4  rr 4A 8E 29  	.byte .hibyte(@env0), $4a, $8e, $29, $71, $51, $fc, $00, $81, $7f, $51, $f3, $b0, $2b, $76, $51, $f3, $20, $29, $7f, $51
0009B2r 4  71 51 FC 00  
0009B6r 4  81 7F 51 F3  
0009C3r 4  F3 B0 2D 76  	.byte $f3, $b0, $2d, $76, $51, $f3, $20, $2b, $7f, $51, $f3, $b0, $2e, $76, $51, $f3, $20, $2d, $7f, $51, $fc, $50, $2d, $8d
0009C7r 4  51 F3 20 2B  
0009CBr 4  7F 51 F3 B0  
0009DBr 4  87 7A 51 FE  	.byte $87, $7a, $51, $fe, $50, $49, .lobyte(@env22), .hibyte(@env22), $8f, $7d, $51, $f9, $30, $49, .lobyte(@env18), .hibyte(@env18)
0009DFr 4  50 49 rr rr  
0009E3r 4  8F 7D 51 F9  
0009EBr 4  8C 29 87 51  	.byte $8c, $29, $87, $51, $0a, $c0, $85, $8c, $29, $76, $81, $7d, $24, $76, $29, $7d, $2b, $76, $24, $7d, $51, $fd, $40, $30
0009EFr 4  0A C0 85 8C  
0009F3r 4  29 76 81 7D  
000A03r 4  89 49 rr rr  	.byte $89, $49, .lobyte(@env15), .hibyte(@env15), $8f, $7d, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8e, $30, $72, $81
000A07r 4  8F 7D 49 rr  
000A0Br 4  rr 4A 8E 30  
000A11r 4  7D 32 76 30  	.byte $7d, $32, $76, $30, $7f, $51, $fb, $30, $49, .lobyte(@env14), .hibyte(@env14), $33, $8f, $7f, $51, $f9, $d0, $8e, $33
000A15r 4  7F 51 FB 30  
000A19r 4  49 rr rr 33  
000A24r 4  7F 51 FC A0  	.byte $7f, $51, $fc, $a0, $35, $85, $7f, $51, $fb, $c0, $33, $81, $7f, $32, $81, $77, $33, $81, $7f, $30, $81, $77, $32, $81
000A28r 4  35 85 7F 51  
000A2Cr 4  FB C0 33 81  
000A3Cr 4  7F 2E 81 77  	.byte $7f, $2e, $81, $77, $30, $81, $7f, $2b, $77, $2e, $7f, $29, $77, $2b, $7f, $51, $fc, $a0, $49, .lobyte(@env0), .hibyte(@env0)
000A40r 4  30 81 7F 2B  
000A44r 4  77 2E 7F 29  
000A51r 4  4A 2D 81 49  	.byte $4a, $2d, $81, $49, .lobyte(@env29), .hibyte(@env29), $83, $7f, $51, $fb, $c0, $49, .lobyte(@env0), .hibyte(@env0)
000A55r 4  rr rr 83 7F  
000A59r 4  51 FB C0 49  
000A5Fr 4  4A 83 7F 51  	.byte $4a, $83, $7f, $51, $fb, $c0, $8e, $2e, $81, $7f, $51, $fe, $00, $4f, $02, $30, $8d, $49, .lobyte(@env9), .hibyte(@env9)
000A63r 4  FB C0 8E 2E  
000A67r 4  81 7F 51 FE  
000A73r 4  9F 87 7F 49  	.byte $9f, $87, $7f, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8e, $35, $81, $37, $81, $39
000A77r 4  rr rr 4A 8E  
000A7Br 4  35 81 37 81  
000A80r 4               @song0ref2071:
000A80r 4  85 51 FD 20  	.byte $85, $51, $fd, $20, $8f, $49, .lobyte(@env4), .hibyte(@env4), $97, $7f, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8e
000A84r 4  8F 49 rr rr  
000A88r 4  97 7F 49 rr  
000A8Fr 4  3A 89 76 3A  	.byte $3a, $89, $76, $3a, $89, $74, $3a, $89, $72, $3a, $89, $71, $3a, $85, $7f, $38, $81, $37, $81, $35, $89, $76, $35, $89
000A93r 4  89 74 3A 89  
000A97r 4  72 3A 89 71  
000AA7r 4  74 35 89 72  	.byte $74, $35, $89, $72, $35, $89, $7f, $33, $81, $35, $81, $37, $81, $33, $81, $35, $85, $30, $89, $76, $30, $89, $74, $30
000AABr 4  35 89 7F 33  
000AAFr 4  81 35 81 37  
000ABFr 4  89 72 30 89  	.byte $89, $72, $30, $89, $71, $30, $8d, $7f, $2b, $81, $2c, $81, $2e, $85, $2c, $89, $76, $2c, $89, $74, $2c, $89, $72, $2c
000AC3r 4  71 30 8D 7F  
000AC7r 4  2B 81 2C 81  
000AD7r 4  81 7F 30 89  	.byte $81, $7f, $30, $89, $76, $30, $89, $74, $30, $89, $72, $30, $89, $71, $30, $85, $7f, $31, $81, $33, $81, $35, $89, $76
000ADBr 4  76 30 89 74  
000ADFr 4  30 89 72 30  
000AEFr 4  35 89 74 35  	.byte $35, $89, $74, $35, $89, $72, $35, $89, $7f, $37, $81, $38, $81, $3a, $81, $37, $81, $38, $85, $35, $89, $76, $35, $89
000AF3r 4  89 72 35 89  
000AF7r 4  7F 37 81 38  
000B07r 4  74 35 89 72  	.byte $74, $35, $89, $72, $35, $81, $7f, $2e, $81, $30, $81, $33, $81, $30, $81, $35, $85, $30, $89, $76, $30, $89, $74, $30
000B0Br 4  35 81 7F 2E  
000B0Fr 4  81 30 81 33  
000B1Fr 4  89 72 30 89  	.byte $89, $72, $30, $89, $71, $30
000B23r 4  71 30        
000B25r 4               @song0ref2236:
000B25r 4  85 7A 51 FC  	.byte $85, $7a, $51, $fc, $00, $4b, .lobyte(@env12), .hibyte(@env12), $4f, $01, $80
000B29r 4  00 4B rr rr  
000B2Dr 4  4F 01 80     
000B30r 4               @song0ref2247:
000B30r 4  22 8D 7A 51  	.byte $22, $8d, $7a, $51, $fc, $00, $8f, $7a, $51, $fb, $20, $8b, $51, $06, $90, $87, $72, $51, $05, $50, $83, $72, $51, $05
000B34r 4  FC 00 8F 7A  
000B38r 4  51 FB 20 8B  
000B48r 4  50 83 72 51  	.byte $50, $83, $72, $51, $05, $50, $83, $7a, $51, $fc, $00, $4b, .lobyte(@env13), .hibyte(@env13), $20, $8d, $7a, $51, $fc
000B4Cr 4  05 50 83 7A  
000B50r 4  51 FC 00 4B  
000B5Br 4  00 8F 7A 51  	.byte $00, $8f, $7a, $51, $fb, $20, $8b, $51, $06, $90, $87, $72, $51, $05, $50, $83, $72, $51, $05, $50, $83, $72, $51, $05
000B5Fr 4  FB 20 8B 51  
000B63r 4  06 90 87 72  
000B73r 4  50 83 7A 51  	.byte $50, $83, $7a, $51, $fc, $00, $4b, .lobyte(@env12), .hibyte(@env12), $4f, $01
000B77r 4  FC 00 4B rr  
000B7Br 4  rr 4F 01     
000B7Er 4  41 10        	.byte $41, $10
000B80r 4  rr rr        	.word @song0ref2247
000B82r 4  7A 51 FC 00  	.byte $7a, $51, $fc, $00, $4b, .lobyte(@env12), .hibyte(@env12), $4f, $01
000B86r 4  4B rr rr 4F  
000B8Ar 4  01           
000B8Br 4  41 10        	.byte $41, $10
000B8Dr 4  rr rr        	.word @song0ref2247
000B8Fr 4  7A 51 FC 00  	.byte $7a, $51, $fc, $00, $4b, .lobyte(@env12), .hibyte(@env12), $4f, $01
000B93r 4  4B rr rr 4F  
000B97r 4  01           
000B98r 4  41 10        	.byte $41, $10
000B9Ar 4  rr rr        	.word @song0ref2247
000B9Cr 4  7D 51 F9 30  	.byte $7d, $51, $f9, $30, $49, .lobyte(@env18), .hibyte(@env18), $4b, .lobyte(@env10), .hibyte(@env10), $4c, $8c, $2c, $87
000BA0r 4  49 rr rr 4B  
000BA4r 4  rr rr 4C 8C  
000BAAr 4  51 0A C0 85  	.byte $51, $0a, $c0, $85, $8c, $2c, $76, $81, $7d, $27, $76, $2c, $7d, $2e, $76, $27, $7d, $51, $fd, $40, $30, $89, $49, .lobyte(@env15)
000BAEr 4  8C 2C 76 81  
000BB2r 4  7D 27 76 2C  
000BC2r 4  rr 8F 7D 49  	.byte .hibyte(@env15), $8f, $7d, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8e, $30, $72, $81, $7d, $31, $76, $30, $7f, $51
000BC6r 4  rr rr 4A 8E  
000BCAr 4  30 72 81 7D  
000BD3r 4  FB 30 49 rr  	.byte $fb, $30, $49, .lobyte(@env14), .hibyte(@env14), $33, $8f, $7f, $51, $f9, $d0, $8e, $33, $7f, $51, $fc, $a0, $35, $85
000BD7r 4  rr 33 8F 7F  
000BDBr 4  51 F9 D0 8E  
000BE6r 4  7F 51 FB C0  	.byte $7f, $51, $fb, $c0, $33, $81, $7f, $31, $81, $77, $33, $81, $7f, $30, $81, $77, $31, $81, $7f, $2e, $81, $77, $30, $81
000BEAr 4  33 81 7F 31  
000BEEr 4  81 77 33 81  
000BFEr 4  7F 2C 77 2E  	.byte $7f, $2c, $77, $2e, $7f, $81, $77, $2c, $7f, $51, $fc, $a0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $30, $81, $49
000C02r 4  7F 81 77 2C  
000C06r 4  7F 51 FC A0  
000C11r 4  rr rr 83 7F  	.byte .lobyte(@env29), .hibyte(@env29), $83, $7f, $51, $fb, $c0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $83, $7f, $51
000C15r 4  51 FB C0 49  
000C19r 4  rr rr 4A 83  
000C1Fr 4  FB C0 8E 31  	.byte $fb, $c0, $8e, $31, $81, $7f, $51, $fe, $00, $4f, $02, $33, $8d, $49, .lobyte(@env9), .hibyte(@env9), $9f, $87, $7f
000C23r 4  81 7F 51 FE  
000C27r 4  00 4F 02 33  
000C32r 4  51 F3 B0 49  	.byte $51, $f3, $b0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8e, $2c, $71, $51, $fc, $00, $81, $7f, $51, $f3, $b0, $2e
000C36r 4  rr rr 4A 8E  
000C3Ar 4  2C 71 51 FC  
000C45r 4  76 51 F3 20  	.byte $76, $51, $f3, $20, $2c, $7f, $51, $f3, $b0, $30, $76, $51, $f3, $20, $2e, $7f, $51, $f3, $b0, $31, $76, $51, $f3, $20
000C49r 4  2C 7F 51 F3  
000C4Dr 4  B0 30 76 51  
000C5Dr 4  30 7F 51 FC  	.byte $30, $7f, $51, $fc, $50, $30, $8d, $87, $7a, $51, $fe, $50, $49, .lobyte(@env22), .hibyte(@env22), $8f, $7d, $51, $f9
000C61r 4  50 30 8D 87  
000C65r 4  7A 51 FE 50  
000C70r 4  30 49 rr rr  	.byte $30, $49, .lobyte(@env18), .hibyte(@env18), $8c, $2c, $87, $51, $0a, $c0, $85, $8c, $2c, $76, $81, $7d, $27, $76, $2c
000C74r 4  8C 2C 87 51  
000C78r 4  0A C0 85 8C  
000C83r 4  7D 2E 76 27  	.byte $7d, $2e, $76, $27, $7d, $51, $fd, $40, $33, $89, $49, .lobyte(@env15), .hibyte(@env15), $8f, $7d, $49, .lobyte(@env0)
000C87r 4  7D 51 FD 40  
000C8Br 4  33 89 49 rr  
000C94r 4  rr 4A 8E 33  	.byte .hibyte(@env0), $4a, $8e, $33, $72, $81, $7d, $35, $76, $33, $7f, $51, $fb, $30, $49, .lobyte(@env14), .hibyte(@env14)
000C98r 4  72 81 7D 35  
000C9Cr 4  76 33 7F 51  
000CA5r 4  36 8F 7F 51  	.byte $36, $8f, $7f, $51, $f9, $d0, $8e, $36, $7f, $51, $fc, $a0, $38, $85, $7f, $51, $fb, $c0, $36, $81, $7f, $35, $81, $77
000CA9r 4  F9 D0 8E 36  
000CADr 4  7F 51 FC A0  
000CBDr 4  36 81 7F 33  	.byte $36, $81, $7f, $33, $81, $77, $35, $81, $7f, $31, $81, $77, $33, $81, $7f, $2e, $77, $31, $7f, $2c, $77, $2e, $7f, $51
000CC1r 4  81 77 35 81  
000CC5r 4  7F 31 81 77  
000CD5r 4  FC A0 49 rr  	.byte $fc, $a0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $30, $81, $49, .lobyte(@env29), .hibyte(@env29), $83, $7f, $51
000CD9r 4  rr 4A 30 81  
000CDDr 4  49 rr rr 83  
000CE3r 4  FB C0 49 rr  	.byte $fb, $c0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $83, $7f, $51, $fb, $c0, $8e, $31, $81, $7f, $51, $fe, $00, $4f
000CE7r 4  rr 4A 83 7F  
000CEBr 4  51 FB C0 8E  
000CF6r 4  02 33 8D 49  	.byte $02, $33, $8d, $49, .lobyte(@env9), .hibyte(@env9), $9f, $87, $7f, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8e, $38
000CFAr 4  rr rr 9F 87  
000CFEr 4  7F 49 rr rr  
000D05r 4  81 3A 81 3C  	.byte $81, $3a, $81, $3c
000D09r 4  41 11        	.byte $41, $11
000D0Br 4  rr rr        	.word @song0ref2071
000D0Dr 4  38 89 76 38  	.byte $38, $89, $76, $38, $89, $74, $38, $89, $72, $38, $89, $7f, $33, $81, $35, $81, $37, $81, $33, $81, $35, $85, $3c, $89
000D11r 4  89 74 38 89  
000D15r 4  72 38 89 7F  
000D25r 4  76 3C 89 74  	.byte $76, $3c, $89, $74, $3c, $89, $72, $3c, $89, $71, $3c, $8d, $7f, $27, $81, $29, $81, $2b, $85, $29, $89, $76, $29, $89
000D29r 4  3C 89 72 3C  
000D2Dr 4  89 71 3C 8D  
000D3Dr 4  74 29 89 72  	.byte $74, $29, $89, $72, $29, $81, $7f, $38, $89, $76, $38, $89, $74, $38, $89, $72, $38, $89, $71, $38, $85, $7f, $37, $81
000D41r 4  29 81 7F 38  
000D45r 4  89 76 38 89  
000D55r 4  38 81 3A 89  	.byte $38, $81, $3a, $89, $76, $3a, $89, $74, $3a, $89, $72, $3a, $89, $7f, $38, $81, $3a, $81, $3c, $81, $3d, $81, $3c, $85
000D59r 4  76 3A 89 74  
000D5Dr 4  3A 89 72 3A  
000D6Dr 4  38 89 76 38  	.byte $38, $89, $76, $38, $89, $74, $38, $89, $72, $38, $81, $7f, $35, $81, $37, $81, $38, $81, $3a, $81, $38, $85, $35, $89
000D71r 4  89 74 38 89  
000D75r 4  72 38 81 7F  
000D85r 4  76 35 89 74  	.byte $76, $35, $89, $74, $35, $89, $72, $35, $89, $71, $35
000D89r 4  35 89 72 35  
000D8Dr 4  89 71 35     
000D90r 4  41 11        	.byte $41, $11
000D92r 4  rr rr        	.word @song0ref2236
000D94r 4  7A 51 FC 00  	.byte $7a, $51, $fc, $00, $4b, .lobyte(@env12), .hibyte(@env12), $4f, $01
000D98r 4  4B rr rr 4F  
000D9Cr 4  01           
000D9Dr 4  41 10        	.byte $41, $10
000D9Fr 4  rr rr        	.word @song0ref2247
000DA1r 4  7A 51 FC 00  	.byte $7a, $51, $fc, $00, $4b, .lobyte(@env12), .hibyte(@env12), $4f, $01
000DA5r 4  4B rr rr 4F  
000DA9r 4  01           
000DAAr 4  41 10        	.byte $41, $10
000DACr 4  rr rr        	.word @song0ref2247
000DAEr 4  7A 51 FC 00  	.byte $7a, $51, $fc, $00, $4b, .lobyte(@env12), .hibyte(@env12), $4f, $01
000DB2r 4  4B rr rr 4F  
000DB6r 4  01           
000DB7r 4  41 10        	.byte $41, $10
000DB9r 4  rr rr        	.word @song0ref2247
000DBBr 4  7A 51 FC 00  	.byte $7a, $51, $fc, $00, $4b, .lobyte(@env12), .hibyte(@env12)
000DBFr 4  4B rr rr     
000DC2r 4               @song0ref2897:
000DC2r 4  4F 01 1D 8D  	.byte $4f, $01, $1d, $8d, $7a, $51, $fc, $00, $8f, $7a, $51, $fb, $20, $8b, $51, $06, $90, $87, $72, $51, $05, $50, $83, $72
000DC6r 4  7A 51 FC 00  
000DCAr 4  8F 7A 51 FB  
000DDAr 4  51 05 50 83  	.byte $51, $05, $50, $83, $72, $51, $05, $50, $83, $7a, $51, $fc, $00, $8f, $7a, $51, $fc, $00, $8f, $7a, $51, $fb, $20, $8b
000DDEr 4  72 51 05 50  
000DE2r 4  83 7A 51 FC  
000DF2r 4  51 06 90 87  	.byte $51, $06, $90, $87, $72, $51, $05, $50, $83, $72, $51, $05, $50, $83, $72, $51, $05, $50, $83, $7a, $51, $fc, $00, $4d
000DF6r 4  72 51 05 50  
000DFAr 4  83 72 51 05  
000E0Ar 4  41 0F        	.byte $41, $0f
000E0Cr 4  rr rr        	.word @song0ref2897
000E0Er 4  7A 51 FC 00  	.byte $7a, $51, $fc, $00, $4d
000E12r 4  4D           
000E13r 4  41 0F        	.byte $41, $0f
000E15r 4  rr rr        	.word @song0ref2897
000E17r 4  7A 51 FC 00  	.byte $7a, $51, $fc, $00, $4d
000E1Br 4  4D           
000E1Cr 4  41 0F        	.byte $41, $0f
000E1Er 4  rr rr        	.word @song0ref2897
000E20r 4  7F 4B rr rr  	.byte $7f, $4b, .lobyte(@env10), .hibyte(@env10), $4c, $90, $24, $89, $78, $24, $89, $76, $24, $89, $75, $24, $89, $72, $24
000E24r 4  4C 90 24 89  
000E28r 4  78 24 89 76  
000E33r 4  85 7F 27 81  	.byte $85, $7f, $27, $81, $29, $81, $2b, $89, $78, $2b, $89, $76, $2b, $89, $75, $2b, $89, $7f, $2e, $89, $76, $2e, $81, $7f
000E37r 4  29 81 2B 89  
000E3Br 4  78 2B 89 76  
000E4Br 4  2D 85 29 85  	.byte $2d, $85, $29, $85, $24, $85, $22, $89, $78, $22, $81, $7f, $21, $89, $78, $21, $81, $7f, $29, $89, $78, $29, $89, $76
000E4Fr 4  24 85 22 89  
000E53r 4  78 22 81 7F  
000E63r 4  29 89 75 29  	.byte $29, $89, $75, $29, $89, $72, $29, $89, $71, $29, $89, $7f, $2b, $89, $78, $2b, $89, $76, $2b, $89, $75, $2b, $89, $72
000E67r 4  89 72 29 89  
000E6Br 4  71 29 89 7F  
000E7Br 4  2B 85 7F 2C  	.byte $2b, $85, $7f, $2c, $81, $2e, $81, $30, $89, $78, $30, $89, $76, $30, $89, $75, $30, $89, $7f, $35, $89, $76, $35, $81
000E7Fr 4  81 2E 81 30  
000E83r 4  89 78 30 89  
000E93r 4  7F 37 85 35  	.byte $7f, $37, $85, $35, $85, $30, $85, $2e, $89, $78, $2e, $81, $7f, $2d, $89, $78, $2d, $81, $7f, $35, $89, $78, $35, $89
000E97r 4  85 30 85 2E  
000E9Br 4  89 78 2E 81  
000EABr 4  76 35 89 75  	.byte $76, $35, $89, $75, $35, $89, $72, $35, $89, $71, $35, $89, $7f, $2c, $89, $78, $2c, $89, $76, $2c, $85, $7f, $2b, $89
000EAFr 4  35 89 72 35  
000EB3r 4  89 71 35 89  
000EC3r 4  78 2B 89 7F  	.byte $78, $2b, $89, $7f, $2c, $81, $2b, $81, $29, $89, $78, $29, $89, $76, $29, $85, $7f, $29, $85, $2b, $85, $2c, $85, $2e
000EC7r 4  2C 81 2B 81  
000ECBr 4  29 89 78 29  
000EDBr 4  85 30 89 78  	.byte $85, $30, $89, $78, $30, $89, $76, $30, $89, $75, $30, $89, $72, $30, $85, $7f, $37, $85, $38, $89, $78, $38, $81, $7f
000EDFr 4  30 89 76 30  
000EE3r 4  89 75 30 89  
000EF3r 4  37 85 35 89  	.byte $37, $85, $35, $89, $78, $35, $89, $76, $35, $89, $75, $35, $81, $7f, $2e, $89, $78, $2e, $89, $76, $2e, $85, $7f, $2c
000EF7r 4  78 35 89 76  
000EFBr 4  35 89 75 35  
000F0Br 4  89 78 2C 89  	.byte $89, $78, $2c, $89, $7f, $2e, $81, $2c, $81, $2b, $89, $78, $2b, $89, $76, $2b, $85, $7f, $2b, $85, $2c, $85, $2e, $85
000F0Fr 4  7F 2E 81 2C  
000F13r 4  81 2B 89 78  
000F23r 4  30 85 30 89  	.byte $30, $85, $30, $89, $78, $30, $89, $76, $30, $89, $75, $30, $89, $7f, $38, $85, $3a, $85, $3c, $89, $78, $3c, $89, $76
000F27r 4  78 30 89 76  
000F2Br 4  30 89 75 30  
000F3Br 4  3C 89 75 3C  	.byte $3c, $89, $75, $3c, $89, $73, $3c, $89, $71, $3c, $81, $7d, $51, $f9, $10, $8c, $29, $89, $51, $0a, $70, $83, $7d, $29
000F3Fr 4  89 73 3C 89  
000F43r 4  71 3C 81 7D  
000F53r 4  76 81 7D 24  	.byte $76, $81, $7d, $24, $76, $81, $7d, $2b, $76, $81, $7d, $51, $fd, $40, $2c, $85, $49, .lobyte(@env15), .hibyte(@env15)
000F57r 4  76 81 7D 2B  
000F5Br 4  76 81 7D 51  
000F66r 4  93 7D 51 FC  	.byte $93, $7d, $51, $fc, $c0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8c, $2c, $76, $51, $fc, $50, $81, $7a, $51, $fc
000F6Ar 4  C0 49 rr rr  
000F6Er 4  4A 8C 2C 76  
000F79r 4  90 2E 76 51  	.byte $90, $2e, $76, $51, $fc, $50, $2c, $7d, $51, $fd, $a0, $30, $85, $7d, $51, $fc, $b0, $2e, $81, $7f, $51, $fe, $00, $2c
000F7Dr 4  FC 50 2C 7D  
000F81r 4  51 FD A0 30  
000F91r 4  8F 49 rr rr  	.byte $8f, $49, .lobyte(@env15), .hibyte(@env15), $9d, $83, $7d, $51, $f9, $10, $49, .lobyte(@env0), .hibyte(@env0), $4a
000F95r 4  9D 83 7D 51  
000F99r 4  F9 10 49 rr  
000F9Fr 4  8C 2C 89 51  	.byte $8c, $2c, $89, $51, $0a, $70, $83, $7d, $2c, $76, $81, $7d, $29, $76, $81, $7d, $2c, $76, $81, $7d, $51, $fd, $40, $2e
000FA3r 4  0A 70 83 7D  
000FA7r 4  2C 76 81 7D  
000FB7r 4  85 49 rr rr  	.byte $85, $49, .lobyte(@env15), .hibyte(@env15), $93, $7d, $51, $fc, $c0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8c
000FBBr 4  93 7D 51 FC  
000FBFr 4  C0 49 rr rr  
000FC5r 4  30 76 51 FC  	.byte $30, $76, $51, $fc, $50, $2e, $7a, $51, $fc, $90, $31, $76, $51, $fc, $50, $30, $7d, $51, $fd, $a0, $33, $85, $7d, $51
000FC9r 4  50 2E 7A 51  
000FCDr 4  FC 90 31 76  
000FDDr 4  FC B0 31 81  	.byte $fc, $b0, $31, $81, $7f, $51, $fe, $00, $30, $8f, $49, .lobyte(@env15), .hibyte(@env15), $9d, $83, $7d, $51, $f9, $10
000FE1r 4  7F 51 FE 00  
000FE5r 4  30 8F 49 rr  
000FF0r 4  49 rr rr 4A  	.byte $49, .lobyte(@env0), .hibyte(@env0), $4a, $8c, $30, $89, $51, $0a, $70, $83, $7d, $35, $76, $30, $7d, $30, $76, $35
000FF4r 4  8C 30 89 51  
000FF8r 4  0A 70 83 7D  
001003r 4  7D 37 76 30  	.byte $7d, $37, $76, $30, $7d, $51, $fd, $40, $38, $85, $49, .lobyte(@env15), .hibyte(@env15), $93, $7d, $51, $fc, $c0, $49
001007r 4  7D 51 FD 40  
00100Br 4  38 85 49 rr  
001016r 4  rr rr 4A 8C  	.byte .lobyte(@env0), .hibyte(@env0), $4a, $8c, $38, $76, $51, $fc, $50, $38, $7a, $51, $fc, $90, $3a, $76, $51, $fc, $50
00101Ar 4  38 76 51 FC  
00101Er 4  50 38 7A 51  
001029r 4  38 7D 51 FD  	.byte $38, $7d, $51, $fd, $a0, $3c, $85, $7d, $51, $fc, $b0, $3a, $81, $7f, $51, $fe, $00, $38, $8f, $49, .lobyte(@env15)
00102Dr 4  A0 3C 85 7D  
001031r 4  51 FC B0 3A  
00103Er 4  rr 9D 83 7D  	.byte .hibyte(@env15), $9d, $83, $7d, $51, $f9, $10, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8c, $35, $89, $51, $0a, $70
001042r 4  51 F9 10 49  
001046r 4  rr rr 4A 8C  
00104Fr 4  83 7D 35 76  	.byte $83, $7d, $35, $76, $35, $7d, $30, $76, $35, $7d, $37, $76, $35, $7d, $51, $fd, $40, $38, $85, $49, .lobyte(@env15)
001053r 4  35 7D 30 76  
001057r 4  35 7D 37 76  
001064r 4  rr 93 7D 51  	.byte .hibyte(@env15), $93, $7d, $51, $fc, $c0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8c, $38, $76, $51, $fc, $50, $38
001068r 4  FC C0 49 rr  
00106Cr 4  rr 4A 8C 38  
001075r 4  7A 51 FC 90  	.byte $7a, $51, $fc, $90, $3a, $76, $51, $fc, $50, $38, $7f, $51, $fe, $00, $3c, $9b, $49, .lobyte(@env15), .hibyte(@env15)
001079r 4  3A 76 51 FC  
00107Dr 4  50 38 7F 51  
001088r 4  91 87 7D 51  	.byte $91, $87, $7d, $51, $fc, $c0, $49, .lobyte(@env0), .hibyte(@env0), $4a, $8c, $39, $72, $51, $fc, $10, $81, $7d, $51
00108Cr 4  FC C0 49 rr  
001090r 4  rr 4A 8C 39  
00109Br 4  FC C0 3A 76  	.byte $fc, $c0, $3a, $76, $51, $fc, $50, $39, $7d, $51, $fe, $00, $49, .lobyte(@env14), .hibyte(@env14), $3c, $a7, $d5, $42
00109Fr 4  51 FC 50 39  
0010A3r 4  7D 51 FE 00  
0010AEr 4  rr rr        	.word @song0ch1loop
0010B0r 4               @song0ch2:
0010B0r 4  8F 00 ED     	.byte $8f, $00, $ed
0010B3r 4               @song0ch2loop:
0010B3r 4  8F 00 ED     	.byte $8f, $00, $ed
0010B6r 4               @song0ref3651:
0010B6r 4  88           	.byte $88
0010B7r 4               @song0ref3652:
0010B7r 4  40 0A 95 40  	.byte $40, $0a, $95, $40, $0a, $ad, $40, $0a, $8d, $40, $0a, $a5, $40, $0a, $95, $40, $0a, $ad, $40, $0a, $8d, $40, $0a, $a5
0010BBr 4  0A AD 40 0A  
0010BFr 4  8D 40 0A A5  
0010CFr 4  05 95 0C AD  	.byte $05, $95, $0c, $ad, $03, $8d, $0a, $a5, $05, $95, $0c, $ad, $03, $8d, $0a, $a5, $09, $95, $0a, $a5, $0c, $95, $0e, $a5
0010D3r 4  03 8D 0A A5  
0010D7r 4  05 95 0C AD  
0010E7r 4  09 95 0A A5  	.byte $09, $95, $0a, $a5, $0c, $95, $0e
0010EBr 4  0C 95 0E     
0010EEr 4               @song0ref3707:
0010EEr 4  A5           	.byte $a5
0010EFr 4               @song0ref3708:
0010EFr 4  01 95 08 AD  	.byte $01, $95, $08, $ad, $08, $8d, $01, $95, $80, $50, $22, $2e, $26, $81, $0c, $89, $88, $0a, $95, $80, $08, $ad, $07, $8d
0010F3r 4  08 8D 01 95  
0010F7r 4  80 50 22 2E  
001107r 4  08 95 50 22  	.byte $08, $95, $50, $22, $2e, $26, $81, $08, $89, $88
00110Br 4  2E 26 81 08  
00110Fr 4  89 88        
001111r 4  41 18        	.byte $41, $18
001113r 4  rr rr        	.word @song0ref3708
001115r 4               @song0ref3745:
001115r 4  88 05 95 0C  	.byte $88, $05, $95, $0c, $ad, $01, $8d, $0a, $95, $80, $50, $22, $2e, $26, $81, $0a, $89, $88, $05, $95, $0c, $ad, $01, $8d
001119r 4  AD 01 8D 0A  
00111Dr 4  95 80 50 22  
00112Dr 4  0A 95 80 50  	.byte $0a, $95, $80, $50, $22, $2e, $26, $81, $0a, $89
001131r 4  22 2E 26 81  
001135r 4  0A 89        
001137r 4  41 18        	.byte $41, $18
001139r 4  rr rr        	.word @song0ref3745
00113Br 4  88 14 95 1B  	.byte $88, $14, $95, $1b, $ad, $12, $8d, $80, $19, $a5, $88, $14, $95, $1b, $ad, $12, $8d, $80, $19, $a5, $88, $0c, $95, $0d
00113Fr 4  AD 12 8D 80  
001143r 4  19 A5 88 14  
001153r 4  A5 0F 95 11  	.byte $a5, $0f, $95, $11, $a5, $0c, $95, $0d, $a5, $0f, $95, $11
001157r 4  A5 0C 95 0D  
00115Br 4  A5 0F 95 11  
00115Fr 4  41 19        	.byte $41, $19
001161r 4  rr rr        	.word @song0ref3707
001163r 4  88           	.byte $88
001164r 4  41 18        	.byte $41, $18
001166r 4  rr rr        	.word @song0ref3708
001168r 4  41 18        	.byte $41, $18
00116Ar 4  rr rr        	.word @song0ref3745
00116Cr 4  41 18        	.byte $41, $18
00116Er 4  rr rr        	.word @song0ref3745
001170r 4  41 18        	.byte $41, $18
001172r 4  rr rr        	.word @song0ref3745
001174r 4  41 18        	.byte $41, $18
001176r 4  rr rr        	.word @song0ref3745
001178r 4  41 10        	.byte $41, $10
00117Ar 4  rr rr        	.word @song0ref3651
00117Cr 4  41 10        	.byte $41, $10
00117Er 4  rr rr        	.word @song0ref3652
001180r 4  08 95 08 85  	.byte $08, $95, $08, $85, $80, $07, $95, $08, $81, $07, $81, $05, $85, $88, $05, $8d, $05, $85, $80, $05, $85, $07, $85, $08
001184r 4  80 07 95 08  
001188r 4  81 07 81 05  
001198r 4  85 0A 85 88  	.byte $85, $0a, $85, $88, $0c, $95, $80, $0c, $9d, $07, $85, $08, $85, $88, $08, $85, $80, $07, $85, $88, $05, $a5, $0a, $9d
00119Cr 4  0C 95 80 0C  
0011A0r 4  9D 07 85 08  
0011B0r 4  08 95 80 0A  	.byte $08, $95, $80, $0a, $81, $08, $81, $07, $9d, $07, $85, $08, $85, $0a, $85, $0c, $85, $88, $0c, $ad, $14, $85, $80, $16
0011B4r 4  81 08 81 07  
0011B8r 4  9D 07 85 08  
0011C8r 4  85 18 85 88  	.byte $85, $18, $85, $88, $0c, $a5, $43, $50, $15, $18, $12, $8d
0011CCr 4  0C A5 43 50  
0011D0r 4  15 18 12 8D  
0011D4r 4               @song0ref3927:
0011D4r 4  40 0A 95 40  	.byte $40, $0a, $95, $40, $0a, $ad, $40, $0a, $8d, $40, $0a, $95, $80, $50, $22, $2e, $26, $81, $40, $0a, $87, $47, $02, $88
0011D8r 4  0A AD 40 0A  
0011DCr 4  8D 40 0A 95  
0011ECr 4  05 40 0A 95  	.byte $05, $40, $0a, $95, $40, $0a, $ad, $40, $0a, $8d, $40, $0a, $95, $80, $50, $22, $2e, $26, $81, $40, $0a, $87, $47, $02
0011F0r 4  40 0A AD 40  
0011F4r 4  0A 8D 40 0A  
001204r 4  88 05        	.byte $88, $05
001206r 4  41 1A        	.byte $41, $1a
001208r 4  rr rr        	.word @song0ref3927
00120Ar 4  8F 00 ED 42  	.byte $8f, $00, $ed, $42
00120Er 4  rr rr        	.word @song0ch2loop
001210r 4               @song0ch3:
001210r 4  FF           	.byte $ff
001211r 4               @song0ch3loop:
001211r 4  87 82        	.byte $87, $82
001213r 4               @song0ref3990:
001213r 4  14 81 14 89  	.byte $14, $81, $14, $89, $14, $81, $14, $89, $14, $81, $14, $89, $14, $81, $14, $89
001217r 4  14 81 14 89  
00121Br 4  14 81 14 89  
001223r 4  41 0F        	.byte $41, $0f
001225r 4  rr rr        	.word @song0ref3990
001227r 4               @song0ref4009:
001227r 4  81           	.byte $81
001228r 4               @song0ref4010:
001228r 4  84 18 85 82  	.byte $84, $18, $85, $82, $14, $81, $14, $89, $84, $14, $81, $82, $14, $89, $14, $81, $14, $89, $14, $81, $14, $89, $84, $14
00122Cr 4  14 81 14 89  
001230r 4  84 14 81 82  
001240r 4  81 82 14 89  	.byte $81, $82, $14, $89, $84, $14, $81, $82, $14, $89, $14, $81, $14, $89, $14, $81, $14
001244r 4  84 14 81 82  
001248r 4  14 89 14 81  
001251r 4  41 22        	.byte $41, $22
001253r 4  rr rr        	.word @song0ref4009
001255r 4  41 22        	.byte $41, $22
001257r 4  rr rr        	.word @song0ref4009
001259r 4  41 22        	.byte $41, $22
00125Br 4  rr rr        	.word @song0ref4009
00125Dr 4               @song0ref4060:
00125Dr 4  81           	.byte $81
00125Er 4               @song0ref4061:
00125Er 4  84 18        	.byte $84, $18
001260r 4               @song0ref4063:
001260r 4  85 82 14 81  	.byte $85, $82, $14, $81, $14, $89, $84, $18, $81, $82, $14, $89, $14, $81, $14, $89, $14, $81, $14
001264r 4  14 89 84 18  
001268r 4  81 82 14 89  
001273r 4  41 12        	.byte $41, $12
001275r 4  rr rr        	.word @song0ref4060
001277r 4  41 12        	.byte $41, $12
001279r 4  rr rr        	.word @song0ref4060
00127Br 4  41 0E        	.byte $41, $0e
00127Dr 4  rr rr        	.word @song0ref4060
00127Fr 4               @song0ref4091:
00127Fr 4  81 71 51 09  	.byte $81, $71, $51, $09, $f0, $80, $18, $19
001283r 4  F0 80 18 19  
001287r 4               @song0ref4099:
001287r 4  1A 1B 1C 1D  	.byte $1a, $1b, $1c, $1d, $1e, $1f, $51, $fc, $00, $1a, $1b, $81, $1c, $81, $1d, $81, $1e, $83, $1f, $81, $7f, $84, $18, $81
00128Br 4  1E 1F 51 FC  
00128Fr 4  00 1A 1B 81  
00129Fr 4  82 14 89 14  	.byte $82, $14, $89, $14, $81, $14, $89, $14, $81, $14
0012A3r 4  81 14 89 14  
0012A7r 4  81 14        
0012A9r 4               @song0ref4133:
0012A9r 4  89 84 18 81  	.byte $89, $84, $18, $81, $82, $14, $89, $84, $18, $81, $82, $14, $89, $14, $81, $14, $81, $8a, $1f, $85, $82, $14, $81, $14
0012ADr 4  82 14 89 84  
0012B1r 4  18 81 82 14  
0012C1r 4  81 84 14     	.byte $81, $84, $14
0012C4r 4  41 10        	.byte $41, $10
0012C6r 4  rr rr        	.word @song0ref4063
0012C8r 4  41 14        	.byte $41, $14
0012CAr 4  rr rr        	.word @song0ref4133
0012CCr 4  41 10        	.byte $41, $10
0012CEr 4  rr rr        	.word @song0ref4063
0012D0r 4  41 14        	.byte $41, $14
0012D2r 4  rr rr        	.word @song0ref4133
0012D4r 4  41 10        	.byte $41, $10
0012D6r 4  rr rr        	.word @song0ref4063
0012D8r 4  41 14        	.byte $41, $14
0012DAr 4  rr rr        	.word @song0ref4133
0012DCr 4  41 10        	.byte $41, $10
0012DEr 4  rr rr        	.word @song0ref4063
0012E0r 4  41 14        	.byte $41, $14
0012E2r 4  rr rr        	.word @song0ref4133
0012E4r 4  41 10        	.byte $41, $10
0012E6r 4  rr rr        	.word @song0ref4063
0012E8r 4  41 14        	.byte $41, $14
0012EAr 4  rr rr        	.word @song0ref4133
0012ECr 4  41 10        	.byte $41, $10
0012EEr 4  rr rr        	.word @song0ref4063
0012F0r 4  41 13        	.byte $41, $13
0012F2r 4  rr rr        	.word @song0ref4133
0012F4r 4  41 11        	.byte $41, $11
0012F6r 4  rr rr        	.word @song0ref4061
0012F8r 4  41 0E        	.byte $41, $0e
0012FAr 4  rr rr        	.word @song0ref4060
0012FCr 4  81 8A 18 81  	.byte $81, $8a, $18, $81, $73, $51, $0a, $f0, $80, $1a, $1b, $1c, $1d, $1e, $1f
001300r 4  73 51 0A F0  
001304r 4  80 1A 1B 1C  
00130Br 4  41 21        	.byte $41, $21
00130Dr 4  rr rr        	.word @song0ref4010
00130Fr 4  41 22        	.byte $41, $22
001311r 4  rr rr        	.word @song0ref4009
001313r 4  41 12        	.byte $41, $12
001315r 4  rr rr        	.word @song0ref4060
001317r 4  41 12        	.byte $41, $12
001319r 4  rr rr        	.word @song0ref4060
00131Br 4  41 12        	.byte $41, $12
00131Dr 4  rr rr        	.word @song0ref4060
00131Fr 4  41 0E        	.byte $41, $0e
001321r 4  rr rr        	.word @song0ref4060
001323r 4  41 33        	.byte $41, $33
001325r 4  rr rr        	.word @song0ref4091
001327r 4  41 10        	.byte $41, $10
001329r 4  rr rr        	.word @song0ref4063
00132Br 4  41 14        	.byte $41, $14
00132Dr 4  rr rr        	.word @song0ref4133
00132Fr 4  41 10        	.byte $41, $10
001331r 4  rr rr        	.word @song0ref4063
001333r 4  41 14        	.byte $41, $14
001335r 4  rr rr        	.word @song0ref4133
001337r 4  41 10        	.byte $41, $10
001339r 4  rr rr        	.word @song0ref4063
00133Br 4  41 14        	.byte $41, $14
00133Dr 4  rr rr        	.word @song0ref4133
00133Fr 4  41 10        	.byte $41, $10
001341r 4  rr rr        	.word @song0ref4063
001343r 4  41 14        	.byte $41, $14
001345r 4  rr rr        	.word @song0ref4133
001347r 4  41 10        	.byte $41, $10
001349r 4  rr rr        	.word @song0ref4063
00134Br 4  41 14        	.byte $41, $14
00134Dr 4  rr rr        	.word @song0ref4133
00134Fr 4  41 10        	.byte $41, $10
001351r 4  rr rr        	.word @song0ref4063
001353r 4  41 14        	.byte $41, $14
001355r 4  rr rr        	.word @song0ref4133
001357r 4  41 10        	.byte $41, $10
001359r 4  rr rr        	.word @song0ref4063
00135Br 4  41 14        	.byte $41, $14
00135Dr 4  rr rr        	.word @song0ref4133
00135Fr 4  41 10        	.byte $41, $10
001361r 4  rr rr        	.word @song0ref4063
001363r 4  41 14        	.byte $41, $14
001365r 4  rr rr        	.word @song0ref4133
001367r 4  41 10        	.byte $41, $10
001369r 4  rr rr        	.word @song0ref4063
00136Br 4  41 14        	.byte $41, $14
00136Dr 4  rr rr        	.word @song0ref4133
00136Fr 4  41 10        	.byte $41, $10
001371r 4  rr rr        	.word @song0ref4063
001373r 4  41 13        	.byte $41, $13
001375r 4  rr rr        	.word @song0ref4133
001377r 4  41 11        	.byte $41, $11
001379r 4  rr rr        	.word @song0ref4061
00137Br 4  41 0E        	.byte $41, $0e
00137Dr 4  rr rr        	.word @song0ref4060
00137Fr 4  81 8A 18 81  	.byte $81, $8a, $18, $81, $73, $51, $0a, $f0, $80
001383r 4  73 51 0A F0  
001387r 4  80           
001388r 4  41 2F        	.byte $41, $2f
00138Ar 4  rr rr        	.word @song0ref4099
00138Cr 4  41 21        	.byte $41, $21
00138Er 4  rr rr        	.word @song0ref4010
001390r 4  41 22        	.byte $41, $22
001392r 4  rr rr        	.word @song0ref4009
001394r 4  41 22        	.byte $41, $22
001396r 4  rr rr        	.word @song0ref4009
001398r 4  41 22        	.byte $41, $22
00139Ar 4  rr rr        	.word @song0ref4009
00139Cr 4  41 22        	.byte $41, $22
00139Er 4  rr rr        	.word @song0ref4009
0013A0r 4  41 22        	.byte $41, $22
0013A2r 4  rr rr        	.word @song0ref4009
0013A4r 4  41 22        	.byte $41, $22
0013A6r 4  rr rr        	.word @song0ref4009
0013A8r 4  81 84 14     	.byte $81, $84, $14
0013ABr 4  41 10        	.byte $41, $10
0013ADr 4  rr rr        	.word @song0ref4063
0013AFr 4  41 14        	.byte $41, $14
0013B1r 4  rr rr        	.word @song0ref4133
0013B3r 4  41 10        	.byte $41, $10
0013B5r 4  rr rr        	.word @song0ref4063
0013B7r 4  41 14        	.byte $41, $14
0013B9r 4  rr rr        	.word @song0ref4133
0013BBr 4  41 10        	.byte $41, $10
0013BDr 4  rr rr        	.word @song0ref4063
0013BFr 4  41 13        	.byte $41, $13
0013C1r 4  rr rr        	.word @song0ref4133
0013C3r 4  41 11        	.byte $41, $11
0013C5r 4  rr rr        	.word @song0ref4061
0013C7r 4  41 0E        	.byte $41, $0e
0013C9r 4  rr rr        	.word @song0ref4060
0013CBr 4  81 8A 18 81  	.byte $81, $8a, $18, $81, $73, $51, $0a, $f0, $80
0013CFr 4  73 51 0A F0  
0013D3r 4  80           
0013D4r 4  41 11        	.byte $41, $11
0013D6r 4  rr rr        	.word @song0ref4099
0013D8r 4  87 7F 00 DD  	.byte $87, $7f, $00, $dd, $42
0013DCr 4  42           
0013DDr 4  rr rr        	.word @song0ch3loop
0013DFr 4               @song0ch4:
0013DFr 4  FF           	.byte $ff
0013E0r 4               @song0ch4loop:
0013E0r 4  FF FF FF     	.byte $ff, $ff, $ff
0013E3r 4               @song0ref4388:
0013E3r 4  04 8D 04 85  	.byte $04, $8d, $04, $85, $08, $8d, $08, $8d, $08, $8d, $03, $8d, $07, $8d, $07, $8d, $07, $85
0013E7r 4  08 8D 08 8D  
0013EBr 4  08 8D 03 8D  
0013F5r 4  41 12        	.byte $41, $12
0013F7r 4  rr rr        	.word @song0ref4388
0013F9r 4               @song0ref4409:
0013F9r 4  0E 8D 0E 85  	.byte $0e, $8d, $0e, $85, $07, $8d, $07, $8d, $07, $85, $08, $8d, $08, $85, $0f, $8d, $0f, $8d, $0f, $85
0013FDr 4  07 8D 07 8D  
001401r 4  07 85 08 8D  
00140Dr 4  41 14        	.byte $41, $14
00140Fr 4  rr rr        	.word @song0ref4409
001411r 4               @song0ref4432:
001411r 4  97 06 8D 06  	.byte $97, $06, $8d, $06, $8d, $06, $8d, $06, $a5, $08, $8d, $07, $8d, $07, $85, $06, $8d, $06, $8d, $06, $8d, $0d, $85, $0d
001415r 4  8D 06 8D 06  
001419r 4  A5 08 8D 07  
001429r 4  85 06 8D 06  	.byte $85, $06, $8d, $06, $8d, $06, $85
00142Dr 4  8D 06 85     
001430r 4  41 1F        	.byte $41, $1f
001432r 4  rr rr        	.word @song0ref4432
001434r 4               @song0ref4466:
001434r 4  04 8D 04 85  	.byte $04, $8d, $04, $85, $08, $8d, $08, $8d, $08, $9d, $07, $8d, $07, $8d, $07, $85
001438r 4  08 8D 08 8D  
00143Cr 4  08 9D 07 8D  
001444r 4  41 10        	.byte $41, $10
001446r 4  rr rr        	.word @song0ref4466
001448r 4  41 10        	.byte $41, $10
00144Ar 4  rr rr        	.word @song0ref4466
00144Cr 4  41 10        	.byte $41, $10
00144Er 4  rr rr        	.word @song0ref4466
001450r 4               @song0ref4491:
001450r 4  06 8D 06 85  	.byte $06, $8d, $06, $85, $0a, $8d, $0a, $8d, $0a, $8d, $05, $8d, $09, $8d, $09, $8d, $09, $85
001454r 4  0A 8D 0A 8D  
001458r 4  0A 8D 05 8D  
001462r 4  41 12        	.byte $41, $12
001464r 4  rr rr        	.word @song0ref4491
001466r 4               @song0ref4512:
001466r 4  08 8D 08 85  	.byte $08, $8d, $08, $85, $09, $8d, $09, $8d, $09, $85, $0a, $8d, $0a, $85, $01, $8d, $01, $8d, $01, $85
00146Ar 4  09 8D 09 8D  
00146Er 4  09 85 0A 8D  
00147Ar 4  41 14        	.byte $41, $14
00147Cr 4  rr rr        	.word @song0ref4512
00147Er 4  41 1F        	.byte $41, $1f
001480r 4  rr rr        	.word @song0ref4432
001482r 4  41 1F        	.byte $41, $1f
001484r 4  rr rr        	.word @song0ref4432
001486r 4  41 10        	.byte $41, $10
001488r 4  rr rr        	.word @song0ref4466
00148Ar 4  41 10        	.byte $41, $10
00148Cr 4  rr rr        	.word @song0ref4466
00148Er 4  41 10        	.byte $41, $10
001490r 4  rr rr        	.word @song0ref4466
001492r 4  41 10        	.byte $41, $10
001494r 4  rr rr        	.word @song0ref4466
001496r 4  41 10        	.byte $41, $10
001498r 4  rr rr        	.word @song0ref4466
00149Ar 4  41 10        	.byte $41, $10
00149Cr 4  rr rr        	.word @song0ref4466
00149Er 4  41 10        	.byte $41, $10
0014A0r 4  rr rr        	.word @song0ref4466
0014A2r 4  41 10        	.byte $41, $10
0014A4r 4  rr rr        	.word @song0ref4466
0014A6r 4  FF FF FF EF  	.byte $ff, $ff, $ff, $ef, $01, $81, $09, $81, $08, $81, $04, $81, $06, $9d, $0d, $95, $06, $81, $0d, $81, $04, $9d, $04, $85
0014AAr 4  01 81 09 81  
0014AEr 4  08 81 04 81  
0014BEr 4  0D 85 06 85  	.byte $0d, $85, $06, $85, $07, $85, $08, $b5, $0d, $85, $06, $8d, $0d, $85, $04, $a5, $07, $9d, $06, $95, $07, $81, $06, $81
0014C2r 4  07 85 08 B5  
0014C6r 4  0D 85 06 8D  
0014D6r 4  0D 9D 0D 85  	.byte $0d, $9d, $0d, $85, $06, $85, $07, $85, $08, $85, $08, $ad, $0b, $85, $0c, $85, $02, $bd
0014DAr 4  06 85 07 85  
0014DEr 4  08 85 08 AD  
0014E8r 4               @song0ref4631:
0014E8r 4  00 81 04 81  	.byte $00, $81, $04, $81, $04, $81, $04, $81, $00, $81, $04, $81, $04, $81, $04, $81
0014ECr 4  04 81 04 81  
0014F0r 4  00 81 04 81  
0014F8r 4  41 10        	.byte $41, $10
0014FAr 4  rr rr        	.word @song0ref4631
0014FCr 4  41 10        	.byte $41, $10
0014FEr 4  rr rr        	.word @song0ref4631
001500r 4  41 10        	.byte $41, $10
001502r 4  rr rr        	.word @song0ref4631
001504r 4  41 10        	.byte $41, $10
001506r 4  rr rr        	.word @song0ref4631
001508r 4  41 10        	.byte $41, $10
00150Ar 4  rr rr        	.word @song0ref4631
00150Cr 4  41 10        	.byte $41, $10
00150Er 4  rr rr        	.word @song0ref4631
001510r 4  41 10        	.byte $41, $10
001512r 4  rr rr        	.word @song0ref4631
001514r 4  41 10        	.byte $41, $10
001516r 4  rr rr        	.word @song0ref4631
001518r 4  41 10        	.byte $41, $10
00151Ar 4  rr rr        	.word @song0ref4631
00151Cr 4  41 10        	.byte $41, $10
00151Er 4  rr rr        	.word @song0ref4631
001520r 4  41 10        	.byte $41, $10
001522r 4  rr rr        	.word @song0ref4631
001524r 4  41 10        	.byte $41, $10
001526r 4  rr rr        	.word @song0ref4631
001528r 4  41 10        	.byte $41, $10
00152Ar 4  rr rr        	.word @song0ref4631
00152Cr 4  41 10        	.byte $41, $10
00152Er 4  rr rr        	.word @song0ref4631
001530r 4  41 10        	.byte $41, $10
001532r 4  rr rr        	.word @song0ref4631
001534r 4  04 FD 42     	.byte $04, $fd, $42
001537r 4  rr rr        	.word @song0ch4loop
001539r 4               
001539r 3               
001539r 3               level1_music:
001539r 3  rr rr        	.word music_data_ch1 ; song list
00153Br 3  00           	.byte $00            ; default song
00153Cr 3               
00153Cr 2               
00153Cr 2               music_data_ch1_dmc:
00153Cr 2  55 55 71 59  .incbin "level1.dmc"
001540r 2  B5 30 79 14  
001544r 2  58 AB 3E FE  
001A7Cr 2               
001A7Cr 1               
001A7Cr 1               .include "prg_game.asm"
001A7Cr 2               ; Copyright (C) 2024 iProgramInCpp
001A7Cr 2               
001A7Cr 2               .segment "PRG_GAME"
000000r 2               
000000r 2               .include "game.asm"
000000r 3               ; Copyright (C) 2024 iProgramInCpp
000000r 3               
000000r 3               .include "g_level.asm"
000000r 4               ; Copyright (C) 2024 iProgramInCpp
000000r 4               
000000r 4               ; NOTE NOTE NOTE
000000r 4               ; These functions are declared in the MAIN segment. Not the GAME segment.
000000r 4               
000000r 4               ; ** SUBROUTINE: h_comp_addr
000000r 4               ; desc:    Computes the address of the 64 byte row of tiles into lvladdr.
000000r 4               ; arguments:
000000r 4               ;     x - X coordinate
000000r 4               ; clobbers: a
000000r 4               h_comp_addr:
000000r 4               	; the address goes as follows:
000000r 4               	; 0110 0xxx xxxy yyyy
000000r 4  A9 rr        	lda #<areaspace
000002r 4  85 rr        	sta lvladdr
000004r 4  A9 rr        	lda #>areaspace
000006r 4  85 rr        	sta lvladdrhi
000008r 4  8A           	txa
000009r 4  4A           	lsr
00000Ar 4  4A           	lsr
00000Br 4  4A           	lsr             ; chop off the first 3 bits
00000Cr 4  29 07        	and #%00000111
00000Er 4  18           	clc
00000Fr 4  65 rr        	adc lvladdrhi
000011r 4  85 rr        	sta lvladdrhi
000013r 4  8A           	txa
000014r 4  6A           	ror
000015r 4  6A           	ror
000016r 4  6A           	ror
000017r 4  6A           	ror
000018r 4  29 E0        	and #%11100000  ; put the 3 LSBs of X in the lvladdr
00001Ar 4  85 rr        	sta lvladdr     ; note: need to ror 4x because rotation also involves the carry bit
00001Cr 4  60           	rts
00001Dr 4               
00001Dr 4               ; ** SUBROUTINE: h_get_tile
00001Dr 4               ; desc:    Gets the value of a tile in loaded areaspace for the horizontal layout
00001Dr 4               ;          (equivalent of the C code "areaspace[x * 32 + y]")
00001Dr 4               ; arguments:
00001Dr 4               ;     x - X coordinate
00001Dr 4               ;     y - Y coordinate
00001Dr 4               ; returns:  a - Tile value
00001Dr 4               ; clobbers: a
00001Dr 4               ;
00001Dr 4               ; NOTE for h_get_tile1: the Y coordinate must be in A when you call!
00001Dr 4               h_get_tile:
00001Dr 4  20 rr rr     	jsr h_comp_addr
000020r 4  B1 rr        	lda (lvladdr), y; A = (&areaspace[x * 32])[y]
000022r 4  60           	rts
000023r 4               
000023r 4               ; ** SUBROUTINE: h_set_tile
000023r 4               ; desc:    Sets the value of a tile in loaded areaspace for the horizontal layout
000023r 4               ;          (equivalent of the C code "areaspace[x * 32 + y]")
000023r 4               ; arguments:
000023r 4               ;     x - X coordinate
000023r 4               ;     y - Y coordinate
000023r 4               ;     a - Tile value
000023r 4               ; clobbers: a
000023r 4               ;h_set_tile:
000023r 4               ;	pha
000023r 4               ;	jsr h_comp_addr
000023r 4               ;	pla
000023r 4               ;	sta (lvladdr), y
000023r 4               ;	rts
000023r 4               
000023r 4               ; ** SUBROUTINE: h_ntwr_to_ppuaddr
000023r 4               ; desc: Converts the nametable write head (ntwraddr) to a PPU address.
000023r 4               h_ntwr_to_ppuaddr:
000023r 4               	; the PPU address we want to start writing to is
000023r 4               	; 0x2000 + (ntwrhead / 32) * 0x400 + (ntwrhead % 32)
000023r 4  A5 rr        	lda ntwrhead
000025r 4  A0 20        	ldy #$20
000027r 4  29 20        	and #$20
000029r 4  F0 04        	beq :+
00002Br 4  C8           	iny
00002Cr 4  C8           	iny
00002Dr 4  C8           	iny
00002Er 4  C8           	iny
00002Fr 4  A5 rr        :	lda ntwrhead
000031r 4  29 1F        	and #$1F
000033r 4  8C 06 20     	sty ppu_addr
000036r 4  8D 06 20     	sta ppu_addr
000039r 4  60           	rts
00003Ar 4               
00003Ar 4               ; ** SUBROUTINE: h_flush_pal_r_cond
00003Ar 4               ; desc:    Flushes a generated palette column in temppal to the screen if nc_flshpalv is set
00003Ar 4               ; assumes: PPUCTRL has the IRQ bit set to zero (dont generate interrupts), increment to 1
00003Ar 4               h_flush_pal_r_cond:
00003Ar 4  A9 80        	lda #nc_flshpalv
00003Cr 4  24 rr        	bit nmictrl
00003Er 4  D0 01        	bne h_flush_pal_r
000040r 4  60           	rts
000041r 4               
000041r 4               ; ** SUBROUTINE: h_flush_pal_r
000041r 4               ; desc:    Flushes a generated palette column in temppal to the screen
000041r 4               ; assumes: PPUCTRL has the IRQ bit set to zero (dont generate interrupts), increment to 1
000041r 4               h_flush_pal_r:
000041r 4  18           	clc
000042r 4  A5 rr        	lda ntwrhead
000044r 4  E9 02        	sbc #2
000046r 4  29 20        	and #$20
000048r 4  4A           	lsr
000049r 4  4A           	lsr
00004Ar 4  4A           	lsr
00004Br 4  18           	clc
00004Cr 4  69 23        	adc #$23
00004Er 4  AA           	tax
00004Fr 4  86 rr        	stx y_crd_temp      ; store the high byte of the nametable address there. we'll need it.
000051r 4  A2 C0        	ldx #$C0
000053r 4  86 rr        	stx x_crd_temp
000055r 4  A5 rr        	lda ntwrhead
000057r 4  4A           	lsr
000058r 4  18           	clc
000059r 4  E9 01        	sbc #1
00005Br 4  4A           	lsr
00005Cr 4  29 07        	and #7
00005Er 4  18           	clc
00005Fr 4  65 rr        	adc x_crd_temp
000061r 4  85 rr        	sta x_crd_temp
000063r 4               	; need to write 8 bytes.
000063r 4  A0 00        	ldy #0
000065r 4               @loop:
000065r 4  A6 rr        	ldx y_crd_temp
000067r 4  8E 06 20     	stx ppu_addr
00006Ar 4  A6 rr        	ldx x_crd_temp
00006Cr 4  8E 06 20     	stx ppu_addr
00006Fr 4  B9 rr rr     	lda temppal, y
000072r 4  8D 07 20     	sta ppu_data
000075r 4  A9 08        	lda #8
000077r 4  65 rr        	adc x_crd_temp
000079r 4  85 rr        	sta x_crd_temp
00007Br 4  C8           	iny
00007Cr 4  C0 08        	cpy #8
00007Er 4  D0 E5        	bne @loop
000080r 4  60           	rts
000081r 4               
000081r 4               ; ** SUBROUTINE: h_flush_pal_u
000081r 4               ; desc:    Flushes a generated palette row in temppalH to the screen.
000081r 4               ; assumes: PPUCTRL has the IRQ bit set to zero (dont generate interrupts), increment to 1
000081r 4               h_flush_pal_u:
000081r 4  A4 rr        	ldy wrcountHP1
000083r 4  F0 17        	beq @dontflushHP1
000085r 4               
000085r 4  A5 rr        	lda ppuaddrHP1+1
000087r 4  8D 06 20     	sta ppu_addr
00008Ar 4  A5 rr        	lda ppuaddrHP1
00008Cr 4  8D 06 20     	sta ppu_addr
00008Fr 4  A0 00        	ldy #0
000091r 4               
000091r 4  B9 rr rr     :	lda temppalH1, y
000094r 4  8D 07 20     	sta ppu_data
000097r 4  C8           	iny
000098r 4  C4 rr        	cpy wrcountHP1
00009Ar 4  D0 F5        	bne :-
00009Cr 4               
00009Cr 4               @dontflushHP1:
00009Cr 4  A4 rr        	ldy wrcountHP2
00009Er 4  F0 17        	beq @dontflushHP2
0000A0r 4               
0000A0r 4  A5 rr        	lda ppuaddrHP2+1
0000A2r 4  8D 06 20     	sta ppu_addr
0000A5r 4  A5 rr        	lda ppuaddrHP2
0000A7r 4  8D 06 20     	sta ppu_addr
0000AAr 4  A0 00        	ldy #0
0000ACr 4               
0000ACr 4  B9 rr rr     :	lda temppalH2, y
0000AFr 4  8D 07 20     	sta ppu_data
0000B2r 4  C8           	iny
0000B3r 4  C4 rr        	cpy wrcountHP2
0000B5r 4  D0 F5        	bne :-
0000B7r 4               
0000B7r 4               @dontflushHP2:
0000B7r 4  60           	rts
0000B8r 4               
0000B8r 4               ; ** SUBROUTINE: h_flush_row_u
0000B8r 4               ; desc:    Flushes a generated row in temprow to the screen.
0000B8r 4               ; assumes: we're in vblank or rendering is disabled
0000B8r 4               h_flush_row_u:
0000B8r 4  A4 rr        	ldy wrcountHR1
0000BAr 4  F0 17        	beq @dontflushHR1
0000BCr 4               
0000BCr 4  A5 rr        	lda ppuaddrHR1+1
0000BEr 4  8D 06 20     	sta ppu_addr
0000C1r 4  A5 rr        	lda ppuaddrHR1
0000C3r 4  8D 06 20     	sta ppu_addr
0000C6r 4  A0 00        	ldy #0
0000C8r 4               
0000C8r 4  B9 rr rr     :	lda temprow1, y
0000CBr 4  8D 07 20     	sta ppu_data
0000CEr 4  C8           	iny
0000CFr 4  C4 rr        	cpy wrcountHR1
0000D1r 4  D0 F5        	bne :-
0000D3r 4               
0000D3r 4               @dontflushHR1:
0000D3r 4  A4 rr        	ldy wrcountHR2
0000D5r 4  F0 17        	beq @dontflushHR2
0000D7r 4               
0000D7r 4  A5 rr        	lda ppuaddrHR2+1
0000D9r 4  8D 06 20     	sta ppu_addr
0000DCr 4  A5 rr        	lda ppuaddrHR2
0000DEr 4  8D 06 20     	sta ppu_addr
0000E1r 4  A0 00        	ldy #0
0000E3r 4               
0000E3r 4  B9 rr rr     :	lda temprow2, y
0000E6r 4  8D 07 20     	sta ppu_data
0000E9r 4  C8           	iny
0000EAr 4  C4 rr        	cpy wrcountHR2
0000ECr 4  D0 F5        	bne :-
0000EEr 4               
0000EEr 4               @dontflushHR2:
0000EEr 4               
0000EEr 4               	; advance the row head but keep it within 30
0000EEr 4  A6 rr        	ldx ntrowhead
0000F0r 4  D0 02        	bne :+
0000F2r 4  A2 1E        	ldx #30
0000F4r 4  CA           :	dex
0000F5r 4  86 rr        	stx ntrowhead
0000F7r 4               
0000F7r 4  60           	rts
0000F8r 4               
0000F8r 4               ; ** SUBROUTINE: h_enqueued_clear
0000F8r 4               ; desc: Clears the places in a nametable that the IntroCrusher occupies.
0000F8r 4               ; assumes: running inside an NMI or rendering is disabled.
0000F8r 4               h_enqueued_clear:
0000F8r 4               	; set the increment to 32 in the PPUCTRL
0000F8r 4  A5 rr        	lda ctl_flags
0000FAr 4  09 04        	ora #pctl_adv32
0000FCr 4  8D 00 20     	sta ppu_ctrl
0000FFr 4               
0000FFr 4  A0 00        	ldy #0
000101r 4               @loop:
000101r 4  84 rr        	sty temp2
000103r 4               
000103r 4               	; load the ppu address to start writing the column
000103r 4  A5 rr        	lda clearpahi
000105r 4  8D 06 20     	sta ppu_addr
000108r 4  A5 rr        	lda clearpalo
00010Ar 4  8D 06 20     	sta ppu_addr
00010Dr 4               
00010Dr 4               	; flush one column
00010Dr 4  A9 00        	lda #0
00010Fr 4  A2 00        	ldx #0
000111r 4               :	; TODO: somehow ensure that the PPUDATA is reloaded properly from the top
000111r 4                   ; when vertically overflowing a nametable?? or something??
000111r 4  8D 07 20     	sta ppu_data
000114r 4  E8           	inx
000115r 4  E4 rr        	cpx clearsizey
000117r 4  D0 F8        	bne :-
000119r 4               
000119r 4               	; keep part of the old row number in a temporary so we can check it later
000119r 4  A5 rr        	lda clearpalo
00011Br 4  29 E0        	and #%11100000
00011Dr 4  85 rr        	sta temp3
00011Fr 4               
00011Fr 4               	; increment the PPU address, for the next column
00011Fr 4  E6 rr        	inc clearpalo
000121r 4  F0 08        	beq @haveOverFlow  ; in case of this type of overflow, the row was definitely overflown
000123r 4               
000123r 4               	; check for regular cases of overflow
000123r 4  A5 rr        	lda clearpalo
000125r 4  29 E0        	and #%11100000
000127r 4  C5 rr        	cmp temp3
000129r 4  F0 0E        	beq @noOverFlow    ; if the row number stayed the same, then no overflow
00012Br 4               
00012Br 4               @haveOverFlow:
00012Br 4               	; we have overflow! reset the row number to default and increase the name table number
00012Br 4  A5 rr        	lda clearpalo
00012Dr 4  29 1F        	and #%00011111
00012Fr 4  05 rr        	ora temp3
000131r 4  85 rr        	sta clearpalo
000133r 4               
000133r 4  A5 rr        	lda clearpahi
000135r 4  49 04        	eor #$04
000137r 4  85 rr        	sta clearpahi
000139r 4               
000139r 4               @noOverFlow:
000139r 4  A4 rr        	ldy temp2
00013Br 4  C8           	iny
00013Cr 4  C4 rr        	cpy clearsizex
00013Er 4  D0 C1        	bne @loop
000140r 4               
000140r 4               	; restore the old PPUCTRL
000140r 4  A5 rr        	lda ctl_flags
000142r 4  8D 00 20     	sta ppu_ctrl
000145r 4               
000145r 4  60           	rts
000146r 4               
000146r 4               level0_nmi_set_icr:
000146r 4  A5 rr        	lda clearpahi
000148r 4  8D 06 20     	sta ppu_addr
00014Br 4  A5 rr        	lda clearpalo
00014Dr 4  8D 06 20     	sta ppu_addr
000150r 4               
000150r 4  A2 00        	ldx #0
000152r 4  A0 00        	ldy #0
000154r 4               @loop:
000154r 4  86 rr        	stx temp2
000156r 4               
000156r 4  A2 00        	ldx #0
000158r 4  B9 rr rr     :	lda l0ic_chardata, y
00015Br 4  8D 07 20     	sta ppu_data
00015Er 4  C8           	iny
00015Fr 4  E8           	inx
000160r 4  E0 07        	cpx #7
000162r 4  D0 F4        	bne :-
000164r 4               
000164r 4  A5 rr        	lda clearpalo
000166r 4  18           	clc
000167r 4  69 20        	adc #$20
000169r 4  85 rr        	sta clearpalo
00016Br 4  90 02        	bcc :+
00016Dr 4  E6 rr        	inc clearpahi
00016Fr 4               
00016Fr 4  A5 rr        :	lda clearpahi
000171r 4  8D 06 20     	sta ppu_addr
000174r 4  A5 rr        	lda clearpalo
000176r 4  8D 06 20     	sta ppu_addr
000179r 4               
000179r 4  A6 rr        	ldx temp2
00017Br 4  E8           	inx
00017Cr 4  E0 04        	cpx #4
00017Er 4  D0 D4        	bne @loop
000180r 4  60           	rts
000181r 4               
000181r 4               ; ** SUBROUTINE: h_calcppuaddr
000181r 4               ; desc: Calculates the PPU address for the tile position stored at [temp2 (x), temp3 (y)].
000181r 4               ;       Returns the results in clearpalo, clearpahi.  These are then used by
000181r 4               ;       the NMI handler.
000181r 4               h_calcppuaddr:
000181r 4               	; add the level Y offset.
000181r 4  A5 rr        	lda temp3
000183r 4  48           	pha
000184r 4               
000184r 4  18           	clc
000185r 4  65 rr        	adc lvlyoff
000187r 4  C9 1E        	cmp #$1E
000189r 4  90 02        	bcc :+
00018Br 4  E9 1E        	sbc #$1E
00018Dr 4  85 rr        :	sta temp3
00018Fr 4               
00018Fr 4               	; the nametable the IC is a part of.
00018Fr 4               	;
00018Fr 4               	; note: the IC may not wrap across nametables! Tiles will be written to the
00018Fr 4               	; wrong place if it does!
00018Fr 4  A9 20        	lda #%00100000
000191r 4  24 rr        	bit temp2
000193r 4  D0 04        	bne @do24
000195r 4  A9 20        	lda #$20
000197r 4  D0 02        	bne @done
000199r 4               @do24:
000199r 4  A9 24        	lda #$24
00019Br 4               @done:
00019Br 4  85 rr        	sta clearpalo
00019Dr 4               
00019Dr 4               	; then, part of the Y coordinate.
00019Dr 4               	; between $2000 and $2100 there are 8 tile rows.
00019Dr 4  A5 rr        	lda temp3
00019Fr 4  4A           	lsr
0001A0r 4  4A           	lsr
0001A1r 4  4A           	lsr
0001A2r 4  18           	clc
0001A3r 4  65 rr        	adc clearpalo
0001A5r 4  A8           	tay         ; high address in Y
0001A6r 4               
0001A6r 4               	; 0010 0XYY YYYX XXXX
0001A6r 4               
0001A6r 4  A5 rr        	lda temp3
0001A8r 4  6A           	ror
0001A9r 4  6A           	ror
0001AAr 4  6A           	ror
0001ABr 4  6A           	ror
0001ACr 4  29 E0        	and #%11100000
0001AEr 4  85 rr        	sta clearpalo
0001B0r 4               
0001B0r 4  A5 rr        	lda temp2
0001B2r 4  29 1F        	and #%00011111
0001B4r 4  05 rr        	ora clearpalo
0001B6r 4               
0001B6r 4               	; temp5 - high byte, temp4 - low byte
0001B6r 4  85 rr        	sta clearpalo
0001B8r 4  84 rr        	sty clearpahi
0001BAr 4               
0001BAr 4  68           	pla
0001BBr 4  85 rr        	sta temp3
0001BDr 4  60           	rts
0001BEr 4               
0001BEr 4               ; ** SUBROUTINE: h_clear_2cols
0001BEr 4               ; desc:    Clears two columns with blank.
0001BEr 4               ; assumes: we're in vblank, or rendering is disabled
0001BEr 4               h_clear_2cols:
0001BEr 4               	; set the increment to 32 in PPUCTRL
0001BEr 4  A5 rr        	lda ctl_flags
0001C0r 4  09 04        	ora #pctl_adv32
0001C2r 4  8D 00 20     	sta ppu_ctrl
0001C5r 4               
0001C5r 4  20 rr rr     	jsr h_ntwr_to_ppuaddr
0001C8r 4  20 rr rr     	jsr @write30Xblank
0001CBr 4  20 rr rr     	jsr h_advance_wr_head
0001CEr 4  20 rr rr     	jsr h_ntwr_to_ppuaddr
0001D1r 4  20 rr rr     	jsr @write30Xblank
0001D4r 4  20 rr rr     	jsr h_advance_wr_head
0001D7r 4               
0001D7r 4               	; restore the old PPUCTRL
0001D7r 4  A5 rr        	lda ctl_flags
0001D9r 4  8D 00 20     	sta ppu_ctrl
0001DCr 4  60           	rts
0001DDr 4               
0001DDr 4               @write30Xblank:
0001DDr 4  A9 00        	lda #0
0001DFr 4  A0 00        	ldy #0
0001E1r 4  8D 07 20     :	sta ppu_data
0001E4r 4  C8           	iny
0001E5r 4  C0 1E        	cpy #$1E
0001E7r 4  D0 F8        	bne :-
0001E9r 4  60           	rts
0001EAr 4               
0001EAr 4               ; ** SUBROUTINE: h_advance_wr_head
0001EAr 4               ; desc:    Advances the name table write head (ntwrhead).
0001EAr 4               h_advance_wr_head:
0001EAr 4               	; advance the write head but keep it within 64
0001EAr 4  A6 rr        	ldx ntwrhead
0001ECr 4  E8           	inx
0001EDr 4  8A           	txa
0001EEr 4  29 3F        	and #$3F
0001F0r 4  85 rr        	sta ntwrhead
0001F2r 4  60           	rts
0001F3r 4               
0001F3r 4               ; ** SUBROUTINE: h_flush_col_r
0001F3r 4               ; desc:    Flushes a generated column in tempcol to the screen
0001F3r 4               ; assumes: we're in vblank or rendering is disabled
0001F3r 4               h_flush_col_r:
0001F3r 4               	; set the increment to 32 in PPUCTRL
0001F3r 4  A5 rr        	lda ctl_flags
0001F5r 4  09 04        	ora #pctl_adv32
0001F7r 4  8D 00 20     	sta ppu_ctrl
0001FAr 4               
0001FAr 4  20 rr rr     	jsr h_ntwr_to_ppuaddr
0001FDr 4               
0001FDr 4               	; start writing tiles.
0001FDr 4               	; each iteration will write 2 character tiles for one metatile.
0001FDr 4  A0 00        	ldy #0
0001FFr 4               h_fls_wrloop:
0001FFr 4  B9 rr rr     	lda tempcol, y
000202r 4  8D 07 20     	sta ppu_data
000205r 4  C8           	iny
000206r 4  C0 1E        	cpy #$1E
000208r 4  D0 F5        	bne h_fls_wrloop
00020Ar 4               
00020Ar 4  20 rr rr     	jsr h_advance_wr_head
00020Dr 4               
00020Dr 4               	; restore the old PPUCTRL
00020Dr 4  A5 rr        	lda ctl_flags
00020Fr 4  8D 00 20     	sta ppu_ctrl
000212r 4  60           	rts
000213r 4               
000213r 4               ; ** SUBROUTINE: h_gener_row_u
000213r 4               ; desc:    Generates a horizontal row of characters corresponding to the respective
000213r 4               ;          metatiles in area space, upwards.
000213r 4               h_gener_row_u:
000213r 4  A0 00        	ldy #0
000215r 4  84 rr        	sty wrcountHR1
000217r 4  84 rr        	sty wrcountHR2
000219r 4  84 rr        	sty wrcountHP1
00021Br 4  84 rr        	sty wrcountHP2
00021Dr 4               
00021Dr 4               	; determine which nametable is the first written to
00021Dr 4               	; the PPU address we want to start writing to is
00021Dr 4               	; 0x2000 + (ntwrhead / 32) * 0x400 + (ntwrhead % 32) + ntrowhead * 0x20
00021Dr 4  A9 00        	lda #$00
00021Fr 4  85 rr        	sta ppuaddrHR1
000221r 4  A9 20        	lda #$20
000223r 4  85 rr        	sta ppuaddrHR1+1
000225r 4               
000225r 4               	; (add ntwrhead / 32) * 0x400
000225r 4  A5 rr        	lda ntwrhead
000227r 4  29 20        	and #$20
000229r 4  F0 04        	beq :+
00022Br 4  A9 24        	lda #$24
00022Dr 4  85 rr        	sta ppuaddrHR1+1
00022Fr 4               :	; add ntwrhead % 32
00022Fr 4  A5 rr        	lda ntwrhead
000231r 4  29 1F        	and #$1F
000233r 4  18           	clc
000234r 4  65 rr        	adc ppuaddrHR1
000236r 4  85 rr        	sta ppuaddrHR1
000238r 4               	; add (ntrowhead % 8) * 0x20 + (ntrowhead / 8) * 0x100
000238r 4  A5 rr        	lda ntrowhead
00023Ar 4  4A           	lsr
00023Br 4  4A           	lsr
00023Cr 4  4A           	lsr
00023Dr 4  85 rr        	sta temp6
00023Fr 4               
00023Fr 4  A5 rr        	lda ntrowhead
000241r 4  6A           	ror
000242r 4  6A           	ror
000243r 4  6A           	ror
000244r 4  6A           	ror
000245r 4  29 E0        	and #%11100000
000247r 4  18           	clc
000248r 4  65 rr        	adc ppuaddrHR1
00024Ar 4  85 rr        	sta ppuaddrHR1
00024Cr 4  A5 rr        	lda ppuaddrHR1+1
00024Er 4  65 rr        	adc temp6
000250r 4  85 rr        	sta ppuaddrHR1+1
000252r 4               
000252r 4               	; done! ppuaddrHR2 is going to be the other nametable, with X=0
000252r 4  A5 rr        	lda ppuaddrHR1+1
000254r 4  49 04        	eor #$04
000256r 4  85 rr        	sta ppuaddrHR2+1
000258r 4  A5 rr        	lda ppuaddrHR1
00025Ar 4  29 E0        	and #%11100000
00025Cr 4  85 rr        	sta ppuaddrHR2
00025Er 4               
00025Er 4               	; determine which half we should be writing to
00025Er 4  A5 rr        	lda ntwrhead
000260r 4  29 1F        	and #$1F
000262r 4  85 rr        	sta temp2
000264r 4  A9 20        	lda #32
000266r 4  38           	sec
000267r 4  E5 rr        	sbc temp2
000269r 4  85 rr        	sta temp2
00026Br 4               
00026Br 4               	; sike! don't use an offset for HR1 either.
00026Br 4  A5 rr        	lda ppuaddrHR1
00026Dr 4  29 1F        	and #%00011111
00026Fr 4  A8           	tay
000270r 4  45 rr        	eor ppuaddrHR1
000272r 4  85 rr        	sta ppuaddrHR1
000274r 4               
000274r 4               	; write a bunch of fillers.
000274r 4  A9 00        	lda #0
000276r 4  C8           	iny
000277r 4  88           	dey
000278r 4  F0 0B        	beq @loop       ; don't actually write anything
00027Ar 4               
00027Ar 4  A6 rr        :	ldx wrcountHR1
00027Cr 4  9D rr rr     	sta temprow1, x
00027Fr 4  E8           	inx
000280r 4  86 rr        	stx wrcountHR1
000282r 4  88           	dey
000283r 4  D0 F5        	bne :-
000285r 4               
000285r 4               @loop:
000285r 4  84 rr        	sty temp1
000287r 4  A5 rr        	lda ntwrhead
000289r 4  18           	clc
00028Ar 4  65 rr        	adc temp1
00028Cr 4  29 3F        	and #$3F
00028Er 4  AA           	tax                      ; the X coordinate
00028Fr 4  20 rr rr     	jsr h_comp_addr
000292r 4               
000292r 4  A4 rr        	ldy ntrowhead2           ; the Y coordinate
000294r 4  B1 rr        	lda (lvladdr), y
000296r 4  AA           	tax
000297r 4  BD 00 A0     	lda metatiles, x
00029Ar 4               
00029Ar 4  A4 rr        	ldy temp1
00029Cr 4  C4 rr        	cpy temp2
00029Er 4  90 0A        	bcc :+
0002A0r 4  A6 rr        	ldx wrcountHR2           ; second half
0002A2r 4  9D rr rr     	sta temprow2, x
0002A5r 4  E8           	inx
0002A6r 4  86 rr        	stx wrcountHR2
0002A8r 4  D0 08        	bne @writedone
0002AAr 4  A6 rr        :	ldx wrcountHR1           ; first half
0002ACr 4  9D rr rr     	sta temprow1, x
0002AFr 4  E8           	inx
0002B0r 4  86 rr        	stx wrcountHR1
0002B2r 4               @writedone:
0002B2r 4               
0002B2r 4               	; pad out hr2 with filler.
0002B2r 4  A9 00        	lda #0
0002B4r 4  A4 rr        	ldy wrcountHR2
0002B6r 4  C0 20        	cpy #$20
0002B8r 4  D0 0A        	bne @dont
0002BAr 4  99 rr rr     :	sta temprow2, y
0002BDr 4  C8           	iny
0002BEr 4  C0 20        	cpy #$20
0002C0r 4  D0 F8        	bne :-
0002C2r 4  84 rr        	sty wrcountHR2
0002C4r 4               
0002C4r 4               @dont:
0002C4r 4  A4 rr        	ldy temp1
0002C6r 4  C8           	iny
0002C7r 4  C0 20        	cpy #$20
0002C9r 4  D0 BA        	bne @loop
0002CBr 4               
0002CBr 4               	; now that the row has been flushed, it's time to set the nmictrl flag
0002CBr 4  A9 10        	lda #nc_flushrow
0002CDr 4  05 rr        	ora nmictrl
0002CFr 4  85 rr        	sta nmictrl
0002D1r 4               
0002D1r 4               	; check if (ntrowhead % 4) == 0
0002D1r 4  A5 rr        	lda ntrowhead
0002D3r 4  29 03        	and #$03
0002D5r 4  D0 6B        	bne @dontgeneratepal
0002D7r 4               
0002D7r 4               	; prepare addresses for palH1 and palH2.
0002D7r 4  A5 rr        	lda ntwrhead
0002D9r 4  29 20        	and #$20
0002DBr 4  4A           	lsr
0002DCr 4  4A           	lsr
0002DDr 4  4A           	lsr
0002DEr 4  18           	clc
0002DFr 4  69 23        	adc #$23
0002E1r 4  85 rr        	sta ppuaddrHP1+1
0002E3r 4               
0002E3r 4               	; add the Y coordinate
0002E3r 4  A5 rr        	lda ntrowhead  ; 000yyyyy [0 - 29]
0002E5r 4  0A           	asl            ; 00yyyyy0
0002E6r 4  29 38        	and #%00111000 ; 00yyy000
0002E8r 4  09 C0        	ora #%11000000 ; $C0
0002EAr 4  85 rr        	sta ppuaddrHP1
0002ECr 4               
0002ECr 4               	; add the X coordinate
0002ECr 4  A5 rr        	lda ntwrhead   ; 00sxxxxx
0002EEr 4  4A           	lsr            ; 000sxxxx
0002EFr 4  4A           	lsr            ; 0000sxxx
0002F0r 4  29 07        	and #%00000111 ; 00000xxx
0002F2r 4  18           	clc
0002F3r 4  65 rr        	adc ppuaddrHP1
0002F5r 4  85 rr        	sta ppuaddrHP1
0002F7r 4               
0002F7r 4               	; palH2 will be on the same nametable but the X coordinate will be zero
0002F7r 4  A5 rr        	lda ppuaddrHP1+1
0002F9r 4  49 04        	eor #$04
0002FBr 4  85 rr        	sta ppuaddrHP2+1
0002FDr 4               
0002FDr 4  A5 rr        	lda ppuaddrHP1
0002FFr 4  29 F8        	and #%11111000
000301r 4  85 rr        	sta ppuaddrHP2
000303r 4               
000303r 4               	; calculate the Y threshold at which we need to switch to the other name table.
000303r 4  A5 rr        	lda ntwrhead
000305r 4  29 1F        	and #$1F
000307r 4  4A           	lsr
000308r 4  4A           	lsr
000309r 4  85 rr        	sta temp2
00030Br 4  A9 08        	lda #8
00030Dr 4  38           	sec
00030Er 4  E5 rr        	sbc temp2
000310r 4  85 rr        	sta temp2
000312r 4               
000312r 4               	; start reading palette data.
000312r 4               	; palette data is loaded in "loadedpals". Indexing: loadedpals[x * 8 + y].
000312r 4               	; therefore we'll need to add 8 every load
000312r 4  A0 00        	ldy #0
000314r 4  A5 rr        	lda ntrowhead
000316r 4  4A           	lsr                  ; divide by 4. ntrowhead is a tile coordinate. convert to a
000317r 4  4A           	lsr                  ; palette grid coordinate.
000318r 4               @ploop:
000318r 4  48           	pha                  ; push A to restore it later
000319r 4  AA           	tax                  ; use it as an index into loadedpals.
00031Ar 4  BD rr rr     	lda loadedpals, x
00031Dr 4               
00031Dr 4  C4 rr        	cpy temp2
00031Fr 4  90 0A        	bcc :+
000321r 4  A6 rr        	ldx wrcountHP2
000323r 4  9D rr rr     	sta temppalH2, x
000326r 4  E8           	inx
000327r 4  86 rr        	stx wrcountHP2
000329r 4  D0 08        	bne @writedone1
00032Br 4  A6 rr        :	ldx wrcountHP1
00032Dr 4  9D rr rr     	sta temppalH1, x
000330r 4  E8           	inx
000331r 4  86 rr        	stx wrcountHP1
000333r 4               
000333r 4               @writedone1:
000333r 4  68           	pla                  ; restore A
000334r 4  18           	clc
000335r 4  69 08        	adc #8               ; and add 8 to it.
000337r 4  C8           	iny
000338r 4  C0 08        	cpy #8
00033Ar 4  D0 DC        	bne @ploop
00033Cr 4               
00033Cr 4  A9 20        	lda #nc_flushpal
00033Er 4  05 rr        	ora nmictrl
000340r 4  85 rr        	sta nmictrl
000342r 4               
000342r 4               @dontgeneratepal:
000342r 4  60           	rts
000343r 4               
000343r 4               
000343r 4               ; ** SUBROUTINE: h_gener_col_r
000343r 4               ; desc:    Generates a vertical column of characters corresponding to the respective
000343r 4               ;          metatiles in area space, on the right side of the scroll seam.  Also
000343r 4               ;          generates the next column of tiles and the palette if necessary.
000343r 4               h_gener_col_r:
000343r 4  A9 08        	lda #gs_scrstopR
000345r 4  24 rr        	bit gamectrl
000347r 4  F0 01        	beq :+
000349r 4  60           	rts
00034Ar 4  A6 rr        :	ldx ntwrhead              ; compute the areaspace address
00034Cr 4  20 rr rr     	jsr h_comp_addr
00034Fr 4  A4 rr        	ldy lvlyoff               ; start writing tiles.
000351r 4  84 rr        	sty temp6
000353r 4  A0 00        	ldy #0                    ; start writing tiles.
000355r 4  84 rr        	sty temp7
000357r 4               @loop:                        ; each iteration will write 1 character tile for one metatile.
000357r 4  B1 rr        	lda (lvladdr), y
000359r 4  AA           	tax
00035Ar 4  BD 00 A0     	lda metatiles, x
00035Dr 4  84 rr        	sty temp7                 ; store the current y into temp7
00035Fr 4  A4 rr        	ldy temp6                 ; load the offsetted version into temp6
000361r 4  99 rr rr     	sta tempcol, y
000364r 4  C8           	iny
000365r 4  C0 1E        	cpy #$1E
000367r 4  D0 02        	bne :+
000369r 4  A0 00        	ldy #0
00036Br 4  84 rr        :	sty temp6
00036Dr 4  A4 rr        	ldy temp7                 ; restore the current y into temp7
00036Fr 4  C8           	iny
000370r 4  C0 1E        	cpy #$1E
000372r 4  D0 E3        	bne @loop
000374r 4               
000374r 4  A9 40        	lda #nc_flushcol          ; set the nmictrl nc_flushcol flag
000376r 4  05 rr        	ora nmictrl
000378r 4  85 rr        	sta nmictrl
00037Ar 4               
00037Ar 4  A9 80        	lda #gs_dontgen
00037Cr 4  24 rr        	bit gamectrl
00037Er 4  D0 06        	bne :+
000380r 4               
000380r 4  20 rr rr     	jsr h_gener_ents_r
000383r 4  20 rr rr     	jsr h_gener_mts_r         ; generate a new column of meta-tiles and entities
000386r 4               
000386r 4  A5 rr        :	lda ntwrhead              ; check if we're writing the 3rd odd column
000388r 4  29 03        	and #$03
00038Ar 4  C9 03        	cmp #$03
00038Cr 4  F0 01        	beq h_palette_data_column
00038Er 4  60           	rts
00038Fr 4               
00038Fr 4               ; ** SUBROUTINE: h_palette_data_column
00038Fr 4               ; desc: Reads a single column of palette data.
00038Fr 4               ; NOTE: sets nc_flshpalv in nmictrl!
00038Fr 4               h_palette_data_column:
00038Fr 4  A0 00        	ldy #0                    ; start reading palette data.
000391r 4               @ploop:
000391r 4  20 rr rr     	jsr gm_read_pal
000394r 4  C9 FE        	cmp #$FE
000396r 4  F0 16        	beq @phaveFE              ; break out of this loop
000398r 4  C9 FF        	cmp #$FF
00039Ar 4  D0 0A        	bne @pnoFF
00039Cr 4               
00039Cr 4  A5 rr        	lda palrdheadlo
00039Er 4  D0 02        	bne :+
0003A0r 4  C6 rr        	dec palrdheadhi
0003A2r 4  C6 rr        :	dec palrdheadlo
0003A4r 4               
0003A4r 4  A9 00        	lda #0
0003A6r 4               @pnoFF:
0003A6r 4  99 rr rr     	sta temppal,y
0003A9r 4  C8           	iny
0003AAr 4  C0 08        	cpy #8
0003ACr 4  D0 E3        	bne @ploop
0003AEr 4               @phaveFE:
0003AEr 4  A9 80        	lda #nc_flshpalv
0003B0r 4  05 rr        	ora nmictrl
0003B2r 4  85 rr        	sta nmictrl
0003B4r 4  60           	rts
0003B5r 4               ; significance of palette combinations:
0003B5r 4               ; $FE - Re-use the same palette data as the previous column
0003B5r 4               ; $FF - End of palette data
0003B5r 4               
0003B5r 4               ; ** FEATURE: h_genertiles_dup
0003B5r 4               ; desc:    Generates a column of metatiles from 2 bytes.
0003B5r 4               ; args:    A - the dup data, Y - the Y position to start placing at
0003B5r 4               ;
0003B5r 4               ; The format in bytes for the first byte (currently loaded in A) as follows: 001CCCCC TTTTTTTT
0003B5r 4               h_genertiles_dup:
0003B5r 4  29 1F        	and #%00011111
0003B7r 4  85 rr        	sta temp1
0003B9r 4  98           	tya                   ; transfer the Y coordinate over to add it to temp1
0003BAr 4  18           	clc
0003BBr 4  65 rr        	adc temp1
0003BDr 4  85 rr        	sta temp1             ; store it in temp1
0003BFr 4  20 rr rr     	jsr gm_read_tile      ; read another byte - will be used as our 'brush'
0003C2r 4  A6 rr        	ldx arwrhead
0003C4r 4  91 rr        :   sta (lvladdr), y
0003C6r 4  99 rr rr     	sta lastcolumn, y
0003C9r 4  C8           	iny
0003CAr 4  C4 rr        	cpy temp1             ; check it against the limit
0003CCr 4  D0 F6        	bne :-
0003CEr 4  4C rr rr     	jmp h_genertiles_cont
0003D1r 4               
0003D1r 4               ; ** FEATURE: h_genertiles_copy
0003D1r 4               ; desc:    Copies an amount of metatiles from the last column.
0003D1r 4               h_genertiles_copy:
0003D1r 4  29 1F        	and #%00011111
0003D3r 4  85 rr        	sta temp1
0003D5r 4  98           	tya                   ; transfer the Y coordinate over to add it to temp1
0003D6r 4  18           	clc
0003D7r 4  65 rr        	adc temp1
0003D9r 4  85 rr        	sta temp1             ; store it in temp1
0003DBr 4               
0003DBr 4  B9 rr rr     :	lda lastcolumn, y
0003DEr 4  91 rr        	sta (lvladdr), y
0003E0r 4               	; no need to store to lastcolumn as that's where we got it from in the first place!
0003E0r 4  C8           	iny
0003E1r 4  C4 rr        	cpy temp1
0003E3r 4  D0 F6        	bne :-
0003E5r 4               
0003E5r 4  4C rr rr     	jmp h_genertiles_cont
0003E8r 4               
0003E8r 4               ; ** FEATURE: h_genertiles_dupair
0003E8r 4               ; desc:    Like h_genertiles_dup but only generates air.
0003E8r 4               h_genertiles_dupair:
0003E8r 4  29 1F        	and #%00011111
0003EAr 4  85 rr        	sta temp1
0003ECr 4  98           	tya
0003EDr 4  18           	clc
0003EEr 4  65 rr        	adc temp1
0003F0r 4  85 rr        	sta temp1
0003F2r 4  A6 rr        	ldx arwrhead
0003F4r 4  A9 00        	lda #0
0003F6r 4  91 rr        :	sta (lvladdr), y
0003F8r 4  99 rr rr     	sta lastcolumn, y
0003FBr 4  C8           	iny
0003FCr 4  C4 rr        	cpy temp1
0003FEr 4  D0 F6        	bne :-
000400r 4  4C rr rr     	jmp h_genertiles_cont
000403r 4               
000403r 4               h_genertiles_lvlend:
000403r 4  A5 rr        	lda arrdheadlo
000405r 4  D0 02        	bne :+
000407r 4  C6 rr        	dec arrdheadhi
000409r 4  C6 rr        :	dec arrdheadlo
00040Br 4               
00040Br 4  A5 rr        	lda arwrhead          ; arwrhead: 0-63
00040Dr 4  2A           	rol
00040Er 4  2A           	rol
00040Fr 4  2A           	rol
000410r 4  2A           	rol                   ; rotate that ANDed bit back to bit 0
000411r 4  29 01        	and #1
000413r 4  49 01        	eor #1                ; subtract 256 from it
000415r 4  85 rr        	sta camlimithi
000417r 4  A5 rr        	lda arwrhead
000419r 4  0A           	asl
00041Ar 4  0A           	asl
00041Br 4  0A           	asl
00041Cr 4  85 rr        	sta camlimit
00041Er 4  A9 08        	lda #gs_scrstopR
000420r 4  05 rr        	ora gamectrl
000422r 4  85 rr        	sta gamectrl
000424r 4  A5 rr        	lda arwrhead
000426r 4  85 rr        	sta trarwrhead
000428r 4  A9 00        	lda #0                ; just store 0 as the tile
00042Ar 4  91 rr        	sta (lvladdr), y
00042Cr 4  99 rr rr     	sta lastcolumn, y
00042Fr 4  C8           	iny
000430r 4  4C rr rr     	jmp h_genertiles_cont
000433r 4               
000433r 4               ; ** SUBROUTINE: h_gener_mts_r
000433r 4               ; desc:    Generates a column of metatiles ahead of the visual column render head.
000433r 4               h_gener_mts_r:
000433r 4  A9 08        	lda #gs_scrstopR
000435r 4  24 rr        	bit gamectrl
000437r 4  F0 01        	beq :+
000439r 4  60           	rts
00043Ar 4               
00043Ar 4  A6 rr        :	ldx arwrhead
00043Cr 4  20 rr rr     	jsr h_comp_addr       ; compute the address in (lvladdr)
00043Fr 4               
00043Fr 4  A0 00        	ldy #0
000441r 4               h_genertiles_loop:
000441r 4  20 rr rr     	jsr gm_read_tile
000444r 4  C9 FF        	cmp #$FF              ; if data == 0xFF, then decrement the pointer
000446r 4  F0 BB        	beq h_genertiles_lvlend
000448r 4               
000448r 4  C9 A1        	cmp #$A1              ; if data >= 0xA1 && data < 0xC0, then this is a "duplicate" tile.
00044Ar 4  90 07        	bcc :+
00044Cr 4  C9 C0        	cmp #$C0
00044Er 4  B0 03        	bcs :+
000450r 4  4C rr rr     	jmp h_genertiles_dup
000453r 4               
000453r 4  C9 C1        :	cmp #$C1
000455r 4  90 07        	bcc :+
000457r 4  C9 E0        	cmp #$E0
000459r 4  B0 03        	bcs :+
00045Br 4  4C rr rr     	jmp h_genertiles_dupair
00045Er 4               
00045Er 4  C9 81        :	cmp #$81
000460r 4  90 07        	bcc :+
000462r 4  C9 9F        	cmp #$9F
000464r 4  B0 03        	bcs :+
000466r 4  4C rr rr     	jmp h_genertiles_copy
000469r 4               
000469r 4  91 rr        :	sta (lvladdr), y
00046Br 4  99 rr rr     	sta lastcolumn, y
00046Er 4  C8           	iny
00046Fr 4               h_genertiles_cont:
00046Fr 4  C0 1E        	cpy #30
000471r 4  90 CE        	bcc h_genertiles_loop
000473r 4               
000473r 4               	; no need to store these in lastcolumn as the bytes are never used.
000473r 4  A9 00        	lda #0
000475r 4  91 rr        	sta (lvladdr), y
000477r 4  C8           	iny
000478r 4  91 rr        	sta (lvladdr), y
00047Ar 4  C8           	iny
00047Br 4               
00047Br 4  18           	clc                   ; loop done, increment arwrhead, ensuring it rolls over after 63
00047Cr 4  A9 01        	lda #1
00047Er 4  65 rr        	adc arwrhead
000480r 4  29 3F        	and #$3F
000482r 4  85 rr        	sta arwrhead
000484r 4  60           	rts
000485r 4               
000485r 4               h_generents_scrnext:
000485r 4  20 rr rr     	jsr gm_adv_ent        ; advance the entity stream
000488r 4  18           	clc
000489r 4  A9 01        	lda #1                ; NOTE: assumes arwrhead is between 0-63! change if/when expanding.
00048Br 4  65 rr        	adc tr_scrnpos
00048Dr 4  85 rr        	sta tr_scrnpos
00048Fr 4  60           	rts
000490r 4               
000490r 4               ; ** SUBROUTINE: h_gener_ents_r
000490r 4               ; desc:    Generates a column of entities ahead of the visual column render head.
000490r 4               h_gener_ents_r:
000490r 4  20 rr rr     	jsr gm_read_ent_na    ; read the byte at the beginning of the stream without advancing
000493r 4  C9 FF        	cmp #ec_dataend       ; if it's a level terminator, simply return.
000495r 4  D0 01        	bne :+
000497r 4  60           	rts
000498r 4  C9 FE        :	cmp #ec_scrnext       ; if it's a next screen command, handle it separately and return.
00049Ar 4  F0 E9        	beq h_generents_scrnext
00049Cr 4  85 rr        	sta temp1
00049Er 4               	; this is the X coordinate of an entity.
00049Er 4               
00049Er 4  A5 rr        	lda arwrhead          ; ok. check if we're on the correct screen
0004A0r 4  38           	sec
0004A1r 4  E5 rr        	sbc roombeglo2
0004A3r 4  4A           	lsr
0004A4r 4  4A           	lsr
0004A5r 4  4A           	lsr
0004A6r 4  4A           	lsr
0004A7r 4  4A           	lsr                   ; divide by 32 to get the screen number
0004A8r 4  29 01        	and #1                ; NOTE: assumes arwrhead is between 0-63! change if/when expanding.
0004AAr 4  85 rr        	sta temp2
0004ACr 4  A5 rr        	lda tr_scrnpos
0004AEr 4  29 01        	and #1
0004B0r 4  C5 rr        	cmp temp2
0004B2r 4  F0 01        	beq :+
0004B4r 4  60           	rts                   ; if the screen numbers are not equal, then return
0004B5r 4  A5 rr        :	lda arwrhead
0004B7r 4  29 1F        	and #$1F              ; cap it between 0-31, this will be an in-screen coordinate.
0004B9r 4  0A           	asl
0004BAr 4  0A           	asl
0004BBr 4  0A           	asl                   ; now check if the X coordinate is bigger than the area write head.
0004BCr 4  38           	sec
0004BDr 4  E5 rr        	sbc roombeglo
0004BFr 4  C5 rr        	cmp temp1
0004C1r 4  B0 01        	bcs :+                ; if A [(arwrhead & 0x1F) >> 3] >= M [the X coord of the tile]
0004C3r 4  60           	rts                   ; then return.
0004C4r 4  20 rr rr     :	jsr gm_adv_ent        ; advance the stream. we will process this entity's data.
0004C7r 4               
0004C7r 4               	; load the rest of the data
0004C7r 4  20 rr rr     	jsr gm_read_ent
0004CAr 4  85 rr        	sta temp2             ; store the Y position in temp2
0004CCr 4  20 rr rr     	jsr gm_read_ent
0004CFr 4  85 rr        	sta temp3             ; store the entity kind in temp3
0004D1r 4               
0004D1r 4               	; find a free spot in sprite space.
0004D1r 4  A2 00        	ldx #0
0004D3r 4  BD rr rr     :	lda sprspace+sp_kind, x
0004D6r 4  F0 06        	beq h_generents_spotfound
0004D8r 4  E8           	inx
0004D9r 4  E0 10        	cpx #sp_max
0004DBr 4  D0 F6        	bne :-
0004DDr 4               	; no more space found for this entity! :(
0004DDr 4  60           	rts
0004DEr 4               h_generents_spotfound:
0004DEr 4               	; a sprite slot was found. its slot number is located in the x register.
0004DEr 4  A9 00        	lda #0
0004E0r 4  9D rr rr     	sta sprspace+sp_entspec1, x
0004E3r 4  9D rr rr     	sta sprspace+sp_entspec2, x
0004E6r 4  9D rr rr     	sta sprspace+sp_entspec3, x
0004E9r 4  9D rr rr     	sta sprspace+sp_x_lo, x
0004ECr 4  9D rr rr     	sta sprspace+sp_y_lo, x
0004EFr 4  9D rr rr     	sta sprspace+sp_wid, x
0004F2r 4  9D rr rr     	sta sprspace+sp_hei, x
0004F5r 4  9D rr rr     	sta sprspace+sp_vel_x, x
0004F8r 4  9D rr rr     	sta sprspace+sp_vel_y, x
0004FBr 4  9D rr rr     	sta sprspace+sp_vel_x_lo, x
0004FEr 4  9D rr rr     	sta sprspace+sp_vel_y_lo, x
000501r 4  9D rr rr     	sta sprspace+sp_flags, x
000504r 4               
000504r 4  A5 rr        	lda temp3
000506r 4  C9 FF        	cmp #e_rerefill
000508r 4  D0 0D        	bne :+
00050Ar 4  A9 02        	lda #e_refill             ; this is a refill with regeneration. turn it into a
00050Cr 4  9D rr rr     	sta sprspace+sp_kind, x   ; normal refill entity with the erf_regen flag set.
00050Fr 4  A9 01        	lda #erf_regen
000511r 4  9D rr rr     	sta sprspace+sp_refill_flags, x
000514r 4  4C rr rr     	jmp h_generents_cont
000517r 4               :
000517r 4               	; some more exceptional entity IDs here...
000517r 4  9D rr rr     	sta sprspace+sp_kind, x
00051Ar 4               h_generents_cont:
00051Ar 4  A5 rr        	lda roomnumber
00051Cr 4  29 01        	and #1
00051Er 4  0A           	asl
00051Fr 4  9D rr rr     	sta sprspace+sp_flags, x
000522r 4               
000522r 4  A5 rr        	lda temp2
000524r 4  9D rr rr     	sta sprspace+sp_y, x
000527r 4               
000527r 4               	; load the X coordinate, and add the room beginning pixel and the current screen pos
000527r 4  18           	clc
000528r 4  A5 rr        	lda temp1
00052Ar 4  65 rr        	adc roombeglo
00052Cr 4  9D rr rr     	sta sprspace+sp_x, x
00052Fr 4               
00052Fr 4  A5 rr        	lda tr_scrnpos
000531r 4  65 rr        	adc roombeghi
000533r 4  9D rr rr     	sta sprspace+sp_x_pg, x
000536r 4               
000536r 4  60           	rts
000537r 4               
000537r 4               ; ** SUBROUTINE: gm_set_level_ptr
000537r 4               ; ** SUBROUTINE: gm_set_room_ptr
000537r 4               ; args:
000537r 4               ;     x - low byte
000537r 4               ;     y - high byte
000537r 4               gm_set_level_ptr:
000537r 4  86 rr        	stx lvlptrlo
000539r 4  84 rr        	sty lvlptrhi
00053Br 4  60           	rts
00053Cr 4               gm_set_room_ptr:
00053Cr 4  86 rr        	stx roomptrlo
00053Er 4  84 rr        	sty roomptrhi
000540r 4  60           	rts
000541r 4               ; ** SUBROUTINE: gm_set_tile_head
000541r 4               ; ** SUBROUTINE: gm_set_pal_head
000541r 4               ; ** SUBROUTINE: gm_set_ent_head
000541r 4               ; args:
000541r 4               ;     x - low byte
000541r 4               ;     a - high byte
000541r 4               gm_set_tile_head:
000541r 4  86 rr        	stx arrdheadlo
000543r 4  85 rr        	sta arrdheadhi
000545r 4  60           	rts
000546r 4               gm_set_pal_head:
000546r 4  86 rr        	stx palrdheadlo
000548r 4  85 rr        	sta palrdheadhi
00054Ar 4  60           	rts
00054Br 4               gm_set_ent_head:
00054Br 4  86 rr        	stx entrdheadlo
00054Dr 4  85 rr        	sta entrdheadhi
00054Fr 4  60           	rts
000550r 4               
000550r 4               ; ** SUBROUTINE: gm_read_tile_na
000550r 4               ; ** SUBROUTINE: gm_read_ent_na
000550r 4               ; ** SUBROUTINE: gm_read_tile
000550r 4               ; ** SUBROUTINE: gm_read_ent
000550r 4               ; desc: Reads a byte from the tile or entity streams. The _na versions don't
000550r 4               ; advance the pointer.
000550r 4               ; returns: a - the byte of data read in
000550r 4               ; clobbers: x
000550r 4               ;gm_read_tile_na:
000550r 4               ;	ldx #0
000550r 4               ;	lda (arrdheadlo,x)
000550r 4               ;	rts
000550r 4               
000550r 4               gm_read_ent_na:
000550r 4  A2 00        	ldx #0
000552r 4  A1 rr        	lda (entrdheadlo,x)
000554r 4  60           	rts
000555r 4               
000555r 4               ;gm_read_pal_na:
000555r 4               ;	ldx #0
000555r 4               ;	lda (palrdheadlo,x)
000555r 4               ;	rts
000555r 4               
000555r 4               gm_read_tile:
000555r 4  A2 00        	ldx #0
000557r 4  A1 rr        	lda (arrdheadlo,x)
000559r 4               gm_adv_tile:
000559r 4  E6 rr        	inc arrdheadlo
00055Br 4  D0 02        	bne :+
00055Dr 4  E6 rr        	inc arrdheadhi
00055Fr 4  60           :	rts
000560r 4               
000560r 4               gm_read_ent:
000560r 4  A2 00        	ldx #0
000562r 4  A1 rr        	lda (entrdheadlo,x)
000564r 4               gm_adv_ent:
000564r 4  E6 rr        	inc entrdheadlo
000566r 4  D0 02        	bne :+
000568r 4  E6 rr        	inc entrdheadhi
00056Ar 4  60           :	rts
00056Br 4               
00056Br 4               gm_read_pal:
00056Br 4  A2 00        	ldx #0
00056Dr 4  A1 rr        	lda (palrdheadlo,x)
00056Fr 4  E6 rr        	inc palrdheadlo
000571r 4  D0 02        	bne :+
000573r 4  E6 rr        	inc palrdheadhi
000575r 4  60           :	rts
000576r 4               
000576r 4               ; ** SUBROUTINE: gm_fetch_room
000576r 4               ; args: y - offset into lvl array
000576r 4               ; clobbers: a, x, y
000576r 4               ; desc: loads a room, initializes the tile and entity streams
000576r 4               gm_fetch_room:
000576r 4               	; load room pointer from lvl pointer
000576r 4  B1 rr        	lda (lvlptrlo),y
000578r 4  AA           	tax
000579r 4  C8           	iny
00057Ar 4  B1 rr        	lda (lvlptrlo),y
00057Cr 4  A8           	tay
00057Dr 4  20 rr rr     	jsr gm_set_room_ptr
000580r 4               
000580r 4  A0 00        	ldy #0
000582r 4               
000582r 4               gm_fetch_room_loop:
000582r 4  B1 rr        	lda (roomptrlo),y
000584r 4  99 rr rr     	sta roomhdrfirst,y
000587r 4  C8           	iny
000588r 4  C0 0E        	cpy #<(roomhdrlast-roomhdrfirst)
00058Ar 4  D0 F6        	bne gm_fetch_room_loop
00058Cr 4               
00058Cr 4               	; load tile pointer from room pointer, Y=10
00058Cr 4  B1 rr        	lda (roomptrlo),y
00058Er 4  AA           	tax
00058Fr 4  C8           	iny
000590r 4  B1 rr        	lda (roomptrlo),y
000592r 4  C8           	iny
000593r 4  20 rr rr     	jsr gm_set_tile_head
000596r 4               
000596r 4               	; load palette pointer from room pointer
000596r 4  B1 rr        	lda (roomptrlo),y
000598r 4  AA           	tax
000599r 4  C8           	iny
00059Ar 4  B1 rr        	lda (roomptrlo),y
00059Cr 4  C8           	iny
00059Dr 4  20 rr rr     	jsr gm_set_pal_head
0005A0r 4               
0005A0r 4               	; load entity pointer from room pointer
0005A0r 4  B1 rr        	lda (roomptrlo),y
0005A2r 4  AA           	tax
0005A3r 4  C8           	iny
0005A4r 4  B1 rr        	lda (roomptrlo),y
0005A6r 4  C8           	iny
0005A7r 4  20 rr rr     	jsr gm_set_ent_head
0005AAr 4  60           	rts
0005ABr 4               
0005ABr 4               ; ** SUBROUTINE: gm_on_level_init
0005ABr 4               ; desc: Called on level initialization.
0005ABr 4               gm_on_level_init:
0005ABr 4               	; load the player's X coordinate to the pixel coordinates provided,
0005ABr 4               	; if this is the first level
0005ABr 4  A5 rr        	lda startpx
0005ADr 4  85 rr        	sta player_x
0005AFr 4  A5 rr        	lda startpy
0005B1r 4  85 rr        	sta player_y
0005B3r 4               
0005B3r 4  A5 rr        	lda musicdiff
0005B5r 4  F0 15        	beq @dontReloadMusic
0005B7r 4               
0005B7r 4  A0 00        	ldy #0
0005B9r 4  B1 rr        	lda (musictable), y
0005BBr 4  AA           	tax
0005BCr 4  C8           	iny
0005BDr 4               
0005BDr 4  B1 rr        	lda (musictable), y
0005BFr 4  A8           	tay
0005C0r 4               
0005C0r 4  A9 01        	lda #1
0005C2r 4  20 rr rr     	jsr famistudio_init
0005C5r 4               
0005C5r 4  A0 02        	ldy #2
0005C7r 4  B1 rr        	lda (musictable), y
0005C9r 4  20 rr rr     	jsr famistudio_music_play
0005CCr 4               
0005CCr 4               @dontReloadMusic:
0005CCr 4  60           	rts
0005CDr 4               
0005CDr 4               ; ** SUBROUTINE: gm_set_level
0005CDr 4               ; args: X - level number
0005CDr 4               ; assumes: vblank is off and you're loading a new level
0005CDr 4               gm_set_level:
0005CDr 4  A5 rr        	lda musicbank
0005CFr 4  48           	pha
0005D0r 4               
0005D0r 4  BC rr rr     	ldy level_banks, x
0005D3r 4  84 rr        	sty musicbank
0005D5r 4  A9 07        	lda #mmc3bk_prg1
0005D7r 4  20 rr rr     	jsr mmc3_set_bank
0005DAr 4               
0005DAr 4  BC rr rr     	ldy level_banks2, x
0005DDr 4  84 rr        	sty musicbank2
0005DFr 4  A9 06        	lda #mmc3bk_prg0
0005E1r 4  20 rr rr     	jsr mmc3_set_bank
0005E4r 4               
0005E4r 4  8A           	txa
0005E5r 4  0A           	asl
0005E6r 4  AA           	tax
0005E7r 4               
0005E7r 4  BD rr rr     	lda level_table, x
0005EAr 4  E8           	inx
0005EBr 4  BC rr rr     	ldy level_table, x
0005EEr 4  AA           	tax
0005EFr 4  20 rr rr     	jsr gm_set_level_ptr
0005F2r 4               
0005F2r 4               	; load the music table
0005F2r 4  A5 rr        	lda musictable
0005F4r 4  48           	pha
0005F5r 4  A5 rr        	lda musictable+1
0005F7r 4  48           	pha
0005F8r 4               
0005F8r 4  A0 00        	ldy #0
0005FAr 4  B1 rr        	lda (lvlptrlo), y
0005FCr 4  85 rr        	sta musictable
0005FEr 4  E6 rr        	inc lvlptrlo
000600r 4               
000600r 4  B1 rr        	lda (lvlptrlo), y
000602r 4  85 rr        	sta musictable+1
000604r 4  E6 rr        	inc lvlptrlo
000606r 4               
000606r 4               	; check if any details changed
000606r 4  A9 00        	lda #0
000608r 4  85 rr        	sta musicdiff
00060Ar 4               
00060Ar 4  68           	pla
00060Br 4  C5 rr        	cmp musictable+1
00060Dr 4  F0 02        	beq :+
00060Fr 4  E6 rr        	inc musicdiff
000611r 4  68           :	pla
000612r 4  C5 rr        	cmp musictable
000614r 4  F0 02        	beq :+
000616r 4  E6 rr        	inc musicdiff
000618r 4  68           :	pla
000619r 4  C5 rr        	cmp musicbank
00061Br 4  F0 02        	beq :+
00061Dr 4  E6 rr        	inc musicdiff
00061Fr 4               
00061Fr 4               :	; load room 0
00061Fr 4  20 rr rr     	jsr gm_set_room
000622r 4               
000622r 4               	; load the "environment type" field. This specifies the default bank
000622r 4  A0 00        	ldy #0
000624r 4  B1 rr        	lda (lvlptrlo), y
000626r 4  0A           	asl
000627r 4  0A           	asl
000628r 4  18           	clc
000629r 4  69 1C        	adc #chrb_lvl0           ; The first level's BG bank is #chrb_lvl0.
00062Br 4  85 rr        	sta bg0_bknum
00062Dr 4               
00062Dr 4  A8           	tay
00062Er 4  C8           	iny
00062Fr 4  C8           	iny
000630r 4  84 rr        	sty bg1_bknum
000632r 4               
000632r 4  20 rr rr     	jsr gm_load_generics
000635r 4  4C rr rr     	jmp gm_on_level_init
000638r 4               
000638r 4               ; ** SUBROUTINE: gm_set_room
000638r 4               ; args: Y - room number
000638r 4               ; assumes: you're loading a new level
000638r 4               gm_set_room:
000638r 4  84 rr        	sty currroom
00063Ar 4  C8           	iny
00063Br 4  C8           	iny
00063Cr 4  20 rr rr     	jsr gm_fetch_room
00063Fr 4  60           	rts
000640r 4               
000640r 4               ; ** SUBROUTINE: gm_load_generics
000640r 4               ; desc: Loads the generic sprite sheet banks.  The game may animate them later.
000640r 4               gm_load_generics:
000640r 4  A9 00        	lda #chrb_plrsp0
000642r 4  85 rr        	sta spr0_bknum
000644r 4               
000644r 4  A9 07        	lda #chrb_gensp2
000646r 4  85 rr        	sta spr1_bknum
000648r 4               
000648r 4  A9 06        	lda #chrb_gensp1
00064Ar 4  85 rr        	sta spr2_bknum
00064Cr 4               
00064Cr 4  A9 02        	lda #chrb_anisp0
00064Er 4  85 rr        	sta spr3_bknum
000650r 4  60           	rts
000651r 4               
000651r 4               ; ** SUBROUTINE: gm_respawn
000651r 4               ; desc: Respawns the player.
000651r 4               gm_respawn:
000651r 4  A5 rr        	lda camera_x_hi
000653r 4  4A           	lsr
000654r 4  A5 rr        	lda camera_x
000656r 4  6A           	ror
000657r 4  4A           	lsr
000658r 4  4A           	lsr
000659r 4  85 rr        	sta ntwrhead
00065Br 4               
00065Br 4               	; perform the slide wipe
00065Br 4  A0 12        	ldy #18
00065Dr 4               @loop:
00065Dr 4  84 rr        	sty transtimer
00065Fr 4               
00065Fr 4  A9 01        	lda #nc2_clrcol
000661r 4  05 rr        	ora nmictrl2
000663r 4  85 rr        	sta nmictrl2
000665r 4               
000665r 4  20 rr rr     	jsr gm_leave_doframe
000668r 4               
000668r 4  A4 rr        	ldy transtimer
00066Ar 4  88           	dey
00066Br 4  D0 F0        	bne @loop
00066Dr 4               
00066Dr 4               	; initiate the transition sequence now.
00066Dr 4  A9 00        	lda #0
00066Fr 4  85 rr        	sta gamectrl
000671r 4               
000671r 4  A9 08        	lda #g2_noclrall
000673r 4  85 rr        	sta gamectrl2
000675r 4               
000675r 4               	; disable rendering
000675r 4  A9 00        	lda #0
000677r 4  8D 01 20     	sta ppu_mask
00067Ar 4  20 rr rr     	jsr vblank_wait
00067Dr 4               
00067Dr 4  20 rr rr     	jsr com_clear_oam
000680r 4               
000680r 4  A4 rr        	ldy currroom
000682r 4  20 rr rr     	jsr gm_set_room
000685r 4               
000685r 4  A9 00        	lda #0
000687r 4  85 rr        	sta musicdiff   ; no difference in music
000689r 4               
000689r 4  4C rr rr     	jmp gm_on_level_init
00068Cr 4               
00068Cr 3               ;.include "g_rmtran.asm"
00068Cr 3               .include "e_draw.asm"
00068Cr 4               
00068Cr 4               ; ** Entity Draw/Update routines
00068Cr 4               ; Parameters:
00068Cr 4               ;   temp1 - Entity Index (passed in through X too)
00068Cr 4               ;   temp2 - X Screen Position
00068Cr 4               ;   temp3 - Y Screen Position
00068Cr 4               ;   temp4 - X High Position
00068Cr 4               
00068Cr 4               ;     reg X - direction (0-UL, 1-UR, 2-DL, 3-DR)
00068Cr 4               gm_draw_particle:
00068Cr 4  A5 rr        	lda temp2
00068Er 4  C9 F8        	cmp #$F8
000690r 4  90 06        	bcc @dontCheckOffScreen
000692r 4               
000692r 4  A5 rr        	lda temp4
000694r 4  30 11        	bmi @returnEarly
000696r 4  A5 rr        	lda temp2
000698r 4               
000698r 4               @dontCheckOffScreen:
000698r 4  85 rr        	sta x_crd_temp
00069Ar 4  A5 rr        	lda temp3
00069Cr 4  85 rr        	sta y_crd_temp
00069Er 4  BC rr rr     	ldy sprspace+sp_part_chrti, x
0006A1r 4  BD rr rr     	lda sprspace+sp_part_chrat, x
0006A4r 4  20 rr rr     	jsr oam_putsprite
0006A7r 4               
0006A7r 4               @returnEarly:
0006A7r 4  20 rr rr     	jsr gm_update_particle
0006AAr 4  60           	rts
0006ABr 4               
0006ABr 4               gm_draw_berry:
0006ABr 4  20 rr rr     	jsr gm_update_berry
0006AEr 4  A9 01        	lda #$01
0006B0r 4  85 rr        	sta temp5
0006B2r 4  85 rr        	sta temp8
0006B4r 4  A9 F8        	lda #$F8
0006B6r 4  85 rr        	sta temp6
0006B8r 4  A9 FA        	lda #$FA
0006BAr 4  85 rr        	sta temp7
0006BCr 4  4C rr rr     	jmp gm_draw_common
0006BFr 4               
0006BFr 4               gm_draw_refillhold:
0006BFr 4  A9 03        	lda #$03
0006C1r 4  85 rr        	sta temp5
0006C3r 4  A9 43        	lda #$43
0006C5r 4  85 rr        	sta temp8
0006C7r 4  A9 9A        	lda #$9A
0006C9r 4  85 rr        	sta temp6
0006CBr 4  85 rr        	sta temp7
0006CDr 4  20 rr rr     	jsr gm_draw_common
0006D0r 4  4C rr rr     	jmp gm_update_refillhold
0006D3r 4               
0006D3r 4               gm_draw_refill:
0006D3r 4  A9 03        	lda #$03
0006D5r 4  85 rr        	sta temp5
0006D7r 4  85 rr        	sta temp8
0006D9r 4  A9 FC        	lda #$FC
0006DBr 4  85 rr        	sta temp6
0006DDr 4  A9 FE        	lda #$FE
0006DFr 4  85 rr        	sta temp7
0006E1r 4  20 rr rr     	jsr gm_draw_common
0006E4r 4  4C rr rr     	jmp gm_update_refill
0006E7r 4               
0006E7r 4               gm_draw_spring:
0006E7r 4  A9 01        	lda #$01
0006E9r 4  85 rr        	sta temp5
0006EBr 4  85 rr        	sta temp8
0006EDr 4  A9 C8        	lda #$C8
0006EFr 4  85 rr        	sta temp6
0006F1r 4  A9 CA        	lda #$CA
0006F3r 4  85 rr        	sta temp7
0006F5r 4  4C rr rr     	jmp gm_draw_common
0006F8r 4               
0006F8r 4               gm_draw_key:
0006F8r 4  A9 03        	lda #$03
0006FAr 4  85 rr        	sta temp5
0006FCr 4  85 rr        	sta temp8
0006FEr 4  A9 DC        	lda #$DC
000700r 4  85 rr        	sta temp6
000702r 4  A9 DE        	lda #$DE
000704r 4  85 rr        	sta temp7
000706r 4  4C rr rr     	jmp gm_draw_common
000709r 4               
000709r 4               gm_draw_box:
000709r 4  20 rr rr     	jsr gm_update_box
00070Cr 4  A9 03        	lda #3
00070Er 4  85 rr        	sta temp5
000710r 4  85 rr        	sta temp8
000712r 4  A9 D4        	lda #$D4
000714r 4  85 rr        	sta temp6
000716r 4  A9 D6        	lda #$D6
000718r 4  85 rr        	sta temp7
00071Ar 4  4C rr rr     	jmp gm_draw_common
00071Dr 4               
00071Dr 4               gm_draw_points:
00071Dr 4  A9 02        	lda #$02
00071Fr 4  85 rr        	sta temp5
000721r 4  85 rr        	sta temp8
000723r 4               
000723r 4  A6 rr        	ldx temp1
000725r 4               
000725r 4  38           	sec
000726r 4  BD rr rr     	lda sprspace+sp_y_lo, x
000729r 4  E9 60        	sbc #$60
00072Br 4  9D rr rr     	sta sprspace+sp_y_lo, x
00072Er 4               
00072Er 4  BD rr rr     	lda sprspace+sp_y, x
000731r 4  E9 00        	sbc #0
000733r 4  F0 0B        	beq @clearKind
000735r 4  9D rr rr     	sta sprspace+sp_y, x
000738r 4               
000738r 4  BD rr rr     	lda sprspace+sp_points_timer, x
00073Br 4  38           	sec
00073Cr 4  E9 01        	sbc #1
00073Er 4  D0 03        	bne @skipClearKind
000740r 4               @clearKind:
000740r 4  9D rr rr     	sta sprspace+sp_kind, x
000743r 4               @skipClearKind:
000743r 4  9D rr rr     	sta sprspace+sp_points_timer, x
000746r 4               
000746r 4  BD rr rr     	lda sprspace+sp_points_count, x
000749r 4  48           	pha
00074Ar 4  C9 06        	cmp #6
00074Cr 4  D0 06        	bne @no1UpMode
00074Er 4               
00074Er 4               	; 1 up mode
00074Er 4  A9 8E        	lda #$8E
000750r 4  85 rr        	sta temp7
000752r 4  D0 04        	bne @done
000754r 4               
000754r 4               @no1UpMode:
000754r 4               	; normal points mode
000754r 4  A9 80        	lda #$80
000756r 4  85 rr        	sta temp7
000758r 4               
000758r 4               @done:
000758r 4  68           	pla
000759r 4  0A           	asl
00075Ar 4  18           	clc
00075Br 4  69 80        	adc #$80
00075Dr 4  85 rr        	sta temp6
00075Fr 4               
00075Fr 4  4C rr rr     	jmp gm_draw_common
000762r 4               
000762r 4               ; draws a common 2X sprite.
000762r 4               gm_draw_common:
000762r 4  A5 rr        	lda temp3
000764r 4  85 rr        	sta y_crd_temp
000766r 4               
000766r 4               	; draw the left sprite
000766r 4  A5 rr        	lda temp2
000768r 4  C9 F8        	cmp #$F8
00076Ar 4  90 06        	bcc :+
00076Cr 4               	; sprite X is bigger than $F8, because either the sprite is to the
00076Cr 4               	; left of the screen (so fraudulently got there via overflow), or
00076Cr 4               	; legitimately to the right
00076Cr 4  A5 rr        	lda temp4
00076Er 4  30 0B        	bmi @skipLeftSprite      ; X high coord < $00, don't draw that part
000770r 4  A5 rr        	lda temp2
000772r 4               
000772r 4  85 rr        :	sta x_crd_temp
000774r 4               
000774r 4  A5 rr        	lda temp5
000776r 4  A4 rr        	ldy temp6
000778r 4  20 rr rr     	jsr oam_putsprite
00077Br 4               
00077Br 4               @skipLeftSprite:
00077Br 4               	; draw the right sprite
00077Br 4  A5 rr        	lda temp4
00077Dr 4  30 11        	bmi @temp4neg
00077Fr 4  A5 rr        	lda temp2
000781r 4  18           	clc
000782r 4  69 08        	adc #8
000784r 4  B0 09        	bcs :+                   ; if it overflew while computing the coord,
000786r 4               @temp4negd:
000786r 4  85 rr        	sta x_crd_temp           ; then it need not render
000788r 4               
000788r 4  A5 rr        	lda temp8
00078Ar 4  A4 rr        	ldy temp7
00078Cr 4  20 rr rr     	jsr oam_putsprite
00078Fr 4               
00078Fr 4  60           :	rts
000790r 4               
000790r 4               @temp4neg:
000790r 4  A5 rr        	lda temp2
000792r 4  18           	clc
000793r 4  69 08        	adc #8
000795r 4  B0 EF        	bcs @temp4negd
000797r 4  90 ED        	bcc @temp4negd
000799r 4               
000799r 4               ; ** SUBROUTINE: gm_draw_ent_call
000799r 4               ; desc: Calls the relevant entity draw function.
000799r 4               ; arguments:
000799r 4               ;     A - entity type
000799r 4               ;     temp1 - entity index
000799r 4               ; note: temp1 is occupied by gm_draw_entities and represents the index within the sprspace array.
000799r 4               gm_draw_ent_call:
000799r 4  48           	pha
00079Ar 4  20 rr rr     	jsr gm_check_ent_onscreen
00079Dr 4  D0 0B        	bne @notOffScreen
00079Fr 4               
00079Fr 4  68           	pla
0007A0r 4  C9 05        	cmp #e_particle
0007A2r 4  D0 05        	bne @notParticle
0007A4r 4               
0007A4r 4               	; particle went off screen HAHA, destroy it
0007A4r 4  A9 00        	lda #0
0007A6r 4  9D rr rr     	sta sprspace+sp_kind, x
0007A9r 4               
0007A9r 4               @notParticle:
0007A9r 4  60           	rts
0007AAr 4               
0007AAr 4               @notOffScreen:
0007AAr 4               	; note: gm_check_ent_onscreen already calculated the x coordinate for us
0007AAr 4               
0007AAr 4  A9 01        	lda #e_strawb
0007ACr 4  DD rr rr     	cmp sprspace+sp_kind, x
0007AFr 4  D0 0C        	bne @forceAddingCamY
0007B1r 4               
0007B1r 4  BD rr rr     	lda sprspace+sp_y, x
0007B4r 4  85 rr        	sta temp3
0007B6r 4               
0007B6r 4  BD rr rr     	lda sprspace+sp_strawb_flags, x
0007B9r 4  29 01        	and #esb_picked    ; picked sprites do not need cameraY added to them
0007BBr 4  D0 14        	bne @doNotAddCamY
0007BDr 4               
0007BDr 4               @forceAddingCamY:
0007BDr 4  A5 rr        	lda lvlyoff
0007BFr 4  0A           	asl
0007C0r 4  0A           	asl
0007C1r 4  0A           	asl
0007C2r 4  85 rr        	sta temp3
0007C4r 4  BD rr rr     	lda sprspace+sp_y, x
0007C7r 4  18           	clc
0007C8r 4  65 rr        	adc temp3
0007CAr 4  85 rr        	sta temp3
0007CCr 4  38           	sec
0007CDr 4  E5 rr        	sbc camera_y
0007CFr 4  85 rr        	sta temp3
0007D1r 4               
0007D1r 4               @doNotAddCamY:
0007D1r 4  68           	pla
0007D2r 4  AA           	tax
0007D3r 4  BD rr rr     	lda gm_entjtable_lo, x
0007D6r 4  85 rr        	sta lvladdr
0007D8r 4  BD rr rr     	lda gm_entjtable_hi, x
0007DBr 4  85 rr        	sta lvladdrhi
0007DDr 4               
0007DDr 4  A6 rr        	ldx temp1
0007DFr 4               
0007DFr 4  6C rr rr     	jmp (lvladdr)
0007E2r 4               
0007E2r 4               ; TODO: figure out how to avoid defining two tables like this
0007E2r 4               gm_entjtable_lo:
0007E2r 4  00           	.byte $00
0007E3r 4  rr           	.byte <gm_draw_berry
0007E4r 4  rr           	.byte <gm_draw_refill
0007E5r 4  rr           	.byte <gm_draw_spring
0007E6r 4  rr           	.byte <gm_draw_key
0007E7r 4  rr           	.byte <gm_draw_particle
0007E8r 4  rr           	.byte <gm_draw_refillhold
0007E9r 4  rr           	.byte <gm_draw_points
0007EAr 4  rr           	.byte <level0_intro_crusher
0007EBr 4  rr           	.byte <gm_draw_box
0007ECr 4  rr           	.byte <level0_bridge_manager
0007EDr 4               
0007EDr 4               gm_entjtable_hi:
0007EDr 4  00           	.byte $00
0007EEr 4  rr           	.byte >gm_draw_berry
0007EFr 4  rr           	.byte >gm_draw_refill
0007F0r 4  rr           	.byte >gm_draw_spring
0007F1r 4  rr           	.byte >gm_draw_key
0007F2r 4  rr           	.byte >gm_draw_particle
0007F3r 4  rr           	.byte >gm_draw_refillhold
0007F4r 4  rr           	.byte >gm_draw_points
0007F5r 4  rr           	.byte >level0_intro_crusher
0007F6r 4  rr           	.byte >gm_draw_box
0007F7r 4  rr           	.byte >level0_bridge_manager
0007F8r 4               
0007F8r 4               gm_allocate_palettes:
0007F8r 4               	; clear the memory related to palette allocation.
0007F8r 4  A9 FF        	lda #$FF
0007FAr 4  A2 00        	ldx #0
0007FCr 4  86 rr        	stx palallochd
0007FEr 4               
0007FEr 4  9D rr rr     :	sta allocpals,x
000801r 4  9D rr rr     	sta palsallocd,x
000804r 4  E8           	inx
000805r 4  E0 10        	cpx #$10
000807r 4  D0 F5        	bne :-
000809r 4               
000809r 4  A0 00        	ldy #0
00080Br 4               gm_allocpal_loop:
00080Br 4  B9 rr rr     	lda sprspace+sp_kind,y   ; load the entity's kind
00080Er 4  F0 29        	beq @loopBreak           ; if empty, don't update
000810r 4  C9 05        	cmp #e_particle
000812r 4  D0 03        	bne :+
000814r 4  AD rr rr     	lda sprspace+sp_part_entty
000817r 4  98           :	tya
000818r 4  AA           	tax
000819r 4  20 rr rr     	jsr gm_check_ent_onscreen
00081Cr 4  F0 1B        	beq @loopBreak           ; if entity is off screen, jump to
00081Er 4  AA           	tax
00081Fr 4  BD rr rr     	lda ent_palettes,x       ; and now the palettes
000822r 4               
000822r 4               	; OK. now check if that slot has been allocated
000822r 4  AA           	tax
000823r 4  BD rr rr     	lda allocpals,x
000826r 4  C9 FF        	cmp #$FF
000828r 4  D0 0F        	bne @loopBreak           ; palette was already allocated.
00082Ar 4               
00082Ar 4               	; need to allocate this palette.
00082Ar 4  A5 rr        	lda palallochd
00082Cr 4  9D rr rr     	sta allocpals, x         ; determined the physical palette for this logical palette
00082Fr 4               
00082Fr 4  86 rr        	stx temp1                ; swap the registers
000831r 4  AA           	tax                      ; 'palallochd' is now in X, and the logical palette is now in A
000832r 4  A5 rr        	lda temp1
000834r 4  E6 rr        	inc palallochd
000836r 4               
000836r 4  9D rr rr     	sta palsallocd, x
000839r 4               
000839r 4               @loopBreak:
000839r 4  C8           	iny
00083Ar 4  C0 10        	cpy #sp_max
00083Cr 4  D0 CD        	bne gm_allocpal_loop
00083Er 4  60           	rts
00083Fr 4               
00083Fr 4               
00083Fr 4               ; ** SUBROUTINE: gm_check_ent_onscreen
00083Fr 4               ; desc:     Checks if an entity is off of the screen.
00083Fr 4               ; parms:    Y - entity index
00083Fr 4               ; returns:  ZF - entity is off-screen
00083Fr 4               ; clobbers: A, X, temp3, temp4. not Y
00083Fr 4               gm_check_ent_onscreen:
00083Fr 4  38           	sec
000840r 4  BD rr rr     	lda sprspace+sp_x, x
000843r 4               
000843r 4  E5 rr        	sbc camera_x
000845r 4  85 rr        	sta temp2
000847r 4               
000847r 4  BD rr rr     	lda sprspace+sp_x_pg, x
00084Ar 4  E5 rr        	sbc camera_x_pg
00084Cr 4  85 rr        	sta temp4
00084Er 4               
00084Er 4               	; result < 0: sprite went off the left side.
00084Er 4               	; result = 0: sprite is in view.
00084Er 4               	; result > 0: sprite is to the right.
00084Er 4  30 05        	bmi @checkLeft
000850r 4  D0 09        	bne @returnZero
000852r 4               
000852r 4               	; result is 0.
000852r 4               @returnOne:
000852r 4  A9 01        	lda #1
000854r 4  60           	rts
000855r 4               
000855r 4               @checkLeft:
000855r 4               	; result is different from 0. we should check if the low byte is > $F8
000855r 4  A5 rr        	lda temp2
000857r 4  C9 F8        	cmp #$F8
000859r 4  B0 F7        	bcs @returnOne
00085Br 4               
00085Br 4               @returnZero:
00085Br 4  A9 00        	lda #0
00085Dr 4  60           	rts
00085Er 4               
00085Er 4               ; ** SUBROUTINE: gm_unload_ents_room
00085Er 4               ; desc: Unloads all entities with a specific room number.
00085Er 4               ; arguments: A - the room number to unload entities from.
00085Er 4               ; note: Can only be used to unload entities from the previous room.
00085Er 4               gm_unload_ents_room:
00085Er 4  29 01        	and #1
000860r 4  0A           	asl     ; set the ef_oddroom flag, depending on the parity of the room number.
000861r 4  85 rr        	sta temp1
000863r 4               
000863r 4  A2 00        	ldx #0
000865r 4               @loop:
000865r 4  BD rr rr     	lda sprspace+sp_kind, x
000868r 4  F0 15        	beq @skipThisObject
00086Ar 4               
00086Ar 4  BD rr rr     	lda sprspace+sp_flags, x
00086Dr 4  29 02        	and #ef_oddroom
00086Fr 4  C5 rr        	cmp temp1
000871r 4  D0 0C        	bne @skipThisObject
000873r 4               
000873r 4               	; check if entity is a strawberry. we do not unload strawberries
000873r 4  A9 01        	lda #e_strawb
000875r 4  DD rr rr     	cmp sprspace+sp_kind, x
000878r 4  F0 0B        	beq @isStrawBerry
00087Ar 4               
00087Ar 4               @isStrawBerryRemoveAnyway:
00087Ar 4  A9 00        	lda #0
00087Cr 4  9D rr rr     	sta sprspace+sp_kind, x
00087Fr 4               
00087Fr 4               @skipThisObject:
00087Fr 4  E8           	inx
000880r 4  E0 10        	cpx #sp_max
000882r 4  D0 E1        	bne @loop
000884r 4  60           	rts
000885r 4               
000885r 4               @isStrawBerry:
000885r 4               	; check if the berry was collected
000885r 4  BD rr rr     	lda sprspace+sp_strawb_flags, x
000888r 4  29 01        	and #esb_picked
00088Ar 4  F0 EE        	beq @isStrawBerryRemoveAnyway
00088Cr 4  D0 F1        	bne @skipThisObject
00088Er 4               
00088Er 4               ; ** SUBROUTINE: gm_unload_os_ents
00088Er 4               ; desc: Unloads entities that went off the left side of the screen.
00088Er 4               gm_unload_os_ents:
00088Er 4  A9 0F        	lda #g3_transitA
000890r 4  24 rr        	bit gamectrl3
000892r 4  D0 04        	bne @forceUnLoad  ; as long as a room transition is going on, unload any off-screen entities.
000894r 4               
000894r 4  A5 rr        	lda roomsize
000896r 4  D0 2B        	bne @earlyReturn  ; if the level may scroll back left, don't unload any off-screen entities.
000898r 4               
000898r 4               @forceUnLoad:
000898r 4  A2 00        	ldx #0
00089Ar 4  BD rr rr     :	lda sprspace+sp_kind, x
00089Dr 4  F0 1F        	beq :+
00089Fr 4               
00089Fr 4  BD rr rr     	lda sprspace+sp_x, x
0008A2r 4  18           	clc
0008A3r 4  69 10        	adc #$10
0008A5r 4  85 rr        	sta temp2
0008A7r 4  BD rr rr     	lda sprspace+sp_x_pg, x
0008AAr 4  69 00        	adc #0
0008ACr 4  85 rr        	sta temp3
0008AEr 4               
0008AEr 4  38           	sec
0008AFr 4  A5 rr        	lda temp2
0008B1r 4  E5 rr        	sbc camera_x
0008B3r 4               	;sta temp2
0008B3r 4  A5 rr        	lda temp3
0008B5r 4  E5 rr        	sbc camera_x_pg
0008B7r 4               
0008B7r 4               	; result < 0: sprite went off the right side.
0008B7r 4  10 05        	bpl :+
0008B9r 4               
0008B9r 4  A9 00        	lda #0
0008BBr 4  9D rr rr     	sta sprspace+sp_kind, x
0008BEr 4  E8           :	inx
0008BFr 4  E0 10        	cpx #sp_max
0008C1r 4  D0 D7        	bne :--
0008C3r 4               
0008C3r 4               @earlyReturn:
0008C3r 4  60           	rts
0008C4r 4               
0008C4r 4               ; ** SUBROUTINE: gm_draw_entities
0008C4r 4               ; desc: Draws visible entities to the screen.
0008C4r 4               gm_draw_entities:
0008C4r 4  A9 01        	lda #1
0008C6r 4  24 rr        	bit framectr
0008C8r 4               
0008C8r 4  F0 14        	beq @evenFrame
0008CAr 4               
0008CAr 4               	; odd frame
0008CAr 4  A2 0F        	ldx #15
0008CCr 4               @loopOdd:
0008CCr 4  BD rr rr     	lda sprspace+sp_kind, x
0008CFr 4  F0 07        	beq :+             ; this is an empty entity slot. waste no time
0008D1r 4  86 rr        	stx temp1
0008D3r 4  20 rr rr     	jsr gm_draw_ent_call
0008D6r 4  A6 rr        	ldx temp1
0008D8r 4  CA           :	dex
0008D9r 4  E0 FF        	cpx #$FF
0008DBr 4  D0 EF        	bne @loopOdd
0008DDr 4  60           	rts
0008DEr 4               
0008DEr 4               @evenFrame:
0008DEr 4  A2 00        	ldx #0
0008E0r 4               @loopEven:
0008E0r 4  BD rr rr     	lda sprspace+sp_kind, x
0008E3r 4  F0 07        	beq :+             ; this is an empty entity slot. waste no time
0008E5r 4  86 rr        	stx temp1
0008E7r 4  20 rr rr     	jsr gm_draw_ent_call
0008EAr 4  A6 rr        	ldx temp1
0008ECr 4  E8           :	inx
0008EDr 4  E0 10        	cpx #sp_max
0008EFr 4  D0 EF        	bne @loopEven
0008F1r 4  60           	rts
0008F2r 4               
0008F2r 4               ; List of entity palette IDs
0008F2r 4               ent_palettes:
0008F2r 4  00           	.byte $00  ; e_none
0008F3r 4  00           	.byte $00  ; e_strawb
0008F4r 4  01           	.byte $01  ; e_refill
0008F5r 4  02           	.byte $02  ; e_spring
0008F6r 4  03           	.byte $03  ; e_key
0008F7r 4  00           	.byte $00  ; e_particle (will inherit palette from old ent id)
0008F8r 4               
0008F8r 3               .include "e_update.asm"
0008F8r 4               ; Copyright (C) 2024 iProgramInCpp
0008F8r 4               
0008F8r 4               ; Parameters:
0008F8r 4               ;   temp1 - Entity Index (passed in through X too)
0008F8r 4               ;   temp2 - X Screen Position
0008F8r 4               ;   temp3 - Y Screen Position
0008F8r 4               ;   temp4 - X High Position
0008F8r 4               
0008F8r 4               ; ** SUBROUTINE: gm_check_player_bb
0008F8r 4               ; desc: Checks if the player is located within this entity's bounding box.
0008F8r 4               gm_check_player_bb:
0008F8r 4  A5 rr        	lda temp3
0008FAr 4  18           	clc
0008FBr 4  69 10        	adc #16
0008FDr 4  85 rr        	sta temp5
0008FFr 4               
0008FFr 4  18           	clc
000900r 4  A5 rr        	lda player_y
000902r 4  69 08        	adc #8
000904r 4  C5 rr        	cmp temp3
000906r 4  90 1B        	bcc gm_cpbb_nocoll    ; player_y+8 < temp3 (top of object)
000908r 4  C5 rr        	cmp temp5
00090Ar 4  B0 17        	bcs gm_cpbb_nocoll    ; player_y+8 > temp5 (bottom of object)
00090Cr 4               
00090Cr 4  A5 rr        	lda temp2
00090Er 4  18           	clc
00090Fr 4  69 10        	adc #16
000911r 4  85 rr        	sta temp5
000913r 4               
000913r 4  18           	clc
000914r 4  A5 rr        	lda player_x
000916r 4  69 08        	adc #8
000918r 4  C5 rr        	cmp temp2
00091Ar 4  90 07        	bcc gm_cpbb_nocoll    ; player_x+8 < temp2 (left of object)
00091Cr 4  C5 rr        	cmp temp5
00091Er 4  B0 03        	bcs gm_cpbb_nocoll    ; player_x+8 > temp5 (right of object)
000920r 4               
000920r 4  A9 01        	lda #1
000922r 4  60           	rts
000923r 4               
000923r 4               gm_cpbb_nocoll:
000923r 4  A9 00        	lda #0
000925r 4  60           	rts
000926r 4               
000926r 4               ; ** SUBROUTINE: gm_ent_oscillate
000926r 4               ; desc: Oscillates this entity using the first entity specific field as a timer.
000926r 4               gm_ent_oscillate:
000926r 4  A6 rr        	ldx temp1
000928r 4  BD rr rr     	lda sprspace+sp_oscill_timer, x
00092Br 4  18           	clc
00092Cr 4  69 01        	adc #1
00092Er 4  9D rr rr     	sta sprspace+sp_oscill_timer, x
000931r 4               
000931r 4  85 rr        	sta temp5
000933r 4  29 07        	and #7
000935r 4  D0 18        	bne :+
000937r 4               
000937r 4  A5 rr        	lda temp5
000939r 4  4A           	lsr
00093Ar 4  4A           	lsr
00093Br 4  4A           	lsr
00093Cr 4  29 0F        	and #15
00093Er 4  AA           	tax
00093Fr 4  BD rr rr     	lda osciltable, x
000942r 4  85 rr        	sta temp5
000944r 4  A6 rr        	ldx temp1
000946r 4  BD rr rr     	lda sprspace+sp_y, x
000949r 4  18           	clc
00094Ar 4  65 rr        	adc temp5
00094Cr 4  9D rr rr     	sta sprspace+sp_y, x
00094Fr 4               
00094Fr 4  60           :	rts
000950r 4               
000950r 4               gm_update_berry:
000950r 4  20 rr rr     	jsr gm_ent_oscillate
000953r 4               
000953r 4  A6 rr        	ldx temp1
000955r 4  BD rr rr     	lda sprspace+sp_strawb_flags, x
000958r 4  29 01        	and #esb_picked
00095Ar 4  F0 3A        	beq @floatingMode
00095Cr 4               
00095Cr 4               	; trailing behind player mode
00095Cr 4  BD rr rr     	lda sprspace+sp_strawb_colid, x
00095Fr 4  0A           	asl
000960r 4  0A           	asl
000961r 4  49 FF        	eor #$FF
000963r 4  18           	clc
000964r 4  65 rr        	adc plrtrahd
000966r 4               
000966r 4  29 3F        	and #$3F
000968r 4  A8           	tay
000969r 4               
000969r 4  18           	clc
00096Ar 4  A5 rr        	lda temp2
00096Cr 4  C9 F8        	cmp #$F8
00096Er 4  90 02        	bcc :+
000970r 4  A9 00        	lda #0
000972r 4  79 rr rr     :	adc plr_trace_x, y
000975r 4  6A           	ror                 ; average between temp2 and plr_trace_x
000976r 4  85 rr        	sta temp2
000978r 4               
000978r 4  18           	clc
000979r 4  A5 rr        	lda temp3
00097Br 4  79 rr rr     	adc plr_trace_y, y
00097Er 4  6A           	ror
00097Fr 4  85 rr        	sta temp3
000981r 4               
000981r 4  18           	clc
000982r 4  A5 rr        	lda temp2
000984r 4  65 rr        	adc camera_x
000986r 4  9D rr rr     	sta sprspace+sp_x, x
000989r 4               
000989r 4  A5 rr        	lda camera_x_pg
00098Br 4  69 00        	adc #0
00098Dr 4  9D rr rr     	sta sprspace+sp_x_pg, x
000990r 4               
000990r 4  A5 rr        	lda temp3
000992r 4  9D rr rr     	sta sprspace+sp_y, x
000995r 4               
000995r 4  60           	rts
000996r 4               
000996r 4               @floatingMode:
000996r 4               	; floating mode
000996r 4  20 rr rr     	jsr gm_check_player_bb
000999r 4  D0 01        	bne :+
00099Br 4  60           	rts
00099Cr 4               
00099Cr 4               :	; collided, set to picked up mode
00099Cr 4  BD rr rr     	lda sprspace+sp_strawb_flags, x
00099Fr 4  09 01        	ora #esb_picked
0009A1r 4  9D rr rr     	sta sprspace+sp_strawb_flags, x
0009A4r 4               
0009A4r 4  E6 rr        	inc plrstrawbs
0009A6r 4  A5 rr        	lda plrstrawbs
0009A8r 4  9D rr rr     	sta sprspace+sp_strawb_colid, x
0009ABr 4               
0009ABr 4  4C rr rr     	jmp gm_give_points
0009AEr 4               
0009AEr 4               gm_update_refill:
0009AEr 4  20 rr rr     	jsr gm_ent_oscillate
0009B1r 4               
0009B1r 4  20 rr rr     	jsr gm_check_player_bb
0009B4r 4  F0 42        	beq @return
0009B6r 4               
0009B6r 4               	; collided!
0009B6r 4               	; check if the dash count is non zero.
0009B6r 4  A5 rr        	lda dashcount
0009B8r 4  F0 3E        	beq @return
0009BAr 4               	; todo: check stamina too
0009BAr 4               
0009BAr 4               	; player has dashed which means
0009BAr 4               	; break into 4 pieces, destroy, and give the player their dashes back
0009BAr 4               
0009BAr 4  A9 98        	lda #$98
0009BCr 4  85 rr        	sta temp4   ; character tile
0009BEr 4  A9 03        	lda #3
0009C0r 4  85 rr        	sta temp5   ; tile attributes
0009C2r 4               
0009C2r 4  A9 08        	lda #8
0009C4r 4  85 rr        	sta temp9   ; lifetime
0009C6r 4  A9 00        	lda #0
0009C8r 4  85 rr        	sta temp8   ; gravity
0009CAr 4               
0009CAr 4  A2 00        	ldx #0
0009CCr 4  20 rr rr     	jsr gm_spawn_particle_at_ent
0009CFr 4  E8           	inx
0009D0r 4  20 rr rr     	jsr gm_spawn_particle_at_ent
0009D3r 4  E8           	inx
0009D4r 4  20 rr rr     	jsr gm_spawn_particle_at_ent
0009D7r 4  E8           	inx
0009D8r 4  20 rr rr     	jsr gm_spawn_particle_at_ent
0009DBr 4               
0009DBr 4  A6 rr        	ldx temp1
0009DDr 4  BD rr rr     	lda sprspace+sp_refill_flags, x
0009E0r 4  29 01        	and #erf_regen
0009E2r 4  F0 0D        	beq @setKind
0009E4r 4               
0009E4r 4  BD rr rr     	lda sprspace+sp_oscill_timer, x
0009E7r 4  9D rr rr     	sta sprspace+sp_refill_oldos, x
0009EAr 4               
0009EAr 4  A9 F0        	lda #$F0
0009ECr 4  9D rr rr     	sta sprspace+sp_oscill_timer, x
0009EFr 4  A9 06        	lda #e_refillhd
0009F1r 4               
0009F1r 4               @setKind:
0009F1r 4  9D rr rr     	sta sprspace+sp_kind, x
0009F4r 4               
0009F4r 4  A9 00        	lda #0
0009F6r 4  85 rr        	sta dashcount
0009F8r 4               
0009F8r 4               @return:
0009F8r 4  60           	rts
0009F9r 4               
0009F9r 4               gm_update_refillhold:
0009F9r 4  A6 rr        	ldx temp1
0009FBr 4  DE rr rr     	dec sprspace+sp_oscill_timer, x
0009FEr 4  D0 0B        	bne :+
000A00r 4               	; time to replace with a normal one
000A00r 4  BD rr rr     	lda sprspace+sp_refill_oldos, x
000A03r 4  9D rr rr     	sta sprspace+sp_oscill_timer, x
000A06r 4  A9 02        	lda #e_refill
000A08r 4  9D rr rr     	sta sprspace+sp_kind, x
000A0Br 4               
000A0Br 4  60           :	rts
000A0Cr 4               
000A0Cr 4               gm_update_particle:
000A0Cr 4  A6 rr        	ldx temp1
000A0Er 4  A9 00        	lda #0
000A10r 4  85 rr        	sta temp7
000A12r 4               
000A12r 4  BD rr rr     	lda sprspace+sp_part_vel_x, x
000A15r 4  85 rr        	sta temp5
000A17r 4  10 04        	bpl :+
000A19r 4  A9 FF        	lda #$FF
000A1Br 4  85 rr        	sta temp7
000A1Dr 4               
000A1Dr 4  18           :	clc
000A1Er 4  BD rr rr     	lda sprspace+sp_x, x
000A21r 4  65 rr        	adc temp5
000A23r 4  9D rr rr     	sta sprspace+sp_x, x
000A26r 4  BD rr rr     	lda sprspace+sp_x_pg, x
000A29r 4  65 rr        	adc temp7
000A2Br 4  9D rr rr     	sta sprspace+sp_x_pg, x
000A2Er 4               
000A2Er 4  BD rr rr     	lda sprspace+sp_vel_y_lo, x
000A31r 4  18           	clc
000A32r 4  7D rr rr     	adc sprspace+sp_y_lo, x
000A35r 4  9D rr rr     	sta sprspace+sp_y_lo, x
000A38r 4               
000A38r 4  BD rr rr     	lda sprspace+sp_part_vel_y, x
000A3Br 4  30 0E        	bmi @velMinus
000A3Dr 4               
000A3Dr 4               	; velocity is positive. that means that a SET carry determines overflow
000A3Dr 4  7D rr rr     	adc sprspace+sp_y, x
000A40r 4  90 10        	bcc @setY
000A42r 4               
000A42r 4  A9 00        	lda #0
000A44r 4  9D rr rr     	sta sprspace+sp_kind, x  ; particle went off screen, actually!
000A47r 4  A9 F0        	lda #$F0
000A49r 4  D0 07        	bne @setY
000A4Br 4               
000A4Br 4               @velMinus:
000A4Br 4               	; velocity is negative. means that a CLEAR carry determines overflow
000A4Br 4  7D rr rr     	adc sprspace+sp_y, x
000A4Er 4  B0 02        	bcs @setY
000A50r 4  A9 00        	lda #$00
000A52r 4               @setY:
000A52r 4  9D rr rr     	sta sprspace+sp_y, x
000A55r 4               
000A55r 4               	; gravity
000A55r 4  BD rr rr     	lda sprspace+sp_vel_y_lo, x
000A58r 4  18           	clc
000A59r 4  7D rr rr     	adc sprspace+sp_part_gravi, x
000A5Cr 4  9D rr rr     	sta sprspace+sp_vel_y_lo, x
000A5Fr 4               
000A5Fr 4  90 03        	bcc @done
000A61r 4  FE rr rr     	inc sprspace+sp_vel_y, x
000A64r 4               @done:
000A64r 4  DE rr rr     	dec sprspace+sp_part_timer, x
000A67r 4  D0 05        	bne :+
000A69r 4  A9 00        	lda #0
000A6Br 4  9D rr rr     	sta sprspace+sp_kind, x
000A6Er 4  60           :	rts
000A6Fr 4               
000A6Fr 4               gm_update_box:
000A6Fr 4  A6 rr        	ldx temp1
000A71r 4               
000A71r 4               	; set the collidable flag
000A71r 4  A9 01        	lda #ef_collidable
000A73r 4  1D rr rr     	ora sprspace+sp_flags, x
000A76r 4  9D rr rr     	sta sprspace+sp_flags, x
000A79r 4               
000A79r 4               	; and now the width / height
000A79r 4  A9 10        	lda #16
000A7Br 4  9D rr rr     	sta sprspace+sp_wid, x
000A7Er 4  9D rr rr     	sta sprspace+sp_hei, x
000A81r 4               
000A81r 4  60           	rts
000A82r 4               
000A82r 3               ;.include "e_physic.asm"
000A82r 3               .include "e_spawn.asm"
000A82r 4               ; Copyright (C) 2024 iProgramInCpp
000A82r 4               
000A82r 4               ; ** SUBROUTINE: gm_spawn_particle
000A82r 4               ; desc: Spawns a particle.
000A82r 4               ; parameters:
000A82r 4               ;     temp1 - X position
000A82r 4               ;     temp2 - Y position
000A82r 4               ;     temp3 - X high position in pages
000A82r 4               ;     temp4 - character tile
000A82r 4               ;     temp5 - attributes (when palette alloc added, type of an associated entity`)
000A82r 4               ;     temp6 - old entity type (redundant ?)
000A82r 4               ;     temp7 - direction (0-UL, 1-UR, 2-DL, 3-DR, 4-None)
000A82r 4               ;     temp8 - gravity
000A82r 4               ;     temp9 - time alive
000A82r 4               gm_spawn_particle:
000A82r 4  A0 00        	ldy #0
000A84r 4  B9 rr rr     :	lda sprspace+sp_kind, y
000A87r 4  F0 06        	beq @slotFound
000A89r 4  C8           	iny
000A8Ar 4  C0 10        	cpy #sp_max
000A8Cr 4  D0 F6        	bne :-
000A8Er 4  60           	rts          ; no more space :(
000A8Fr 4               
000A8Fr 4               @slotFound:
000A8Fr 4  A9 05        	lda #e_particle
000A91r 4  99 rr rr     	sta sprspace+sp_kind, y
000A94r 4               
000A94r 4  A5 rr        	lda roomnumber
000A96r 4  29 01        	and #1
000A98r 4  0A           	asl
000A99r 4  99 rr rr     	sta sprspace+sp_flags, y
000A9Cr 4               
000A9Cr 4  A9 00        	lda #0
000A9Er 4  99 rr rr     	sta sprspace+sp_wid, y
000AA1r 4  99 rr rr     	sta sprspace+sp_hei, y
000AA4r 4  99 rr rr     	sta sprspace+sp_vel_x_lo, y
000AA7r 4  99 rr rr     	sta sprspace+sp_vel_y_lo, y
000AAAr 4  99 rr rr     	sta sprspace+sp_x_lo, y
000AADr 4  99 rr rr     	sta sprspace+sp_y_lo, y
000AB0r 4               
000AB0r 4  A5 rr        	lda temp6
000AB2r 4  99 rr rr     	sta sprspace+sp_part_entty, y
000AB5r 4               
000AB5r 4  A5 rr        	lda temp1
000AB7r 4  99 rr rr     	sta sprspace+sp_x, y
000ABAr 4  A5 rr        	lda temp2
000ABCr 4  99 rr rr     	sta sprspace+sp_y, y
000ABFr 4  A5 rr        	lda temp3
000AC1r 4  99 rr rr     	sta sprspace+sp_x_pg, y
000AC4r 4               
000AC4r 4  A6 rr        	ldx temp6
000AC6r 4  BD rr rr     	lda partdirx, x
000AC9r 4  99 rr rr     	sta sprspace+sp_part_vel_x, y
000ACCr 4  BD rr rr     	lda partdiry, x
000ACFr 4  99 rr rr     	sta sprspace+sp_part_vel_y, y
000AD2r 4               
000AD2r 4  A5 rr        	lda temp9
000AD4r 4  99 rr rr     	sta sprspace+sp_part_timer, y
000AD7r 4  A5 rr        	lda temp8
000AD9r 4  99 rr rr     	sta sprspace+sp_part_gravi, y
000ADCr 4  A5 rr        	lda temp4
000ADEr 4  99 rr rr     	sta sprspace+sp_part_chrti, y
000AE1r 4  A5 rr        	lda temp5
000AE3r 4  99 rr rr     	sta sprspace+sp_part_chrat, y
000AE6r 4  60           	rts
000AE7r 4               
000AE7r 4               ; ** SUBROUTINE: gm_spawn_particle_at_ent
000AE7r 4               ; desc: Spawns a particle at an entity's position.
000AE7r 4               ; parameters:
000AE7r 4               ;     temp1 - old entity index
000AE7r 4               ;     temp4 - character tile
000AE7r 4               ;     temp5 - attributes of that tile (when palette alloc added, the old entity type)
000AE7r 4               ;     temp8 - gravity
000AE7r 4               ;     temp9 - time alive
000AE7r 4               ;     reg X - direction (0-UL, 1-UR, 2-DL, 3-DR, 4-None)
000AE7r 4               ; note: the value of X is preserved.
000AE7r 4               ; note: the value of temp6 is clobbered
000AE7r 4               gm_spawn_particle_at_ent:
000AE7r 4  86 rr        	stx temp6
000AE9r 4  A0 00        	ldy #0
000AEBr 4  B9 rr rr     :	lda sprspace+sp_kind, y
000AEEr 4  F0 06        	beq @slotFound
000AF0r 4  C8           	iny
000AF1r 4  C0 10        	cpy #sp_max
000AF3r 4  D0 F6        	bne :-
000AF5r 4               
000AF5r 4               	; no more space :(
000AF5r 4  60           	rts
000AF6r 4               
000AF6r 4               @slotFound:
000AF6r 4  A9 05        	lda #e_particle
000AF8r 4  99 rr rr     	sta sprspace+sp_kind, y
000AFBr 4               
000AFBr 4  A5 rr        	lda roomnumber
000AFDr 4  29 01        	and #1
000AFFr 4  0A           	asl
000B00r 4  99 rr rr     	sta sprspace+sp_flags, y
000B03r 4               
000B03r 4  A9 00        	lda #0
000B05r 4  99 rr rr     	sta sprspace+sp_wid, y
000B08r 4  99 rr rr     	sta sprspace+sp_hei, y
000B0Br 4  99 rr rr     	sta sprspace+sp_vel_x_lo, y
000B0Er 4  99 rr rr     	sta sprspace+sp_vel_y_lo, y
000B11r 4  99 rr rr     	sta sprspace+sp_x_lo, y
000B14r 4  99 rr rr     	sta sprspace+sp_y_lo, y
000B17r 4               
000B17r 4  A6 rr        	ldx temp1
000B19r 4  BD rr rr     	lda sprspace+sp_kind, x
000B1Cr 4  99 rr rr     	sta sprspace+sp_part_entty, y
000B1Fr 4               
000B1Fr 4  18           	clc
000B20r 4  BD rr rr     	lda sprspace+sp_x, x
000B23r 4  69 04        	adc #4
000B25r 4  99 rr rr     	sta sprspace+sp_x, y
000B28r 4               
000B28r 4  BD rr rr     	lda sprspace+sp_x_pg, x
000B2Br 4  69 00        	adc #0
000B2Dr 4  99 rr rr     	sta sprspace+sp_x_pg, y
000B30r 4               
000B30r 4  18           	clc
000B31r 4  BD rr rr     	lda sprspace+sp_y, x
000B34r 4  69 04        	adc #4
000B36r 4  99 rr rr     	sta sprspace+sp_y, y
000B39r 4               
000B39r 4  A6 rr        	ldx temp6
000B3Br 4  BD rr rr     	lda partdirx, x
000B3Er 4  99 rr rr     	sta sprspace+sp_part_vel_x, y
000B41r 4  BD rr rr     	lda partdiry, x
000B44r 4  99 rr rr     	sta sprspace+sp_part_vel_y, y
000B47r 4               
000B47r 4  A5 rr        	lda temp9
000B49r 4  99 rr rr     	sta sprspace+sp_part_timer, y
000B4Cr 4  A5 rr        	lda temp8
000B4Er 4  99 rr rr     	sta sprspace+sp_part_gravi, y
000B51r 4  A5 rr        	lda temp4
000B53r 4  99 rr rr     	sta sprspace+sp_part_chrti, y
000B56r 4  A5 rr        	lda temp5
000B58r 4  99 rr rr     	sta sprspace+sp_part_chrat, y
000B5Br 4               
000B5Br 4  60           	rts
000B5Cr 4               
000B5Cr 4  FF 01 FF 01  partdirx: .byte $FF,$01,$FF,$01,$00
000B60r 4  00           
000B61r 4  FF FF 01 01  partdiry: .byte $FF,$FF,$01,$01,$00
000B65r 4  00           
000B66r 4               
000B66r 4               ; ** SUBROUTINE: gm_give_points
000B66r 4               ; desc: Gives points to a player. Note: these aren't actually tracked anywhere >:)
000B66r 4               ;
000B66r 4               ;       Handles the bonus streak mechanic.
000B66r 4               gm_give_points:
000B66r 4  E6 rr        	inc ptscount
000B68r 4  A6 rr        	ldx ptscount
000B6Ar 4  E0 07        	cpx #7           ; values between 1 and 6 are valid.
000B6Cr 4  D0 04        	bne :+
000B6Er 4  A2 06        	ldx #6
000B70r 4  86 rr        	stx ptscount
000B72r 4  A9 78        :	lda #120
000B74r 4  85 rr        	sta ptstimer
000B76r 4               
000B76r 4               	; fallthrough
000B76r 4               
000B76r 4               ; ** SUBROUTINE: gm_spawn_points
000B76r 4               ; desc: Spawns a floating points sprite at the player's position.
000B76r 4               ; arguments:
000B76r 4               ;   reg X: amount of points  ((X+1)*1000, or 1UP)
000B76r 4               gm_spawn_points:
000B76r 4  A0 00        	ldy #0
000B78r 4  B9 rr rr     :	lda sprspace+sp_kind, y
000B7Br 4  F0 06        	beq :+
000B7Dr 4  C8           	iny
000B7Er 4  C0 10        	cpy #sp_max
000B80r 4  D0 F6        	bne :-
000B82r 4               
000B82r 4               	; no more space :(
000B82r 4  60           	rts
000B83r 4               
000B83r 4               :	; slot found!
000B83r 4  A9 07        	lda #e_points
000B85r 4  99 rr rr     	sta sprspace+sp_kind, y
000B88r 4               
000B88r 4  A5 rr        	lda roomnumber
000B8Ar 4  29 01        	and #1
000B8Cr 4  0A           	asl
000B8Dr 4  99 rr rr     	sta sprspace+sp_flags, y
000B90r 4               
000B90r 4  18           	clc
000B91r 4  A5 rr        	lda player_x
000B93r 4  65 rr        	adc camera_x
000B95r 4  99 rr rr     	sta sprspace+sp_x, y
000B98r 4               
000B98r 4  A5 rr        	lda camera_x_pg
000B9Ar 4  69 00        	adc #0
000B9Cr 4  99 rr rr     	sta sprspace+sp_x_pg, y
000B9Fr 4               
000B9Fr 4  A5 rr        	lda player_y
000BA1r 4  99 rr rr     	sta sprspace+sp_y, y
000BA4r 4               
000BA4r 4  A9 3C        	lda #60
000BA6r 4  99 rr rr     	sta sprspace+sp_points_timer, y
000BA9r 4               
000BA9r 4  8A           	txa
000BAAr 4  C9 06        	cmp #6
000BACr 4  90 02        	bcc :+
000BAEr 4  A9 06        	lda #6
000BB0r 4  99 rr rr     :	sta sprspace+sp_points_count, y
000BB3r 4               
000BB3r 4  60           	rts
000BB4r 4               
000BB4r 3               .include "p_draw.asm"
000BB4r 4               ; Copyright (C) 2024 iProgramInCpp
000BB4r 4               
000BB4r 4               ; ** SUBROUTINE: gm_draw_2xsprite
000BB4r 4               ; arguments: x - offset into zero page with sprite structure
000BB4r 4               ;            a - x position, y - y position
000BB4r 4               ; structure:  [shared attributes] [left sprite] [right sprite]
000BB4r 4               gm_draw_2xsprite:
000BB4r 4  85 rr        	sta x_crd_temp
000BB6r 4  84 rr        	sty y_crd_temp
000BB8r 4  B5 00        	lda $00,x       ; get shared attributes into a
000BBAr 4  E8           	inx
000BBBr 4  B4 00        	ldy $00,x       ; get left sprite
000BBDr 4  E8           	inx
000BBEr 4  86 rr        	stx temp7
000BC0r 4  20 rr rr     	jsr oam_putsprite
000BC3r 4  A6 rr        	ldx temp7
000BC5r 4  B4 00        	ldy $00,x       ; get right sprite
000BC7r 4  A5 rr        	lda x_crd_temp  ; add 8 to x_crd_temp
000BC9r 4  18           	clc
000BCAr 4  69 08        	adc #8
000BCCr 4  85 rr        	sta x_crd_temp
000BCEr 4  CA           	dex
000BCFr 4  CA           	dex
000BD0r 4  B5 00        	lda $00,x       ; get shared attributes again
000BD2r 4  20 rr rr     	jsr oam_putsprite
000BD5r 4  60           	rts
000BD6r 4               
000BD6r 4  FC FD 00 03  deathtable1: .byte $FC, $FD, $00, $03, $04, $03, $00, $FD
000BDAr 4  04 03 00 FD  
000BDEr 4  00 FD FC FD  deathtable2: .byte $00, $FD, $FC, $FD, $00, $03, $04, $03
000BE2r 4  00 03 04 03  
000BE6r 4               
000BE6r 4               gm_dead_sub1:
000BE6r 4  A5 rr        	lda deathtimer
000BE8r 4  A8           	tay
000BE9r 4  A5 rr        	lda temp1
000BEBr 4  F0 08        	beq :++
000BEDr 4  18           :	clc
000BEEr 4  65 rr        	adc temp1
000BF0r 4  88           	dey
000BF1r 4  D0 FA        	bne :-
000BF3r 4  85 rr        	sta temp1
000BF5r 4  60           :	rts
000BF6r 4               gm_dead_sub2:
000BF6r 4  A5 rr        	lda deathtimer
000BF8r 4  A8           	tay
000BF9r 4  F0 0A        	beq :++
000BFBr 4  A5 rr        	lda temp2
000BFDr 4  18           :	clc
000BFEr 4  65 rr        	adc temp2
000C00r 4  88           	dey
000C01r 4  D0 FA        	bne :-
000C03r 4  85 rr        	sta temp2
000C05r 4  60           :	rts
000C06r 4               
000C06r 4               ; ** SUBROUTINE: gm_draw_dead
000C06r 4               gm_draw_dead:
000C06r 4  A9 20        	lda #pl_dead
000C08r 4  24 rr        	bit playerctrl
000C0Ar 4  D0 01        	bne :+
000C0Cr 4  60           	rts
000C0Dr 4  A0 00        :	ldy #0
000C0Fr 4               gm_draw_dead_loop:
000C0Fr 4  B9 rr rr     	lda deathtable1, y ; the X coordinate offset
000C12r 4  85 rr        	sta temp1
000C14r 4  B9 rr rr     	lda deathtable2, y ; the Y coordinate offset
000C17r 4  85 rr        	sta temp2
000C19r 4               
000C19r 4  84 rr        	sty temp3
000C1Br 4  20 rr rr     	jsr gm_dead_sub1
000C1Er 4  20 rr rr     	jsr gm_dead_sub2
000C21r 4  A4 rr        	ldy temp3
000C23r 4               
000C23r 4  A5 rr        	lda player_x
000C25r 4  18           	clc
000C26r 4  69 04        	adc #4
000C28r 4  18           	clc
000C29r 4  65 rr        	adc temp1
000C2Br 4  85 rr        	sta x_crd_temp
000C2Dr 4               
000C2Dr 4  A5 rr        	lda player_y
000C2Fr 4  18           	clc
000C30r 4  69 04        	adc #4
000C32r 4  18           	clc
000C33r 4  65 rr        	adc temp2
000C35r 4  85 rr        	sta y_crd_temp
000C37r 4               
000C37r 4               	; hackhack
000C37r 4  A5 rr        	lda player_y
000C39r 4  C9 C0        	cmp #$C0
000C3Br 4  90 07        	bcc :+
000C3Dr 4  C0 04        	cpy #4
000C3Fr 4  90 03        	bcc :+
000C41r 4  4C rr rr     	jmp gm_draw_dead_done
000C44r 4               
000C44r 4  A5 rr        :	lda plh_attrs
000C46r 4  84 rr        	sty temp3
000C48r 4               
000C48r 4  A4 rr        	ldy deathtimer
000C4Ar 4  C0 08        	cpy #8
000C4Cr 4  90 04        	bcc :+
000C4Er 4  A0 96        	ldy #$96
000C50r 4  D0 02        	bne :++
000C52r 4  A0 94        :	ldy #$94
000C54r 4  20 rr rr     :	jsr oam_putsprite
000C57r 4  A4 rr        	ldy temp3
000C59r 4               
000C59r 4  C8           	iny
000C5Ar 4  C0 08        	cpy #8
000C5Cr 4  D0 B1        	bne gm_draw_dead_loop
000C5Er 4               
000C5Er 4               	; increment death timer
000C5Er 4               gm_draw_dead_done:
000C5Er 4  A6 rr        	ldx deathtimer
000C60r 4  E8           	inx
000C61r 4  E0 10        	cpx #16
000C63r 4  D0 03        	bne :+
000C65r 4  20 rr rr     	jsr gm_respawn
000C68r 4  86 rr        :	stx deathtimer
000C6Ar 4  60           	rts
000C6Br 4               
000C6Br 4               ; ** SUBROUTINE: gm_draw_player
000C6Br 4               gm_draw_player:
000C6Br 4  A9 20        	lda #pl_dead
000C6Dr 4  24 rr        	bit playerctrl       ; don't draw player if dead
000C6Fr 4  F0 01        	beq :+
000C71r 4  60           	rts
000C72r 4  A9 01        :	lda #pl_left
000C74r 4  24 rr        	bit playerctrl
000C76r 4  D0 1B        	bne gm_facingleft
000C78r 4  A9 00        	lda #0
000C7Ar 4  A6 rr        	ldx plr_spr_l
000C7Cr 4  A4 rr        	ldy plr_spr_r
000C7Er 4  85 rr        	sta temp1
000C80r 4  86 rr        	stx temp2
000C82r 4  84 rr        	sty temp3
000C84r 4  A5 rr        	lda plh_attrs
000C86r 4  A6 rr        	ldx plh_spr_l
000C88r 4  A4 rr        	ldy plh_spr_r
000C8Ar 4  85 rr        	sta temp4
000C8Cr 4  86 rr        	stx temp5
000C8Er 4  84 rr        	sty temp6
000C90r 4  4C rr rr     	jmp gm_donecomputing
000C93r 4               gm_facingleft:
000C93r 4  A9 40        	lda #obj_fliphz
000C95r 4  A6 rr        	ldx plr_spr_r
000C97r 4  A4 rr        	ldy plr_spr_l
000C99r 4  85 rr        	sta temp1
000C9Br 4  86 rr        	stx temp2
000C9Dr 4  84 rr        	sty temp3
000C9Fr 4  05 rr        	ora plh_attrs
000CA1r 4  A6 rr        	ldx plh_spr_r
000CA3r 4  A4 rr        	ldy plh_spr_l
000CA5r 4  85 rr        	sta temp4
000CA7r 4  86 rr        	stx temp5
000CA9r 4  84 rr        	sty temp6
000CABr 4               gm_donecomputing:
000CABr 4  A2 rr        	ldx #temp1           ; draw player
000CADr 4  A5 rr        	lda player_x
000CAFr 4  A4 rr        	ldy player_y
000CB1r 4  20 rr rr     	jsr gm_draw_2xsprite
000CB4r 4  A2 rr        	ldx #temp4           ; draw hair
000CB6r 4  18           	clc
000CB7r 4  A5 rr        	lda player_y
000CB9r 4  65 rr        	adc spryoff
000CBBr 4  A8           	tay
000CBCr 4  A9 01        	lda #pl_left
000CBEr 4  24 rr        	bit playerctrl
000CC0r 4  D0 08        	bne gm_sprxoffleft
000CC2r 4  18           	clc
000CC3r 4  A5 rr        	lda player_x
000CC5r 4  65 rr        	adc sprxoff
000CC7r 4  4C rr rr     	jmp gm_sprxoffdone
000CCAr 4               gm_sprxoffleft:
000CCAr 4  38           	sec
000CCBr 4  A5 rr        	lda player_x
000CCDr 4  E5 rr        	sbc sprxoff
000CCFr 4               gm_sprxoffdone:
000CCFr 4  20 rr rr     	jsr gm_draw_2xsprite
000CD2r 4  60           	rts
000CD3r 4               
000CD3r 4               gm_walktbl:
000CD3r 4  14 16        	.byte plr_walk1_l, plr_walk1_r
000CD5r 4  14 16        	.byte plr_walk1_l, plr_walk1_r
000CD7r 4  18 1A        	.byte plr_walk2_l, plr_walk2_r
000CD9r 4  18 1A        	.byte plr_walk2_l, plr_walk2_r
000CDBr 4               
000CDBr 4               gm_anim_table:
000CDBr 4               	; format: player L, player R, hair L, hair R, hair X off, hair Y off, flags, unused.
000CDBr 4  04 06 32 30  	.byte plr_idle1_l, plr_idle1_r, plr_hasta_l, plr_hasta_r, $00, $00, af_none,   $00  ; IDLE
000CDFr 4  00 00 00 00  
000CE3r 4  rr rr 34 30  	.byte <gm_walktbl, >gm_walktbl, plr_hamvr_l, plr_hamvr_r, $00, $00, af_4frame|af_wlkspd|af_oddryth, $00  ; WALK
000CE7r 4  00 00 1A 00  
000CEBr 4  08 0A 38 30  	.byte plr_jump_l,  plr_jump_r,  plr_hamvu_l, plr_hamvu_r, $00, $00, af_lock,   $00  ; JUMP
000CEFr 4  00 00 20 00  
000CF3r 4  10 12 3A 30  	.byte plr_fall_l,  plr_fall_r,  plr_hamvd_l, plr_hamvd_r, $00, $00, af_lock,   $00  ; FALL
000CF7r 4  00 00 20 00  
000CFBr 4  24 26 32 30  	.byte plr_push1_l, plr_push1_r, plr_hasta_l, plr_hasta_r, $01, $00, af_none|af_oddryth, $00  ; PUSH
000CFFr 4  01 00 10 00  
000D03r 4  1C 1E 32 30  	.byte plr_clim1_l, plr_clim1_r, plr_hasta_l, plr_hasta_r, $01, $00, af_none,   $00  ; CLIMB
000D07r 4  01 00 00 00  
000D0Br 4  2C 2E 3C 3E  	.byte plr_dash_l,  plr_dash_r,  plr_hadsh_l, plr_hadsh_r, $00, $00, af_lock,   $00  ; DASH
000D0Fr 4  00 00 20 00  
000D13r 4  0C 0E 9C 9E  	.byte plr_flip_l,  plr_flip_r,  plr_haflp_l, plr_haflp_r, $00, $00, af_lock,   $00  ; FLIP
000D17r 4  00 00 20 00  
000D1Br 4  1C 1E 32 30  	.byte plr_clim1_l, plr_clim1_r, plr_hasta_l, plr_hasta_r, $01, $00, af_lock,   $00  ; CLIMB IDLE
000D1Fr 4  01 00 20 00  
000D23r 4               
000D23r 4               gm_anim_advwalkL:
000D23r 4  38           	sec
000D24r 4  A5 rr        	lda animtimersb
000D26r 4  E5 rr        	sbc temp1
000D28r 4  85 rr        	sta animtimersb
000D2Ar 4  A5 rr        	lda animtimer
000D2Cr 4  E5 rr        	sbc temp2
000D2Er 4  85 rr        	sta animtimer
000D30r 4  4C rr rr     	jmp gm_timeradvanced
000D33r 4               gm_anim_advwalk:
000D33r 4               	; advance the animation timer by the walk speed divided by 8
000D33r 4  A5 rr        	lda player_vs_x
000D35r 4  85 rr        	sta temp1
000D37r 4  A5 rr        	lda player_vl_x
000D39r 4  85 rr        	sta temp2
000D3Br 4  18           	clc
000D3Cr 4  A0 03        	ldy #3
000D3Er 4               gm_advwalkloop:
000D3Er 4  A5 rr        	lda temp2
000D40r 4  6A           	ror
000D41r 4  85 rr        	sta temp2
000D43r 4  A5 rr        	lda temp1
000D45r 4  6A           	ror
000D46r 4  85 rr        	sta temp1
000D48r 4  88           	dey
000D49r 4  D0 F3        	bne gm_advwalkloop
000D4Br 4  A9 01        	lda #pl_left         ; shift loop done, check which direction we should advance
000D4Dr 4  24 rr        	bit playerctrl
000D4Fr 4  D0 D2        	bne gm_anim_advwalkL
000D51r 4  18           	clc
000D52r 4  A5 rr        	lda animtimersb
000D54r 4  65 rr        	adc temp1
000D56r 4  85 rr        	sta animtimersb
000D58r 4  A5 rr        	lda animtimer
000D5Ar 4  65 rr        	adc temp2
000D5Cr 4  85 rr        	sta animtimer
000D5Er 4  4C rr rr     	jmp gm_timeradvanced
000D61r 4               
000D61r 4               ; ** SUBROUTINE: gm_anim_mode
000D61r 4               ; desc:      Sets the current animation mode.  Resets the animation timer if necessary.
000D61r 4               ; arguments: A - new animation mode
000D61r 4               gm_anim_mode:
000D61r 4  C5 rr        	cmp animmode         ; check if the animation mode is the same
000D63r 4  F0 3D        	beq gm_sameanim
000D65r 4  85 rr        	sta animmode         ; animation is different
000D67r 4  A9 00        	lda #0               ; clear animation timer
000D69r 4  85 rr        	sta animtimer
000D6Br 4  85 rr        	sta animtimersb
000D6Dr 4  A5 rr        	lda animmode         ; load animation data
000D6Fr 4  0A           	asl
000D70r 4  0A           	asl
000D71r 4  0A           	asl                  ; 8 bytes per animation state
000D72r 4  AA           	tax                  ; use as index into table
000D73r 4  BD rr rr     	lda gm_anim_table, x ; load animation frame pointer or left/right sprite
000D76r 4  E8           	inx
000D77r 4  85 rr        	sta anfrptrlo
000D79r 4  BD rr rr     	lda gm_anim_table, x
000D7Cr 4  E8           	inx
000D7Dr 4  85 rr        	sta anfrptrhi
000D7Fr 4  BD rr rr     	lda gm_anim_table, x
000D82r 4  E8           	inx
000D83r 4  85 rr        	sta plh_spr_l
000D85r 4  BD rr rr     	lda gm_anim_table, x
000D88r 4  E8           	inx
000D89r 4  85 rr        	sta plh_spr_r
000D8Br 4  BD rr rr     	lda gm_anim_table, x
000D8Er 4  E8           	inx
000D8Fr 4  85 rr        	sta sprxoff
000D91r 4  BD rr rr     	lda gm_anim_table, x
000D94r 4  E8           	inx
000D95r 4  85 rr        	sta spryoff
000D97r 4  85 rr        	sta spryoffbase
000D99r 4  BD rr rr     	lda gm_anim_table, x
000D9Cr 4  E8           	inx
000D9Dr 4  85 rr        	sta animflags
000D9Fr 4               	;                      8th byte unused
000D9Fr 4  4C rr rr     	jmp gm_donetimer
000DA2r 4               gm_sameanim:
000DA2r 4  A9 08        	lda #af_wlkspd
000DA4r 4  24 rr        	bit animflags
000DA6r 4  D0 8B        	bne gm_anim_advwalk
000DA8r 4  A9 20        	lda #af_lock         ; check if animtimer should be locked to 0
000DAAr 4  24 rr        	bit animflags
000DACr 4  F0 06        	beq :+
000DAEr 4  A9 00        	lda #0
000DB0r 4  85 rr        	sta animtimer
000DB2r 4  F0 3F        	beq gm_donetimer
000DB4r 4  A9 40        :	lda #af_lockto1      ; check if animtimer should be locked to 1
000DB6r 4  24 rr        	bit animflags
000DB8r 4  F0 06        	beq :+
000DBAr 4  A9 01        	lda #1
000DBCr 4  85 rr        	sta animtimer
000DBEr 4  D0 33        	bne gm_donetimer
000DC0r 4  18           :	clc
000DC1r 4  A9 10        	lda #animspd
000DC3r 4  65 rr        	adc animtimersb
000DC5r 4  85 rr        	sta animtimersb
000DC7r 4  A9 00        	lda #0
000DC9r 4  65 rr        	adc animtimer
000DCBr 4  85 rr        	sta animtimer
000DCDr 4               gm_timeradvanced:
000DCDr 4  A2 FF        	ldx #$FF
000DCFr 4  A9 01        	lda #af_2frame       ; load the 2 frame limit into X if needed
000DD1r 4  24 rr        	bit animflags
000DD3r 4  F0 02        	beq gm_timerNOT2f
000DD5r 4  A2 01        	ldx #1
000DD7r 4               gm_timerNOT2f:
000DD7r 4  A9 02        	lda #af_4frame       ; load the 4 frame limit into X if needed
000DD9r 4  24 rr        	bit animflags
000DDBr 4  F0 02        	beq gm_timerNOT4f
000DDDr 4  A2 03        	ldx #3
000DDFr 4               gm_timerNOT4f:
000DDFr 4  A9 04        	lda #af_noloop
000DE1r 4  24 rr        	bit animflags
000DE3r 4  F0 09        	beq gm_timernomax
000DE5r 4  E4 rr        	cpx animtimer        ; af_noloop set, so need to cap
000DE7r 4  B0 0A        	bcs gm_donetimer     ; X >= animtimer, so it's fine
000DE9r 4  86 rr        	stx animtimer
000DEBr 4  4C rr rr     	jmp gm_donetimer
000DEEr 4               gm_timernomax:
000DEEr 4  8A           	txa                  ; af_noloop not set, so this is a loop
000DEFr 4  25 rr        	and animtimer
000DF1r 4  85 rr        	sta animtimer
000DF3r 4               gm_donetimer:
000DF3r 4  A9 03        	lda #(af_2frame|af_4frame)
000DF5r 4  24 rr        	bit animflags
000DF7r 4  F0 0E        	beq gm_regularload
000DF9r 4  A5 rr        	lda animtimer
000DFBr 4  0A           	asl
000DFCr 4  A8           	tay
000DFDr 4  C8           	iny
000DFEr 4  B1 rr        	lda (anfrptrlo),y
000E00r 4  AA           	tax
000E01r 4  88           	dey
000E02r 4  B1 rr        	lda (anfrptrlo),y
000E04r 4  4C rr rr     	jmp gm_loaded
000E07r 4               gm_regularload:
000E07r 4  A5 rr        	lda anfrptrlo
000E09r 4  A6 rr        	ldx anfrptrhi
000E0Br 4               gm_loaded:
000E0Br 4  85 rr        	sta plr_spr_l
000E0Dr 4  86 rr        	stx plr_spr_r
000E0Fr 4  A9 10        	lda #af_oddryth
000E11r 4  24 rr        	bit animflags
000E13r 4  F0 09        	beq gm_nooddrhythm
000E15r 4  18           	clc
000E16r 4  A5 rr        	lda animtimer
000E18r 4  29 01        	and #1
000E1Ar 4  65 rr        	adc spryoffbase
000E1Cr 4  85 rr        	sta spryoff
000E1Er 4               gm_nooddrhythm:
000E1Er 4  60           	rts
000E1Fr 4               
000E1Fr 4               ; ** SUBROUTINE: gm_anim_player
000E1Fr 4               ; desc: Updates the sprite numbers for the player character and their hair.
000E1Fr 4               ; note: gm_anim_player starts a little below.
000E1Fr 4               gm_anim_player:
000E1Fr 4  A9 00        	lda #0
000E21r 4  85 rr        	sta spryoff
000E23r 4  A6 rr        	ldx dashcount
000E25r 4  E8           	inx
000E26r 4  86 rr        	stx plh_attrs    ; set the palette to the dash count + 1
000E28r 4  A5 rr        	lda dashtime
000E2Ar 4  C9 00        	cmp #0
000E2Cr 4  D0 3D        	bne gm_dashing
000E2Er 4  A9 04        	lda #pl_pushing
000E30r 4  24 rr        	bit playerctrl
000E32r 4  D0 4B        	bne gm_pushing
000E34r 4  A5 rr        	lda player_vl_y
000E36r 4  30 3D        	bmi gm_jumping   ; if it's <0, then jumping
000E38r 4  A9 02        	lda #pl_ground
000E3Ar 4  24 rr        	bit playerctrl
000E3Cr 4  F0 3C        	beq gm_falling   ; if pl_ground set, then moving only in X direction
000E3Er 4  A5 rr        	lda player_vl_x  ; check if both components of the velocity are zero
000E40r 4  D0 04        	bne gm_anim_notidle
000E42r 4  A5 rr        	lda player_vs_x
000E44r 4  F0 1B        	beq gm_idle
000E46r 4               gm_anim_notidle:
000E46r 4  A9 01        	lda #pl_left     ; check if facing left
000E48r 4  24 rr        	bit playerctrl
000E4Ar 4  F0 0E        	beq gm_anim_right
000E4Cr 4  A5 rr        	lda player_vl_x  ; load the player's velocity but flip its sign
000E4Er 4  49 FF        	eor #$FF
000E50r 4  18           	clc
000E51r 4  69 01        	adc #1
000E53r 4  30 11        	bmi gm_flip      ; if A <= 0, then flipping
000E55r 4  F0 0F        	beq gm_flip
000E57r 4  4C rr rr     	jmp gm_right
000E5Ar 4               gm_anim_right:
000E5Ar 4  A5 rr        	lda player_vl_x
000E5Cr 4  30 08        	bmi gm_flip      ; if A < 0, then flipping
000E5Er 4  4C rr rr     	jmp gm_right     ; if A >= 0, then running. vl_x==vs_x==0 case is already handled.
000E61r 4               gm_idle:
000E61r 4  A9 00        	lda #am_idle
000E63r 4  4C rr rr     	jmp gm_anim_mode
000E66r 4               gm_flip:
000E66r 4  A9 07        	lda #am_flip
000E68r 4  4C rr rr     	jmp gm_anim_mode
000E6Br 4               gm_dashing:
000E6Br 4  A9 06        	lda #am_dash
000E6Dr 4  4C rr rr     	jmp gm_anim_mode
000E70r 4               gm_right:
000E70r 4  A9 01        	lda #am_walk
000E72r 4  4C rr rr     	jmp gm_anim_mode
000E75r 4               gm_jumping:
000E75r 4  A9 02        	lda #am_jump
000E77r 4  4C rr rr     	jmp gm_anim_mode
000E7Ar 4               gm_falling:
000E7Ar 4  A9 03        	lda #am_fall
000E7Cr 4  4C rr rr     	jmp gm_anim_mode
000E7Fr 4               gm_pushing:
000E7Fr 4  A9 02        	lda #pl_ground
000E81r 4  24 rr        	bit playerctrl
000E83r 4  F0 05        	beq gm_sliding
000E85r 4  A9 04        	lda #am_push
000E87r 4  4C rr rr     	jmp gm_anim_mode
000E8Ar 4               gm_sliding:
000E8Ar 4  A9 08        	lda #am_climbidl
000E8Cr 4  4C rr rr     	jmp gm_anim_mode
000E8Fr 4               
000E8Fr 4               ; ** SUBROUTINE: gm_anim_banks
000E8Fr 4               ; desc: Updates the loaded bank numbers for the current animation.
000E8Fr 4               gm_anim_banks:
000E8Fr 4               	; Update the current player sprite bank.
000E8Fr 4  A5 rr        	lda animtimer
000E91r 4  29 01        	and #1
000E93r 4  85 rr        	sta spr0_bknum
000E95r 4               
000E95r 4  A5 rr        	lda framectr
000E97r 4  4A           	lsr
000E98r 4  4A           	lsr
000E99r 4  4A           	lsr
000E9Ar 4  29 03        	and #3
000E9Cr 4  18           	clc
000E9Dr 4  69 02        	adc #2
000E9Fr 4  85 rr        	sta spr3_bknum
000EA1r 4  60           	rts
000EA2r 4               
000EA2r 3               .include "p_physic.asm"
000EA2r 4               ; Copyright (C) 2024 iProgramInCpp
000EA2r 4               
000EA2r 4  00 80 80     gm_targetsLO:	.byte $00, maxwalkLO, maxwalkNLO
000EA5r 4  00 01 FE     gm_targetsHI:	.byte $00, maxwalkHI, maxwalkNHI
000EA8r 4  00 01 02 00  gm_xaxisfixup:	.byte $00, $01, $02, $00
000EACr 4               
000EACr 4               ; ** SUBROUTINE: gm_gettarget
000EACr 4               ; desc: Gets the index of the target velocity, based on buttons held on the controller.
000EACr 4               ;       The index is used in the arrays: gm_targetsLO, gm_targetsHI.
000EACr 4               gm_gettargetindex:
000EACr 4  A5 rr        	lda forcemovext
000EAEr 4  F0 03        	beq gm_gettargetindexforce
000EB0r 4  A5 rr        	lda forcemovex
000EB2r 4  60           	rts
000EB3r 4               
000EB3r 4               gm_gettargetindexforce:
000EB3r 4  A5 rr        	lda p1_cont
000EB5r 4  29 03        	and #(cont_left | cont_right)
000EB7r 4               	; since cont_left and cont_right are $02 and $01 respectively,
000EB7r 4               	; we can simply use them as indices into a table.
000EB7r 4               	;
000EB7r 4               	; if left and right happen to be pressed at the same time, simply
000EB7r 4               	; cancel them out.
000EB7r 4  AA           	tax
000EB8r 4  BD rr rr     	lda gm_xaxisfixup, x
000EBBr 4  60           	rts
000EBCr 4               
000EBCr 4               ; ** SUBROUTINE: gm_velsignbtnshld
000EBCr 4               ; desc: Checks if the X velocity's sign matches that of the held buttons.
000EBCr 4               ; result: located in ZERO flag.  If the zero flag is set, the held buttons
000EBCr 4               ;         match the velocity's sign.
000EBCr 4               ; clobbers: A, X
000EBCr 4               gm_velsignbtnshld:
000EBCr 4  20 rr rr     	jsr gm_gettargetindex
000EBFr 4  AA           	tax
000EC0r 4  C9 01        	cmp #1
000EC2r 4  D0 0D        	bne :+
000EC4r 4               
000EC4r 4  A5 rr        	lda player_vl_x     ; it's 1, meaning we're holding right.
000EC6r 4  30 1C        	bmi @different
000EC8r 4  D0 04        	bne @same
000ECAr 4  A5 rr        	lda player_vs_x     ; pixel component is 0, so check the subpixel now
000ECCr 4  D0 16        	bne @different
000ECEr 4               @same:
000ECEr 4  A9 00        	lda #0
000ED0r 4  60           	rts
000ED1r 4               
000ED1r 4  C9 02        :	cmp #2
000ED3r 4  D0 06        	bne :+
000ED5r 4  A5 rr        	lda player_vl_x     ; it's 2, meaning we're holding left.
000ED7r 4  10 0B        	bpl @different      ; if the pixel component is 0 or above, signs don't match
000ED9r 4  30 F3        	bmi @same
000EDBr 4               
000EDBr 4  A5 rr        :	lda player_vl_x
000EDDr 4  D0 05        	bne @different
000EDFr 4  A5 rr        	lda player_vs_x
000EE1r 4  D0 01        	bne @different
000EE3r 4  60           	rts
000EE4r 4               @different:
000EE4r 4  A9 01        	lda #1
000EE6r 4  60           	rts
000EE7r 4               
000EE7r 4               ; ** SUBROUTINE: gm_shouldreduce
000EE7r 4               ; desc: Determines whether accel or accelreduce is used.
000EE7r 4               ;
000EE7r 4               ; something like:
000EE7r 4               ; [Math.Abs(Speed.X) > max  &&  Math.Sign(Speed.X) == moveX] ? RunReduce : RunAccel
000EE7r 4               gm_shouldreduce:
000EE7r 4  20 rr rr     	jsr gm_velsignbtnshld  ; if Math.Sign(Speed.X) != moveX
000EEAr 4  D0 20        	bne @returnNormal      ; then it's simply normal
000EECr 4               	; note: button state index still loaded into X
000EECr 4               
000EECr 4               	; now compare the absolute of the velocity.
000EECr 4  18           	clc
000EEDr 4  A5 rr        	lda player_vl_x
000EEFr 4  30 0F        	bmi @checkMinus
000EF1r 4               
000EF1r 4               	; player velocity is positive.
000EF1r 4  C9 01        	cmp #maxwalkHI
000EF3r 4  90 17        	bcc @returnNormal      ; SpeedXHigh < maxwalkHI
000EF5r 4  D0 06        	bne @returnReduce      ; SpeedXHigh > maxwalkHI
000EF7r 4               
000EF7r 4  A5 rr        	lda player_vs_x
000EF9r 4  C9 80        	cmp #maxwalkLO
000EFBr 4  90 0F        	bcc @returnNormal      ; SpeedXLow < maxwalkHI
000EFDr 4               @returnReduce:
000EFDr 4  A9 01        	lda #1
000EFFr 4  60           	rts
000F00r 4               
000F00r 4               @checkMinus:
000F00r 4  C9 FE        	cmp #maxwalkNHI
000F02r 4  90 F9        	bcc @returnReduce
000F04r 4  D0 06        	bne @returnNormal
000F06r 4               
000F06r 4  A5 rr        	lda player_vs_x
000F08r 4  C9 80        	cmp #maxwalkNLO
000F0Ar 4  90 F1        	bcc @returnReduce
000F0Cr 4               
000F0Cr 4               @returnNormal:
000F0Cr 4  A9 00        	lda #0
000F0Er 4  60           	rts
000F0Fr 4               
000F0Fr 4               gm_acceltable:
000F0Fr 4  2E           	.byte accelair     ; air, no reduce
000F10r 4  12           	.byte accelredair  ; air, reduce
000F11r 4  47           	.byte accel        ; ground, no reduce
000F12r 4  1C           	.byte accelred     ; ground, reduce
000F13r 4               
000F13r 4               ; ** SUBROUTINE: gm_updatexvel
000F13r 4               ; desc:    Makes the 16-bit X velocity approach a value based on the buttons held.
000F13r 4               gm_updatexvel:
000F13r 4               	; we need to calculate two things:
000F13r 4               	; first, the target velocity
000F13r 4               	; second, the thing we want to add to get to the target velocity
000F13r 4               
000F13r 4               	; check if the velocity should be REDUCED
000F13r 4  20 rr rr     	jsr gm_shouldreduce
000F16r 4  85 rr        	sta temp1
000F18r 4               
000F18r 4               	; note: gm_shouldreduce ALSO placed the index corresponding to
000F18r 4               	; the held buttons in the X register!
000F18r 4               
000F18r 4               	; determine the facing based on the X register
000F18r 4  E0 00        	cpx #0
000F1Ar 4  F0 12        	beq @donefacing       ; no buttons pressed
000F1Cr 4  E0 01        	cpx #1
000F1Er 4  F0 08        	beq @right
000F20r 4               	; facing left
000F20r 4  A9 01        	lda #pl_left
000F22r 4  05 rr        	ora playerctrl
000F24r 4  85 rr        	sta playerctrl
000F26r 4  D0 06        	bne @donefacing
000F28r 4               
000F28r 4               @right:
000F28r 4               	; facing right
000F28r 4  A9 FE        	lda #(pl_left ^ $FF)
000F2Ar 4  25 rr        	and playerctrl
000F2Cr 4  85 rr        	sta playerctrl
000F2Er 4               
000F2Er 4               @donefacing:
000F2Er 4               	; determine the thing added to reach the target velocity
000F2Er 4  A9 02        	lda #pl_ground
000F30r 4  25 rr        	and playerctrl        ; NOTE INVARIANT: pl_ground is $02!
000F32r 4  05 rr        	ora temp1
000F34r 4  A8           	tay
000F35r 4               	; now Y can be used directly as an index into an array.
000F35r 4               
000F35r 4               	; check if we should SUBTRACT or ADD to the velocity.
000F35r 4  A5 rr        	lda player_vl_x
000F37r 4  38           	sec
000F38r 4  FD rr rr     	sbc gm_targetsHI, x   ; signed comparison betwene player_vl_x and gm_targetsHI+x
000F3Br 4  50 02        	bvc :+                ; if V is 0, N eor V = N, otherwse N eor V = N eor 1
000F3Dr 4  49 80        	eor #$80
000F3Fr 4  30 0E        :	bmi @shouldAdd        ; player_vl_x < gm_targetsHI+x, so need to add
000F41r 4  D0 3E        	bne @shouldSubtract   ; player_vl_x > gm_targetsHI+x, so need to subtract
000F43r 4               
000F43r 4               	; now check the low byte
000F43r 4  A5 rr        	lda player_vs_x
000F45r 4  38           	sec
000F46r 4  FD rr rr     	sbc gm_targetsLO, x
000F49r 4  50 02        	bvc :+
000F4Br 4  49 80        	eor #$80
000F4Dr 4  30 32        :	bmi @shouldSubtract   ; player_vs_x < gm_targetsLO+x, so need to add
000F4Fr 4               
000F4Fr 4               @shouldAdd:
000F4Fr 4               	; Add.  If the result is bigger than the target velocity,
000F4Fr 4               	; set to the target velocity and return.
000F4Fr 4  18           	clc
000F50r 4  A5 rr        	lda player_vs_x
000F52r 4  79 rr rr     	adc gm_acceltable, y
000F55r 4  85 rr        	sta player_vs_x
000F57r 4  A5 rr        	lda player_vl_x
000F59r 4  69 00        	adc #0
000F5Br 4  85 rr        	sta player_vl_x
000F5Dr 4               
000F5Dr 4               	; check if we overshot.
000F5Dr 4  BD rr rr     	lda gm_targetsHI, x
000F60r 4  30 13        	bmi @shouldAdd_targetMinus
000F62r 4               
000F62r 4               	; target is positive.
000F62r 4  A5 rr        	lda player_vl_x    ; if it's still negative after the addition, return
000F64r 4  30 0E        	bmi @return
000F66r 4  DD rr rr     	cmp gm_targetsHI, x
000F69r 4  90 09        	bcc @return
000F6Br 4  D0 46        	bne @setToTarget
000F6Dr 4               
000F6Dr 4               @shouldAdd_compareSubpixel:
000F6Dr 4  A5 rr        	lda player_vs_x
000F6Fr 4  DD rr rr     	cmp gm_targetsLO, x
000F72r 4  B0 3F        	bcs @setToTarget
000F74r 4               
000F74r 4               @return:
000F74r 4  60           	rts
000F75r 4               
000F75r 4               @shouldAdd_targetMinus:
000F75r 4  A5 rr        	lda player_vl_x
000F77r 4  10 3A        	bpl @setToTarget   ; it somehow ended up being positive, and target is negative. just set
000F79r 4  DD rr rr     	cmp gm_targetsHI, x; ^^ note that we are ADDING, therefore this should never happen
000F7Cr 4  F0 EF        	beq @shouldAdd_compareSubpixel
000F7Er 4  B0 33        	bcs @setToTarget
000F80r 4  60           	rts
000F81r 4               
000F81r 4               @shouldSubtract:
000F81r 4               	; Subtract.  If the result is smaller than the target velocity,
000F81r 4               	; set to the target velocity and return.
000F81r 4  38           	sec
000F82r 4  A5 rr        	lda player_vs_x
000F84r 4  F9 rr rr     	sbc gm_acceltable, y
000F87r 4  85 rr        	sta player_vs_x
000F89r 4  A5 rr        	lda player_vl_x
000F8Br 4  E9 00        	sbc #0
000F8Dr 4  85 rr        	sta player_vl_x
000F8Fr 4               
000F8Fr 4               	; check if we overshot.
000F8Fr 4  BD rr rr     	lda gm_targetsHI, x
000F92r 4  10 13        	bpl @shouldSubtract_targetPlus
000F94r 4               
000F94r 4               	; target is negative.
000F94r 4  A5 rr        	lda player_vl_x
000F96r 4  10 DC        	bpl @return        ; if it's still positive after the subtraction, return
000F98r 4  DD rr rr     	cmp gm_targetsHI, x
000F9Br 4  90 16        	bcc @setToTarget
000F9Dr 4  D0 D5        	bne @return
000F9Fr 4               
000F9Fr 4               @shouldSubtract_compareSubpixel:
000F9Fr 4  A5 rr        	lda player_vs_x
000FA1r 4  DD rr rr     	cmp gm_targetsLO, x
000FA4r 4  90 0D        	bcc @setToTarget
000FA6r 4  60           	rts
000FA7r 4               
000FA7r 4               @shouldSubtract_targetPlus:
000FA7r 4  A5 rr        	lda player_vl_x
000FA9r 4  30 08        	bmi @setToTarget   ; it somehow ended up negative, and target is positive. just set.
000FABr 4  DD rr rr     	cmp gm_targetsHI, x; ^^ note that we are SUBTRACTING, therefore this should never happen
000FAEr 4  F0 EF        	beq @shouldSubtract_compareSubpixel
000FB0r 4  90 01        	bcc @setToTarget
000FB2r 4  60           	rts
000FB3r 4               
000FB3r 4               @setToTarget:
000FB3r 4  BD rr rr     	lda gm_targetsHI, x
000FB6r 4  85 rr        	sta player_vl_x
000FB8r 4  BD rr rr     	lda gm_targetsLO, x
000FBBr 4  85 rr        	sta player_vs_x
000FBDr 4               
000FBDr 4               ; ** SUBROUTINE: gm_getdownforce
000FBDr 4               ; desc:    Gets the down force applied to the player.
000FBDr 4               gm_getdownforce:
000FBDr 4  A9 80        	lda #cont_a
000FBFr 4  24 rr        	bit p1_cont
000FC1r 4  F0 1A        	beq @normal        ; not holding the A button, use normal gravity
000FC3r 4               
000FC3r 4  A5 rr        	lda player_vs_y
000FC5r 4  85 rr        	sta temp1
000FC7r 4  A5 rr        	lda player_vl_y
000FC9r 4  10 0A        	bpl @dontinvert
000FCBr 4  49 FF        	eor #$FF
000FCDr 4  48           	pha
000FCEr 4  A5 rr        	lda temp1
000FD0r 4  49 FF        	eor #$FF
000FD2r 4  85 rr        	sta temp1
000FD4r 4  68           	pla
000FD5r 4               @dontinvert:
000FD5r 4  D0 06        	bne @normal        ; use normal gravity if >= $0100
000FD7r 4  A5 rr        	lda temp1
000FD9r 4  C9 C0        	cmp #lograthresh
000FDBr 4  90 03        	bcc @low
000FDDr 4               @normal:
000FDDr 4  A9 40        	lda #gravity
000FDFr 4  60           	rts
000FE0r 4               @low:
000FE0r 4  A9 20        	lda #(gravity >> 1)
000FE2r 4  60           	rts
000FE3r 4               
000FE3r 4               ; ** SUBROUTINE: gm_gravity
000FE3r 4               ; desc:    If player is not grounded, applies a constant downward force.
000FE3r 4               gm_gravity:
000FE3r 4  A5 rr        	lda jcountdown
000FE5r 4  F0 0D        	beq @nojumpcountdown
000FE7r 4               
000FE7r 4               	; jump countdown is active. Check if the A button is still being held.
000FE7r 4  A9 80        	lda #cont_a
000FE9r 4  24 rr        	bit p1_cont
000FEBr 4  F0 03        	beq :+
000FEDr 4  C6 rr        	dec jcountdown
000FEFr 4  60           	rts
000FF0r 4               
000FF0r 4  A9 00        :	lda #0
000FF2r 4  85 rr        	sta jcountdown        ; nope, so clear the jump countdown and proceed with gravity as usual
000FF4r 4               @nojumpcountdown:
000FF4r 4  A9 02        	lda #pl_ground
000FF6r 4  24 rr        	bit playerctrl
000FF8r 4  F0 01        	beq gm_apply_gravity
000FFAr 4  60           	rts
000FFBr 4               gm_apply_gravity:
000FFBr 4  20 rr rr     	jsr gm_getdownforce
000FFEr 4  18           	clc
000FFFr 4  65 rr        	adc player_vs_y
001001r 4  85 rr        	sta player_vs_y
001003r 4  A9 00        	lda #0
001005r 4  65 rr        	adc player_vl_y
001007r 4  85 rr        	sta player_vl_y
001009r 4               
001009r 4  A5 rr        	lda player_vl_y
00100Br 4  30 2C        	bmi @return
00100Dr 4  C9 02        	cmp #maxfallHI
00100Fr 4  90 10        	bcc @proceed
001011r 4  D0 06        	bne @cap
001013r 4               
001013r 4  A5 rr        	lda player_vs_y
001015r 4  C9 AA        	cmp #maxfallLO
001017r 4  90 08        	bcc @proceed
001019r 4               @cap:
001019r 4  A9 02        	lda #maxfallHI
00101Br 4  85 rr        	sta player_vl_y
00101Dr 4  A9 AA        	lda #maxfallLO
00101Fr 4  85 rr        	sta player_vs_y
001021r 4               @proceed:
001021r 4  A9 04        	lda #pl_pushing
001023r 4  24 rr        	bit playerctrl
001025r 4  F0 12        	beq @return
001027r 4  A5 rr        	lda player_vl_y
001029r 4  D0 06        	bne @slide            ; player_vl_x > 0
00102Br 4  A5 rr        	lda player_vs_y
00102Dr 4  C9 80        	cmp #maxslidespd
00102Fr 4  90 08        	bcc @return           ; player_vl_x == 0, player_vs_x < maxslidespd
001031r 4               @slide:
001031r 4  A9 80        	lda #maxslidespd
001033r 4  85 rr        	sta player_vs_y
001035r 4  A9 00        	lda #0
001037r 4  85 rr        	sta player_vl_y
001039r 4               @return:
001039r 4  60           	rts
00103Ar 4               
00103Ar 4               ; ** SUBROUTINE: gm_controls
00103Ar 4               ; desc:    Check controller input and apply forces based on it.
00103Ar 4               gm_controls:
00103Ar 4  20 rr rr     	jsr gm_updatexvel
00103Dr 4  A5 rr        	lda jumpbuff
00103Fr 4  D0 1D        	bne gm_jump       ; If player buffered a jump, then try to perform it.
001041r 4               gm_dontjump:
001041r 4  A9 40        	lda #cont_b
001043r 4  24 rr        	bit p1_cont
001045r 4  F0 16        	beq gm_dontdash   ; if the player pressed B
001047r 4  24 rr        	bit p1_conto
001049r 4  D0 12        	bne gm_dontdash   ; if the player wasn't pressing B last frame
00104Br 4  A5 rr        	lda dashcount
00104Dr 4  C9 01        	cmp #maxdashes
00104Fr 4  B0 0C        	bcs gm_dontdash   ; and if the dashcount is < maxdashes
001051r 4  E6 rr        	inc dashcount
001053r 4  A2 0C        	ldx #defdashtime
001055r 4  86 rr        	stx dashtime
001057r 4  A9 10        	lda #pl_dashed
001059r 4  05 rr        	ora playerctrl
00105Br 4  85 rr        	sta playerctrl
00105Dr 4               gm_dontdash:
00105Dr 4  60           	rts
00105Er 4               
00105Er 4               gm_jump:
00105Er 4  A5 rr        	lda wjumpcoyote
001060r 4  D0 54        	bne gm_walljump
001062r 4               gm_normaljump:
001062r 4  A5 rr        	lda jumpcoyote
001064r 4  F0 DB        	beq gm_dontjump   ; if no coyote time, then can't jump
001066r 4  20 rr rr     	jsr gm_jump_sfx
001069r 4  A9 FE        	lda #jumpvelHI
00106Br 4  85 rr        	sta player_vl_y
00106Dr 4  A9 40        	lda #jumpvelLO
00106Fr 4  85 rr        	sta player_vs_y
001071r 4  A9 0C        	lda #jumpsustain
001073r 4  85 rr        	sta jcountdown
001075r 4  A9 00        	lda #0
001077r 4  85 rr        	sta jumpbuff      ; consume the buffered jump input
001079r 4  85 rr        	sta jumpcoyote    ; consume the existing coyote time
00107Br 4  85 rr        	sta wjumpcoyote   ; or the wall coyote time
00107Dr 4  A9 03        	lda #%00000011
00107Fr 4  24 rr        	bit p1_cont
001081r 4  F0 BE        	beq gm_dontjump   ; don't give a boost if we aren't moving
001083r 4  A5 rr        	lda player_vl_x
001085r 4  30 05        	bmi gm_jumpboostneg; if velocity < 0 pixels, then apply the leftward jump boost
001087r 4  D0 07        	bne gm_applyjumpboost ; if velocity >= 1 pixel, then apply the jump boost
001089r 4  4C rr rr     	jmp gm_dontjump   ; 0 < velocity < 1 so dont do a jump boost
00108Cr 4               gm_jumpboostneg:
00108Cr 4  C9 FF        	cmp #$FF
00108Er 4  F0 B1        	beq gm_dontjump   ; if -1 <= velocity, then don't apply a jump boost
001090r 4               gm_applyjumpboost:
001090r 4  A9 01        	lda #pl_left
001092r 4  24 rr        	bit playerctrl
001094r 4  F0 10        	beq gm_jumphboostR
001096r 4  38           	sec               ; apply the small jump boost to the right
001097r 4  A5 rr        	lda player_vs_x
001099r 4  E9 AA        	sbc #jmphboost
00109Br 4  85 rr        	sta player_vs_x
00109Dr 4  A5 rr        	lda player_vl_x
00109Fr 4  E9 00        	sbc #0
0010A1r 4  85 rr        	sta player_vl_x
0010A3r 4  4C rr rr     	jmp gm_dontjump   ; that would be pretty stupid as it would
0010A6r 4               gm_jumphboostR:       ; allow speed buildup up to the physical limit
0010A6r 4  18           	clc
0010A7r 4  A9 AA        	lda #jmphboost
0010A9r 4  65 rr        	adc player_vs_x
0010ABr 4  85 rr        	sta player_vs_x
0010ADr 4  A9 00        	lda #0
0010AFr 4  65 rr        	adc player_vl_x
0010B1r 4  85 rr        	sta player_vl_x
0010B3r 4  4C rr rr     	jmp gm_dontjump
0010B6r 4               
0010B6r 4               gm_walljump:
0010B6r 4  20 rr rr     	jsr gm_jump_sfx
0010B9r 4  A9 02        	lda #pl_ground
0010BBr 4  24 rr        	bit playerctrl
0010BDr 4  D0 A3        	bne gm_normaljump ; if player is grounded, ALWAYS perform a standard jump
0010BFr 4               	; the facing direction IS the one the player is currently pushing against.
0010BFr 4               	; that means that the opposite direction is the one they should be flinged against
0010BFr 4  A5 rr        	lda playerctrl
0010C1r 4  29 08        	and #pl_wallleft
0010C3r 4  49 08        	eor #pl_wallleft
0010C5r 4  4A           	lsr
0010C6r 4  4A           	lsr
0010C7r 4  4A           	lsr               ; move bit 3 (pl_wallleft) into bit 0 (pl_left)'s position
0010C8r 4  85 rr        	sta temp1
0010CAr 4  A5 rr        	lda playerctrl
0010CCr 4  29 EE        	and #((pl_left|pl_dashed)^$FF) ; also clear the pl_dashed flag to allow the wall jump at full force
0010CEr 4  05 rr        	ora temp1
0010D0r 4  85 rr        	sta playerctrl
0010D2r 4               
0010D2r 4  A9 01        	lda #pl_left
0010D4r 4  24 rr        	bit playerctrl
0010D6r 4  D0 0A        	bne @walljumpboostL
0010D8r 4  A9 2A        	lda #walljumpLO
0010DAr 4  85 rr        	sta player_vs_x
0010DCr 4  A9 02        	lda #walljumpHI
0010DEr 4  85 rr        	sta player_vl_x
0010E0r 4  D0 08        	bne @walljumpvert
0010E2r 4               @walljumpboostL:
0010E2r 4  A9 D6        	lda #walljumpNLO
0010E4r 4  85 rr        	sta player_vs_x
0010E6r 4  A9 FD        	lda #walljumpNHI
0010E8r 4  85 rr        	sta player_vl_x
0010EAr 4               @walljumpvert:
0010EAr 4  A9 FE        	lda #jumpvelHI
0010ECr 4  85 rr        	sta player_vl_y
0010EEr 4  A9 40        	lda #jumpvelLO
0010F0r 4  85 rr        	sta player_vs_y
0010F2r 4  A9 0C        	lda #jumpsustain
0010F4r 4  85 rr        	sta jcountdown
0010F6r 4  A9 00        	lda #0
0010F8r 4  85 rr        	sta jumpbuff      ; consume the buffered jump input
0010FAr 4  85 rr        	sta jumpcoyote    ; consume the existing coyote time
0010FCr 4  85 rr        	sta wjumpcoyote   ; or the wall coyote time
0010FEr 4               
0010FEr 4  20 rr rr     	jsr gm_gettargetindexforce ; check the current move direction
001101r 4  F0 0C        	beq @return
001103r 4               
001103r 4  A5 rr        	lda playerctrl
001105r 4  29 01        	and #pl_left
001107r 4  AA           	tax
001108r 4  E8           	inx               ; 1 - right, 2 - left
001109r 4  86 rr        	stx forcemovex
00110Br 4  A9 0B        	lda #wjfxtval
00110Dr 4  85 rr        	sta forcemovext
00110Fr 4               @return:
00110Fr 4  60           	rts
001110r 4               
001110r 4               ; ** SUBROUTINE: gm_jumpgrace
001110r 4               ; desc:    Update the jump grace state.  If the A button is held, start buffering a jump.
001110r 4               ;          If necessary, decrement the coyote timer.
001110r 4               gm_jumpgrace:
001110r 4  A9 80        	lda #cont_a
001112r 4  24 rr        	bit p1_conto
001114r 4  D0 08        	bne gm_nosetbuff  ; (p1_conto & #cont_a) = 0
001116r 4  24 rr        	bit p1_cont
001118r 4  F0 04        	beq gm_nosetbuff  ; if A was just pressed, then assign the default buff time
00111Ar 4  A9 04        	lda #defjmpbuff
00111Cr 4  85 rr        	sta jumpbuff
00111Er 4               gm_nosetbuff:
00111Er 4  A6 rr        	ldx jumpbuff
001120r 4  F0 03        	beq gm_nodecbuff  ; if there is buff time to deduct, deduct 1 point this frame
001122r 4  CA           	dex
001123r 4  86 rr        	stx jumpbuff
001125r 4               gm_nodecbuff:
001125r 4  A6 rr        	ldx jumpcoyote
001127r 4  F0 03        	beq gm_nodeccoyote
001129r 4  CA           	dex
00112Ar 4  86 rr        	stx jumpcoyote
00112Cr 4               gm_nodeccoyote:
00112Cr 4  A6 rr        	ldx wjumpcoyote
00112Er 4  F0 03        	beq gm_nodecwcoyote
001130r 4  CA           	dex
001131r 4  86 rr        	stx wjumpcoyote
001133r 4               gm_nodecwcoyote:
001133r 4  60           	rts
001134r 4               
001134r 4               ; ** SUBROUTINE: gm_sanevels
001134r 4               ; desc:    Uphold velocity limits.  This is especially of importance for the X component.
001134r 4               ;          Due to the limited bandwidth of the PPU (we can't effectively copy more than
001134r 4               ;          1 column of tiles or so to PPU VRAM), we're forced to uphold this limit.
001134r 4               ;          Technically we could do up to 8, but only if we disable the palette feature.
001134r 4               gm_sanevels:
001134r 4  A0 00        	ldy #0
001136r 4  20 rr rr     	jsr gm_sanevelx
001139r 4  4C rr rr     	jmp gm_sanevely
00113Cr 4               
00113Cr 4               gm_sanevelx:
00113Cr 4  A5 rr        	lda player_vl_x
00113Er 4  30 0B        	bmi gm_negvelx
001140r 4               	; positive x velocity
001140r 4  C9 06        	cmp #maxvelxhi
001142r 4  90 06        	bcc gm_nocorvelx
001144r 4  A9 06        	lda #maxvelxhi
001146r 4  85 rr        	sta player_vl_x
001148r 4  84 rr        	sty player_vs_x
00114Ar 4               gm_nocorvelx:
00114Ar 4  60           	rts
00114Br 4               gm_negvelx:
00114Br 4  C9 FA        	cmp #(maxvelxhi^$FF + 1)
00114Dr 4  B0 FB        	bcs gm_nocorvelx
00114Fr 4  A9 FA        	lda #(maxvelxhi^$FF + 1)
001151r 4  85 rr        	sta player_vl_x
001153r 4  84 rr        	sty player_vs_x
001155r 4  60           	rts
001156r 4               gm_sanevely:
001156r 4  A5 rr        	lda player_vl_y
001158r 4  30 0B        	bmi gm_negvely
00115Ar 4               	; positive y velocity
00115Ar 4  C9 06        	cmp #maxvelyhi
00115Cr 4  90 06        	bcc gm_nocorvely
00115Er 4  A9 06        	lda #maxvelyhi
001160r 4  85 rr        	sta player_vl_y
001162r 4  84 rr        	sty player_vs_y
001164r 4               gm_nocorvely:
001164r 4  60           	rts
001165r 4               gm_negvely:
001165r 4  C9 FA        	cmp #(maxvelyhi^$FF + 1)
001167r 4  B0 FB        	bcs gm_nocorvely
001169r 4  A9 FA        	lda #(maxvelyhi^$FF + 1)
00116Br 4  85 rr        	sta player_vl_y
00116Dr 4  84 rr        	sty player_vs_y
00116Fr 4  60           	rts
001170r 4               
001170r 4               ; ** SUBROUTINE: gm_getleftx
001170r 4               ; desc: Gets the tile X position where the left edge of the player's hitbox resides
001170r 4               ; returns: A - the X coordinate
001170r 4               gm_getleftx:
001170r 4  18           	clc
001171r 4  A5 rr        	lda player_x
001173r 4  69 04        	adc #plr_x_left   ; determine leftmost hitbox position
001175r 4  18           	clc
001176r 4  65 rr        	adc camera_x
001178r 4  85 rr        	sta x_crd_temp    ; x_crd_temp = low bit of check position
00117Ar 4  A5 rr        	lda camera_x_hi
00117Cr 4  69 00        	adc #0
00117Er 4  6A           	ror               ; rotate it into carry
00117Fr 4  A5 rr        	lda x_crd_temp
001181r 4  6A           	ror               ; rotate it into the low position
001182r 4  4A           	lsr
001183r 4  4A           	lsr               ; finish dividing by the tile size
001184r 4  60           	rts
001185r 4               
001185r 4               ; ** SUBROUTINE: gm_getrightx
001185r 4               ; desc:     Gets the tile X position where the right edge of the player's hitbox resides
001185r 4               ; returns:  A - the X coordinate
001185r 4               ; note:     this is NOT ALWAYS the same as the result of gm_getleftx!! though perhaps
001185r 4               ;           some optimizations are possible..
001185r 4               gm_getrightx:
001185r 4  18           	clc
001186r 4  A5 rr        	lda player_x
001188r 4  69 0B        	adc #plr_x_right ; determine right hitbox position
00118Ar 4  18           	clc
00118Br 4  65 rr        	adc camera_x
00118Dr 4  85 rr        	sta x_crd_temp    ; x_crd_temp = low bit of check position
00118Fr 4  A5 rr        	lda camera_x_hi
001191r 4  69 00        	adc #0
001193r 4  6A           	ror               ; rotate it into carry
001194r 4  A5 rr        	lda x_crd_temp
001196r 4  6A           	ror               ; rotate it into the low position
001197r 4  4A           	lsr
001198r 4  4A           	lsr               ; finish dividing by the tile size
001199r 4  60           	rts
00119Ar 4               
00119Ar 4               ; ** SUBROUTINE: gm_getleftwjx
00119Ar 4               ; desc: Gets the tile X position where the left of the wall jump check hitbox resides.
00119Ar 4               ; returns: A - the X coordinate.
00119Ar 4               gm_getleftwjx:
00119Ar 4  18           	clc
00119Br 4  A5 rr        	lda player_x
00119Dr 4  69 01        	adc #plr_x_wj_left ; determine leftmost hitbox position
00119Fr 4  18           	clc
0011A0r 4  65 rr        	adc camera_x
0011A2r 4  85 rr        	sta x_crd_temp    ; x_crd_temp = low bit of check position
0011A4r 4  A5 rr        	lda camera_x_hi
0011A6r 4  69 00        	adc #0
0011A8r 4  6A           	ror               ; rotate it into carry
0011A9r 4  A5 rr        	lda x_crd_temp
0011ABr 4  6A           	ror               ; rotate it into the low position
0011ACr 4  4A           	lsr
0011ADr 4  4A           	lsr               ; finish dividing by the tile size
0011AEr 4  60           	rts
0011AFr 4               
0011AFr 4               ; ** SUBROUTINE: gm_getrightwjx
0011AFr 4               ; desc: Gets the tile X position where the right of the wall jump check hitbox resides.
0011AFr 4               ; returns: A - the X coordinate.
0011AFr 4               gm_getrightwjx:
0011AFr 4  18           	clc
0011B0r 4  A5 rr        	lda player_x
0011B2r 4  69 0E        	adc #plr_x_wj_right ; determine right hitbox position
0011B4r 4  18           	clc
0011B5r 4  65 rr        	adc camera_x
0011B7r 4  85 rr        	sta x_crd_temp    ; x_crd_temp = low bit of check position
0011B9r 4  A5 rr        	lda camera_x_hi
0011BBr 4  69 00        	adc #0
0011BDr 4  6A           	ror               ; rotate it into carry
0011BEr 4  A5 rr        	lda x_crd_temp
0011C0r 4  6A           	ror               ; rotate it into the low position
0011C1r 4  4A           	lsr
0011C2r 4  4A           	lsr               ; finish dividing by the tile size
0011C3r 4  60           	rts
0011C4r 4               
0011C4r 4               ; ** SUBROUTINE: gm_gettopy
0011C4r 4               ; desc:     Gets the tile Y position where the top edge of the player's hitbox resides
0011C4r 4               ; returns:  A - the Y coordinate
0011C4r 4               gm_gettopy:
0011C4r 4  18           	clc
0011C5r 4  A5 rr        	lda player_y
0011C7r 4  69 06        	adc #plr_y_top
0011C9r 4  4A           	lsr
0011CAr 4  4A           	lsr
0011CBr 4  4A           	lsr
0011CCr 4  60           	rts
0011CDr 4               
0011CDr 4               ; ** SUBROUTINE: gm_getbottomy_w
0011CDr 4               ; desc:     Gets the tile Y position where the bottom edge of the player's hitbox resides,
0011CDr 4               ;           when checking for collision with walls.
0011CDr 4               ; returns:  A - the Y coordinate
0011CDr 4               ; note:     this is NOT ALWAYS the same as the result of gm_gettopy!! though perhaps
0011CDr 4               ;           some optimizations are possible..
0011CDr 4               ; note:     to allow for a bit of leeway, I took off one pixel from the wall check.
0011CDr 4               gm_getbottomy_w:
0011CDr 4  18           	clc
0011CEr 4  A5 rr        	lda player_y
0011D0r 4  69 0E        	adc #plr_y_bot_wall
0011D2r 4  4A           	lsr
0011D3r 4  4A           	lsr
0011D4r 4  4A           	lsr
0011D5r 4  60           	rts
0011D6r 4               
0011D6r 4               ; ** SUBROUTINE: gm_getmidy
0011D6r 4               ; desc:     Gets the tile Y position at the middle of the player's hitbox, used for wall jump checking
0011D6r 4               ; returns:  A - the Y coordinate
0011D6r 4               gm_getmidy:
0011D6r 4  18           	clc
0011D7r 4  A5 rr        	lda player_y
0011D9r 4  69 09        	adc #plr_y_mid
0011DBr 4  4A           	lsr
0011DCr 4  4A           	lsr
0011DDr 4  4A           	lsr
0011DEr 4  60           	rts
0011DFr 4               
0011DFr 4               ; ** SUBROUTINE: gm_getmidx
0011DFr 4               ; desc:     Gets the tile X position at the middle of the player's hitbox, used for squish checking
0011DFr 4               ; returns:  A - the X coordinate
0011DFr 4               gm_getmidx:
0011DFr 4  18           	clc
0011E0r 4  A5 rr        	lda player_x
0011E2r 4  69 08        	adc #plr_x_mid
0011E4r 4  4A           	lsr
0011E5r 4  4A           	lsr
0011E6r 4  4A           	lsr
0011E7r 4  60           	rts
0011E8r 4               
0011E8r 4               ; ** SUBROUTINE: gm_getbottomy_f
0011E8r 4               ; desc:     Gets the tile Y position where the bottom edge of the player's hitbox resides,
0011E8r 4               ;           when checking for collision with floors.
0011E8r 4               ; returns:  A - the Y coordinate
0011E8r 4               ; clobbers: A
0011E8r 4               ; note:     this is NOT ALWAYS the same as the result of gm_gettopy!! though perhaps
0011E8r 4               ;           some optimizations are possible..
0011E8r 4               gm_getbottomy_f:
0011E8r 4  18           	clc
0011E9r 4  A5 rr        	lda player_y
0011EBr 4  69 10        	adc #plr_y_bot
0011EDr 4  4A           	lsr
0011EEr 4  4A           	lsr
0011EFr 4  4A           	lsr
0011F0r 4  60           	rts
0011F1r 4               
0011F1r 4               ; ** SUBROUTINE: gm_collide
0011F1r 4               ; desc:      Checks for collision.
0011F1r 4               ; arguments: X - tile's x position, Y - tile's y position, A - direction
0011F1r 4               ; returns:   zero flag set - collided
0011F1r 4               ; direction: 0 - floor, 1 - ceiling, 2 - left, 3 - right
0011F1r 4               ; note:      temp1, temp2 & temp7 are used by caller
0011F1r 4               ; note:      collision functions rely on the Y register staying as the Y position of the tile!
0011F1r 4               ; reserves:  temp3, temp4, temp5, temp6
0011F1r 4               ; clobbers:  A, X
0011F1r 4               gc_floor = $00
0011F1r 4               gc_ceil  = $01
0011F1r 4               gc_left  = $02
0011F1r 4               gc_right = $03
0011F1r 4               gm_collide:
0011F1r 4  48           	pha                 ; store the collision direction
0011F2r 4  20 rr rr     	jsr h_get_tile      ; get the tile
0011F5r 4  AA           	tax
0011F6r 4  BD 00 A1     	lda metatile_info,x ; get collision information
0011F9r 4  0A           	asl
0011FAr 4  AA           	tax
0011FBr 4  BD rr rr     	lda gm_colljumptable,x
0011FEr 4  85 rr        	sta temp3
001200r 4  E8           	inx
001201r 4  BD rr rr     	lda gm_colljumptable,x
001204r 4  85 rr        	sta temp4
001206r 4  68           	pla
001207r 4  6C rr rr     	jmp (temp3)         ; use temp3 as an indirect jump pointer
00120Ar 4               
00120Ar 4               ; Arguments for these jump table subroutines:
00120Ar 4               ; * A - The direction of collision
00120Ar 4               gm_colljumptable:
00120Ar 4  rr rr        	.word gm_collidenone
00120Cr 4  rr rr        	.word gm_collidefull
00120Er 4  rr rr        	.word gm_collidespikes
001210r 4  rr rr        	.word gm_collidejthru
001212r 4               
001212r 4               gm_collidefull:
001212r 4  A9 01        	lda #1
001214r 4  60           	rts
001215r 4               gm_collidejthru:
001215r 4  AA           	tax
001216r 4  A5 rr        	lda player_vl_y
001218r 4  30 1C        	bmi gm_collidenone; if player is moving UP, don't do collision checks at all
00121Ar 4  E0 00        	cpx #gc_floor
00121Cr 4  D0 18        	bne gm_collidenone; no collision for anything but the floor
00121Er 4  98           	tya               ; the tile's Y position now in A
00121Fr 4  0A           	asl
001220r 4  0A           	asl
001221r 4  0A           	asl               ; it's a pixel position now
001222r 4  38           	sec
001223r 4  E9 0D        	sbc #(plr_y_bot - jtheight)
001225r 4  85 rr        	sta temp3
001227r 4  A6 rr        	ldx player_yo
001229r 4  E4 rr        	cpx player_y
00122Br 4  F0 0C        	beq gm_colljtnochg
00122Dr 4               gm_colljtloop:
00122Dr 4  E4 rr        	cpx temp3
00122Fr 4  90 E1        	bcc gm_collidefull; if player failed to fall below tileX - 16 + 3
001231r 4  E8           	inx
001232r 4  E4 rr        	cpx player_y
001234r 4  D0 F7        	bne gm_colljtloop
001236r 4               gm_collidenone:
001236r 4  A9 00        	lda #0
001238r 4  60           	rts
001239r 4               gm_colljtnochg:
001239r 4               	; no change in Y
001239r 4  A5 rr        	lda temp3
00123Br 4  38           	sec
00123Cr 4  E9 03        	sbc #3            ; take off the rest
00123Er 4  85 rr        	sta temp3
001240r 4  A5 rr        	lda player_y
001242r 4  C5 rr        	cmp temp3
001244r 4  F0 CC        	beq gm_collidefull; might be above or below, we only return collision if we're exactly
001246r 4  A9 00        	lda #0            ; on the platform's level.
001248r 4  60           	rts
001249r 4               
001249r 4               gm_collidespikes:
001249r 4  AA           	tax
00124Ar 4  A5 rr        	lda player_vl_y
00124Cr 4  30 E8        	bmi gm_collidenone; if player is going UP, then don't do collision checks at all.
00124Er 4  E0 01        	cpx #gc_ceil      ; if NOT moving up, then kill the player and return
001250r 4  F0 11        	beq gm_colliderts
001252r 4  E0 00        	cpx #gc_floor
001254r 4  D0 0E        	bne gm_collidespkw
001256r 4  18           	clc
001257r 4  A5 rr        	lda player_yo     ; get the player old Y position, MOD 8. the bottom pixel's
001259r 4  29 07        	and #$7           ; position is exactly the same as the player old Y position mod 8
00125Br 4  65 rr        	adc player_vl_y   ; add the Y velocity that was added to get to player_y.
00125Dr 4  C9 06        	cmp #$6           ; a spike's hit box is like 2 px tall
00125Fr 4  B0 09        	bcs gm_killplayer
001261r 4               gm_collideno:
001261r 4  A9 00        	lda #0            ; clear the zero flag
001263r 4               gm_colliderts:
001263r 4  60           	rts
001264r 4               gm_collidespkw:
001264r 4  A9 02        	lda #pl_ground
001266r 4  24 rr        	bit playerctrl
001268r 4  F0 F7        	beq gm_collideno  ; if wasn't grounded, then it's fine
00126Ar 4               	;jmp gm_killplayer
00126Ar 4               	; fall through to killplayer
00126Ar 4               
00126Ar 4               ; ** SUBROUTINE: gm_killplayer
00126Ar 4               ; desc:     Initiates the player death sequence.
00126Ar 4               gm_killplayer:
00126Ar 4  20 rr rr     	jsr gm_death_sfx
00126Dr 4  A9 20        	lda #pl_dead
00126Fr 4  05 rr        	ora playerctrl
001271r 4  85 rr        	sta playerctrl
001273r 4  A9 00        	lda #0
001275r 4  85 rr        	sta deathtimer
001277r 4  60           	rts
001278r 4               
001278r 4               ; ** SUBROUTINE: gm_applyy
001278r 4               ; desc:     Apply the velocity in the Y direction.
001278r 4               gm_velminus:
001278r 4  65 rr        	adc player_y      ; Velocity is minus. X contains whether the old position was >= $F0
00127Ar 4  85 rr        	sta player_y
00127Cr 4  C9 F0        	cmp #$F0
00127Er 4  B0 3F        	bcs gm_velapplied ; if the position is now more than #$F1, then we don't need to do anything
001280r 4  E0 00        	cpx #0            ; if X is 0, then the old position was < $F1, therefore we're done
001282r 4  F0 3B        	beq gm_velapplied
001284r 4  A9 F0        	lda #$F0
001286r 4  85 rr        	sta player_y      ; otherwise, cap our position up to $F1
001288r 4  4C rr rr     	jmp gm_velapplied
00128Br 4               
00128Br 4               gm_applyy:
00128Br 4  20 rr rr     	jsr gm_getleftx
00128Er 4  85 rr        	sta temp1
001290r 4  20 rr rr     	jsr gm_getrightx
001293r 4  85 rr        	sta temp2
001295r 4  A5 rr        	lda player_y
001297r 4  85 rr        	sta player_yo     ; backup the old Y position. Used for spike collision
001299r 4  C9 F0        	cmp #$F0
00129Br 4  2A           	rol               ; A = (A << 1) | carry [set if A >= $F0]
00129Cr 4  29 01        	and #1            ; A = A & 1
00129Er 4  AA           	tax               ; X = (player_y >= $F0)
00129Fr 4  A5 rr        	lda playerctrl
0012A1r 4  29 FD        	and #(pl_ground ^ $FF)
0012A3r 4  85 rr        	sta playerctrl    ; remove the grounded flag - it'll be added back if we are on the ground
0012A5r 4  18           	clc
0012A6r 4  A5 rr        	lda player_vs_y
0012A8r 4  65 rr        	adc player_sp_y
0012AAr 4  85 rr        	sta player_sp_y
0012ACr 4  A5 rr        	lda player_vl_y
0012AEr 4  30 C8        	bmi gm_velminus   ; if player_vl_y < 0, then handle the minus case separately
0012B0r 4  65 rr        	adc player_y      ; player_vl_y >= 0
0012B2r 4  85 rr        	sta player_y
0012B4r 4  C9 F0        	cmp #$F0          ; if A >= $F0 && X, then die
0012B6r 4  90 07        	bcc gm_velapplied
0012B8r 4  E0 01        	cpx #1
0012BAr 4  D0 AE        	bne gm_killplayer
0012BCr 4               
0012BCr 4               gm_leaveroomU_:
0012BCr 4  4C rr rr     	jmp gm_leaveroomU
0012BFr 4               
0012BFr 4               gm_velapplied:        ; this is the return label from gm_velminus4
0012BFr 4  A5 rr        	lda player_y
0012C1r 4  C9 F0        	cmp #$F0
0012C3r 4  B0 F7        	bcs gm_leaveroomU_
0012C5r 4  A5 rr        	lda player_vl_y
0012C7r 4  30 0A        	bmi gm_checkceil
0012C9r 4  4C rr rr     	jmp gm_checkfloor
0012CCr 4               
0012CCr 4               gm_fellout:           ; if the player fell out of the world
0012CCr 4  85 rr        	sta player_y
0012CEr 4  A5 rr        	lda player_vl_y
0012D0r 4  10 98        	bpl gm_killplayer
0012D2r 4  60           	rts
0012D3r 4               
0012D3r 4               gm_checkceil:
0012D3r 4  20 rr rr     	jsr gm_collentceil
0012D6r 4  D0 20        	bne @snapToCeilArbitrary
0012D8r 4               
0012D8r 4  20 rr rr     	jsr gm_gettopy
0012DBr 4  A8           	tay
0012DCr 4  84 rr        	sty y_crd_temp
0012DEr 4               
0012DEr 4  A6 rr        	ldx temp1         ; check block 1
0012E0r 4  A9 01        	lda #gc_ceil
0012E2r 4  20 rr rr     	jsr gm_collide
0012E5r 4  D0 0C        	bne @snapToCeil
0012E7r 4               
0012E7r 4  A4 rr        	ldy y_crd_temp    ; check block 2
0012E9r 4  A6 rr        	ldx temp2
0012EBr 4  A9 01        	lda #gc_ceil
0012EDr 4  20 rr rr     	jsr gm_collide
0012F0r 4  D0 01        	bne @snapToCeil
0012F2r 4               
0012F2r 4  60           	rts
0012F3r 4               
0012F3r 4               @snapToCeil:
0012F3r 4  A5 rr        	lda y_crd_temp    ; load the y position of the tile that was collided with
0012F5r 4  0A           	asl
0012F6r 4  0A           	asl
0012F7r 4  0A           	asl               ; turn it into a screen coordinate
0012F8r 4               
0012F8r 4               @snapToCeilArbitrary: ; snap to a ceiling whose position is arbitrary
0012F8r 4  18           	clc
0012F9r 4  69 02        	adc #(8-(16-plrheight)) ; add the height of the tile, minus the top Y offset of the player hitbox
0012FBr 4  85 rr        	sta player_y
0012FDr 4  A9 00        	lda #0            ; set the subpixel to zero
0012FFr 4  85 rr        	sta player_sp_y
001301r 4  85 rr        	sta player_vl_y   ; also clear the velocity
001303r 4  85 rr        	sta player_vs_y   ; since we ended up here it's clear that velocity was negative.
001305r 4  85 rr        	sta jcountdown    ; also clear the jump timer
001307r 4  60           	rts
001308r 4               
001308r 4               gm_checkfloor:
001308r 4  20 rr rr     	jsr gm_collentfloor
00130Br 4  D0 25        	bne @snapToFloorArbitrary
00130Dr 4               
00130Dr 4  20 rr rr     	jsr gm_getbottomy_f
001310r 4  A8           	tay               ; keep the Y position into the Y register
001311r 4  84 rr        	sty y_crd_temp
001313r 4               
001313r 4  A6 rr        	ldx temp1         ; check block 1
001315r 4  A9 00        	lda #gc_floor
001317r 4  20 rr rr     	jsr gm_collide
00131Ar 4  D0 0C        	bne @snapToFloor
00131Cr 4               
00131Cr 4  A4 rr        	ldy y_crd_temp    ; check block 2
00131Er 4  A6 rr        	ldx temp2
001320r 4  A9 00        	lda #gc_floor
001322r 4  20 rr rr     	jsr gm_collide
001325r 4  D0 01        	bne @snapToFloor
001327r 4  60           	rts
001328r 4               
001328r 4               @snapToFloor:
001328r 4  A9 F8        	lda #%11111000    ; round player's position to lower multiple of 8
00132Ar 4  25 rr        	and player_y
00132Cr 4  48           	pha
00132Dr 4  A9 00        	lda #0            ; set the subpixel to zero
00132Fr 4  85 rr        	sta player_sp_y
001331r 4  68           	pla
001332r 4               
001332r 4               @snapToFloorArbitrary:; snap to floor where the
001332r 4  85 rr        	sta player_y
001334r 4  A5 rr        	lda dashtime
001336r 4  C9 06        	cmp #(defdashtime-dashgrndtm)
001338r 4  B0 16        	bcs @done         ; until the player has started their dash, exempt from ground check
00133Ar 4  A9 02        	lda #pl_ground    ; set the grounded bit, only thing that can remove it is jumping
00133Cr 4  05 rr        	ora playerctrl
00133Er 4  29 EF        	and #(pl_dashed^$FF) ; clear the dashed flag
001340r 4  85 rr        	sta playerctrl
001342r 4  A9 06        	lda #defjmpcoyot
001344r 4  85 rr        	sta jumpcoyote    ; assign coyote time because we're on the ground
001346r 4  A9 00        	lda #0
001348r 4  85 rr        	sta wjumpcoyote   ; can't perform a wall jump while on the ground
00134Ar 4  85 rr        	sta player_vl_y
00134Cr 4  85 rr        	sta player_vs_y
00134Er 4  85 rr        	sta dashcount
001350r 4               @done:
001350r 4  60           	rts
001351r 4               
001351r 4               ; ** SUBROUTINE: gm_applyx
001351r 4               ; desc:    Apply the velocity in the X direction.
001351r 4               gm_applyx:
001351r 4  A5 rr        	lda player_x
001353r 4  85 rr        	sta player_xo
001355r 4               
001355r 4  18           	clc
001356r 4  A5 rr        	lda player_vl_x
001358r 4  2A           	rol                      ; store the upper bit in carry
001359r 4  A9 FF        	lda #$FF
00135Br 4  69 00        	adc #0                   ; add the carry bit if needed
00135Dr 4  49 FF        	eor #$FF                 ; flip it because we need the reverse
00135Fr 4  A8           	tay                      ; This is the "screenfuls" part that we need to add to the player position
001360r 4               
001360r 4  A5 rr        	lda playerctrl
001362r 4  29 FB        	and #(pl_pushing^$FF)
001364r 4  85 rr        	sta playerctrl           ; clear the pushing flag - it will be set on collision
001366r 4               
001366r 4  18           	clc
001367r 4  A5 rr        	lda player_vs_x
001369r 4  65 rr        	adc player_sp_x
00136Br 4  85 rr        	sta player_sp_x
00136Dr 4  A5 rr        	lda player_vl_x
00136Fr 4  65 rr        	adc player_x
001371r 4               
001371r 4  B0 09        	bcs @dontCheckOffs       ; If the addition didn't overflow, we need to detour.
001373r 4  A6 rr        	ldx player_vl_x          ; check if the velocity was positive
001375r 4  10 05        	bpl @dontCheckOffs       ; yeah, of course it wouldn't overflow, it's positive!
001377r 4  A9 00        	lda #0                   ; we have an underflow, means the player is trying to leave the screen
001379r 4  A0 00        	ldy #0                   ; through the left side. we can't let that happen!
00137Br 4  18           	clc                      ; zero out the player's new position
00137Cr 4               @dontCheckOffs:
00137Cr 4  85 rr        	sta player_x
00137Er 4  20 rr rr     	jsr gm_gettopy
001381r 4  85 rr        	sta temp1                ; temp1 - top Y
001383r 4  20 rr rr     	jsr gm_getbottomy_w
001386r 4  85 rr        	sta temp2                ; temp2 - bottom Y
001388r 4  A5 rr        	lda player_vl_x
00138Ar 4  30 5B        	bmi @checkLeft
00138Cr 4               
00138Cr 4               @checkRight:
00138Cr 4  A9 08        	lda #(maxvelxhi+2)
00138Er 4  85 rr        	sta temp10
001390r 4               
001390r 4               @checkRightLoop:
001390r 4  C6 rr        	dec temp10
001392r 4  F0 46        	beq @checkDone           ; nope, out of here with your stupid games
001394r 4  A5 rr        	lda player_x
001396r 4  C9 F0        	cmp #$F0
001398r 4  B0 47        	bcs @callLeaveRoomR      ; try to leave the room
00139Ar 4               
00139Ar 4               @doneLeavingRoom:
00139Ar 4  20 rr rr     	jsr gm_collentright
00139Dr 4  D0 1A        	bne @collidedRight
00139Fr 4               
00139Fr 4  20 rr rr     	jsr gm_getrightx
0013A2r 4  AA           	tax
0013A3r 4  86 rr        	stx y_crd_temp           ; note: x_crd_temp is clobbered by gm_collide!
0013A5r 4  A4 rr        	ldy temp1
0013A7r 4  A9 03        	lda #gc_right
0013A9r 4  20 rr rr     	jsr gm_collide
0013ACr 4  D0 0B        	bne @collidedRight       ; if collided, move a pixel back and try again
0013AEr 4               
0013AEr 4  A4 rr        	ldy temp2                ;  snapping to the nearest tile is a BIT more complicated so
0013B0r 4  A6 rr        	ldx y_crd_temp           ;  I will not bother
0013B2r 4  A9 03        	lda #gc_right
0013B4r 4  20 rr rr     	jsr gm_collide
0013B7r 4  F0 21        	beq @checkDone
0013B9r 4               
0013B9r 4               @collidedRight:
0013B9r 4  A2 00        	ldx #0                   ; set the velocity to a minuscule value to
0013BBr 4  86 rr        	stx player_vl_x          ; ensure the player doesn't look idle
0013BDr 4  E8           	inx
0013BEr 4  86 rr        	stx player_vs_x
0013C0r 4               
0013C0r 4  A5 rr        	lda playerctrl
0013C2r 4  09 04        	ora #pl_pushing
0013C4r 4  29 F7        	and #(pl_wallleft^$FF)   ; the wall wasn't found on the left.
0013C6r 4  85 rr        	sta playerctrl
0013C8r 4               
0013C8r 4  A9 03        	lda #defwjmpcoyo
0013CAr 4  85 rr        	sta wjumpcoyote
0013CCr 4  A6 rr        	ldx player_x
0013CEr 4  F0 0A        	beq @checkDone           ; if the player X is zero... we're stuck inside a wall
0013D0r 4               
0013D0r 4  CA           	dex
0013D1r 4  86 rr        	stx player_x
0013D3r 4  A2 FF        	ldx #$FF                 ; set the subpixel to $FF.  This allows our minuscule velocity to
0013D5r 4  86 rr        	stx player_sp_x          ; keep colliding with this wall every frame and allow the push action to continue
0013D7r 4  4C rr rr     	jmp @checkRightLoop      ; !! note: in case of a potential clip, this might cause lag frames!
0013DAr 4               	                         ; loops will be used to avoid this unfortunate case as much as possible.
0013DAr 4               ;
0013DAr 4               
0013DAr 4               @checkDone:
0013DAr 4  A5 rr        	lda player_vl_x
0013DCr 4  10 50        	bpl gm_scroll_r_cond    ; if moving positively, scroll if needed
0013DEr 4  4C rr rr     	jmp gm_scroll_l_cond
0013E1r 4               
0013E1r 4               @callLeaveRoomR:
0013E1r 4  20 rr rr     	jsr gm_leaveroomR
0013E4r 4  D0 B4        	bne @doneLeavingRoom
0013E6r 4  60           	rts
0013E7r 4               
0013E7r 4               @checkLeft:
0013E7r 4  A9 08        	lda #(maxvelxhi+2)
0013E9r 4  85 rr        	sta temp10
0013EBr 4               
0013EBr 4               @checkLeftLoop:
0013EBr 4  C6 rr        	dec temp10
0013EDr 4  F0 EB        	beq @checkDone           ; nope, out of here with your stupid games
0013EFr 4               
0013EFr 4  20 rr rr     	jsr gm_collentleft
0013F2r 4  D0 1A        	bne @collidedLeft
0013F4r 4               
0013F4r 4  20 rr rr     	jsr gm_getleftx
0013F7r 4  AA           	tax
0013F8r 4  86 rr        	stx y_crd_temp
0013FAr 4  A4 rr        	ldy temp1
0013FCr 4  A9 02        	lda #gc_left
0013FEr 4  20 rr rr     	jsr gm_collide
001401r 4  D0 0B        	bne @collidedLeft        ; if collided, move a pixel to the right & try again
001403r 4  A4 rr        	ldy temp2
001405r 4  A6 rr        	ldx y_crd_temp
001407r 4  A9 02        	lda #gc_left
001409r 4  20 rr rr     	jsr gm_collide
00140Cr 4  F0 CC        	beq @checkDone
00140Er 4               
00140Er 4               @collidedLeft:
00140Er 4  A2 FF        	ldx #$FF                 ; set the velocity to a minuscule value to
001410r 4  86 rr        	stx player_vl_x          ; ensure the player doesn't look idle
001412r 4  86 rr        	stx player_vs_x
001414r 4               
001414r 4  A5 rr        	lda playerctrl
001416r 4  09 0C        	ora #(pl_pushing | pl_wallleft) ; the wall was found on the left.
001418r 4  85 rr        	sta playerctrl
00141Ar 4               
00141Ar 4  A9 03        	lda #defwjmpcoyo
00141Cr 4  85 rr        	sta wjumpcoyote
00141Er 4  A6 rr        	ldx player_x
001420r 4  E0 F0        	cpx #$F0                 ; compare to [screenWidth-16]
001422r 4  B0 B6        	bcs @checkDone           ; if bigger or equal, just bail, we might be stuck in a wall
001424r 4  E8           	inx
001425r 4  86 rr        	stx player_x
001427r 4  A2 00        	ldx #0                   ; set the subpixel to 0.  This allows our minuscule velocity to
001429r 4  86 rr        	stx player_sp_x          ; keep colliding with this wall every frame and allow the push action to continue
00142Br 4  4C rr rr     	jmp @checkLeftLoop
00142Er 4               
00142Er 4               ; ** SUBROUTINE: gm_scroll_r_cond
00142Er 4               gm_scroll_r_cond:
00142Er 4  A5 rr        	lda player_x
001430r 4  C9 78        	cmp #scrolllimit
001432r 4  90 62        	bcc @scrollRet    ; A < scrolllimit
001434r 4  F0 60        	beq @scrollRet    ; A = scrolllimit
001436r 4  38           	sec
001437r 4  E9 78        	sbc #scrolllimit
001439r 4  C9 08        	cmp #camspeed     ; see the difference we need to scroll
00143Br 4  90 02        	bcc @noFix        ; A < camspeed
00143Dr 4  A9 08        	lda #camspeed
00143Fr 4               @noFix:               ; A now contains the delta we need to scroll by
00143Fr 4  85 rr        	sta temp1
001441r 4  18           	clc
001442r 4  AA           	tax               ; save the delta as we'll need it later
001443r 4  65 rr        	adc camera_x      ; add the delta to the camera X
001445r 4  85 rr        	sta camera_x
001447r 4  A9 00        	lda #0
001449r 4  65 rr        	adc camera_x_pg
00144Br 4  85 rr        	sta camera_x_pg
00144Dr 4  29 01        	and #1
00144Fr 4  85 rr        	sta camera_x_hi
001451r 4  A9 08        	lda #gs_scrstopR  ; check if we overstepped the camera boundary, if needed
001453r 4  24 rr        	bit gamectrl
001455r 4  F0 27        	beq @noLimit
001457r 4               
001457r 4  A5 rr        	lda camlimit
001459r 4  85 rr        	sta scrchklo
00145Br 4  A5 rr        	lda camlimithi
00145Dr 4  85 rr        	sta scrchkhi
00145Fr 4  A5 rr        	lda camlimithi    ; check if [camlimithi,camlimit] < [camera_x_hi,camera_x]
001461r 4  C5 rr        	cmp camera_x_hi
001463r 4  B0 0C        	bcs :+
001465r 4  A5 rr        	lda camlimit
001467r 4  C5 rr        	cmp camera_x
001469r 4  B0 06        	bcs :+
00146Br 4  A9 02        	lda #2            ; note: carry clear here
00146Dr 4  65 rr        	adc scrchkhi
00146Fr 4  85 rr        	sta scrchkhi
001471r 4  38           :	sec
001472r 4  A5 rr        	lda scrchklo
001474r 4  E5 rr        	sbc camera_x
001476r 4  85 rr        	sta scrchklo
001478r 4  A5 rr        	lda scrchkhi
00147Ar 4  E5 rr        	sbc camera_x_hi
00147Cr 4  30 23        	bmi @camXLimited
00147Er 4               	;sta scrchkhi
00147Er 4               
00147Er 4               @noLimit:
00147Er 4               	;lda #scrolllimit  ; set the player's X relative-to-the-camera to scrolllimit
00147Er 4  A5 rr        	lda player_x
001480r 4  38           	sec
001481r 4  E5 rr        	sbc temp1
001483r 4  85 rr        	sta player_x
001485r 4  8A           	txa               ; restore the delta to add to camera_rev
001486r 4  48           	pha
001487r 4  A5 rr        	lda temp1
001489r 4  20 rr rr     	jsr gm_shifttrace
00148Cr 4  68           	pla
00148Dr 4  18           	clc
00148Er 4  65 rr        	adc camera_rev
001490r 4  85 rr        	sta camera_rev
001492r 4  C9 08        	cmp #8
001494r 4  B0 01        	bcs @goGenerate   ; if camera_rev+diff < 8 return
001496r 4               @scrollRet:
001496r 4  60           	rts
001497r 4               @goGenerate:
001497r 4  A5 rr        	lda camera_rev    ; subtract 8 from camera_rev
001499r 4  38           	sec
00149Ar 4  E9 08        	sbc #8
00149Cr 4  85 rr        	sta camera_rev
00149Er 4  4C rr rr     	jmp h_gener_col_r
0014A1r 4               @camXLimited:
0014A1r 4  A5 rr        	lda camlimithi
0014A3r 4  85 rr        	sta camera_x_hi
0014A5r 4  A5 rr        	lda camlimit
0014A7r 4  85 rr        	sta camera_x
0014A9r 4  A9 04        	lda #gs_scrstodR
0014ABr 4  24 rr        	bit gamectrl
0014ADr 4  D0 04        	bne :+
0014AFr 4  05 rr        	ora gamectrl
0014B1r 4  85 rr        	sta gamectrl
0014B3r 4  60           :	rts
0014B4r 4               
0014B4r 4               ; ** SUBROUTINE: gm_scroll_l_cond
0014B4r 4               gm_scroll_l_cond:
0014B4r 4  A5 rr        	lda roomsize
0014B6r 4  F0 4D        	beq @scrollRet    ; if this is a "long" room, then we CANNOT scroll left.
0014B8r 4               
0014B8r 4  A5 rr        	lda player_x
0014BAr 4  C9 78        	cmp #scrolllimit
0014BCr 4  B0 47        	bcs @scrollRet
0014BEr 4               	;bcc @scrollRet
0014BEr 4               
0014BEr 4  A9 78        	lda #scrolllimit
0014C0r 4  38           	sec
0014C1r 4  E5 rr        	sbc player_x
0014C3r 4  C9 08        	cmp #camspeed     ; see the difference we need to scroll
0014C5r 4  90 02        	bcc @noFix
0014C7r 4  A9 08        	lda #camspeed
0014C9r 4               @noFix:
0014C9r 4  85 rr        	sta temp1
0014CBr 4               
0014CBr 4  A9 FB        	lda #(gs_scrstodR^$FF)
0014CDr 4  25 rr        	and gamectrl
0014CFr 4  85 rr        	sta gamectrl
0014D1r 4               
0014D1r 4  38           	sec
0014D2r 4  A5 rr        	lda camera_x
0014D4r 4  AA           	tax               ; save the delta as we'll need it later
0014D5r 4  E5 rr        	sbc temp1         ; take the delta from the camera X
0014D7r 4  85 rr        	sta camera_x
0014D9r 4  A5 rr        	lda camera_x_pg
0014DBr 4  E9 00        	sbc #0
0014DDr 4  30 27        	bmi @limit
0014DFr 4               
0014DFr 4  85 rr        	sta camera_x_pg
0014E1r 4  29 01        	and #1
0014E3r 4  85 rr        	sta camera_x_hi
0014E5r 4               
0014E5r 4  A5 rr        	lda roombeglo
0014E7r 4  85 rr        	sta scrchklo
0014E9r 4  A5 rr        	lda roombeghi
0014EBr 4  85 rr        	sta scrchkhi
0014EDr 4               
0014EDr 4  A5 rr        	lda roombeghi     ; check if [roombeghi, roombeglo] < [camera_x_pg, camera_x]
0014EFr 4  C5 rr        	cmp camera_x_pg
0014F1r 4  D0 04        	bne :+
0014F3r 4  A5 rr        	lda roombeglo
0014F5r 4  C5 rr        	cmp camera_x
0014F7r 4               :	; if roombeg > cameraX then limit
0014F7r 4  B0 0D        	bcs @limit
0014F9r 4               
0014F9r 4               	; no limitation. also move the PLAYER's x coordinate
0014F9r 4               @shouldNotLimit:
0014F9r 4  A5 rr        	lda player_x
0014FBr 4  18           	clc
0014FCr 4  65 rr        	adc temp1
0014FEr 4  85 rr        	sta player_x
001500r 4               
001500r 4  A5 rr        	lda temp1
001502r 4  20 rr rr     	jsr gm_shiftrighttrace
001505r 4               
001505r 4               @scrollRet:
001505r 4  60           	rts
001506r 4               
001506r 4               @limit:
001506r 4  A5 rr        	lda roombeglo
001508r 4  85 rr        	sta camera_x
00150Ar 4  A5 rr        	lda roombeghi
00150Cr 4  85 rr        	sta camera_x_pg
00150Er 4  29 01        	and #1
001510r 4  85 rr        	sta camera_x_hi
001512r 4  60           	rts
001513r 4               
001513r 4               ; ** SUBROUTINE: gm_checkwjump
001513r 4               ; desc: Assigns coyote time if wall is detected near the player.
001513r 4               gm_checkwjump:
001513r 4  A9 02        	lda #pl_ground
001515r 4  24 rr        	bit playerctrl
001517r 4  D0 35        	bne @dontSet             ; if player is grounded, simply return
001519r 4               
001519r 4  20 rr rr     	jsr gm_getmidy
00151Cr 4  85 rr        	sta y_crd_temp
00151Er 4               
00151Er 4               	; left side
00151Er 4  20 rr rr     	jsr gm_wjckentleft
001521r 4  D0 2C        	bne @setL
001523r 4               
001523r 4  A4 rr        	ldy y_crd_temp
001525r 4  20 rr rr     	jsr gm_getleftwjx
001528r 4  AA           	tax
001529r 4  A9 02        	lda #gc_left
00152Br 4  20 rr rr     	jsr gm_collide
00152Er 4  D0 1F        	bne @setL
001530r 4  A4 rr        	ldy y_crd_temp
001532r 4               
001532r 4               	; right side
001532r 4  20 rr rr     	jsr gm_wjckentright
001535r 4  D0 13        	bne @set
001537r 4               
001537r 4  A4 rr        	ldy y_crd_temp
001539r 4  20 rr rr     	jsr gm_getrightwjx
00153Cr 4  AA           	tax
00153Dr 4  A9 03        	lda #gc_right
00153Fr 4  20 rr rr     	jsr gm_collide
001542r 4  F0 0A        	beq @dontSet
001544r 4               
001544r 4  A5 rr        	lda playerctrl
001546r 4  29 F7        	and #(pl_wallleft^$FF)
001548r 4  85 rr        	sta playerctrl           ; set that a wall was found on the RIGHT side
00154Ar 4               @set:
00154Ar 4  A9 03        	lda #defwjmpcoyo
00154Cr 4  85 rr        	sta wjumpcoyote
00154Er 4               @dontSet:
00154Er 4  60           	rts
00154Fr 4               @setL:
00154Fr 4  A5 rr        	lda playerctrl
001551r 4  09 08        	ora #pl_wallleft
001553r 4  85 rr        	sta playerctrl           ; set that a wall was found on the LEFT side
001555r 4  4C rr rr     	jmp @set
001558r 4               
001558r 4               ; ** SUBROUTINE: gm_calchorzplat
001558r 4               ; desc: Calculates the edges of a platform entity in plattemp1, plattemp2, screen coordinates.
001558r 4               ;       These can be used to check whether the player is standing on a platform.
001558r 4               ; arguments: Y register - the index of the Entity
001558r 4               ; returns:   plattemp1 - Left edge, plattemp2 - Right edge, ZF - Are they valid
001558r 4               gm_calchorzplat:
001558r 4               	; TODO: Needs more testing, like, a lot more testing.
001558r 4               
001558r 4               	; LEFT edge.
001558r 4  B9 rr rr     	lda sprspace+sp_x, y
00155Br 4  E5 rr        	sbc camera_x
00155Dr 4  85 rr        	sta plattemp1
00155Fr 4               
00155Fr 4  B9 rr rr     	lda sprspace+sp_x_pg, y
001562r 4  E5 rr        	sbc camera_x_pg
001564r 4  85 rr        	sta temp4
001566r 4  30 04        	bmi @isMinus              ; the difference is <0, therefore partly offscreen. set left pos to 0.
001568r 4  D0 2C        	bne @noHitBox             ; the difference is >0, therefore off screen.
00156Ar 4  F0 04        	beq @isNotMinus           ; the difference is =0. Skip the code below. I dislike that I have to do this.
00156Cr 4               
00156Cr 4               @isMinus:
00156Cr 4  A9 00        	lda #0
00156Er 4  85 rr        	sta plattemp1
001570r 4               @isNotMinus:
001570r 4               
001570r 4               	; RIGHT edge.
001570r 4  B9 rr rr     	lda sprspace+sp_x, y
001573r 4  18           	clc
001574r 4  79 rr rr     	adc sprspace+sp_wid, y
001577r 4  85 rr        	sta plattemp2
001579r 4               
001579r 4  B9 rr rr     	lda sprspace+sp_x_pg, y
00157Cr 4  69 00        	adc #0
00157Er 4  85 rr        	sta temp4
001580r 4               
001580r 4  A5 rr        	lda plattemp2
001582r 4  38           	sec
001583r 4  E5 rr        	sbc camera_x
001585r 4  85 rr        	sta plattemp2
001587r 4               
001587r 4  A5 rr        	lda temp4
001589r 4  E5 rr        	sbc camera_x_pg
00158Br 4  30 09        	bmi @noHitBox            ; the entire hitbox went over the left edge, therefore entirely off screen.
00158Dr 4  F0 04        	beq :+                   ; if it's >0, means the edge wrapped over to outside the screen, therefore load the max
00158Fr 4  A9 FF        	lda #$FF
001591r 4  85 rr        	sta plattemp2
001593r 4  A9 01        :	lda #1
001595r 4  60           	rts
001596r 4               
001596r 4               @noHitBox:
001596r 4  A9 00        	lda #0
001598r 4  60           	rts
001599r 4               
001599r 4               ; ** SUBROUTINE: gm_collentfloor
001599r 4               ; desc: Checks ground collision with entities.
001599r 4               ; note: can't use: temp1, temp2
001599r 4               ; note: Currently this only detects the first sprite the player has collided with,
001599r 4               ;       not the closest.
001599r 4               ; returns: ZF - the player has collided (BNE). A - the Y position of the floor minus 16
001599r 4               gm_collentfloor:
001599r 4  A0 FF        	ldy #$FF
00159Br 4  84 rr        	sty entground
00159Dr 4  C8           	iny
00159Er 4               @loop:
00159Er 4  A9 01        	lda #ef_collidable
0015A0r 4  39 rr rr     	and sprspace+sp_flags, y ; if the flag isn't set then why should we bother?
0015A3r 4  F0 36        	beq @noHitBox
0015A5r 4               
0015A5r 4               	; also check the type
0015A5r 4  B9 rr rr     	lda sprspace+sp_kind, y
0015A8r 4  F0 31        	beq @noHitBox
0015AAr 4               
0015AAr 4               	; check if the bottom of the player's hit box is between the top and bottom of this platform.
0015AAr 4  A5 rr        	lda player_y
0015ACr 4  18           	clc
0015ADr 4  69 10        	adc #$10
0015AFr 4  85 rr        	sta temp4
0015B1r 4               
0015B1r 4  B9 rr rr     	lda sprspace+sp_y, y
0015B4r 4  C5 rr        	cmp temp4
0015B6r 4  90 04        	bcc :+                    ; sprites[y].y <= player_y + $10
0015B8r 4  F0 02        	beq :+
0015BAr 4  D0 1F        	bne @noHitBox
0015BCr 4               
0015BCr 4  18           :	clc
0015BDr 4  79 rr rr     	adc sprspace+sp_hei, y
0015C0r 4  C5 rr        	cmp temp4
0015C2r 4  90 17        	bcc @noHitBox             ; sprites[y].y + sprites[y].height <= player_y + $10
0015C4r 4               
0015C4r 4  20 rr rr     	jsr gm_calchorzplat
0015C7r 4  F0 12        	beq @noHitBox
0015C9r 4               
0015C9r 4               	; ok. now do the checks themselves.
0015C9r 4  A5 rr        	lda player_x
0015CBr 4  18           	clc
0015CCr 4  69 0B        	adc #(7+plrwidth/2)
0015CEr 4  C5 rr        	cmp plattemp1
0015D0r 4  90 09        	bcc @noHitBox            ; playerX + 8 + plrWidth/2 < platformLeftEdge
0015D2r 4               
0015D2r 4  A5 rr        	lda player_x
0015D4r 4  38           	sec
0015D5r 4  69 04        	adc #(8-plrwidth/2)
0015D7r 4  C5 rr        	cmp plattemp2
0015D9r 4  90 06        	bcc @haveHitBox          ; playerX + 8 - plrWidth/2 + 1 >= platformRightEdge
0015DBr 4               
0015DBr 4               @noHitBox:
0015DBr 4  C8           	iny
0015DCr 4  C0 10        	cpy #sp_max
0015DEr 4  D0 BE        	bne @loop
0015E0r 4               	; note: here, the zero flag is set. Means there was no collision
0015E0r 4  60           	rts
0015E1r 4               
0015E1r 4               @haveHitBox:
0015E1r 4               	; Have a hitbox!
0015E1r 4  84 rr        	sty entground
0015E3r 4  B9 rr rr     	lda sprspace+sp_y_lo, y
0015E6r 4  85 rr        	sta player_sp_y
0015E8r 4  B9 rr rr     	lda sprspace+sp_y, y
0015EBr 4  38           	sec
0015ECr 4  E9 10        	sbc #$10
0015EEr 4  A2 01        	ldx #1                   ; load X to 1 to clear the zero flag. probably superfluous
0015F0r 4  60           	rts
0015F1r 4               
0015F1r 4               ; ** SUBROUTINE: gm_collentceil
0015F1r 4               ; desc: Checks ceiling collision with entities.
0015F1r 4               ; note: can't use: temp1, temp2
0015F1r 4               ; note: Currently this only detects the first sprite the player has collided with,
0015F1r 4               ;       not the closest.
0015F1r 4               ; returns: ZF - the player has collided (BNE). A - ceilingY + entityHeight - 8
0015F1r 4               gm_collentceil:
0015F1r 4  A0 FF        	ldy #$FF
0015F3r 4  84 rr        	sty entground
0015F5r 4  C8           	iny
0015F6r 4               @loop:
0015F6r 4  A9 01        	lda #ef_collidable
0015F8r 4  39 rr rr     	and sprspace+sp_flags, y ; if the flag isn't set then why should we bother?
0015FBr 4  F0 36        	beq @noHitBox
0015FDr 4               
0015FDr 4               	; also check the type
0015FDr 4  B9 rr rr     	lda sprspace+sp_kind, y
001600r 4  F0 31        	beq @noHitBox
001602r 4               
001602r 4               	; check if the top of the player's hit box is between the top and bottom of this platform.
001602r 4  A5 rr        	lda player_y
001604r 4  18           	clc
001605r 4  69 06        	adc #(16-plrheight)
001607r 4  85 rr        	sta temp4
001609r 4               
001609r 4  B9 rr rr     	lda sprspace+sp_y, y
00160Cr 4  C5 rr        	cmp temp4
00160Er 4  90 04        	bcc :+                    ; sprites[y].y <= player_y
001610r 4  F0 02        	beq :+
001612r 4  D0 1F        	bne @noHitBox
001614r 4               
001614r 4  18           :	clc
001615r 4  79 rr rr     	adc sprspace+sp_hei, y
001618r 4  C5 rr        	cmp temp4
00161Ar 4  90 17        	bcc @noHitBox             ; sprites[y].y + sprites[y].height <= player_y
00161Cr 4               	;beq @noHitBox
00161Cr 4               
00161Cr 4  20 rr rr     	jsr gm_calchorzplat
00161Fr 4  F0 12        	beq @noHitBox
001621r 4               
001621r 4               	; ok. now do the checks themselves.
001621r 4  A5 rr        	lda player_x
001623r 4  18           	clc
001624r 4  69 0B        	adc #(7+plrwidth/2)
001626r 4  C5 rr        	cmp plattemp1
001628r 4  90 09        	bcc @noHitBox            ; playerX + 8 + plrWidth/2 < platformLeftEdge
00162Ar 4               
00162Ar 4  A5 rr        	lda player_x
00162Cr 4  38           	sec
00162Dr 4  69 04        	adc #(8-plrwidth/2)
00162Fr 4  C5 rr        	cmp plattemp2
001631r 4  90 06        	bcc @haveHitBox          ; playerX + 8 - plrWidth/2 + 1 >= platformRightEdge
001633r 4               
001633r 4               @noHitBox:
001633r 4  C8           	iny
001634r 4  C0 10        	cpy #sp_max
001636r 4  D0 BE        	bne @loop
001638r 4               	; note: here, the zero flag is set. Means there was no collision
001638r 4  60           	rts
001639r 4               
001639r 4               @haveHitBox:
001639r 4               	; Have a hitbox!
001639r 4  84 rr        	sty entground
00163Br 4  B9 rr rr     	lda sprspace+sp_y, y
00163Er 4  18           	clc
00163Fr 4  79 rr rr     	adc sprspace+sp_hei, y
001642r 4  38           	sec
001643r 4  E9 07        	sbc #$7
001645r 4  A2 01        	ldx #1                   ; load X to 1 to clear the zero flag. probably superfluous
001647r 4  60           	rts
001648r 4               
001648r 4               ; ** SUBROUTINE: gm_collentleft
001648r 4               ; ** SUBROUTINE: gm_collentright
001648r 4               ; ** SUBROUTINE: gm_wjckentleft
001648r 4               ; ** SUBROUTINE: gm_wjckentright
001648r 4               ; desc: Wrappers for gm_collentside.
001648r 4               ;       gm_coll* check regular collision, gm_wjck* check for wall jump ability.
001648r 4               ; clobbers: temp5, temp6, temp7
001648r 4               gm_collentleft:
001648r 4  A9 04        	lda #plr_x_left
00164Ar 4  85 rr        	sta temp5
00164Cr 4  A9 06        	lda #plr_y_top
00164Er 4  85 rr        	sta temp6
001650r 4  A9 0E        	lda #plr_y_bot_wall
001652r 4  85 rr        	sta temp7
001654r 4  4C rr rr     	jmp gm_collentside
001657r 4               
001657r 4               gm_collentright:
001657r 4  A9 0B        	lda #plr_x_right
001659r 4  85 rr        	sta temp5
00165Br 4  A9 06        	lda #plr_y_top
00165Dr 4  85 rr        	sta temp6
00165Fr 4  A9 0E        	lda #plr_y_bot_wall
001661r 4  85 rr        	sta temp7
001663r 4  4C rr rr     	jmp gm_collentside
001666r 4               
001666r 4               gm_wjckentleft:
001666r 4  A9 01        	lda #plr_x_wj_left
001668r 4  85 rr        	sta temp5
00166Ar 4  A9 06        	lda #plr_y_top
00166Cr 4  85 rr        	sta temp6
00166Er 4  A9 0E        	lda #plr_y_bot_wall
001670r 4  85 rr        	sta temp7
001672r 4  4C rr rr     	jmp gm_collentside
001675r 4               
001675r 4               gm_wjckentright:
001675r 4  A9 0E        	lda #plr_x_wj_right
001677r 4  85 rr        	sta temp5
001679r 4  A9 06        	lda #plr_y_top
00167Br 4  85 rr        	sta temp6
00167Dr 4  A9 0E        	lda #plr_y_bot_wall
00167Fr 4  85 rr        	sta temp7
001681r 4               	;jmp gm_collentside
001681r 4               
001681r 4               ; ** SUBROUTINE: gm_collentside
001681r 4               ; desc: Checks rightward collision with entities.
001681r 4               ; note: can't use: temp1, temp2, temp7
001681r 4               ; note: Currently this only detects the first sprite the player has collided with,
001681r 4               ;       not the closest.
001681r 4               ; parameters: temp5 (offset for player X), temp6 (offset for player Y), temp7 (second offset for player Y)
001681r 4               ; returns: ZF - the player has collided (BNE)
001681r 4               gm_collentside:
001681r 4  A0 00        	ldy #0
001683r 4               @loop:
001683r 4  A9 01        	lda #ef_collidable
001685r 4  39 rr rr     	and sprspace+sp_flags, y ; if the flag isn't set then why should we bother?
001688r 4  F0 43        	beq @noHitBox
00168Ar 4               
00168Ar 4               	; also check the type
00168Ar 4  B9 rr rr     	lda sprspace+sp_kind, y
00168Dr 4  F0 3E        	beq @noHitBox
00168Fr 4               
00168Fr 4               	; do we touch the wall with EITHER top or bottom?
00168Fr 4  A5 rr        	lda player_y
001691r 4  18           	clc
001692r 4  65 rr        	adc temp6
001694r 4  20 rr rr     	jsr gm_checkthisenty
001697r 4  D0 0A        	bne @isHitting
001699r 4               
001699r 4  A5 rr        	lda player_y
00169Br 4  18           	clc
00169Cr 4  65 rr        	adc temp7
00169Er 4  20 rr rr     	jsr gm_checkthisenty
0016A1r 4  F0 2A        	beq @noHitBox
0016A3r 4               
0016A3r 4               @isHitting:
0016A3r 4  B9 rr rr     	lda sprspace+sp_x, y
0016A6r 4  38           	sec
0016A7r 4  E5 rr        	sbc camera_x
0016A9r 4  85 rr        	sta temp4
0016ABr 4               
0016ABr 4  B9 rr rr     	lda sprspace+sp_x_pg, y
0016AEr 4  E5 rr        	sbc camera_x_pg
0016B0r 4  D0 1B        	bne @noHitBox
0016B2r 4               
0016B2r 4  A5 rr        	lda player_x
0016B4r 4  18           	clc
0016B5r 4  65 rr        	adc temp5
0016B7r 4  C5 rr        	cmp temp4
0016B9r 4  90 12        	bcc @noHitBox
0016BBr 4               
0016BBr 4  48           	pha
0016BCr 4  A5 rr        	lda temp4
0016BEr 4  18           	clc
0016BFr 4  79 rr rr     	adc sprspace+sp_wid, y
0016C2r 4  90 02        	bcc :+
0016C4r 4  A9 FF        	lda #$FF
0016C6r 4  85 rr        :	sta temp4
0016C8r 4               
0016C8r 4  68           	pla
0016C9r 4  C5 rr        	cmp temp4
0016CBr 4  90 06        	bcc @haveHitBox
0016CDr 4               
0016CDr 4               @noHitBox:
0016CDr 4  C8           	iny
0016CEr 4  C0 10        	cpy #sp_max
0016D0r 4  D0 B1        	bne @loop
0016D2r 4               	; note: here, the zero flag is set. Means there was no collision
0016D2r 4  60           	rts
0016D3r 4               
0016D3r 4               @haveHitBox:
0016D3r 4  A2 01        	ldx #1                   ; load X to 1 to clear the zero flag. probably superfluous
0016D5r 4  60           	rts
0016D6r 4               
0016D6r 4               ; ** SUBROUTINE: gm_checkthisenty
0016D6r 4               ; desc:       Checks if the Y value provided in the A register is inside of the current entity.
0016D6r 4               ; parameters: A register - the Y value to check, Y register - the index of the entity.
0016D6r 4               ; returns:    ZF - is inside the entity (BNE).
0016D6r 4               ; clobbers:   A, temp4
0016D6r 4               gm_checkthisenty:
0016D6r 4  D9 rr rr     	cmp sprspace+sp_y, y
0016D9r 4  90 10        	bcc @noHitBox
0016DBr 4  85 rr        	sta temp4
0016DDr 4               
0016DDr 4  B9 rr rr     	lda sprspace+sp_y, y
0016E0r 4  18           	clc
0016E1r 4  79 rr rr     	adc sprspace+sp_hei, y
0016E4r 4  C5 rr        	cmp temp4
0016E6r 4  90 03        	bcc @noHitBox             ; sprites[y].y + sprites[y].height <= player_y + $10
0016E8r 4               
0016E8r 4  A9 01        	lda #1
0016EAr 4  60           	rts
0016EBr 4               
0016EBr 4               @noHitBox:
0016EBr 4  A9 00        	lda #0
0016EDr 4  60           	rts
0016EEr 4               
0016EEr 4               gm_dash_lock:
0016EEr 4  A2 00        	ldx #0
0016F0r 4  86 rr        	stx player_vl_x
0016F2r 4  86 rr        	stx player_vl_y
0016F4r 4  86 rr        	stx player_vs_x
0016F6r 4  86 rr        	stx player_vs_y
0016F8r 4  4C rr rr     	jmp gm_dash_update_done
0016FBr 4               
0016FBr 4               gm_dash_over:
0016FBr 4               	; dash has terminated.
0016FBr 4               
0016FBr 4               	; if (DashDir.Y <= 0f) Speed = DashDir * 160f (when begun, it would be DashDir * 240f)
0016FBr 4  A9 10        	lda #(cont_down << 2)
0016FDr 4  24 rr        	bit dashdir
0016FFr 4  D0 0A        	bne :+
001701r 4               
001701r 4  20 rr rr     	jsr gm_rem25pcvel
001704r 4               
001704r 4               	; if (Speed.Y < 0f) Speed.Y *= 0.75f;
001704r 4  A5 rr        	lda player_vl_y
001706r 4  10 03        	bpl :+
001708r 4  20 rr rr     	jsr gm_rem25pcvelYonly
00170Br 4               
00170Br 4  4C rr rr     :	jmp gm_dash_update_done
00170Er 4               
00170Er 4               gm_defaultdir:
00170Er 4  A0 00        	ldy #0                  ; player will not be dashing up or down
001710r 4  A9 01        	lda #pl_left
001712r 4  25 rr        	and playerctrl          ; bit 0 will be the facing direction
001714r 4  38           	sec                     ; shift it left by 1 and append a 1
001715r 4  2A           	rol                     ; this will result in either 1 or 3. we handle the L+R case by dashing left
001716r 4  4C rr rr     	jmp gm_dash_nodir
001719r 4               
001719r 4               gm_superjump:
001719r 4  A9 02        	lda #pl_ground
00171Br 4  24 rr        	bit playerctrl
00171Dr 4  F0 3A        	beq @return            ; if player wasn't grounded, then ...
00171Fr 4  A9 10        	lda #(cont_down << 2)  ; if she was dashing down
001721r 4  24 rr        	bit dashdir
001723r 4  F0 0A        	beq @normal
001725r 4               	; half the jump height here
001725r 4  A9 FF        	lda #sjumpvelHI
001727r 4  85 rr        	sta player_vl_y
001729r 4  A9 20        	lda #sjumpvelLO
00172Br 4  85 rr        	sta player_vs_y
00172Dr 4  D0 08        	bne @continue
00172Fr 4               @normal:
00172Fr 4  A9 FE        	lda #jumpvelHI
001731r 4  85 rr        	sta player_vl_y
001733r 4  A9 40        	lda #jumpvelLO
001735r 4  85 rr        	sta player_vs_y         ; super jump speed is the same as normal jump speed
001737r 4               @continue:
001737r 4  A9 04        	lda #superjmphhi
001739r 4  85 rr        	sta player_vl_x
00173Br 4  A9 55        	lda #superjmphlo
00173Dr 4  85 rr        	sta player_vs_x
00173Fr 4  A9 01        	lda #pl_left
001741r 4  24 rr        	bit playerctrl
001743r 4  F0 0C        	beq :+
001745r 4  A5 rr        	lda player_vl_x
001747r 4  49 FF        	eor #$FF
001749r 4  85 rr        	sta player_vl_x
00174Br 4  A5 rr        	lda player_vs_x
00174Dr 4  49 FF        	eor #$FF
00174Fr 4  85 rr        	sta player_vs_x
001751r 4  A9 0C        :	lda #jumpsustain
001753r 4  85 rr        	sta jcountdown
001755r 4  A9 00        	lda #0
001757r 4  85 rr        	sta dashtime            ; no longer dashing. do this to avoid our speed being taken away.
001759r 4               @return:
001759r 4  60           	rts
00175Ar 4               
00175Ar 4               gm_dash_update:
00175Ar 4  C6 rr        	dec dashtime
00175Cr 4  F0 9D        	beq gm_dash_over        ; if dashtime is now 0, then finish the dash
00175Er 4  C9 0A        	cmp #(defdashtime-dashchrgtm)
001760r 4  F0 05        	beq gm_dash_read_cont   ; if it isn't exactly defdashtime-dashchrgtm, let physics run its course
001762r 4  B0 8A        	bcs gm_dash_lock        ; dash hasn't charged
001764r 4  4C rr rr     	jmp gm_dash_after
001767r 4               gm_dash_read_cont:
001767r 4  20 rr rr     	jsr gm_dash_sfx
00176Ar 4  A9 06        	lda #6
00176Cr 4  85 rr        	sta quaketimer
00176Er 4  A5 rr        	lda p1_cont
001770r 4  29 0F        	and #%00001111          ; check if holding any direction
001772r 4  F0 9A        	beq gm_defaultdir       ; if not, determine the dash direction from the facing direction
001774r 4  A5 rr        	lda p1_cont
001776r 4  29 0F        	and #%00001111          ; get all directional flags
001778r 4               	; if horizontal flags are 0, then the vertical flags must NOT be zero, otherwise we ended up in gm_defaultdir
001778r 4               gm_dash_nodir:
001778r 4  85 rr        	sta quakeflags
00177Ar 4  0A           	asl
00177Br 4  0A           	asl                     ; multiply by four
00177Cr 4  AA           	tax                     ; this is now an index into the dash_table
00177Dr 4  86 rr        	stx dashdir
00177Fr 4               	; assign all the velocities
00177Fr 4  BD rr rr     	lda dash_table, x
001782r 4  85 rr        	sta player_vl_x
001784r 4  48           	pha
001785r 4  E8           	inx
001786r 4  BD rr rr     	lda dash_table, x
001789r 4  85 rr        	sta player_vs_x
00178Br 4  E8           	inx
00178Cr 4  BD rr rr     	lda dash_table, x
00178Fr 4  85 rr        	sta player_vl_y
001791r 4  E8           	inx
001792r 4  BD rr rr     	lda dash_table, x
001795r 4  85 rr        	sta player_vs_y
001797r 4  E8           	inx
001798r 4               	; we pushed the value of player_vl_x such that it can be quickly loaded and checked
001798r 4  68           	pla
001799r 4  10 3F        	bpl gm_dash_update_done
00179Br 4               	; dashing left
00179Br 4  A5 rr        	lda playerctrl
00179Dr 4  09 01        	ora #pl_left
00179Fr 4  85 rr        	sta playerctrl
0017A1r 4  4C rr rr     	jmp gm_dash_update_done
0017A4r 4               gm_dash_after:
0017A4r 4               	; this label is reached when the dash is "completed", i.e. it gives no more
0017A4r 4               	; boost to the player and physics are enabled.
0017A4r 4  A9 03        	lda #%00000011
0017A6r 4  24 rr        	bit p1_cont
0017A8r 4  F0 0E        	beq gm_dash_noflip  ; not pressing a direction, so no need to flip the character
0017AAr 4  A5 rr        	lda playerctrl
0017ACr 4  09 01        	ora #pl_left
0017AEr 4  85 rr        	sta playerctrl      ; set the left bit...
0017B0r 4  A9 01        	lda #cont_right     ; assumes cont_right == 1
0017B2r 4  25 rr        	and p1_cont
0017B4r 4  45 rr        	eor playerctrl
0017B6r 4  85 rr        	sta playerctrl      ; so that, if right is pressed, then we can flip it back
0017B8r 4               gm_dash_noflip:
0017B8r 4  A5 rr        	lda jumpcoyote
0017BAr 4  F0 07        	beq gm_dash_nosj
0017BCr 4  A5 rr        	lda jumpbuff
0017BEr 4  F0 03        	beq gm_dash_nosj    ; if there is jump buffer and coyote time, then perform a super jump
0017C0r 4  20 rr rr     	jsr gm_superjump
0017C3r 4               gm_dash_nosj:
0017C3r 4  4C rr rr     	jmp gm_dash_update_done
0017C6r 4               
0017C6r 4               gm_physics:
0017C6r 4  A9 20        	lda #pl_dead
0017C8r 4  24 rr        	bit playerctrl
0017CAr 4  F0 01        	beq :+
0017CCr 4  60           	rts
0017CDr 4  20 rr rr     :	jsr gm_jumpgrace
0017D0r 4  A5 rr        	lda dashtime
0017D2r 4  D0 86        	bne gm_dash_update
0017D4r 4  20 rr rr     	jsr gm_gravity
0017D7r 4  20 rr rr     	jsr gm_controls
0017DAr 4               gm_dash_update_done:
0017DAr 4  20 rr rr     	jsr gm_sanevels
0017DDr 4  20 rr rr     	jsr gm_applyy
0017E0r 4  20 rr rr     	jsr gm_applyx
0017E3r 4  20 rr rr     	jsr gm_addtrace
0017E6r 4  20 rr rr     	jsr gm_timercheck
0017E9r 4  4C rr rr     	jmp gm_checkwjump
0017ECr 4               
0017ECr 4               gm_addtrace:
0017ECr 4  A6 rr        	ldx plrtrahd
0017EEr 4  E8           	inx
0017EFr 4  8A           	txa
0017F0r 4  29 3F        	and #$3F ; mod 64
0017F2r 4  85 rr        	sta plrtrahd
0017F4r 4  AA           	tax
0017F5r 4               
0017F5r 4  A5 rr        	lda player_x
0017F7r 4  9D rr rr     	sta plr_trace_x, x
0017FAr 4  A5 rr        	lda player_y
0017FCr 4  9D rr rr     	sta plr_trace_y, x
0017FFr 4  60           	rts
001800r 4               
001800r 4               ; ** SUBROUTINE: gm_shifttrace
001800r 4               ; desc: Shifts the player X trace left by an amount of pixels.
001800r 4               ; parameters:
001800r 4               ;     A - the amount of pixels to decrease the player X trace by
001800r 4               ; note: The player X trace is capped to 0. It will never overflow.
001800r 4               gm_shifttrace:
001800r 4  48           	pha
001801r 4  A2 00        	ldx #0
001803r 4  85 rr        	sta temp1
001805r 4  BD rr rr     :	lda plr_trace_x, x
001808r 4  38           	sec
001809r 4  E5 rr        	sbc temp1
00180Br 4  B0 02        	bcs :+
00180Dr 4  A9 00        	lda #0
00180Fr 4  9D rr rr     :	sta plr_trace_x, x
001812r 4  E8           	inx
001813r 4  E0 40        	cpx #$40
001815r 4  D0 EE        	bne :--
001817r 4  68           	pla
001818r 4  60           	rts
001819r 4               
001819r 4               ; ** SUBROUTINE: gm_shiftrighttrace
001819r 4               ; desc: Shifts the player X trace right by an amount of pixels.
001819r 4               ; parameters:
001819r 4               ;     A - the amount of pixels to increase the player X trace by
001819r 4               ; note: The player X trace is capped to $FF. It will never overflow.
001819r 4               gm_shiftrighttrace:
001819r 4  48           	pha
00181Ar 4  A2 00        	ldx #0
00181Cr 4  85 rr        	sta temp1
00181Er 4  BD rr rr     :	lda plr_trace_x, x
001821r 4  18           	clc
001822r 4  65 rr        	adc temp1
001824r 4  90 02        	bcc :+
001826r 4  A9 FF        	lda #$FF
001828r 4  9D rr rr     :	sta plr_trace_x, x
00182Br 4  E8           	inx
00182Cr 4  E0 40        	cpx #$40
00182Er 4  D0 EE        	bne :--
001830r 4  68           	pla
001831r 4  60           	rts
001832r 4               
001832r 4               ; ** SUBROUTINE: gm_shifttraceYP
001832r 4               ; desc: Shifts the player Y trace down by an amount of pixels
001832r 4               ; parameters:
001832r 4               ;     A - the amount of pixels to increase the player Y trace by
001832r 4               ; note: The player X trace is capped to $F0. It will never overflow.
001832r 4               gm_shifttraceYP:
001832r 4  48           	pha
001833r 4  A2 00        	ldx #0
001835r 4  85 rr        	sta temp1
001837r 4               @loop:
001837r 4  BD rr rr     	lda plr_trace_y, x
00183Ar 4               
00183Ar 4  18           	clc
00183Br 4  65 rr        	adc temp1
00183Dr 4               
00183Dr 4  90 02        	bcc :+
00183Fr 4  A9 F0        	lda #$F0
001841r 4               
001841r 4  C9 F0        :	cmp #$F0
001843r 4  90 02        	bcc :+
001845r 4  A9 F0        	lda #$F0
001847r 4               
001847r 4  9D rr rr     :	sta plr_trace_y, x
00184Ar 4  E8           	inx
00184Br 4  E0 40        	cpx #$40
00184Dr 4  D0 E8        	bne @loop
00184Fr 4  68           	pla
001850r 4  60           	rts
001851r 4               
001851r 4               ; ** SUBROUTINE: gm_timercheck
001851r 4               ; desc: Checks and decreases relevant timers.
001851r 4               gm_timercheck:
001851r 4  A5 rr        	lda forcemovext
001853r 4  F0 02        	beq :+
001855r 4  C6 rr        	dec forcemovext
001857r 4  60           :	rts
001858r 4               
001858r 4               ; ** SUBROUTINE: gm_rem25pcvel
001858r 4               ; desc: Removes 25% of the player's velocity.
001858r 4               ; take off 25% of the X velocity
001858r 4               gm_rem25pcvel:
001858r 4  A5 rr        	lda player_vl_x
00185Ar 4  85 rr        	sta temp1
00185Cr 4  A5 rr        	lda player_vs_x
00185Er 4  85 rr        	sta temp2
001860r 4               
001860r 4  46 rr        	lsr temp1
001862r 4  66 rr        	ror temp2
001864r 4  46 rr        	lsr temp1
001866r 4  66 rr        	ror temp2
001868r 4               
001868r 4               	; minor correction
001868r 4  A9 E0        	lda #%11100000
00186Ar 4  24 rr        	bit temp1
00186Cr 4  F0 04        	beq :+
00186Er 4  05 rr        	ora temp1
001870r 4  85 rr        	sta temp1
001872r 4               
001872r 4  38           :	sec
001873r 4  A5 rr        	lda player_vl_x
001875r 4  E5 rr        	sbc temp1
001877r 4  85 rr        	sta player_vl_x
001879r 4  A5 rr        	lda player_vs_x
00187Br 4  E5 rr        	sbc temp2
00187Dr 4  85 rr        	sta player_vs_x
00187Fr 4               
00187Fr 4               gm_rem25pcvelYonly:
00187Fr 4               	; take off 25% of the Y velocity
00187Fr 4  A5 rr        	lda player_vl_y
001881r 4  85 rr        	sta temp1
001883r 4  A5 rr        	lda player_vs_y
001885r 4  85 rr        	sta temp2
001887r 4               
001887r 4  46 rr        	lsr temp1
001889r 4  66 rr        	ror temp2
00188Br 4  46 rr        	lsr temp1
00188Dr 4  66 rr        	ror temp2
00188Fr 4               
00188Fr 4               	; minor correction
00188Fr 4  A9 E0        	lda #%11100000
001891r 4  24 rr        	bit temp1
001893r 4  F0 04        	beq :+
001895r 4  05 rr        	ora temp1
001897r 4  85 rr        	sta temp1
001899r 4               
001899r 4  38           :	sec
00189Ar 4  A5 rr        	lda player_vl_y
00189Cr 4  E5 rr        	sbc temp1
00189Er 4  85 rr        	sta player_vl_y
0018A0r 4  A5 rr        	lda player_vs_y
0018A2r 4  E5 rr        	sbc temp2
0018A4r 4  85 rr        	sta player_vs_y
0018A6r 4  60           	rts
0018A7r 4               
0018A7r 3               .include "g_sfx.asm"
0018A7r 4               ; Copyright (C) 2024 iProgramInCpp
0018A7r 4               
0018A7r 4               gm_jump_sfx:
0018A7r 4  A9 02        	lda #2
0018A9r 4  A2 00        	ldx #FAMISTUDIO_SFX_CH0
0018ABr 4  4C rr rr     	jmp famistudio_sfx_play
0018AEr 4               
0018AEr 4               gm_dash_sfx:
0018AEr 4  A9 00        	lda #0
0018B0r 4  A2 0F        	ldx #FAMISTUDIO_SFX_CH1
0018B2r 4  4C rr rr     	jmp famistudio_sfx_play
0018B5r 4               
0018B5r 4               gm_death_sfx:
0018B5r 4  A9 03        	lda #3
0018B7r 4  A2 0F        	ldx #FAMISTUDIO_SFX_CH1
0018B9r 4  4C rr rr     	jmp famistudio_sfx_play
0018BCr 4               
0018BCr 4               gm_strawb_sfx:
0018BCr 4  A9 04        	lda #4
0018BEr 4  A2 0F        	ldx #FAMISTUDIO_SFX_CH1
0018C0r 4  4C rr rr     	jmp famistudio_sfx_play
0018C3r 4               
0018C3r 4               
0018C3r 4               
0018C3r 3               
0018C3r 3               ; ** SUBROUTINE: gm_update_ptstimer
0018C3r 3               gm_update_ptstimer:
0018C3r 3  A5 rr        	lda ptstimer
0018C5r 3  F0 03        	beq :+            ; if ptstimer != 0, then just decrement it
0018C7r 3  C6 rr        	dec ptstimer
0018C9r 3  60           	rts
0018CAr 3  A9 00        :	lda #0            ; if they're both 0, reset the points count and return
0018CCr 3  85 rr        	sta ptscount
0018CEr 3  60           	rts
0018CFr 3               
0018CFr 3               ; ** SUBROUTINE: gamemode_init
0018CFr 3               gm_game_init:
0018CFr 3  A2 FF        	ldx #$FF
0018D1r 3  86 rr        	stx animmode
0018D3r 3  E8           	inx
0018D4r 3  8E 01 20     	stx ppu_mask      ; disable rendering
0018D7r 3               
0018D7r 3  A9 08        	lda #g2_noclrall
0018D9r 3  24 rr        	bit gamectrl2
0018DBr 3  F0 08        	beq @clearAll
0018DDr 3               
0018DDr 3  86 rr        	stx gamectrl2
0018DFr 3  20 rr rr     	jsr gm_game_clear_wx
0018E2r 3  4C rr rr     	jmp @clearDone
0018E5r 3               
0018E5r 3               @clearAll:
0018E5r 3  86 rr        	stx gamectrl2
0018E7r 3  20 rr rr     	jsr gm_game_clear_all_wx
0018EAr 3               
0018EAr 3  20 rr rr     	jsr vblank_wait
0018EDr 3               
0018EDr 3  A0 rr        	ldy #<init_palette
0018EFr 3  84 rr        	sty paladdr
0018F1r 3  A0 rr        	ldy #>init_palette
0018F3r 3  84 rr        	sty paladdr+1
0018F5r 3  20 rr rr     	jsr load_palette  ; load game palette into palette RAM
0018F8r 3               
0018F8r 3  A9 20        	lda #$20
0018FAr 3  20 rr rr     	jsr clear_nt
0018FDr 3  A9 24        	lda #$24
0018FFr 3  20 rr rr     	jsr clear_nt
001902r 3               
001902r 3               @clearDone:
001902r 3               
001902r 3  A9 00        	lda #0
001904r 3  85 rr        	sta ntwrhead
001906r 3  85 rr        	sta arwrhead
001908r 3  0A           	asl
001909r 3  0A           	asl
00190Ar 3  0A           	asl
00190Br 3  85 rr        	sta camera_x
00190Dr 3               
00190Dr 3  A5 rr        	lda rm_paloffs
00190Fr 3  0A           	asl
001910r 3  0A           	asl
001911r 3  85 rr        	sta lvlyoff
001913r 3  0A           	asl
001914r 3  0A           	asl
001915r 3  0A           	asl
001916r 3  85 rr        	sta camera_y
001918r 3               
001918r 3  20 rr rr     	jsr h_gener_ents_r
00191Br 3  20 rr rr     	jsr h_gener_mts_r
00191Er 3  A0 00        	ldy #$00          ; generate tilesahead columns
001920r 3  98           :	tya
001921r 3  48           	pha
001922r 3  20 rr rr     	jsr h_gener_col_r
001925r 3  20 rr rr     	jsr h_flush_col_r
001928r 3  20 rr rr     	jsr h_flush_pal_r_cond
00192Br 3  68           	pla
00192Cr 3  A8           	tay
00192Dr 3  C8           	iny
00192Er 3  C0 24        	cpy #tilesahead
001930r 3  D0 EE        	bne :-
001932r 3               
001932r 3  A5 rr        	lda gamectrl
001934r 3  29 0C        	and #(gs_scrstodR|gs_scrstopR)
001936r 3  09 01        	ora #gs_1stfr
001938r 3  85 rr        	sta gamectrl
00193Ar 3               
00193Ar 3  A5 rr        	lda nmictrl
00193Cr 3  29 0F        	and #((nc_flushcol|nc_flshpalv|nc_flushrow|nc_flushpal)^$FF)
00193Er 3  09 01        	ora #nc_turnon
001940r 3  85 rr        	sta nmictrl
001942r 3               
001942r 3  20 rr rr     	jsr vblank_wait
001945r 3  4C rr rr     	jmp gm_game_update
001948r 3               
001948r 3               ; ** GAMEMODE: gamemode_game
001948r 3               gamemode_game:
001948r 3  A5 rr        	lda gamectrl
00194Ar 3  29 01        	and #gs_1stfr
00194Cr 3  F0 81        	beq gm_game_init
00194Er 3               gm_game_update:
00194Er 3  E6 rr        	inc framectr
001950r 3  20 rr rr     	jsr test
001953r 3  A5 rr        	lda scrollsplit
001955r 3  F0 03        	beq :+
001957r 3  20 rr rr     	jsr gm_calc_camera_split ; calculate the position of the camera so that the IRQ can pick it up
00195Ar 3  20 rr rr     :	jsr gm_physics
00195Dr 3  20 rr rr     	jsr gm_anim_player
001960r 3  20 rr rr     	jsr gm_anim_banks
001963r 3  20 rr rr     	jsr gm_draw_player
001966r 3  20 rr rr     	jsr gm_unload_os_ents
001969r 3  20 rr rr     	jsr gm_draw_entities
00196Cr 3  20 rr rr     	jsr gm_allocate_palettes
00196Fr 3  20 rr rr     	jsr gm_update_ptstimer
001972r 3  20 rr rr     	jsr gm_draw_dead
001975r 3               
001975r 3               	; note: at this point, camera positioning should have been calculated.
001975r 3               	; calculate the position of the camera so that the NMI can pick it up
001975r 3               	; if scrollsplit is not zero then it was already calculated for the IRQ
001975r 3  A5 rr        	lda scrollsplit
001977r 3  D0 03        	bne :+
001979r 3  20 rr rr     	jsr gm_calc_camera_nosplit
00197Cr 3               :
00197Cr 3               
00197Cr 3               ;	lda #cont_select
00197Cr 3               ;	bit p1_cont
00197Cr 3               ;	bne gm_titleswitch
00197Cr 3  60           	rts
00197Dr 3               
00197Dr 3               test:
00197Dr 3  A9 20        	lda #cont_select
00197Fr 3  24 rr        	bit p1_cont
001981r 3  F0 0A        	beq :+
001983r 3               
001983r 3  24 rr        	bit p1_conto
001985r 3  D0 06        	bne :+
001987r 3               
001987r 3  A5 rr        	lda scrollsplit
001989r 3  49 40        	eor #64
00198Br 3  85 rr        	sta scrollsplit
00198Dr 3               
00198Dr 3  60           :	rts
00198Er 3               
00198Er 3               ;; ** SUBROUTINE: gm_titleswitch
00198Er 3               ;gm_titleswitch:
00198Er 3               ;	bit p1_conto
00198Er 3               ;	bne @earlyReturn
00198Er 3               ;
00198Er 3               ;	lda scrollsplit
00198Er 3               ;	eor #80
00198Er 3               ;	sta scrollsplit
00198Er 3               ;
00198Er 3               ;	lda #gm_title
00198Er 3               ;	sta gamemode
00198Er 3               ;	lda #0
00198Er 3               ;	sta titlectrl
00198Er 3               ;@earlyReturn:
00198Er 3               ;	rts
00198Er 3               
00198Er 3               ; ** SUBROUTINE: gm_game_clear_all_wx
00198Er 3               ; desc: Clears ALL game variables with the X register.
00198Er 3               ;       Unlike gm_game_clear_all_wx, this clears data that's necessary across,
00198Er 3               ;       for example, respawn transitions.
00198Er 3               gm_game_clear_all_wx:
00198Er 3  86 rr        	stx lvlyoff
001990r 3               
001990r 3               ; ** SUBROUTINE: gm_game_clear_wx
001990r 3               ; desc: Clears game variables with the X register.
001990r 3               gm_game_clear_wx:
001990r 3  86 rr        	stx transoff
001992r 3  86 rr        	stx tr_scrnpos
001994r 3  86 rr        	stx gamectrl      ; clear game related fields to zero
001996r 3  86 rr        	stx ntwrhead
001998r 3  86 rr        	stx arwrhead
00199Ar 3  86 rr        	stx player_sp_x
00199Cr 3  86 rr        	stx player_sp_y
00199Er 3  86 rr        	stx camera_x
0019A0r 3  86 rr        	stx camera_y
0019A2r 3  86 rr        	stx camera_x_hi
0019A4r 3  86 rr        	stx camera_x_pg
0019A6r 3  86 rr        	stx lvladdr
0019A8r 3  86 rr        	stx lvladdrhi
0019AAr 3  86 rr        	stx playerctrl
0019ACr 3  86 rr        	stx player_vl_x
0019AEr 3  86 rr        	stx player_vs_x
0019B0r 3  86 rr        	stx player_vl_y
0019B2r 3  86 rr        	stx player_vs_y
0019B4r 3  86 rr        	stx dashtime
0019B6r 3  86 rr        	stx dashcount
0019B8r 3  86 rr        	stx animmode
0019BAr 3  86 rr        	stx jumpbuff
0019BCr 3  86 rr        	stx jumpcoyote
0019BEr 3  86 rr        	stx wjumpcoyote
0019C0r 3  86 rr        	stx roombeglo
0019C2r 3  86 rr        	stx roombeghi
0019C4r 3  86 rr        	stx roombeglo2
0019C6r 3  86 rr        	stx plrtrahd
0019C8r 3  86 rr        	stx plrstrawbs
0019CAr 3  86 rr        	stx scrollsplit
0019CCr 3  CA           	dex
0019CDr 3  86 rr        	stx animmode      ; set to 0xFF
0019CFr 3  E8           	inx
0019D0r 3               
0019D0r 3               	; before waiting on vblank, clear game reserved spaces ($0300 - $0700)
0019D0r 3               	; note: ldx #$00 was removed because it's already 0!
0019D0r 3  8A           	txa
0019D1r 3               gm_game_clear:
0019D1r 3  9D 00 02     	sta $200,x
0019D4r 3  9D 00 03     	sta $300,x
0019D7r 3  9D 00 04     	sta $400,x
0019DAr 3  9D 00 05     	sta $500,x
0019DDr 3  9D 00 06     	sta $600,x
0019E0r 3  E8           	inx
0019E1r 3  D0 EE        	bne gm_game_clear
0019E3r 3  60           	rts
0019E4r 3               
0019E4r 3               ; ** SUBROUTINE: gm_calc_camera_nosplit
0019E4r 3               ; desc: Calculate the quake scroll offsets, and adds them to cameraX/cameraY.
0019E4r 3               ;       Then calculates the cameraX/cameraY and prepares it for upload to the PPU.
0019E4r 3               ; note: Does not handle scroll splits.
0019E4r 3               gm_calc_camera_nosplit:
0019E4r 3  A5 rr        	lda camera_x
0019E6r 3  85 rr        	sta scroll_x
0019E8r 3  A5 rr        	lda camera_y
0019EAr 3  85 rr        	sta scroll_y
0019ECr 3  A9 00        	lda #0
0019EEr 3  A6 rr        	ldx camera_x_hi
0019F0r 3  F0 02        	beq :+
0019F2r 3  09 01        	ora #pctl_highx
0019F4r 3  A6 rr        :	ldx camera_y_hi
0019F6r 3  F0 02        	beq :+
0019F8r 3  09 02        	ora #pctl_highy
0019FAr 3  85 rr        :	sta scroll_flags
0019FCr 3  60           	rts
0019FDr 3               
0019FDr 3               ; ** SUBROUTINE: gm_calc_camera
0019FDr 3               ; desc: Calculates the cameraX/cameraY and prepares it for upload to the PPU.
0019FDr 3               ; note: Does not calculate quake offsets.
0019FDr 3               gm_calc_camera_split:
0019FDr 3  A5 rr        	lda camera_x
0019FFr 3  85 rr        	sta scroll_x
001A01r 3  A5 rr        	lda camera_y
001A03r 3  85 rr        	sta scroll_y
001A05r 3  A5 rr        	lda camera_x_hi
001A07r 3  85 rr        	sta temp1
001A09r 3  A5 rr        	lda camera_y_hi
001A0Br 3  85 rr        	sta temp2
001A0Dr 3               
001A0Dr 3               	; add the scroll split offset if needed.
001A0Dr 3  A5 rr        	lda scrollsplit
001A0Fr 3  F0 16        	beq @doneAdding
001A11r 3               
001A11r 3  38           	sec
001A12r 3  65 rr        	adc scroll_y
001A14r 3  85 rr        	sta scroll_y
001A16r 3  B0 20        	bcs @carryIsSet
001A18r 3               
001A18r 3               	; carry clear, just check if >$F0
001A18r 3  C9 F0        	cmp #$F0
001A1Ar 3  90 0B        	bcc @doneAdding
001A1Cr 3               
001A1Cr 3  38           	sec
001A1Dr 3  E9 F0        	sbc #$F0
001A1Fr 3  85 rr        	sta scroll_y
001A21r 3               
001A21r 3               @flipHighBitAndDone:
001A21r 3  A5 rr        	lda temp2
001A23r 3  49 01        	eor #1
001A25r 3  85 rr        	sta temp2
001A27r 3               
001A27r 3               @doneAdding:
001A27r 3  A9 00        	lda #0
001A29r 3  A6 rr        	ldx temp1
001A2Br 3  F0 02        	beq :+
001A2Dr 3  09 01        	ora #pctl_highx
001A2Fr 3               
001A2Fr 3  A6 rr        :	ldx temp2
001A31r 3  F0 02        	beq :+
001A33r 3  09 02        	ora #pctl_highy
001A35r 3               
001A35r 3  85 rr        :	sta scroll_flags
001A37r 3  60           	rts
001A38r 3               
001A38r 3               @carryIsSet:
001A38r 3               	; carry was set
001A38r 3  69 0F        	adc #$0F   ; add +$10
001A3Ar 3  85 rr        	sta scroll_y
001A3Cr 3               	; TODO: carry might be set again. I don't think it matters right now
001A3Cr 3               	; but if you set scrolllimit to > like 80, then look here first.
001A3Cr 3  4C rr rr     	jmp @flipHighBitAndDone
001A3Fr 3               
001A3Fr 3               
001A3Fr 2               .include "lvltable.asm"
001A3Fr 3               ; Copyright (C) 2024 iProgramInCpp
001A3Fr 3               
001A3Fr 3               level_table:
001A3Fr 3  rr rr        	.word level0
001A41r 3  rr rr        	.word level1 ; 1
001A43r 3  rr rr        	.word level0 ; 2
001A45r 3  rr rr        	.word level0 ; 3
001A47r 3  rr rr        	.word level0 ; 4
001A49r 3  rr rr        	.word level0 ; 5
001A4Br 3  rr rr        	.word level0 ; 6
001A4Dr 3  rr rr        	.word level0 ; 7
001A4Fr 3               level_table_end:
001A4Fr 3               
001A4Fr 3               level_banks:
001A4Fr 3  00           	.byte $00
001A50r 3  01           	.byte $01
001A51r 3  00           	.byte $00
001A52r 3  00           	.byte $00
001A53r 3  00           	.byte $00
001A54r 3  00           	.byte $00
001A55r 3  00           	.byte $00
001A56r 3  00           	.byte $00
001A57r 3               level_banks_end:
001A57r 3               
001A57r 3               level_banks2:
001A57r 3  00           	.byte $00
001A58r 3  0A           	.byte $0A  ; level 1 has a special DPCM bank (check level1/bank_1.asm)
001A59r 3  00           	.byte $00
001A5Ar 3  00           	.byte $00
001A5Br 3  00           	.byte $00
001A5Cr 3  00           	.byte $00
001A5Dr 3  00           	.byte $00
001A5Er 3  00           	.byte $00
001A5Fr 3               level_banks2_end:
001A5Fr 3               
001A5Fr 3               level_table_size = level_table_end - level_table
001A5Fr 3               
001A5Fr 2               .include "dialogif.asm"
001A5Fr 3               ; Copyright (C) 2024 iProgramInCpp
001A5Fr 3               
001A5Fr 3               ; Dialog interface
001A5Fr 3               ; This allows to call into dialog functions by dynamically switching the loaded bank to the dialog's.
001A5Fr 3               ;
001A5Fr 3               ; The dialog must not reside at the address where DPCM samples reside.
001A5Fr 3               
001A5Fr 3               dlg_update_g:
001A5Fr 3  A9 rr        	lda #<dlg_update_d
001A61r 3  85 rr        	sta temp1
001A63r 3  A9 rr        	lda #>dlg_update_d
001A65r 3  85 rr        	sta temp1+1
001A67r 3  A0 0C        	ldy #prgb_dial
001A69r 3  4C rr rr     	jmp far_call
001A6Cr 3               
001A6Cr 2               
001A6Cr 1               .include "prg_main.asm"
001A6Cr 2               ; Copyright (C) 2024 iProgramInCpp
001A6Cr 2               
001A6Cr 2               .segment "PRG_MAIN"
000000r 2               
000000r 2               ; ** SUBROUTINE: oam_dma_and_read_cont
000000r 2               ; desc: Performs OAM DMA, and reads the player 1 controller.
000000r 2               ; This is done to avoid the DMC DMA process corrupting controller reads.
000000r 2               ;
000000r 2               ; note: This must all be located inside of one page. There is a one cycle
000000r 2               ; cost associated with page boundary crosses, which is important because
000000r 2               ; it will desync our read process.
000000r 2               oam_dma_and_read_cont:
000000r 2               	; back up old controller state
000000r 2  A5 rr        	lda p1_cont
000002r 2  85 rr        	sta p1_conto
000004r 2               
000004r 2  A9 01        	lda #$01
000006r 2  8D 16 40     	sta apu_joypad1
000009r 2               	; while the strobe bit is set, buttons will be continuously reloaded.
000009r 2               	; this means that reading from joypad1 will always return the state
000009r 2               	; of the A button, the first button.
000009r 2  85 rr        	sta p1_cont
00000Br 2  4A           	lsr             ; A = 0 now
00000Cr 2               	; stop the strobe by clearing joypad1. now we can start reading
00000Cr 2  8D 16 40     	sta apu_joypad1
00000Fr 2               
00000Fr 2               	; but before reading, perform OAM DMA to align ourselves on a proper cycle
00000Fr 2  A9 00        	lda #0
000011r 2  8D 03 20     	sta oam_addr
000014r 2  A9 rr        	lda #>oam_buf     ; load the high byte of the OAM DMA address
000016r 2  8D 14 40     	sta apu_oam_dma   ; and perform the DMA!
000019r 2               
000019r 2               	; thanks NESDEV wiki! :D
000019r 2  A2 01        	ldx #1             ; get put          <- strobe code must take an odd number of cycles total
00001Br 2  86 rr        	stx p1_cont        ; get put get      <- buttons must be in the zeropage
00001Dr 2  8E 16 40     	stx apu_joypad1    ; put get put get
000020r 2  CA           	dex                ; put get
000021r 2  8E 16 40     	stx apu_joypad1    ; put get put get
000024r 2               @loop:
000024r 2               
000024r 2               	; adjustment: do NOT read the second joypad.
000024r 2               	;lda $4017          ; put get put GET  <- loop code must take an even number of cycles total
000024r 2               	;and #3             ; put get
000024r 2               	;cmp #1             ; put get
000024r 2               	;rol p2_cont, x     ; put get put get put get (X = 0; waste 1 cycle for alignment)
000024r 2               
000024r 2  AD 16 40     	lda apu_joypad1    ; put get put GET
000027r 2  29 03        	and #3             ; put get
000029r 2  C9 01        	cmp #1             ; put get
00002Br 2  26 rr        	rol p1_cont        ; put get put get put
00002Dr 2  90 F5        	bcc @loop          ; get put [get]    <- this branch must not be allowed to cross a page
00002Fr 2  60           	rts
000030r 2               
000030r 2               ; ** SUBROUTINE: far_call
000030r 2               ; arguments:
000030r 2               ;     Y - the bank index this code resides in
000030r 2               ;     (temp2, temp1) - address of the function at hand.
000030r 2               ; desc: Calls a function residing in a bank at $A000-$BFFF.  Cannot call functions residing
000030r 2               ;       in other banks.
000030r 2               far_call:
000030r 2  A5 rr        	lda currA000bank
000032r 2  48           	pha                ; push the current bank number
000033r 2               
000033r 2               	; change the bank
000033r 2  A9 07        	lda #mmc3bk_prg1
000035r 2  20 rr rr     	jsr mmc3_set_bank
000038r 2               
000038r 2               	; bank switched, now call
000038r 2  20 rr rr     	jsr @doTheCall
00003Br 2               
00003Br 2               	; change the bank back
00003Br 2  68           	pla
00003Cr 2  A8           	tay
00003Dr 2  A9 07        	lda #mmc3bk_prg1
00003Fr 2  4C rr rr     	jmp mmc3_set_bank
000042r 2               
000042r 2               @doTheCall:
000042r 2               	; redirect execution to (temp2, temp1)
000042r 2               	; this function SHOULD return. this is why we do the jsr indirection
000042r 2  6C rr rr     	jmp (temp1)
000045r 2               
000045r 2               ; ** SUBROUTINE: mmc3_set_bank
000045r 2               ; arguments:
000045r 2               ;     A - the bank index to switch
000045r 2               ;     Y - the bank number to switch to
000045r 2               ; desc: Programs the MMC3 such that, after the execution of this subroutine, the
000045r 2               ;       bank specified in Y is loaded at the bank address whose index is A.
000045r 2               ; assumes: That this function does not run inside of an NMI.  To perform a bank
000045r 2               ;          switch during an NMI, use mmc3_set_bank_nmi.
000045r 2               
000045r 2               mmc3_set_bank:
000045r 2               	; note: I don't think we will switch the $A000-$BFFF bank during an NMI.
000045r 2  C9 07        	cmp #mmc3bk_prg1
000047r 2  D0 02        	bne :+
000049r 2  84 rr        	sty currA000bank
00004Br 2  09 40        :	ora #def_mmc3_bn  ; OR the default MMC3 configuration.
00004Dr 2  85 rr        	sta mmc3_shadow   ; Store to the MMC3 shadow global variable.
00004Fr 2  8D 00 80     	sta mmc3_bsel     ; Write this selector to the MMC3 chip.
000052r 2  8C 01 80     	sty mmc3_bdat     ; Write the specified bank index to the MMC3 chip.
000055r 2  60           	rts
000056r 2               
000056r 2               	; Explanation on why we also store the mmc3 selector in mmc3_shadow.
000056r 2               	;
000056r 2               	; This is done to avoid a race condition, in the case of game lag, that an
000056r 2               	; NMI might be fired while this function is executed, after the selector is
000056r 2               	; written, but before the data is written, and the NMI wants to perform a
000056r 2               	; bank switch of its own.
000056r 2               	;
000056r 2               	; Basically, the mmc3 shadow register is written back to the mmc3 chip when
000056r 2               	; exiting an NMI in case of such a race, thereby undoing the NMI's potential
000056r 2               	; effects.
000056r 2               
000056r 2               ; ** SUBROUTINE: mmc3_set_bank_nmi
000056r 2               ; arguments: See mmc3_set_bank
000056r 2               ; desc: Programs the MMC3 such that, after the execution of this subroutine, the
000056r 2               ;       bank specified in Y is loaded at the bank address whose index is A.
000056r 2               ;       This function restores the mmc3 selector from the shadow global variable
000056r 2               ;       one this bank switch is performed.
000056r 2               ; assumes: That this function is running inside an NMI. To perform a bank switch
000056r 2               ;          during regular game execution, use mmc3_set_bank.
000056r 2               
000056r 2               mmc3_set_bank_nmi:
000056r 2  09 40        	ora #def_mmc3_bn  ; OR the default MMC3 configuration.
000058r 2  8D 00 80     	sta mmc3_bsel
00005Br 2  8C 01 80     	sty mmc3_bdat
00005Er 2  A5 rr        	lda mmc3_shadow   ; Restore the old selector.
000060r 2  8D 00 80     	sta mmc3_bsel
000063r 2  60           	rts
000064r 2               
000064r 2               ; ** SUBROUTINE: mmc3_horzarr
000064r 2               ; desc: Sets the MMC1 to a horizontal arrangement (vertical mirroring) of nametables.
000064r 2               ; clobbers: A
000064r 2               mmc3_horzarr:
000064r 2  A9 00        	lda #0
000066r 2  8D 00 A0     	sta mmc3_mirror
000069r 2  60           	rts
00006Ar 2               
00006Ar 2               ; ** SUBROUTINE: mmc3_vertarr
00006Ar 2               ; desc: Sets the MMC1 to a vertical arrangement (horizontal mirroring) of nametables.
00006Ar 2               ; clobbers: A
00006Ar 2               ;mmc3_vertarr:
00006Ar 2               ;	lda #1
00006Ar 2               ;	sta mmc3_mirror
00006Ar 2               ;	rts
00006Ar 2               
00006Ar 2               ; ** SUBROUTINE: vblank_wait
00006Ar 2               ; arguments: none
00006Ar 2               ; clobbers: A
00006Ar 2               vblank_wait:
00006Ar 2  A9 00        	lda #$00
00006Cr 2  2C 02 20     	bit ppu_status
00006Fr 2  10 F9        	bpl vblank_wait  ; check bit 7, equal to zero means not in vblank
000071r 2  60           	rts
000072r 2               
000072r 2               ; ** SUBROUTINE: nmi_wait
000072r 2               ; arguments: none
000072r 2               ; clobbers: A
000072r 2               nmi_wait:
000072r 2  A5 rr        	lda nmicount
000074r 2  C5 rr        :	cmp nmicount
000076r 2  F0 FC        	beq :-
000078r 2  60           	rts
000079r 2               
000079r 2               ; ** SUBROUTINE: read_cont
000079r 2               ; arguments: none
000079r 2               ; clobbers:  A
000079r 2               ; desc:      reads controller input from the player 1 port
000079r 2               ; NOTE: deprecated, Controller inputs are now read inside of NMI.
000079r 2               ;read_cont:
000079r 2               ;	lda p1_cont
000079r 2               ;	sta p1_conto
000079r 2               ;	lda #$01
000079r 2               ;	sta apu_joypad1
000079r 2               ;	; while the strobe bit is set, buttons will be continuously reloaded.
000079r 2               ;	; this means that reading from joypad1 will always return the state
000079r 2               ;	; of the A button, the first button.
000079r 2               ;	sta p1_cont
000079r 2               ;	lsr             ; A = 0 now
000079r 2               ;	; stop the strobe by clearing joypad1. now we can start reading
000079r 2               ;	sta apu_joypad1
000079r 2               ;read_loop:
000079r 2               ;	lda apu_joypad1
000079r 2               ;	lsr a           ; bit 0 -> carry
000079r 2               ;	rol p1_cont     ; carry -> bit 0, bit 7 -> carry
000079r 2               ;	bcc read_loop
000079r 2               ;	rts
000079r 2               
000079r 2               ; ** SUBROUTINE: rand
000079r 2               ; arguments: none
000079r 2               ; clobbers:  a
000079r 2               ; returns:   a - the pseudorandom number
000079r 2               ; desc:      generates a pseudo random number
000079r 2               rand:
000079r 2  A5 rr        	lda rng_state
00007Br 2  0A           	asl
00007Cr 2  90 02        	bcc @no_feedback
00007Er 2  49 21        	eor #$21
000080r 2               @no_feedback:
000080r 2  85 rr        	sta rng_state
000082r 2  A5 rr        	lda rng_state
000084r 2  60           	rts
000085r 2               
000085r 2               ; ** SUBROUTINE: oam_putsprite
000085r 2               ; arguments:
000085r 2               ;   a - attributes
000085r 2               ;   y - tile number
000085r 2               ;   [x_crd_temp] - y position of sprite
000085r 2               ;   [y_crd_temp] - y position of sprite
000085r 2               ; clobbers:  a, x
000085r 2               ; desc:      inserts a sprite into OAM memory
000085r 2               oam_putsprite:
000085r 2  A6 rr        	ldx oam_wrhead  ; load the write head into X
000087r 2  48           	pha             ; push the tile number
000088r 2  A5 rr        	lda y_crd_temp  ; store the Y coordinate into OAM
00008Ar 2  9D rr rr     	sta oam_buf, x
00008Dr 2  E8           	inx
00008Er 2  98           	tya
00008Fr 2  49 01        	eor #$01        ; flip bit 1 as most sprites are now located at $1000
000091r 2  9D rr rr     	sta oam_buf, x  ; store the attributes into OAM
000094r 2  E8           	inx
000095r 2  68           	pla
000096r 2  9D rr rr     	sta oam_buf, x  ; store the tile number into OAM
000099r 2  E8           	inx
00009Ar 2  A5 rr        	lda x_crd_temp
00009Cr 2  9D rr rr     	sta oam_buf, x  ; store the X coordinate into OAM
00009Fr 2  E8           	inx
0000A0r 2  86 rr        	stx oam_wrhead
0000A2r 2  60           	rts
0000A3r 2               
0000A3r 2               ; ** SUBROUTINE: load_palette
0000A3r 2               ; arguments:
0000A3r 2               ;   paladdr[0, 1] -- the address of the palette to upload
0000A3r 2               ; clobbers: A, X
0000A3r 2               ; assumes: PPUCTRL increment bit is zero (+1 instead of +32)
0000A3r 2               load_palette:
0000A3r 2  A9 3F        	lda #$3F
0000A5r 2  8D 06 20     	sta ppu_addr
0000A8r 2  A9 00        	lda #$00
0000AAr 2  8D 06 20     	sta ppu_addr
0000ADr 2  A0 00        	ldy #$00
0000AFr 2               @loop:
0000AFr 2  B1 rr        	lda (paladdr), y
0000B1r 2  8D 07 20     	sta ppu_data
0000B4r 2  C8           	iny
0000B5r 2  C0 20        	cpy #$20
0000B7r 2  D0 F6        	bne @loop
0000B9r 2  60           	rts
0000BAr 2               
0000BAr 2               ; ** SUBROUTINE: ppu_nmi_off
0000BAr 2               ; arguments: none
0000BAr 2               ; clobbers: A
0000BAr 2               ;ppu_nmi_off:
0000BAr 2               ;	lda ctl_flags
0000BAr 2               ;	and #(pctl_nmi_on ^ $FF)
0000BAr 2               ;	sta ctl_flags
0000BAr 2               ;
0000BAr 2               ;	sta ppu_ctrl
0000BAr 2               ;	rts
0000BAr 2               
0000BAr 2               ; ** SUBROUTINE: ppu_nmi_on
0000BAr 2               ; arguments: none
0000BAr 2               ; clobbers: A
0000BAr 2               ppu_nmi_on:
0000BAr 2  A5 rr        	lda ctl_flags
0000BCr 2  09 80        	ora #pctl_nmi_on
0000BEr 2  85 rr        	sta ctl_flags
0000C0r 2               
0000C0r 2  8D 00 20     	sta ppu_ctrl
0000C3r 2  60           	rts
0000C4r 2               
0000C4r 2               ; ** SUBROUTINE: soft_nmi_on
0000C4r 2               ; desc: Enable racey NMIs in software.
0000C4r 2               ; purpose: Most of the NMI routine is racey against the main thread. However, we want to run
0000C4r 2               ;          audio every frame regardless of lag. This is why we block racey NMIs in software.
0000C4r 2               ; clobbers: A
0000C4r 2               soft_nmi_on:
0000C4r 2  A9 01        	lda #1
0000C6r 2  85 rr        	sta nmienable
0000C8r 2  60           	rts
0000C9r 2               
0000C9r 2               ; ** SUBROUTINE: soft_nmi_off
0000C9r 2               ; desc: Disable racey NMIs in software.
0000C9r 2               ; clobbers: A
0000C9r 2               soft_nmi_off:
0000C9r 2  A9 00        	lda #0
0000CBr 2  85 rr        	sta nmienable
0000CDr 2  60           	rts
0000CEr 2               
0000CEr 2               ; ** SUBROUTINE: ppu_rstaddr
0000CEr 2               ; arguments: none
0000CEr 2               ; clobbers:  A
0000CEr 2               ; desc:      writes $2000 to PPUADDR in vblank or after a render disable section
0000CEr 2               ppu_rstaddr:
0000CEr 2  A9 20        	lda #$20
0000D0r 2  8D 06 20     	sta ppu_addr
0000D3r 2  A9 00        	lda #$00
0000D5r 2  8D 06 20     	sta ppu_addr
0000D8r 2  60           	rts
0000D9r 2               
0000D9r 2               ; ** SUBROUTINE: ppu_loadaddr
0000D9r 2               ; arguments:
0000D9r 2               ;   x - low 8 bits of address
0000D9r 2               ;   y - high 8 bits of address
0000D9r 2               ; clobbers: none
0000D9r 2               ; assumes:  none
0000D9r 2               ; desc:     loads a 16-bit address into PPUADDR
0000D9r 2               ppu_loadaddr:
0000D9r 2  8C 06 20     	sty ppu_addr
0000DCr 2  8E 06 20     	stx ppu_addr
0000DFr 2  60           	rts
0000E0r 2               
0000E0r 2               ; ** SUBROUTINE: ppu_wrstring
0000E0r 2               ; arguments:
0000E0r 2               ;   x - low 8 bits of address
0000E0r 2               ;   y - high 8 bits of address
0000E0r 2               ;   a - length of string
0000E0r 2               ; assumes:  - PPUADDR was programmed to the PPU dest address
0000E0r 2               ;             writes can happen (in vblank or rendering disabled)
0000E0r 2               ;           - that the string does not straddle a page
0000E0r 2               ;             boundary (256 bytes)
0000E0r 2               ; desc:     copies a string from memory to the PPU
0000E0r 2               ; clobbers: PPUADDR, all regs
0000E0r 2               ppu_wrstring:
0000E0r 2  86 rr        	stx wr_str_temp       ; store the address into a temporary
0000E2r 2  84 rr        	sty wr_str_temp + 1   ; indirection slot
0000E4r 2  A0 00        	ldy #$00
0000E6r 2  AA           	tax                   ; A cannot be incremented with 1 instruction
0000E7r 2               ppu_wrsloop:              ; so use X for that purpose
0000E7r 2  B1 rr        	lda (wr_str_temp), y  ; use that indirection we setup earlier
0000E9r 2  8D 07 20     	sta ppu_data
0000ECr 2  C8           	iny
0000EDr 2  CA           	dex
0000EEr 2  D0 F7        	bne ppu_wrsloop       ; if X != 0 print another
0000F0r 2  60           	rts
0000F1r 2               
0000F1r 2               ; ** SUBROUTINE: clear_nt
0000F1r 2               ; arguments: a - high 8 bits of nametable address (20,24,28,2C)
0000F1r 2               ; clobbers:  a, x, y
0000F1r 2               ; assumes:   rendering is disabled (not enough bandwidth to clear the entire nametable during vblank)
0000F1r 2               ; desc:      clears 1KB of RAM in PPU memory with video output disabled
0000F1r 2               clear_nt:
0000F1r 2  8D 06 20     	sta ppu_addr
0000F4r 2  A9 00        	lda #$00
0000F6r 2  8D 06 20     	sta ppu_addr
0000F9r 2  A9 00        	lda #blank_tile  ; clear all 1K of vram to 0x20 - the blank tile
0000FBr 2  A2 00        	ldx #$00
0000FDr 2  A0 00        	ldy #$00
0000FFr 2               inner_loop:
0000FFr 2  8D 07 20     	sta ppu_data
000102r 2  C8           	iny
000103r 2  D0 FA        	bne inner_loop
000105r 2  E8           	inx
000106r 2  E0 04        	cpx #$04
000108r 2  90 F5        	bcc inner_loop   ; jump to the inner loop because y==0 guaranteed
00010Ar 2                                    ; we didn't branch because carry was set so y==0
00010Ar 2  60           	rts
00010Br 2               
00010Br 2               ; ** SUBROUTINE: mmc3_initialize
00010Br 2               ; desc: Initializes the MMC3 mapper chip.
00010Br 2               mmc3_initialize:
00010Br 2               	; load PRG ROM banks
00010Br 2  A9 46        	lda #(def_mmc3_bn | 6)
00010Dr 2  8D 00 80     	sta mmc3_bsel
000110r 2  A5 00        	lda prgb_lvl0
000112r 2  8D 01 80     	sta mmc3_bdat
000115r 2               
000115r 2  A9 47        	lda #(def_mmc3_bn | 7)
000117r 2  8D 00 80     	sta mmc3_bsel
00011Ar 2  A5 0A        	lda prgb_lvla
00011Cr 2  8D 01 80     	sta mmc3_bdat
00011Fr 2               
00011Fr 2               	; note: don't need to load default banks, the title screen init code will do that for me.
00011Fr 2               
00011Fr 2  20 rr rr     	jsr mmc3_horzarr
000122r 2               
000122r 2  A9 80        	lda #%10000000   ; enable PRG RAM, disable write protection
000124r 2  8D 01 A0     	sta mmc3_pram
000127r 2               
000127r 2  8D 00 E0     	sta mmc3_irqdi   ; disable IRQs for now
00012Ar 2               
00012Ar 2  60           	rts
00012Br 2               
00012Br 2               ; ** ENTRY POINT
00012Br 2               reset:
00012Br 2  78           	sei              ; disable interrupts
00012Cr 2  D8           	cld              ; clear decimal flag - not really required
00012Dr 2  A2 40        	ldx #apu_irq_off ; disable APU IRQ
00012Fr 2  8E 17 40     	stx apu_frctr
000132r 2  A2 FF        	ldx #$ff         ; set stack pointer to 0xff
000134r 2  9A           	txs
000135r 2  E8           	inx              ; X = 0
000136r 2  8E 00 20     	stx ppu_ctrl     ; disable PPU NMI
000139r 2  8E 01 20     	stx ppu_mask     ; disable rendering
00013Cr 2  8E 10 40     	stx apu_dmc_cfg  ; disable APU DMC IRQs
00013Fr 2  2C 02 20     	bit ppu_status   ; clear status
000142r 2  20 rr rr     	jsr vblank_wait
000145r 2               
000145r 2  A2 00        	ldx #$00
000147r 2               reset_clrmem:
000147r 2               	; clears all 2KB of work RAM. that includes the zero page.
000147r 2  95 00        	sta $000, x
000149r 2  9D 00 01     	sta $100, x
00014Cr 2  9D 00 02     	sta $200, x
00014Fr 2  9D 00 03     	sta $300, x
000152r 2  9D 00 04     	sta $400, x
000155r 2  9D 00 05     	sta $500, x
000158r 2  9D 00 06     	sta $600, x
00015Br 2  9D 00 07     	sta $700, x
00015Er 2  E8           	inx
00015Fr 2  D0 E6        	bne reset_clrmem
000161r 2               
000161r 2  20 rr rr     	jsr mmc3_initialize
000164r 2               
000164r 2               	; TODO: other setup here
000164r 2               
000164r 2  20 rr rr     	jsr vblank_wait  ; second vblank wait
000167r 2               
000167r 2  A0 rr        	ldy #<init_palette
000169r 2  20 rr rr     	jsr load_palette ; move palette to palette RAM
00016Cr 2               
00016Cr 2  A0 1E        	ldy #def_ppu_msk ; show background & sprites
00016Er 2  8C 01 20     	sty ppu_mask     ; set the ppu mask
000171r 2  A0 A8        	ldy #(pctl_sprsz | pctl_sppat | pctl_nmi_on) ; set sprite size (8x16), bg pattern addr and NMI enable
000173r 2  84 rr        	sty ctl_flags
000175r 2  8C 00 20     	sty ppu_ctrl
000178r 2               
000178r 2               	;jsr aud_init
000178r 2               
000178r 2  A0 01        	ldy #gm_title
00017Ar 2  84 rr        	sty gamemode     ; set title screen mode
00017Cr 2               
00017Cr 2  A0 AC        	ldy #$ac
00017Er 2  84 rr        	sty rng_state    ; initialize rng seed
000180r 2               
000180r 2  20 rr rr     	jsr vblank_wait  ; one final vblank wait
000183r 2               
000183r 2  20 rr rr     	jsr aud_load_sfx
000186r 2               
000186r 2  20 rr rr     	jsr ppu_nmi_on
000189r 2  58           	cli
00018Ar 2               
00018Ar 2               ; ** MAIN LOOP
00018Ar 2               main_loop:
00018Ar 2  20 rr rr     	jsr soft_nmi_off
00018Dr 2  20 rr rr     	jsr game_update
000190r 2  20 rr rr     	jsr soft_nmi_on
000193r 2  20 rr rr     	jsr nmi_wait
000196r 2  4C rr rr     	jmp main_loop
000199r 2               
000199r 2               .include "update.asm"
000199r 3               ; Copyright (C) 2024 iProgramInCpp
000199r 3               
000199r 3               gamemodes_LO:
000199r 3  rr           	.byte <gamemode_game
00019Ar 3  rr           	.byte <gamemode_title
00019Br 3  rr           	.byte <gamemode_titletr
00019Cr 3  rr           	.byte <gamemode_overwd
00019Dr 3  rr           	.byte <gamemode_prologue
00019Er 3               
00019Er 3               gamemodes_HI:
00019Er 3  rr           	.byte >gamemode_game
00019Fr 3  rr           	.byte >gamemode_title
0001A0r 3  rr           	.byte >gamemode_titletr
0001A1r 3  rr           	.byte >gamemode_overwd
0001A2r 3  rr           	.byte >gamemode_prologue
0001A3r 3               
0001A3r 3               ; ** SUBROUTINE: jump_engine
0001A3r 3               ; desc: Jumps to the address corresponding to the current game mode.
0001A3r 3               jump_engine:
0001A3r 3  A6 rr        	ldx gamemode
0001A5r 3  BD rr rr     	lda gamemodes_LO, x
0001A8r 3  85 rr        	sta temp1
0001AAr 3  BD rr rr     	lda gamemodes_HI, x
0001ADr 3  85 rr        	sta temp1+1
0001AFr 3  6C rr rr     	jmp (temp1)
0001B2r 3               
0001B2r 3               ; ** SUBROUTINE: rand_m2_to_p1
0001B2r 3               ; desc: Gets a random value between [-2, 1]
0001B2r 3               rand_m2_to_p1:
0001B2r 3  A2 00        	ldx #0
0001B4r 3  20 rr rr     	jsr rand
0001B7r 3  29 03        	and #3
0001B9r 3  38           	sec
0001BAr 3  E9 02        	sbc #2
0001BCr 3  10 02        	bpl :+
0001BEr 3  A2 FF        	ldx #$FF
0001C0r 3  86 rr        :	stx temp5
0001C2r 3  60           	rts
0001C3r 3               
0001C3r 3               ; ** SUBROUTINE: rand_m1_to_p2
0001C3r 3               ; desc: Gets a random value between [-1, 2]
0001C3r 3               rand_m1_to_p2:
0001C3r 3  A2 00        	ldx #0
0001C5r 3  20 rr rr     	jsr rand
0001C8r 3  29 03        	and #3
0001CAr 3  38           	sec
0001CBr 3  E9 01        	sbc #1
0001CDr 3  10 02        	bpl :+
0001CFr 3  A2 FF        	ldx #$FF
0001D1r 3  86 rr        :	stx temp5
0001D3r 3  60           	rts
0001D4r 3               
0001D4r 3               .include "weather.asm"
0001D4r 4               
0001D4r 4               ; ** SUBROUTINE: tl_adjust_y
0001D4r 4               ; arguments: a - the Y coordinate to adjust
0001D4r 4               ; returns:   a - the adjusted Y coordinate
0001D4r 4               ; clobbers:  x
0001D4r 4               ; desc:      adjusts a Y coordinate to fit in a [0, 224] range
0001D4r 4               tl_adjust_y:
0001D4r 4  AA           	tax
0001D5r 4  E0 E0        	cpx #$E0
0001D7r 4  90 08        	bcc tl_adjusret
0001D9r 4  E9 E0        	sbc #$E0
0001DBr 4  0A           	asl
0001DCr 4  0A           	asl
0001DDr 4  0A           	asl
0001DEr 4  0A           	asl
0001DFr 4  29 DF        	and #%11011111
0001E1r 4               tl_adjusret:
0001E1r 4  60           	rts
0001E2r 4               
0001E2r 4               ; ** SUBROUTINE: tl_init_snow
0001E2r 4               tl_init_snow:
0001E2r 4  A0 00        	ldy #$00           ; initialize Y coordinates
0001E4r 4               tl_initloop1:
0001E4r 4  20 rr rr     	jsr rand
0001E7r 4  99 rr rr     	sta tl_snow_y, y
0001EAr 4  C8           	iny
0001EBr 4  C0 10        	cpy #$10
0001EDr 4  D0 F5        	bne tl_initloop1
0001EFr 4               
0001EFr 4  A0 00        	ldy #$00           ; initialize X coordinates
0001F1r 4               tl_initloop2:
0001F1r 4  20 rr rr     	jsr rand
0001F4r 4  99 rr rr     	sta tl_snow_x, y
0001F7r 4  C8           	iny
0001F8r 4  C0 10        	cpy #$10
0001FAr 4  D0 F5        	bne tl_initloop2
0001FCr 4               
0001FCr 4  60           	rts
0001FDr 4               
0001FDr 4               osciltable:
0001FDr 4  FF FF 00 00  	.byte $FF,$FF,$00,$00,$00,$00,$01,$01,$01,$01,$00,$00,$00,$00,$FF,$FF
000201r 4  00 00 01 01  
000205r 4  01 01 00 00  
00020Dr 4               
00020Dr 4               ; ** SUBROUTINE: tl_update_snow
00020Dr 4               tl_update_snow:
00020Dr 4  E6 rr        	inc tl_timer
00020Fr 4  A0 00        	ldy #$00
000211r 4               
000211r 4               	; update Y coordinate to oscillate
000211r 4               tl_updaupdloop:
000211r 4  98           	tya
000212r 4  65 rr        	adc tl_timer
000214r 4  29 07        	and #$07
000216r 4  D0 13        	bne tl_updadontosci
000218r 4  98           	tya
000219r 4  65 rr        	adc tl_timer
00021Br 4  4A           	lsr
00021Cr 4  4A           	lsr
00021Dr 4  4A           	lsr
00021Er 4  29 0F        	and #$0F
000220r 4  AA           	tax
000221r 4  B9 rr rr     	lda tl_snow_y, y
000224r 4  18           	clc
000225r 4  7D rr rr     	adc osciltable, x
000228r 4  99 rr rr     	sta tl_snow_y, y
00022Br 4               tl_updadontosci:
00022Br 4               
00022Br 4               	; update X coordinate to go left
00022Br 4  B6 rr        	ldx tl_snow_x, y
00022Dr 4  CA           	dex
00022Er 4  F0 10        	beq tl_updatrespawn
000230r 4  98           	tya
000231r 4  29 01        	and #$01
000233r 4  D0 03        	bne tl_updadontdecr
000235r 4  CA           	dex
000236r 4  F0 08        	beq tl_updatrespawn
000238r 4               tl_updadontdecr:
000238r 4  96 rr        	stx tl_snow_x, y
00023Ar 4               tl_updacontinue:
00023Ar 4               
00023Ar 4               	; move on to the next particle
00023Ar 4  C8           	iny
00023Br 4  C0 10        	cpy #$10
00023Dr 4  D0 D2        	bne tl_updaupdloop
00023Fr 4  60           	rts
000240r 4               tl_updatrespawn:         ; respawn this particle
000240r 4  A9 FF        	lda #$FF
000242r 4  99 rr rr     	sta tl_snow_x, y
000245r 4  20 rr rr     	jsr rand
000248r 4  20 rr rr     	jsr tl_adjust_y
00024Br 4  99 rr rr     	sta tl_snow_y, y
00024Er 4  4C rr rr     	jmp tl_updacontinue
000251r 4               
000251r 4  90 92        snow_sprites: .byte $90, $92
000253r 4               
000253r 4               ; ** SUBROUTINE: tl_render_snow
000253r 4               tl_render_snow:
000253r 4  A0 00        	ldy #$00
000255r 4               tl_render_loop:
000255r 4  B9 rr rr     	lda tl_snow_y, y
000258r 4  85 rr        	sta y_crd_temp
00025Ar 4  B9 rr rr     	lda tl_snow_x, y
00025Dr 4  85 rr        	sta x_crd_temp
00025Fr 4  98           	tya
000260r 4  48           	pha
000261r 4  29 01        	and #$01
000263r 4  A8           	tay
000264r 4  B9 rr rr     	lda snow_sprites, y
000267r 4  A8           	tay
000268r 4  A9 03        	lda #3
00026Ar 4  20 rr rr     	jsr oam_putsprite
00026Dr 4  68           	pla
00026Er 4  A8           	tay
00026Fr 4  C8           	iny
000270r 4  C0 10        	cpy #$10
000272r 4  D0 E1        	bne tl_render_loop
000274r 4  60           	rts
000275r 4               
000275r 3               .include "title.asm"
000275r 4               ; Copyright (C) 2024 iProgramInCpp
000275r 4               
000275r 4               ; ** SUBROUTINE: print_logo
000275r 4               ; clobbers: a, x, y
000275r 4               ; assumes:  video output disabled
000275r 4               print_logo:
000275r 4               	; write the actual logo, in 4 parts.
000275r 4  A0 20        	ldy #$20
000277r 4  A2 00        	ldx #$00
000279r 4  20 rr rr     	jsr ppu_loadaddr
00027Cr 4  A2 rr        	ldx #<(tscr_canvas + $0000)
00027Er 4  A0 rr        	ldy #>(tscr_canvas + $0000)
000280r 4  A9 00        	lda #0
000282r 4  20 rr rr     	jsr ppu_wrstring
000285r 4               
000285r 4  A2 rr        	ldx #<(tscr_canvas + $0100)
000287r 4  A0 rr        	ldy #>(tscr_canvas + $0100)
000289r 4  A9 00        	lda #0
00028Br 4  20 rr rr     	jsr ppu_wrstring
00028Er 4               
00028Er 4  A2 rr        	ldx #<(tscr_canvas + $0200)
000290r 4  A0 rr        	ldy #>(tscr_canvas + $0200)
000292r 4  A9 00        	lda #0
000294r 4  20 rr rr     	jsr ppu_wrstring
000297r 4               
000297r 4  A2 rr        	ldx #<(tscr_canvas + $0300)
000299r 4  A0 rr        	ldy #>(tscr_canvas + $0300)
00029Br 4  A9 00        	lda #0
00029Dr 4  20 rr rr     	jsr ppu_wrstring
0002A0r 4               
0002A0r 4               	; write the "PRESS START" text
0002A0r 4  A0 22        	ldy #$22
0002A2r 4  A2 EA        	ldx #$EA
0002A4r 4  20 rr rr     	jsr ppu_loadaddr
0002A7r 4  A2 rr        	ldx #<logo_pressstart
0002A9r 4  A0 rr        	ldy #>logo_pressstart
0002ABr 4  A9 0B        	lda #11
0002ADr 4  20 rr rr     	jsr ppu_wrstring
0002B0r 4               
0002B0r 4               	; write iProgramInCpp's name
0002B0r 4  A0 23        	ldy #$23
0002B2r 4  A2 4C        	ldx #$4C
0002B4r 4  20 rr rr     	jsr ppu_loadaddr
0002B7r 4  A2 rr        	ldx #<logo_iprogram
0002B9r 4  A0 rr        	ldy #>logo_iprogram
0002BBr 4  A9 07        	lda #7
0002BDr 4  20 rr rr     	jsr ppu_wrstring
0002C0r 4  60           	rts
0002C1r 4               
0002C1r 4               tl_gameswitch:
0002C1r 4  A9 00        	lda #gm_game
0002C3r 4  85 rr        	sta gamemode
0002C5r 4  A9 00        	lda #0
0002C7r 4  85 rr        	sta gamectrl
0002C9r 4  85 rr        	sta musictable
0002CBr 4  85 rr        	sta musictable+1
0002CDr 4  20 rr rr     	jsr gm_set_level
0002D0r 4  60           	rts
0002D1r 4               
0002D1r 4               tl_prolswitch:
0002D1r 4  A9 04        	lda #gm_prologue
0002D3r 4  85 rr        	sta gamemode
0002D5r 4  A9 00        	lda #0
0002D7r 4  85 rr        	sta prolctrl
0002D9r 4  60           	rts
0002DAr 4               
0002DAr 4               tl_owldswitch:
0002DAr 4  A9 03        	lda #gm_overwld
0002DCr 4  85 rr        	sta gamemode
0002DEr 4  A9 00        	lda #0
0002E0r 4  85 rr        	sta owldctrl
0002E2r 4               
0002E2r 4  20 rr rr     	jsr vblank_wait
0002E5r 4  A9 00        	lda #0
0002E7r 4  8D 01 20     	sta ppu_mask        ; disable rendering
0002EAr 4  60           	rts
0002EBr 4               
0002EBr 4               ; ** GAMEMODE: gamemode_title
0002EBr 4               gamemode_title:
0002EBr 4  A9 01        	lda #ts_1stfr
0002EDr 4  24 rr        	bit titlectrl    ; might need to update the screen buffer
0002EFr 4  D0 41        	bne gamemode_title_update
0002F1r 4               
0002F1r 4  A9 00        	lda #$00
0002F3r 4  85 rr        	sta camera_x     ; clear some fields
0002F5r 4  85 rr        	sta camera_x_hi
0002F7r 4  8D 01 20     	sta ppu_mask     ; disable rendering
0002FAr 4               
0002FAr 4               	; have to reset audio data because DPCM samples are loaded in at $C000
0002FAr 4               	; and we want to use that bank for title screen and overworld data.
0002FAr 4               	; We have 8K at our disposal.
0002FAr 4  20 rr rr     	jsr aud_reset
0002FDr 4               
0002FDr 4               	; Load said bank.
0002FDr 4  A9 06        	lda #mmc3bk_prg0
0002FFr 4  A0 0D        	ldy #prgb_ttle
000301r 4  20 rr rr     	jsr mmc3_set_bank
000304r 4               
000304r 4  20 rr rr     	jsr vblank_wait  ; wait for vblank
000307r 4               
000307r 4               	; Also load the title screen palette.
000307r 4  A9 rr        	lda #<title_palette
000309r 4  85 rr        	sta paladdr
00030Br 4  A9 rr        	lda #>title_palette
00030Dr 4  85 rr        	sta paladdr+1
00030Fr 4  20 rr rr     	jsr load_palette
000312r 4               
000312r 4  A9 20        	lda #$20
000314r 4  20 rr rr     	jsr clear_nt     ; clear the screen
000317r 4               
000317r 4  20 rr rr     	jsr print_logo   ; print the logo and the "PRESS BUTTON" text
00031Ar 4  20 rr rr     	jsr tl_init_snow ; initialize snow
00031Dr 4  20 rr rr     	jsr ppu_rstaddr  ; reset PPUADDR
000320r 4               
000320r 4  A5 rr        	lda titlectrl
000322r 4  09 01        	ora #ts_1stfr
000324r 4  85 rr        	sta titlectrl
000326r 4  A5 rr        	lda nmictrl
000328r 4  09 01        	ora #nc_turnon
00032Ar 4  85 rr        	sta nmictrl
00032Cr 4               
00032Cr 4  20 rr rr     	jsr tl_select_banks
00032Fr 4  20 rr rr     	jsr vblank_wait
000332r 4               
000332r 4               gamemode_title_update:
000332r 4  20 rr rr     	jsr tl_update_snow
000335r 4  20 rr rr     	jsr tl_render_snow
000338r 4               
000338r 4  A9 10        	lda #cont_start
00033Ar 4  24 rr        	bit p1_cont
00033Cr 4  F0 0C        	beq tl_no_transition
00033Er 4  A9 02        	lda #gm_titletra
000340r 4  85 rr        	sta gamemode
000342r 4  A9 08        	lda #8
000344r 4  85 rr        	sta tl_timer
000346r 4  A9 1E        	lda #tm_gametra
000348r 4  85 rr        	sta tl_gametime
00034Ar 4               tl_no_transition:
00034Ar 4  60           	rts
00034Br 4               
00034Br 4               gamemode_titletr:
00034Br 4  20 rr rr     	jsr tl_update_snow
00034Er 4  20 rr rr     	jsr tl_render_snow
000351r 4               
000351r 4  A6 rr        	ldx tl_gametime
000353r 4  CA           	dex
000354r 4  F0 84        	beq tl_owldswitch
000356r 4  86 rr        	stx tl_gametime
000358r 4  60           	rts
000359r 4               
000359r 4               alt_colors:
000359r 4  27 29        	.byte $27, $29
00035Br 4  17 19        	.byte $17, $19
00035Dr 4  07 09        	.byte $07, $09
00035Fr 4               
00035Fr 4               ; TODO: PLACEHOLDER
00035Fr 4               gamemode_title_:
00035Fr 4  F0 8A        	beq gamemode_title
000361r 4               
000361r 3               .include "overwld.asm"
000361r 4               ; Copyright (C) 2024 iProgramInCpp
000361r 4               
000361r 4               ; ** GAMEMODE: gamemode_overwd
000361r 4               gamemode_overwd:
000361r 4  A9 01        	lda #os_1stfr
000363r 4  24 rr        	bit owldctrl
000365r 4  D0 4C        	bne gamemode_overwd_update
000367r 4               
000367r 4  20 rr rr     	jsr aud_reset
00036Ar 4               
00036Ar 4  A9 00        	lda #0
00036Cr 4  85 rr        	sta ow_sellvl
00036Er 4               
00036Er 4               	; Load said bank.
00036Er 4  A9 06        	lda #mmc3bk_prg0
000370r 4  A0 0D        	ldy #prgb_ttle
000372r 4  20 rr rr     	jsr mmc3_set_bank
000375r 4               
000375r 4  A9 00        	lda #0
000377r 4  85 rr        	sta camera_x
000379r 4  85 rr        	sta camera_x_hi
00037Br 4  85 rr        	sta camera_y
00037Dr 4  85 rr        	sta camera_y_hi
00037Fr 4  8D 01 20     	sta ppu_mask     ; disable rendering
000382r 4  20 rr rr     	jsr vblank_wait
000385r 4               
000385r 4  A0 rr        	ldy #<owld_palette
000387r 4  84 rr        	sty paladdr
000389r 4  A0 rr        	ldy #>owld_palette
00038Br 4  84 rr        	sty paladdr+1
00038Dr 4  20 rr rr     	jsr load_palette
000390r 4               
000390r 4  A9 20        	lda #$20
000392r 4  20 rr rr     	jsr clear_nt
000395r 4               
000395r 4  20 rr rr     	jsr ow_draw_mtn
000398r 4  20 rr rr     	jsr ow_draw_level_name
00039Br 4  20 rr rr     	jsr ow_draw_icon_fadeout
00039Er 4               	;jsr tl_init_snow
00039Er 4  20 rr rr     	jsr ppu_rstaddr
0003A1r 4  A5 rr        	lda owldctrl
0003A3r 4  09 01        	ora #os_1stfr
0003A5r 4  85 rr        	sta owldctrl
0003A7r 4               
0003A7r 4               	; request a turn-on
0003A7r 4  A5 rr        	lda nmictrl
0003A9r 4  09 01        	ora #nc_turnon
0003ABr 4  85 rr        	sta nmictrl
0003ADr 4               
0003ADr 4  20 rr rr     	jsr ow_select_banks
0003B0r 4  20 rr rr     	jsr vblank_wait
0003B3r 4               
0003B3r 4               gamemode_overwd_update:
0003B3r 4               	;jsr tl_update_snow
0003B3r 4               	;jsr tl_render_snow
0003B3r 4               
0003B3r 4               	; draw features
0003B3r 4  E6 rr        	inc ow_timer
0003B5r 4  20 rr rr     	jsr ow_handle_input
0003B8r 4  20 rr rr     	jsr ow_level_slide
0003BBr 4  20 rr rr     	jsr ow_draw_player
0003BEr 4  20 rr rr     	jsr ow_draw_c0_hut
0003C1r 4  20 rr rr     	jsr ow_draw_c1_city
0003C4r 4  20 rr rr     	jsr ow_draw_c2_tower
0003C7r 4  20 rr rr     	jsr ow_draw_c3_hotel
0003CAr 4  20 rr rr     	jsr ow_draw_c4_cliff
0003CDr 4  20 rr rr     	jsr ow_draw_c5_temple
0003D0r 4  20 rr rr     	jsr ow_draw_c7_summit
0003D3r 4  20 rr rr     	jsr ow_draw_icons
0003D6r 4               
0003D6r 4  A9 18        	lda #(os_leftmov | os_rightmov)
0003D8r 4  24 rr        	bit owldctrl
0003DAr 4  D0 06        	bne @return         ; don't handle controller input during a transition
0003DCr 4               
0003DCr 4  A9 90        	lda #(cont_a | cont_start)
0003DEr 4  24 rr        	bit ow_temp5
0003E0r 4  D0 01        	bne @startGame
0003E2r 4               @return:
0003E2r 4  60           	rts
0003E3r 4               
0003E3r 4               @startGame:
0003E3r 4               	; now enter the game!
0003E3r 4  20 rr rr     	jsr vblank_wait
0003E6r 4  A9 00        	lda #0
0003E8r 4  8D 01 20     	sta ppu_mask        ; disable rendering to obscure that gm_set_level sets the bank early
0003EBr 4               
0003EBr 4  A6 rr        	ldx ow_sellvl
0003EDr 4  F0 03        	beq @isPrologue
0003EFr 4               
0003EFr 4  4C rr rr     	jmp tl_gameswitch
0003F2r 4               
0003F2r 4               @isPrologue:
0003F2r 4  4C rr rr     	jmp tl_prolswitch
0003F5r 4               
0003F5r 4               ; ** SUBROUTINE: ow_level_slide
0003F5r 4               ; desc: Handles left/right slide of the level scroller.
0003F5r 4               ow_level_slide:
0003F5r 4  A9 08        	lda #os_leftmov
0003F7r 4  24 rr        	bit owldctrl
0003F9r 4  F0 19        	beq @right
0003FBr 4               
0003FBr 4               	; left
0003FBr 4  A5 rr        	lda ow_slidetmr
0003FDr 4  D0 06        	bne :+
0003FFr 4  A5 rr        	lda ow_sellvl
000401r 4  F0 4B        	beq @cancel_slide   ; if level is already 0, then cancel!
000403r 4  A5 rr        	lda ow_slidetmr
000405r 4  C9 0C        :	cmp #12
000407r 4  F0 45        	beq @cancel_slide
000409r 4  C9 04        	cmp #4
00040Br 4  F0 29        	beq @left_frame4
00040Dr 4               
00040Dr 4  E6 rr        	inc ow_slidetmr
00040Fr 4  E6 rr        	inc ow_iconoff
000411r 4  E6 rr        	inc ow_iconoff
000413r 4  60           	rts
000414r 4               
000414r 4               @right:
000414r 4               
000414r 4  A9 10        	lda #os_rightmov
000416r 4  24 rr        	bit owldctrl
000418r 4  F0 1B        	beq @ret
00041Ar 4               
00041Ar 4               	; right
00041Ar 4  A5 rr        	lda ow_slidetmr
00041Cr 4  D0 08        	bne :+
00041Er 4  A5 rr        	lda ow_sellvl
000420r 4  C9 07        	cmp #ow_maxlvl
000422r 4  F0 2A        	beq @cancel_slide   ; if level is already max, then cancel!
000424r 4  A5 rr        	lda ow_slidetmr
000426r 4  C9 0C        :	cmp #12
000428r 4  F0 24        	beq @cancel_slide
00042Ar 4  C9 04        	cmp #4
00042Cr 4  F0 14        	beq @right_frame4
00042Er 4               
00042Er 4  E6 rr        	inc ow_slidetmr
000430r 4  C6 rr        	dec ow_iconoff
000432r 4  C6 rr        	dec ow_iconoff
000434r 4  60           	rts
000435r 4               
000435r 4               @ret:
000435r 4  60           	rts
000436r 4               
000436r 4               @left_frame4:
000436r 4  E6 rr        	inc ow_slidetmr
000438r 4  C6 rr        	dec ow_sellvl
00043Ar 4  A9 F0        	lda #$F0
00043Cr 4  85 rr        	sta ow_iconoff
00043Er 4  20 rr rr     	jsr ow_queue_lvlnm_upd
000441r 4  60           	rts
000442r 4               
000442r 4               @right_frame4:
000442r 4  E6 rr        	inc ow_slidetmr
000444r 4  E6 rr        	inc ow_sellvl
000446r 4  A9 10        	lda #$10
000448r 4  85 rr        	sta ow_iconoff
00044Ar 4  20 rr rr     	jsr ow_queue_lvlnm_upd
00044Dr 4  60           	rts
00044Er 4               
00044Er 4               @cancel_slide:
00044Er 4  A9 E7        	lda #((os_leftmov | os_rightmov) ^ $FF)
000450r 4  25 rr        	and owldctrl
000452r 4  85 rr        	sta owldctrl     ; clear the overworld control and return
000454r 4  A9 00        	lda #0
000456r 4  85 rr        	sta ow_iconoff
000458r 4  85 rr        	sta ow_slidetmr
00045Ar 4  60           	rts
00045Br 4               
00045Br 4               ; ** SUBROUTINE: ow_draw_level_icon
00045Br 4               ; desc: Draws the icon corresponding to a level.
00045Br 4               ; params:
00045Br 4               ;     x_crd_temp: The X position of the left of the metasprite.
00045Br 4               ;     y_crd_temp: The Y position of the top  of the metasprite.
00045Br 4               ;     reg A: The level number in question.
00045Br 4               ;     reg Y:
00045Br 4               ; clobbers: X, Y
00045Br 4               ow_draw_level_icon:
00045Br 4  48           	pha
00045Cr 4  AA           	tax
00045Dr 4  0A           	asl
00045Er 4  0A           	asl
00045Fr 4  18           	clc
000460r 4  69 60        	adc #$60
000462r 4  48           	pha
000463r 4  A8           	tay
000464r 4  BD rr rr     	lda ow_icon_pals, x
000467r 4  20 rr rr     	jsr oam_putsprite
00046Ar 4               ow_draw_level_icon_rs_:
00046Ar 4  A5 rr        	lda x_crd_temp
00046Cr 4  18           	clc
00046Dr 4  69 08        	adc #8
00046Fr 4  85 rr        	sta x_crd_temp
000471r 4  68           	pla
000472r 4  A8           	tay
000473r 4  C8           	iny
000474r 4  C8           	iny
000475r 4  68           	pla
000476r 4  AA           	tax
000477r 4  BD rr rr     	lda ow_icon_pals, x
00047Ar 4  4C rr rr     	jmp oam_putsprite
00047Dr 4               ow_draw_level_icon_rs:
00047Dr 4  48           	pha
00047Er 4  AA           	tax
00047Fr 4  0A           	asl
000480r 4  0A           	asl
000481r 4  18           	clc
000482r 4  69 60        	adc #$60
000484r 4  48           	pha
000485r 4  4C rr rr     	jmp ow_draw_level_icon_rs_
000488r 4               ow_draw_level_icon_ls:
000488r 4  AA           	tax
000489r 4  0A           	asl
00048Ar 4  0A           	asl
00048Br 4  18           	clc
00048Cr 4  69 60        	adc #$60
00048Er 4  A8           	tay
00048Fr 4  BD rr rr     	lda ow_icon_pals, x
000492r 4  4C rr rr     	jmp oam_putsprite
000495r 4               
000495r 4               ; ** SUBROUTINE: ow_draw_icon_fadeout
000495r 4               ow_Xof3A:
000495r 4  A9 3A        	lda #$3A
000497r 4  A2 0B        	ldx #11
000499r 4  8D 07 20     :	sta ppu_data
00049Cr 4  CA           	dex
00049Dr 4  D0 FA        	bne :-
00049Fr 4  60           	rts
0004A0r 4               
0004A0r 4               ow_draw_icon_fadeout:
0004A0r 4  A0 00        	ldy #0
0004A2r 4  A9 20        :	lda #$20
0004A4r 4  8D 06 20     	sta ppu_addr
0004A7r 4  98           	tya
0004A8r 4  0A           	asl
0004A9r 4  0A           	asl
0004AAr 4  0A           	asl
0004ABr 4  0A           	asl
0004ACr 4  0A           	asl
0004ADr 4  18           	clc
0004AEr 4  69 40        	adc #$40
0004B0r 4  8D 06 20     	sta ppu_addr
0004B3r 4               	; left side
0004B3r 4  20 rr rr     	jsr ow_Xof3A
0004B6r 4  A9 FB        	lda #$FB
0004B8r 4  8D 07 20     	sta ppu_data
0004BBr 4               	; skip a bunch
0004BBr 4  A9 00        	lda #0
0004BDr 4  A2 08        	ldx #8
0004BFr 4  8D 07 20     :	sta ppu_data
0004C2r 4  CA           	dex
0004C3r 4  D0 FA        	bne :-
0004C5r 4               	; right side
0004C5r 4  A9 FC        	lda #$FC
0004C7r 4  8D 07 20     	sta ppu_data
0004CAr 4  20 rr rr     	jsr ow_Xof3A
0004CDr 4  C8           	iny
0004CEr 4  C0 02        	cpy #2
0004D0r 4  D0 D0        	bne :--
0004D2r 4  60           	rts
0004D3r 4               
0004D3r 4               ; ** SUBROUTINE: ow_draw_icons
0004D3r 4               ; desc: Draws the icons corresponding to the selected level and surrounding
0004D3r 4               ;       levels to the screen.
0004D3r 4               ow_draw_icons:
0004D3r 4  A9 78        	lda #((256-16)/2)
0004D5r 4  18           	clc
0004D6r 4  65 rr        	adc ow_iconoff
0004D8r 4  85 rr        	sta x_crd_temp          ; calculate the center coordinates
0004DAr 4               
0004DAr 4  A9 0E        	lda #14                 ; note: ow_draw_level_icon clobbers x_crd_temp.
0004DCr 4  85 rr        	sta y_crd_temp
0004DEr 4               
0004DEr 4  A5 rr        	lda ow_sellvl
0004E0r 4  20 rr rr     	jsr ow_draw_level_icon  ; draws the center icon.
0004E3r 4               
0004E3r 4  A6 rr        	ldx ow_sellvl
0004E5r 4  F0 23        	beq :+
0004E7r 4               
0004E7r 4               	; draw the previous one
0004E7r 4  A9 60        	lda #(((256-16)/2)-24)
0004E9r 4  18           	clc
0004EAr 4  65 rr        	adc ow_iconoff
0004ECr 4  85 rr        	sta x_crd_temp
0004EEr 4  CA           	dex
0004EFr 4  8A           	txa
0004F0r 4  20 rr rr     	jsr ow_draw_level_icon
0004F3r 4               
0004F3r 4  A5 rr        	lda ow_iconoff
0004F5r 4  30 13        	bmi :+
0004F7r 4  F0 11        	beq :+
0004F9r 4               
0004F9r 4  A6 rr        	ldx ow_sellvl
0004FBr 4  CA           	dex
0004FCr 4  CA           	dex
0004FDr 4  30 0B        	bmi :+
0004FFr 4  A9 48        	lda #(((256-16)/2)-24-24)
000501r 4  18           	clc
000502r 4  65 rr        	adc ow_iconoff
000504r 4  85 rr        	sta x_crd_temp
000506r 4  8A           	txa
000507r 4  20 rr rr     	jsr ow_draw_level_icon_rs
00050Ar 4               
00050Ar 4  A6 rr        :	ldx ow_sellvl
00050Cr 4  E0 07        	cpx #ow_maxlvl
00050Er 4  F0 23        	beq :+
000510r 4               
000510r 4               	; draw the next one
000510r 4  A9 90        	lda #(((256-16)/2)+24)
000512r 4  18           	clc
000513r 4  65 rr        	adc ow_iconoff
000515r 4  85 rr        	sta x_crd_temp
000517r 4  E8           	inx
000518r 4  8A           	txa
000519r 4  20 rr rr     	jsr ow_draw_level_icon
00051Cr 4               
00051Cr 4  A5 rr        	lda ow_iconoff
00051Er 4  10 13        	bpl :+
000520r 4               
000520r 4  A6 rr        	ldx ow_sellvl
000522r 4  E8           	inx
000523r 4  E8           	inx
000524r 4  E0 07        	cpx #ow_maxlvl
000526r 4  B0 0B        	bcs :+
000528r 4  A9 A8        	lda #(((256-16)/2)+24+24)
00052Ar 4  18           	clc
00052Br 4  65 rr        	adc ow_iconoff
00052Dr 4  85 rr        	sta x_crd_temp
00052Fr 4  8A           	txa
000530r 4  20 rr rr     	jsr ow_draw_level_icon_ls
000533r 4               
000533r 4               :	; draw the arrows on the current level
000533r 4  A9 7C        	lda #((256-8)/2)
000535r 4  85 rr        	sta x_crd_temp
000537r 4  A9 04        	lda #4
000539r 4  85 rr        	sta y_crd_temp
00053Br 4               
00053Br 4  A9 10        	lda #%00010000
00053Dr 4  24 rr        	bit ow_timer
00053Fr 4  F0 02        	beq :+
000541r 4  E6 rr        	inc y_crd_temp
000543r 4               
000543r 4  A9 01        :	lda #1
000545r 4  A0 1E        	ldy #$1E
000547r 4  20 rr rr     	jsr oam_putsprite
00054Ar 4               
00054Ar 4  A9 7C        	lda #((256-8)/2)
00054Cr 4  85 rr        	sta x_crd_temp
00054Er 4  A9 18        	lda #24
000550r 4  85 rr        	sta y_crd_temp
000552r 4               
000552r 4  A9 10        	lda #%00010000
000554r 4  24 rr        	bit ow_timer
000556r 4  F0 02        	beq :+
000558r 4  C6 rr        	dec y_crd_temp
00055Ar 4               
00055Ar 4  A9 81        :	lda #(1 | obj_flipvt)
00055Cr 4  A0 1E        	ldy #$1E
00055Er 4  20 rr rr     	jsr oam_putsprite
000561r 4               
000561r 4  60           	rts
000562r 4               
000562r 4               ; ** SUBROUTINE: ow_draw_level_name
000562r 4               ; desc: Draws the new level name.
000562r 4               ; assumes: Inside of NMI
000562r 4               ow_draw_level_name:
000562r 4  A0 20        	ldy #$20
000564r 4  A2 C8        	ldx #$C8
000566r 4  20 rr rr     	jsr ppu_loadaddr
000569r 4               
000569r 4  A5 rr        	lda ow_sellvl
00056Br 4  0A           	asl
00056Cr 4  0A           	asl
00056Dr 4  0A           	asl
00056Er 4  0A           	asl
00056Fr 4  18           	clc
000570r 4  69 rr        	adc #<ow_level_names
000572r 4  AA           	tax
000573r 4               
000573r 4  A9 rr        	lda #>ow_level_names
000575r 4  69 00        	adc #0
000577r 4  A8           	tay
000578r 4               
000578r 4  A9 10        	lda #16
00057Ar 4  4C rr rr     	jmp ppu_wrstring
00057Dr 4               
00057Dr 4               ; ** SUBROUTINE: ow_handle_input
00057Dr 4               ; desc: Handles input.
00057Dr 4               ow_handle_input:
00057Dr 4  A9 18        	lda #(os_leftmov | os_rightmov)
00057Fr 4  24 rr        	bit owldctrl
000581r 4  F0 01        	beq :+
000583r 4  60           	rts
000584r 4               
000584r 4  A5 rr        :	lda p1_cont
000586r 4  45 rr        	eor p1_conto
000588r 4  25 rr        	and p1_cont
00058Ar 4  85 rr        	sta ow_temp5
00058Cr 4               
00058Cr 4  A9 00        	lda #0
00058Er 4  85 rr        	sta ow_slidetmr
000590r 4               
000590r 4  A9 02        	lda #cont_left
000592r 4  24 rr        	bit ow_temp5
000594r 4  F0 08        	beq :+
000596r 4               
000596r 4  A5 rr        	lda owldctrl
000598r 4  09 08        	ora #os_leftmov
00059Ar 4  29 EF        	and #(os_rightmov ^ $FF)
00059Cr 4  85 rr        	sta owldctrl
00059Er 4               
00059Er 4  A9 01        :	lda #cont_right
0005A0r 4  24 rr        	bit ow_temp5
0005A2r 4  F0 08        	beq :+
0005A4r 4               
0005A4r 4  A5 rr        	lda owldctrl
0005A6r 4  09 10        	ora #os_rightmov
0005A8r 4  29 F7        	and #(os_leftmov ^ $FF)
0005AAr 4  85 rr        	sta owldctrl
0005ACr 4               
0005ACr 4  60           :	rts
0005ADr 4               
0005ADr 4               ow_queue_lvlnm_upd:
0005ADr 4  A9 02        	lda #nc_updlvlnm
0005AFr 4  05 rr        	ora nmictrl
0005B1r 4  85 rr        	sta nmictrl
0005B3r 4  60           	rts
0005B4r 4               
0005B4r 4               ; ** SUBROUTINE: ow_anim_frame
0005B4r 4               ; desc: Gets the current animation frame from the timer.
0005B4r 4               ow_anim_frame:
0005B4r 4  A5 rr        	lda ow_timer
0005B6r 4  4A           	lsr
0005B7r 4  4A           	lsr
0005B8r 4  4A           	lsr
0005B9r 4  29 03        	and #3
0005BBr 4  60           	rts
0005BCr 4               
0005BCr 4               ; ** SUBROUTINE: ow_draw_player
0005BCr 4               ; desc: Draws the player on the selected level's relevant waypoint.
0005BCr 4               ow_draw_player:
0005BCr 4  A9 00        	lda #0
0005BEr 4  85 rr        	sta ow_temp1
0005C0r 4  20 rr rr     	jsr ow_anim_frame
0005C3r 4  0A           	asl
0005C4r 4  0A           	asl
0005C5r 4  18           	clc
0005C6r 4  69 02        	adc #$02
0005C8r 4  85 rr        	sta ow_temp2
0005CAr 4  18           	clc
0005CBr 4  69 02        	adc #$02
0005CDr 4  85 rr        	sta ow_temp3
0005CFr 4               
0005CFr 4  A6 rr        	ldx ow_sellvl
0005D1r 4  BD rr rr     	lda ow_waypoints_x, x
0005D4r 4  BC rr rr     	ldy ow_waypoints_y, x
0005D7r 4  A2 rr        	ldx #<ow_temp1
0005D9r 4  20 rr rr     	jsr gm_draw_2xsprite
0005DCr 4               
0005DCr 4               	; draw hair
0005DCr 4  A9 01        	lda #1
0005DEr 4  85 rr        	sta ow_temp1
0005E0r 4  A9 1A        	lda #$1A
0005E2r 4  85 rr        	sta ow_temp2
0005E4r 4  A9 1C        	lda #$1C
0005E6r 4  85 rr        	sta ow_temp3
0005E8r 4               
0005E8r 4  A6 rr        	ldx ow_sellvl
0005EAr 4  BD rr rr     	lda ow_waypoints_y, x
0005EDr 4  85 rr        	sta ow_temp4
0005EFr 4               
0005EFr 4  20 rr rr     	jsr ow_anim_frame
0005F2r 4  29 01        	and #1
0005F4r 4  F0 02        	beq :+
0005F6r 4  E6 rr        	inc ow_temp4
0005F8r 4               
0005F8r 4  A4 rr        :	ldy ow_temp4
0005FAr 4  BD rr rr     	lda ow_waypoints_x, x
0005FDr 4  A2 rr        	ldx #<ow_temp1
0005FFr 4  20 rr rr     	jsr gm_draw_2xsprite
000602r 4               
000602r 4               	; draw arrow
000602r 4  A6 rr        	ldx ow_sellvl
000604r 4  BD rr rr     	lda ow_waypoints_y, x
000607r 4  18           	clc
000608r 4  69 10        	adc #16
00060Ar 4  85 rr        	sta y_crd_temp
00060Cr 4               
00060Cr 4  20 rr rr     	jsr ow_anim_frame
00060Fr 4  29 01        	and #1
000611r 4  F0 02        	beq :+
000613r 4  E6 rr        	inc y_crd_temp
000615r 4               
000615r 4  BD rr rr     :	lda ow_waypoints_x, x
000618r 4  18           	clc
000619r 4  69 04        	adc #4
00061Br 4  85 rr        	sta x_crd_temp
00061Dr 4               
00061Dr 4  A0 1E        	ldy #$1E
00061Fr 4  A9 03        	lda #3
000621r 4  20 rr rr     	jsr oam_putsprite
000624r 4               
000624r 4  60           	rts
000625r 4               
000625r 4               ; ** SUBROUTINE: ow_draw_mtn
000625r 4               ; desc: Draws a mountain to the screen.
000625r 4               ow_draw_mtn:
000625r 4  A9 21        	lda #$21
000627r 4  85 rr        	sta ow_temp1
000629r 4  A9 23        	lda #$23
00062Br 4  85 rr        	sta ow_temp2
00062Dr 4               
00062Dr 4  A9 rr        	lda #<MTN_data
00062Fr 4  85 rr        	sta ow_temp3
000631r 4  A9 rr        	lda #>MTN_data
000633r 4  85 rr        	sta ow_temp4
000635r 4               
000635r 4  A9 00        	lda #0
000637r 4  85 rr        	sta ow_temp5
000639r 4               
000639r 4  A4 rr        :	ldy ow_temp1
00063Br 4  A6 rr        	ldx ow_temp2
00063Dr 4  20 rr rr     	jsr ppu_loadaddr
000640r 4  A6 rr        	ldx ow_temp3
000642r 4  A4 rr        	ldy ow_temp4
000644r 4  A9 1A        	lda #26
000646r 4  20 rr rr     	jsr ppu_wrstring
000649r 4               
000649r 4  18           	clc
00064Ar 4  A5 rr        	lda ow_temp3
00064Cr 4  69 1A        	adc #26
00064Er 4  85 rr        	sta ow_temp3
000650r 4  A5 rr        	lda ow_temp4
000652r 4  69 00        	adc #0
000654r 4  85 rr        	sta ow_temp4
000656r 4               
000656r 4  18           	clc
000657r 4  A5 rr        	lda ow_temp2
000659r 4  69 20        	adc #$20
00065Br 4  85 rr        	sta ow_temp2
00065Dr 4  A5 rr        	lda ow_temp1
00065Fr 4  69 00        	adc #0
000661r 4  85 rr        	sta ow_temp1
000663r 4               
000663r 4  18           	clc
000664r 4  A5 rr        	lda ow_temp5
000666r 4  69 01        	adc #1
000668r 4  85 rr        	sta ow_temp5
00066Ar 4               
00066Ar 4  C9 14        	cmp #20
00066Cr 4  D0 CB        	bne :-
00066Er 4               
00066Er 4               	; finally write palette data
00066Er 4  A0 23        	ldy #$23
000670r 4  A2 C0        	ldx #$C0
000672r 4  20 rr rr     	jsr ppu_loadaddr
000675r 4  A2 rr        	ldx #<MTN_attr
000677r 4  A0 rr        	ldy #>MTN_attr
000679r 4  A9 40        	lda #64
00067Br 4  20 rr rr     	jsr ppu_wrstring
00067Er 4               
00067Er 4  60           	rts
00067Fr 4               
00067Fr 4               ; These routines draw features found on the world map.
00067Fr 4               yoff = 16
00067Fr 4               ow_draw_c0_hut:
00067Fr 4  A9 64        	lda #100
000681r 4  85 rr        	sta x_crd_temp
000683r 4  A9 C4        	lda #180+yoff
000685r 4  85 rr        	sta y_crd_temp
000687r 4  A9 01        	lda #1
000689r 4  A0 32        	ldy #$32
00068Br 4  4C rr rr     	jmp oam_putsprite
00068Er 4               
00068Er 4               ow_draw_c1_city:
00068Er 4  A9 6F        	lda #111
000690r 4  85 rr        	sta x_crd_temp
000692r 4  A9 BA        	lda #170+yoff
000694r 4  85 rr        	sta y_crd_temp
000696r 4  A9 03        	lda #3
000698r 4  A0 28        	ldy #$28
00069Ar 4  20 rr rr     	jsr oam_putsprite
00069Dr 4               
00069Dr 4  A9 7D        	lda #125
00069Fr 4  85 rr        	sta x_crd_temp
0006A1r 4  A9 BD        	lda #173+yoff
0006A3r 4  85 rr        	sta y_crd_temp
0006A5r 4  A9 01        	lda #1
0006A7r 4  A0 30        	ldy #$30
0006A9r 4  20 rr rr     	jsr oam_putsprite
0006ACr 4               
0006ACr 4  A9 81        	lda #129
0006AEr 4  85 rr        	sta x_crd_temp
0006B0r 4  A9 BA        	lda #170+yoff
0006B2r 4  85 rr        	sta y_crd_temp
0006B4r 4  A9 03        	lda #3
0006B6r 4  A0 28        	ldy #$28
0006B8r 4  20 rr rr     	jsr oam_putsprite
0006BBr 4               
0006BBr 4  A9 7A        	lda #122
0006BDr 4  85 rr        	sta x_crd_temp
0006BFr 4  A9 B6        	lda #166+yoff
0006C1r 4  85 rr        	sta y_crd_temp
0006C3r 4  A9 02        	lda #2
0006C5r 4  A0 2E        	ldy #$2E
0006C7r 4  20 rr rr     	jsr oam_putsprite
0006CAr 4               
0006CAr 4  A9 82        	lda #130
0006CCr 4  85 rr        	sta x_crd_temp
0006CEr 4  A9 B1        	lda #161+yoff
0006D0r 4  85 rr        	sta y_crd_temp
0006D2r 4  A9 02        	lda #2
0006D4r 4  A0 28        	ldy #$28
0006D6r 4  20 rr rr     	jsr oam_putsprite
0006D9r 4               
0006D9r 4  A9 72        	lda #114
0006DBr 4  85 rr        	sta x_crd_temp
0006DDr 4  A9 AE        	lda #158+yoff
0006DFr 4  85 rr        	sta y_crd_temp
0006E1r 4  A9 01        	lda #1
0006E3r 4  A0 30        	ldy #$30
0006E5r 4  20 rr rr     	jsr oam_putsprite
0006E8r 4               
0006E8r 4  A9 7A        	lda #122
0006EAr 4  85 rr        	sta x_crd_temp
0006ECr 4  A9 AB        	lda #155+yoff
0006EEr 4  85 rr        	sta y_crd_temp
0006F0r 4  A9 01        	lda #1
0006F2r 4  A0 2A        	ldy #$2A
0006F4r 4  20 rr rr     	jsr oam_putsprite
0006F7r 4               
0006F7r 4  A9 82        	lda #130
0006F9r 4  85 rr        	sta x_crd_temp
0006FBr 4  A9 AB        	lda #155+yoff
0006FDr 4  85 rr        	sta y_crd_temp
0006FFr 4  A9 01        	lda #1
000701r 4  A0 2C        	ldy #$2C
000703r 4  20 rr rr     	jsr oam_putsprite
000706r 4               
000706r 4  A9 77        	lda #119
000708r 4  85 rr        	sta x_crd_temp
00070Ar 4  A9 A9        	lda #153+yoff
00070Cr 4  85 rr        	sta y_crd_temp
00070Er 4  A9 02        	lda #2
000710r 4  A0 2E        	ldy #$2E
000712r 4  20 rr rr     	jsr oam_putsprite
000715r 4               
000715r 4  A9 6F        	lda #111
000717r 4  85 rr        	sta x_crd_temp
000719r 4  A9 A7        	lda #151+yoff
00071Br 4  85 rr        	sta y_crd_temp
00071Dr 4  A9 02        	lda #2
00071Fr 4  A0 28        	ldy #$28
000721r 4  4C rr rr     	jmp oam_putsprite
000724r 4               
000724r 4               ow_draw_c2_tower:
000724r 4  A9 5E        	lda #94
000726r 4  85 rr        	sta x_crd_temp
000728r 4  A9 94        	lda #132+yoff
00072Ar 4  85 rr        	sta y_crd_temp
00072Cr 4               
00072Cr 4  A9 02        	lda #2
00072Er 4  A0 28        	ldy #$28
000730r 4  4C rr rr     	jmp oam_putsprite
000733r 4               
000733r 4               ow_draw_c3_hotel:
000733r 4  A9 96        	lda #150
000735r 4  85 rr        	sta x_crd_temp
000737r 4  A9 7A        	lda #106+yoff
000739r 4  85 rr        	sta y_crd_temp
00073Br 4               
00073Br 4  A9 01        	lda #1          ; use pink color
00073Dr 4  A0 20        	ldy #$20
00073Fr 4  20 rr rr     	jsr oam_putsprite
000742r 4               
000742r 4  A9 9E        	lda #158
000744r 4  85 rr        	sta x_crd_temp
000746r 4  A9 01        	lda #1
000748r 4  A0 22        	ldy #$22
00074Ar 4  20 rr rr     	jsr oam_putsprite
00074Dr 4               
00074Dr 4  A9 A6        	lda #166
00074Fr 4  85 rr        	sta x_crd_temp
000751r 4  A9 01        	lda #1
000753r 4  A0 24        	ldy #$24
000755r 4  20 rr rr     	jsr oam_putsprite
000758r 4               
000758r 4  A9 AE        	lda #174
00075Ar 4  85 rr        	sta x_crd_temp
00075Cr 4  A9 01        	lda #1
00075Er 4  A0 26        	ldy #$26
000760r 4  4C rr rr     	jmp oam_putsprite
000763r 4               
000763r 4               ow_draw_c4_cliff:
000763r 4  A9 82        	lda #130
000765r 4  85 rr        	sta x_crd_temp
000767r 4  A9 68        	lda #88+yoff
000769r 4  85 rr        	sta y_crd_temp
00076Br 4  A0 34        	ldy #$34
00076Dr 4  A9 21        	lda #(1 | obj_backgd)
00076Fr 4  20 rr rr     	jsr oam_putsprite
000772r 4               
000772r 4  A9 8A        	lda #138
000774r 4  85 rr        	sta x_crd_temp
000776r 4  A9 6C        	lda #92+yoff
000778r 4  85 rr        	sta y_crd_temp
00077Ar 4  A0 34        	ldy #$34
00077Cr 4  A9 01        	lda #1
00077Er 4  20 rr rr     	jsr oam_putsprite
000781r 4               
000781r 4  A9 92        	lda #146
000783r 4  85 rr        	sta x_crd_temp
000785r 4  A9 70        	lda #96+yoff
000787r 4  85 rr        	sta y_crd_temp
000789r 4  A0 36        	ldy #$36
00078Br 4  A9 01        	lda #1
00078Dr 4  20 rr rr     	jsr oam_putsprite
000790r 4               
000790r 4  A9 9A        	lda #154
000792r 4  85 rr        	sta x_crd_temp
000794r 4  A9 74        	lda #100+yoff
000796r 4  85 rr        	sta y_crd_temp
000798r 4  A0 34        	ldy #$34
00079Ar 4  A9 21        	lda #(1 | obj_backgd)
00079Cr 4  4C rr rr     	jmp oam_putsprite
00079Fr 4               
00079Fr 4               ow_draw_c5_temple:
00079Fr 4  A9 64        	lda #100
0007A1r 4  85 rr        	sta x_crd_temp
0007A3r 4  A9 5A        	lda #74+yoff
0007A5r 4  85 rr        	sta y_crd_temp
0007A7r 4  A0 38        	ldy #$38
0007A9r 4  A9 01        	lda #1
0007ABr 4  4C rr rr     	jmp oam_putsprite
0007AEr 4               
0007AEr 4               
0007AEr 4               ow_draw_c7_summit:
0007AEr 4  A9 73        	lda #115
0007B0r 4  85 rr        	sta x_crd_temp
0007B2r 4  A9 41        	lda #49+yoff
0007B4r 4  85 rr        	sta y_crd_temp
0007B6r 4               
0007B6r 4  20 rr rr     	jsr ow_anim_frame
0007B9r 4  0A           	asl
0007BAr 4  18           	clc
0007BBr 4  69 40        	adc #$40
0007BDr 4  A8           	tay
0007BEr 4  A9 01        	lda #1
0007C0r 4  4C rr rr     	jmp oam_putsprite
0007C3r 4               
0007C3r 4               ow_waypoints_x:
0007C3r 4  54           	.byte 84    ; prologue
0007C4r 4  7A           	.byte 122   ; chapter 1
0007C5r 4  52           	.byte 82    ; chapter 2
0007C6r 4  9E           	.byte 158   ; chapter 3
0007C7r 4  8A           	.byte 138   ; chapter 4
0007C8r 4  58           	.byte 88    ; chapter 5
0007C9r 4  31           	.byte 49    ; chapter 6
0007CAr 4  6D           	.byte 109   ; chapter 7
0007CBr 4               
0007CBr 4               ow_waypoints_y:
0007CBr 4  B0           	.byte 164-4+yoff   ; prologue
0007CCr 4  95           	.byte 137-4+yoff   ; chapter 1
0007CDr 4  86           	.byte 122-4+yoff   ; chapter 2
0007CEr 4  6C           	.byte  96-4+yoff   ; chapter 3
0007CFr 4  58           	.byte  76-4+yoff   ; chapter 4
0007D0r 4  4F           	.byte  67-4+yoff   ; chapter 5
0007D1r 4  95           	.byte 137-4+yoff   ; chapter 6
0007D2r 4  30           	.byte  36-4+yoff   ; chapter 7
0007D3r 4               
0007D3r 4               ; note: each space is 16 bytes wide
0007D3r 4               ow_level_names:
0007D3r 4               	.pushcharmap
0007D3r 4               	.charmap $20, $00
0007D3r 4               	.charmap $61, $41 ; a
0007D3r 4               	.charmap $63, $42 ; c
0007D3r 4               	.charmap $64, $43 ; d
0007D3r 4               	.charmap $65, $44 ; e
0007D3r 4               	.charmap $67, $46 ; g
0007D3r 4               	.charmap $68, $47 ; h
0007D3r 4               	.charmap $69, $48 ; i
0007D3r 4               	.charmap $6B, $49 ; k
0007D3r 4               	.charmap $6C, $4A ; l
0007D3r 4               	.charmap $6D, $4B ; m
0007D3r 4               	.charmap $6E, $4C ; n
0007D3r 4               	.charmap $6F, $4D ; o
0007D3r 4               	.charmap $70, $4E ; p
0007D3r 4               	.charmap $72, $4F ; r
0007D3r 4               	.charmap $73, $50 ; s
0007D3r 4               	.charmap $74, $51 ; t
0007D3r 4               	.charmap $75, $52 ; u
0007D3r 4               	.charmap $79, $53 ; y
0007D3r 4               	.charmap $43, $54 ; C
0007D3r 4               	.charmap $45, $55 ; E
0007D3r 4               	.charmap $46, $56 ; F
0007D3r 4               	.charmap $47, $57 ; G
0007D3r 4               	.charmap $4D, $58 ; M
0007D3r 4               	.charmap $4F, $59 ; O
0007D3r 4               	.charmap $50, $5A ; P
0007D3r 4               	.charmap $52, $30 ; R
0007D3r 4               	.charmap $53, $31 ; S
0007D3r 4               	.charmap $54, $32 ; T
0007D3r 4               
0007D3r 4  00 00 00 00  	.byte "    Prologue    "
0007D7r 4  5A 4F 4D 4A  
0007DBr 4  4D 46 52 44  
0007E3r 4  00 00 56 4D  	.byte "  Forsaken C3y  "
0007E7r 4  4F 50 41 49  
0007EBr 4  44 4C 00 54  
0007F3r 4  00 00 00 00  	.byte "     O9 S3e     "
0007F7r 4  00 59 39 00  
0007FBr 4  31 33 44 00  
000803r 4  00 54 35 36  	.byte " C56s7al Resort "
000807r 4  50 37 41 4A  
00080Br 4  00 30 44 50  
000813r 4  00 00 57 4D  	.byte "  Golden Ridge  "
000817r 4  4A 43 44 4C  
00081Br 4  00 30 48 43  
000823r 4  00 00 58 34  	.byte "  M4ror Temple  "
000827r 4  4F 4D 4F 00  
00082Br 4  32 44 4B 4E  
000833r 4  00 00 00 00  	.byte "    Re8ec7on    "
000837r 4  30 44 38 44  
00083Br 4  42 37 4D 4C  
000843r 4  00 00 00 32  	.byte "   The Summit   "
000847r 4  47 44 00 31  
00084Br 4  52 4B 4B 48  
000853r 4  00 00 00 00  	.byte "    Epilogue    "
000857r 4  55 4E 48 4A  
00085Br 4  4D 46 52 44  
000863r 4               
000863r 4               	.popcharmap
000863r 4               
000863r 4               ow_icon_pals:
000863r 4               	; note: bit 0x20 SHOULD be set else the level select effect won't work.
000863r 4  21 23 21 21  	.byte $21, $23, $21, $21, $22, $21, $22, $23
000867r 4  22 21 22 23  
00086Br 4               
00086Br 4               ; ** SUBROUTINE: ow_select_banks
00086Br 4               ; desc: Selects the banks required to display the title screen.
00086Br 4               ow_select_banks:
00086Br 4  A0 18        	ldy #chrb_bgowd
00086Dr 4  84 rr        	sty bg0_bknum
00086Fr 4  A0 1A        	ldy #chrb_bgowd+2
000871r 4  84 rr        	sty bg1_bknum
000873r 4               
000873r 4  A0 10        	ldy #chrb_owsp00
000875r 4  84 rr        	sty spr0_bknum
000877r 4               
000877r 4  A0 11        	ldy #chrb_owsp01
000879r 4  84 rr        	sty spr1_bknum
00087Br 4               
00087Br 4  A0 12        	ldy #chrb_owsp02
00087Dr 4  84 rr        	sty spr2_bknum
00087Fr 4               
00087Fr 4  A0 13        	ldy #chrb_owsp03
000881r 4  84 rr        	sty spr3_bknum
000883r 4  60           	rts
000884r 4               
000884r 3               .include "prologue.asm"
000884r 4               ; Copyright (C) 2024 iProgramInCpp
000884r 4               
000884r 4               defwaittimer = 120
000884r 4               deffadetimer = 8
000884r 4               text_address = $21E0
000884r 4               defcameray   = 4
000884r 4               
000884r 4               pl_load_text:
000884r 4  A5 rr        	lda p_textnum
000886r 4  0A           	asl
000887r 4  AA           	tax
000888r 4  BD rr rr     	lda p_texttable, x
00088Br 4  85 rr        	sta p_textaddr
00088Dr 4  E8           	inx
00088Er 4  BD rr rr     	lda p_texttable, x
000891r 4  85 rr        	sta p_textaddr+1
000893r 4               
000893r 4  A9 20        	lda #32
000895r 4  85 rr        	sta p_textlen
000897r 4               
000897r 4               	; start clearing
000897r 4  A9 04        	lda #ps_clear
000899r 4  05 rr        	ora prolctrl
00089Br 4  85 rr        	sta prolctrl
00089Dr 4               
00089Dr 4  A9 00        	lda #0
00089Fr 4  85 rr        	sta p_textoffs
0008A1r 4  85 rr        	sta pl_ppudata
0008A3r 4  A9 E0        	lda #<text_address
0008A5r 4  85 rr        	sta pl_ppuaddr
0008A7r 4  A9 21        	lda #>text_address
0008A9r 4  85 rr        	sta pl_ppuaddr + 1
0008ABr 4  60           	rts
0008ACr 4               
0008ACr 4               ; ** SUBROUTINE: pl_select_banks
0008ACr 4               ; desc: Selects the correct graphics banks for the prologue intro sequence.
0008ACr 4               pl_select_banks:
0008ACr 4  A0 07        	ldy #chrb_gensp2
0008AEr 4  84 rr        	sty spr1_bknum
0008B0r 4               
0008B0r 4  A0 06        	ldy #chrb_gensp1
0008B2r 4  84 rr        	sty spr2_bknum
0008B4r 4               
0008B4r 4  A0 30        	ldy #chrb_dmain
0008B6r 4  84 rr        	sty bg0_bknum
0008B8r 4  60           	rts
0008B9r 4               
0008B9r 4               gamemode_prologue:
0008B9r 4  A9 01        	lda #ps_1stfr
0008BBr 4  24 rr        	bit prolctrl
0008BDr 4  D0 3D        	bne @noinitsequence
0008BFr 4               
0008BFr 4  A9 00        	lda #0
0008C1r 4  85 rr        	sta p_textnum
0008C3r 4  85 rr        	sta p_textlen
0008C5r 4  85 rr        	sta p_texttimer
0008C7r 4  85 rr        	sta pl_ppuaddr
0008C9r 4  85 rr        	sta pl_state
0008CBr 4  8D 01 20     	sta ppu_mask     ; disable rendering
0008CEr 4  85 rr        	sta camera_x
0008D0r 4  85 rr        	sta camera_x_hi
0008D2r 4  85 rr        	sta camera_y
0008D4r 4  20 rr rr     	jsr vblank_wait
0008D7r 4               
0008D7r 4  A0 rr        	ldy #<init_palette
0008D9r 4  84 rr        	sty paladdr
0008DBr 4  A0 rr        	ldy #>init_palette
0008DDr 4  84 rr        	sty paladdr+1
0008DFr 4  20 rr rr     	jsr load_palette
0008E2r 4               
0008E2r 4  A9 20        	lda #$20
0008E4r 4  20 rr rr     	jsr clear_nt
0008E7r 4  20 rr rr     	jsr pl_select_banks
0008EAr 4  20 rr rr     	jsr tl_init_snow
0008EDr 4               
0008EDr 4  A5 rr        	lda prolctrl
0008EFr 4  09 01        	ora #ps_1stfr
0008F1r 4  85 rr        	sta prolctrl
0008F3r 4               
0008F3r 4  A5 rr        	lda nmictrl
0008F5r 4  09 01        	ora #nc_turnon
0008F7r 4  85 rr        	sta nmictrl
0008F9r 4               
0008F9r 4  20 rr rr     	jsr vblank_wait
0008FCr 4               
0008FCr 4               @noinitsequence:
0008FCr 4               	; just a regular update
0008FCr 4  20 rr rr     	jsr tl_update_snow
0008FFr 4  20 rr rr     	jsr tl_render_snow
000902r 4               
000902r 4  A9 04        	lda #defcameray
000904r 4  85 rr        	sta camera_y
000906r 4               
000906r 4  A5 rr        	lda p1_conto
000908r 4  49 FF        	eor #$FF
00090Ar 4  25 rr        	and p1_cont
00090Cr 4  29 10        	and #cont_start
00090Er 4  D0 77        	bne @gameswitch  ; allow skipping by pressing START
000910r 4               
000910r 4  A5 rr        	lda pl_state
000912r 4  C9 01        	cmp #pls_wrtext
000914r 4  F0 3A        	beq @writeText
000916r 4  C9 03        	cmp #pls_wait
000918r 4  F0 2A        	beq @wait
00091Ar 4  C9 02        	cmp #pls_fade
00091Cr 4  F0 0E        	beq @fade
00091Er 4               
00091Er 4               	; default state: load text
00091Er 4  A6 rr        	ldx p_textnum
000920r 4  E0 03        	cpx #3
000922r 4  F0 63        	beq @gameswitch
000924r 4               
000924r 4  20 rr rr     	jsr pl_load_text
000927r 4               
000927r 4  E6 rr        	inc p_textnum
000929r 4               
000929r 4  E6 rr        	inc pl_state
00092Br 4  60           	rts
00092Cr 4               
00092Cr 4               @fade:
00092Cr 4  A5 rr        	lda p_texttimer
00092Er 4  29 01        	and #1
000930r 4  D0 06        	bne :+
000932r 4  A9 08        	lda #ps_dofade
000934r 4  05 rr        	ora prolctrl
000936r 4  85 rr        	sta prolctrl
000938r 4               
000938r 4  C6 rr        :	dec p_texttimer
00093Ar 4  D0 24        	bne @updateReturn
00093Cr 4               
00093Cr 4  A9 00        	lda #0
00093Er 4  85 rr        	sta pl_state
000940r 4  85 rr        	sta p_texttimer
000942r 4  F0 1C        	beq @updateReturn
000944r 4               
000944r 4               @wait:
000944r 4  C6 rr        	dec p_texttimer
000946r 4  D0 18        	bne @updateReturn
000948r 4               
000948r 4               	; increment state to fadeout
000948r 4  A9 08        	lda #deffadetimer
00094Ar 4  85 rr        	sta p_texttimer
00094Cr 4  E6 rr        	inc pl_state
00094Er 4  D0 10        	bne @updateReturn
000950r 4               
000950r 4               @writeText:
000950r 4  A9 00        	lda #0
000952r 4  85 rr        	sta pl_ppuaddr
000954r 4  85 rr        	sta pl_ppuaddr + 1
000956r 4               
000956r 4  A5 rr        	lda p_textlen
000958r 4  D0 07        	bne :+
00095Ar 4               
00095Ar 4               	; set wait timer
00095Ar 4  A9 78        	lda #defwaittimer
00095Cr 4  85 rr        	sta p_texttimer
00095Er 4               
00095Er 4               	; increment state
00095Er 4  E6 rr        	inc pl_state
000960r 4               @updateReturn:
000960r 4  60           	rts
000961r 4               
000961r 4  E6 rr        :	inc p_texttimer
000963r 4  A5 rr        	lda p_texttimer
000965r 4  29 01        	and #1
000967r 4  F0 F7        	beq @updateReturn
000969r 4               
000969r 4               	; push a character of text
000969r 4  A0 00        	ldy #0
00096Br 4  B1 rr        	lda (p_textaddr), y
00096Dr 4  85 rr        	sta pl_ppudata
00096Fr 4               
00096Fr 4  E6 rr        	inc p_textaddr
000971r 4  D0 02        	bne :+
000973r 4  E6 rr        	inc p_textaddr + 1
000975r 4               
000975r 4  C6 rr        :	dec p_textlen
000977r 4               
000977r 4  18           	clc
000978r 4  A9 E0        	lda #<text_address
00097Ar 4  65 rr        	adc p_textoffs
00097Cr 4  85 rr        	sta pl_ppuaddr
00097Er 4               
00097Er 4  A9 21        	lda #>text_address
000980r 4  69 00        	adc #0
000982r 4  85 rr        	sta pl_ppuaddr + 1
000984r 4               
000984r 4  E6 rr        	inc p_textoffs
000986r 4  60           	rts
000987r 4               
000987r 4               @gameswitch:
000987r 4  20 rr rr     	jsr vblank_wait
00098Ar 4  A9 00        	lda #0
00098Cr 4  8D 01 20     	sta ppu_mask        ; disable rendering to obscure that gm_set_level sets the bank early
00098Fr 4  85 rr        	sta pl_ppuaddr
000991r 4  85 rr        	sta pl_ppuaddr+1
000993r 4               
000993r 4  A2 00        	ldx #0              ; select level zero
000995r 4  4C rr rr     	jmp tl_gameswitch
000998r 4               
000998r 4  20 20 20 20  p_text0:	.byte "      This is it, Made{ne.      "
00099Cr 4  20 20 54 68  
0009A0r 4  69 73 20 69  
0009B8r 4  20 20 20 20  p_text1:	.byte "          Just breathe.         "
0009BCr 4  20 20 20 20  
0009C0r 4  20 20 4A 75  
0009D8r 4  20 20 20 20  p_text2:	.byte "     Why are you so nervous?    "
0009DCr 4  20 57 68 79  
0009E0r 4  20 61 72 65  
0009F8r 4               p_texttable:
0009F8r 4  rr rr        	.word p_text0
0009FAr 4  rr rr        	.word p_text1
0009FCr 4  rr rr        	.word p_text2
0009FEr 4               
0009FEr 3               
0009FEr 3               ; ** SUBROUTINE: game_update
0009FEr 3               ; arguments: none
0009FEr 3               ; clobbers: all registers
0009FEr 3               game_update:
0009FEr 3  20 rr rr     	jsr com_clear_oam    ; clear OAM
000A01r 3  20 rr rr     	jsr jump_engine      ; jump to the corresponding game mode
000A04r 3  4C rr rr     	jmp com_calc_camera  ; calculate the visual camera position
000A07r 3               
000A07r 3               ; ** SUBROUTINE: tl_select_banks
000A07r 3               ; desc: Selects the banks required to display the title screen.
000A07r 3               tl_select_banks:
000A07r 3  A0 14        	ldy #chrb_bgttl
000A09r 3  84 rr        	sty bg0_bknum
000A0Br 3               
000A0Br 3  A0 16        	ldy #chrb_bgttl+2
000A0Dr 3  84 rr        	sty bg1_bknum
000A0Fr 3               
000A0Fr 3  A0 00        	ldy #chrb_plrsp0
000A11r 3  84 rr        	sty spr0_bknum
000A13r 3               
000A13r 3               	;ldy #chrb_gensp2
000A13r 3               	;sty spr1_bknum
000A13r 3               
000A13r 3  A0 06        	ldy #chrb_gensp1
000A15r 3  84 rr        	sty spr2_bknum
000A17r 3               
000A17r 3               	;ldy #chrb_anisp0
000A17r 3               	;sty spr3_bknum
000A17r 3  60           	rts
000A18r 3               
000A18r 3               ; ** SUBROUTINE: com_clear_oam
000A18r 3               ; arguments: none
000A18r 3               ; clobbers:  A, X
000A18r 3               ; desc:      clears CPU's copy of OAM
000A18r 3               com_clear_oam:
000A18r 3  A9 FF        	lda #$FF
000A1Ar 3  A2 00        	ldx #$00
000A1Cr 3  86 rr        	stx oam_wrhead
000A1Er 3               @loop:
000A1Er 3  9D rr rr     	sta oam_buf, x
000A21r 3  E8           	inx
000A22r 3  D0 FA        	bne @loop
000A24r 3  60           	rts
000A25r 3               
000A25r 3               ; ** SUBROUTINE: com_calc_camera
000A25r 3               ; desc: Calculate the default scroll X/Y to cameraX/cameraY.
000A25r 3               ;       This routine is called on every game mode that isn't gm_game.
000A25r 3               com_calc_camera:
000A25r 3  A5 rr        	lda gamemode
000A27r 3  C9 00        	cmp #gm_game
000A29r 3  F0 18        	beq @return
000A2Br 3               
000A2Br 3  A5 rr        	lda camera_x
000A2Dr 3  85 rr        	sta scroll_x
000A2Fr 3  A5 rr        	lda camera_y
000A31r 3  85 rr        	sta scroll_y
000A33r 3  A9 00        	lda #0
000A35r 3  A6 rr        	ldx camera_x_hi
000A37r 3  F0 02        	beq :+
000A39r 3  09 01        	ora #pctl_highx
000A3Br 3  A6 rr        :	ldx camera_y_hi
000A3Dr 3  F0 02        	beq :+
000A3Fr 3  09 02        	ora #pctl_highy
000A41r 3  85 rr        :	sta scroll_flags
000A43r 3               @return:
000A43r 3  60           	rts
000A44r 3               
000A44r 2               .include "gam_main.asm"
000A44r 3               ; Copyright (C) 2024 iProgramInCpp
000A44r 3               
000A44r 3               ; Desc: If you put these functions in the game segment, it will overflow.
000A44r 3               ; These functions are instead implemented in the main segment.
000A44r 3               .include "g_rmtran.asm"
000A44r 4               ; Copyright (C) 2024 iProgramInCpp
000A44r 4               
000A44r 4               gm_leave_doframe:
000A44r 4  20 rr rr     	jsr gm_draw_player
000A47r 4  20 rr rr     	jsr gm_unload_os_ents
000A4Ar 4  20 rr rr     	jsr gm_draw_entities
000A4Dr 4  20 rr rr     	jsr gm_calc_camera_nosplit
000A50r 4  20 rr rr     	jsr soft_nmi_on
000A53r 4  20 rr rr     	jsr nmi_wait
000A56r 4  20 rr rr     	jsr soft_nmi_off
000A59r 4               
000A59r 4  4C rr rr     	jmp com_clear_oam
000A5Cr 4               
000A5Cr 4               cspeed = 8
000A5Cr 4               
000A5Cr 4               ; ** SUBROUTINE: gm_leaveroomR
000A5Cr 4               ; desc: Performs a transition, across multiple frames, going right.
000A5Cr 4               gm_leaveroomR:
000A5Cr 4  A9 F0        	lda #$F0
000A5Er 4  85 rr        	sta player_x
000A60r 4               
000A60r 4               	; If the rightward camera limit wasn't reached yet then we have no reason to leave
000A60r 4  A9 04        	lda #gs_scrstodR
000A62r 4  24 rr        	bit gamectrl
000A64r 4  F0 0A        	beq @returnEarly
000A66r 4               
000A66r 4               	; now leave the room through the right side
000A66r 4  A4 rr        	ldy warp_r_y
000A68r 4  84 rr        	sty transoff
000A6Ar 4  A4 rr        	ldy warp_r
000A6Cr 4  C0 FF        	cpy #$FF
000A6Er 4  D0 03        	bne @actuallyTransition
000A70r 4               
000A70r 4               @returnEarly:
000A70r 4  A9 01        	lda #1
000A72r 4  60           	rts                      ; no warp was assigned there so return
000A73r 4               @actuallyTransition:
000A73r 4  20 rr rr     	jsr gm_set_room
000A76r 4               
000A76r 4  E6 rr        	inc roomnumber
000A78r 4               
000A78r 4  A9 01        	lda #g3_transitR
000A7Ar 4  05 rr        	ora gamectrl3
000A7Cr 4  85 rr        	sta gamectrl3
000A7Er 4               
000A7Er 4  A5 rr        	lda trarwrhead
000A80r 4  85 rr        	sta arwrhead
000A82r 4  85 rr        	sta ntwrhead
000A84r 4               
000A84r 4               	; load the room beginning pixel
000A84r 4  A5 rr        	lda ntwrhead             ; NOTE: assumes arwrhead in [0, 64)
000A86r 4  85 rr        	sta roombeglo2
000A88r 4  0A           	asl
000A89r 4  0A           	asl
000A8Ar 4  0A           	asl                      ; multiply by 8
000A8Br 4  85 rr        	sta roombeglo
000A8Dr 4               
000A8Dr 4  18           	clc
000A8Er 4  A5 rr        	lda camera_x_pg
000A90r 4  69 01        	adc #1
000A92r 4  85 rr        	sta roombeghi
000A94r 4               
000A94r 4  A9 00        	lda #0
000A96r 4  85 rr        	sta tr_scrnpos
000A98r 4  85 rr        	sta quaketimer
000A9Ar 4               
000A9Ar 4  18           	clc
000A9Br 4  A5 rr        	lda transoff
000A9Dr 4  30 0D        	bmi gm_roomRtransneg
000A9Fr 4  A5 rr        	lda lvlyoff              ; transoff is a positive value.
000AA1r 4  65 rr        	adc transoff
000AA3r 4  C9 1E        	cmp #$1E
000AA5r 4  90 10        	bcc gm_roomRtransdone
000AA7r 4  E9 1E        	sbc #$1E                 ; carry set, means it's >= 28
000AA9r 4  4C rr rr     	jmp gm_roomRtransdone
000AACr 4               gm_roomRtransneg:
000AACr 4  A5 rr        	lda lvlyoff              ; transoff is a negative value.
000AAEr 4  65 rr        	adc transoff
000AB0r 4  B0 05        	bcs gm_roomRtransdone
000AB2r 4  69 1E        	adc #$1E                 ; carry clear, means it went into the negatives
000AB4r 4  4C rr rr     	jmp gm_roomRtransdone
000AB7r 4               gm_roomRtransdone:
000AB7r 4  85 rr        	sta lvlyoff
000AB9r 4  A5 rr        	lda gamectrl             ; clear the camera stop bits
000ABBr 4  29 F3        	and #((gs_scrstopR|gs_scrstodR)^$FF)
000ABDr 4  85 rr        	sta gamectrl
000ABFr 4  A5 rr        	lda camera_x
000AC1r 4  29 FC        	and #%11111100
000AC3r 4  85 rr        	sta camera_x
000AC5r 4  20 rr rr     	jsr h_gener_ents_r
000AC8r 4  20 rr rr     	jsr h_gener_mts_r
000ACBr 4  A0 04        	ldy #4
000ACDr 4               gm_roomRtranloopI:
000ACDr 4  84 rr        	sty transtimer
000ACFr 4  20 rr rr     	jsr h_gener_col_r
000AD2r 4  20 rr rr     	jsr gm_leave_doframe
000AD5r 4  A4 rr        	ldy transtimer
000AD7r 4  88           	dey
000AD8r 4  D0 F3        	bne gm_roomRtranloopI
000ADAr 4  A0 20        	ldy #32
000ADCr 4               gm_roomRtranloop:
000ADCr 4  84 rr        	sty transtimer
000ADEr 4  38           	sec
000ADFr 4  A5 rr        	lda player_x
000AE1r 4  E9 08        	sbc #cspeed
000AE3r 4  B0 02        	bcs :+
000AE5r 4  A9 00        	lda #0
000AE7r 4  85 rr        :	sta player_x             ; move the player left by cspeed pixels per transition
000AE9r 4  18           	clc
000AEAr 4  A5 rr        	lda camera_x
000AECr 4  69 08        	adc #cspeed              ; add cspeed to the camera X
000AEEr 4  85 rr        	sta camera_x
000AF0r 4  A5 rr        	lda camera_x_pg
000AF2r 4  69 00        	adc #0
000AF4r 4  85 rr        	sta camera_x_pg
000AF6r 4  29 01        	and #1
000AF8r 4  85 rr        	sta camera_x_hi
000AFAr 4               
000AFAr 4  A9 08        	lda #cspeed
000AFCr 4  20 rr rr     	jsr gm_shifttrace
000AFFr 4               
000AFFr 4  A5 rr        	lda transoff
000B01r 4  6A           	ror
000B02r 4  6A           	ror
000B03r 4  6A           	ror                      ; lvlyoff: 11000000
000B04r 4  29 C0        	and #%11000000
000B06r 4  85 rr        	sta trantmp1
000B08r 4  A5 rr        	lda transoff
000B0Ar 4  4A           	lsr
000B0Br 4  4A           	lsr                      ; lvlyoff: 00111111
000B0Cr 4  85 rr        	sta trantmp2
000B0Er 4  A9 E0        	lda #%11100000
000B10r 4  24 rr        	bit trantmp2
000B12r 4  F0 04        	beq :+
000B14r 4  05 rr        	ora trantmp2
000B16r 4  85 rr        	sta trantmp2
000B18r 4  18           :	clc
000B19r 4  A5 rr        	lda trantmp3
000B1Br 4  65 rr        	adc trantmp1
000B1Dr 4  85 rr        	sta trantmp3
000B1Fr 4  A5 rr        	lda camera_y
000B21r 4  65 rr        	adc trantmp2
000B23r 4  85 rr        	sta camera_y
000B25r 4  C9 F0        	cmp #$F0
000B27r 4  90 14        	bcc gm_roomRtrannocap
000B29r 4  A5 rr        	lda trantmp2
000B2Br 4  10 09        	bpl gm_roomRtranpluscap
000B2Dr 4  A5 rr        	lda camera_y
000B2Fr 4  E9 10        	sbc #$10
000B31r 4  85 rr        	sta camera_y
000B33r 4  4C rr rr     	jmp gm_roomRtrannocap
000B36r 4               gm_roomRtranpluscap:
000B36r 4  A5 rr        	lda camera_y
000B38r 4  18           	clc
000B39r 4  69 10        	adc #$10
000B3Br 4  85 rr        	sta camera_y
000B3Dr 4               gm_roomRtrannocap:
000B3Dr 4  38           	sec
000B3Er 4  A5 rr        	lda player_sp_y
000B40r 4  E5 rr        	sbc trantmp1
000B42r 4  85 rr        	sta player_sp_y
000B44r 4  A5 rr        	lda player_y
000B46r 4  E5 rr        	sbc trantmp2
000B48r 4  85 rr        	sta player_y
000B4Ar 4               
000B4Ar 4  A9 08        	lda #cspeed
000B4Cr 4  65 rr        	adc camera_rev
000B4Er 4  85 rr        	sta camera_rev
000B50r 4  C9 08        	cmp #8
000B52r 4  B0 23        	bcs gm_roomRtrangen
000B54r 4               gm_roomRtrangenbk:
000B54r 4  20 rr rr     	jsr gm_leave_doframe
000B57r 4  A4 rr        	ldy transtimer
000B59r 4  88           	dey
000B5Ar 4  D0 80        	bne gm_roomRtranloop
000B5Cr 4  A9 00        	lda #0
000B5Er 4  85 rr        	sta dashcount            ; reset some things on room transition
000B60r 4  A5 rr        	lda lvlyoff
000B62r 4  0A           	asl
000B63r 4  0A           	asl
000B64r 4  0A           	asl
000B65r 4  85 rr        	sta camera_y
000B67r 4               
000B67r 4  A9 FE        	lda #(g3_transitR ^ $FF)
000B69r 4  25 rr        	and gamectrl3
000B6Br 4  85 rr        	sta gamectrl3
000B6Dr 4               
000B6Dr 4  A5 rr        	lda roomnumber
000B6Fr 4  49 01        	eor #1
000B71r 4  20 rr rr     	jsr gm_unload_ents_room
000B74r 4               
000B74r 4  A9 00        	lda #0
000B76r 4  60           	rts
000B77r 4               
000B77r 4               gm_roomRtrangen:
000B77r 4  20 rr rr     	jsr h_gener_col_r
000B7Ar 4  A5 rr        	lda camera_rev
000B7Cr 4  38           	sec
000B7Dr 4  E9 08        	sbc #8
000B7Fr 4  85 rr        	sta camera_rev
000B81r 4  4C rr rr     	jmp gm_roomRtrangenbk
000B84r 4               
000B84r 4               ; ** SUBROUTINE: gm_leaveroomU
000B84r 4               ; desc: Performs a transition, across multiple frames, going up.
000B84r 4               gm_leaveroomU:
000B84r 4               	; try to leave the room above
000B84r 4  A4 rr        	ldy warp_u
000B86r 4  C0 FF        	cpy #$FF
000B88r 4  D0 01        	bne :+
000B8Ar 4  60           	rts                   ; no warp assigned, continue with normal logic
000B8Br 4  A9 00        :	lda #0
000B8Dr 4  85 rr        	sta player_y
000B8Fr 4               
000B8Fr 4  A4 rr        	ldy warp_u_x
000B91r 4  84 rr        	sty temp3
000B93r 4               
000B93r 4  A4 rr        	ldy warp_u
000B95r 4  20 rr rr     	jsr gm_set_room
000B98r 4               
000B98r 4  E6 rr        	inc roomnumber
000B9Ar 4               
000B9Ar 4  A9 02        	lda #g3_transitU
000B9Cr 4  05 rr        	ora gamectrl3
000B9Er 4  85 rr        	sta gamectrl3
000BA0r 4               
000BA0r 4  A5 rr        	lda lvlyoff
000BA2r 4  18           	clc
000BA3r 4  69 1D        	adc #29               ; ntrowhead += 20
000BA5r 4  C9 1E        	cmp #$1E
000BA7r 4  90 02        	bcc :+
000BA9r 4  E9 1E        	sbc #$1E
000BABr 4  85 rr        :	sta ntrowhead
000BADr 4               
000BADr 4  A9 1D        	lda #29
000BAFr 4  85 rr        	sta ntrowhead2
000BB1r 4               
000BB1r 4  A5 rr        	lda ntwrhead
000BB3r 4  38           	sec
000BB4r 4  E9 20        	sbc #$20
000BB6r 4  29 3F        	and #$3F
000BB8r 4  85 rr        	sta ntwrhead
000BBAr 4  A5 rr        	lda arwrhead
000BBCr 4  38           	sec
000BBDr 4  E9 21        	sbc #$21
000BBFr 4  29 3F        	and #$3F
000BC1r 4  85 rr        	sta arwrhead
000BC3r 4               
000BC3r 4               	; add the X offset of this room to the name table and area table write heads
000BC3r 4  A5 rr        	lda temp3
000BC5r 4  18           	clc
000BC6r 4  65 rr        	adc ntwrhead
000BC8r 4  29 3F        	and #$3F
000BCAr 4  85 rr        	sta ntwrhead
000BCCr 4               
000BCCr 4  A5 rr        	lda temp3
000BCEr 4  18           	clc
000BCFr 4  65 rr        	adc arwrhead
000BD1r 4  29 3F        	and #$3F
000BD3r 4  85 rr        	sta arwrhead
000BD5r 4               
000BD5r 4               	; add the X offset to the current camera X.
000BD5r 4  A5 rr        	lda temp3
000BD7r 4  0A           	asl
000BD8r 4  0A           	asl
000BD9r 4  0A           	asl
000BDAr 4  85 rr        	sta temp1
000BDCr 4  A5 rr        	lda temp3
000BDEr 4  4A           	lsr
000BDFr 4  4A           	lsr
000BE0r 4  4A           	lsr
000BE1r 4  4A           	lsr
000BE2r 4  4A           	lsr
000BE3r 4  85 rr        	sta temp2
000BE5r 4               
000BE5r 4  18           	clc
000BE6r 4  A5 rr        	lda camera_x
000BE8r 4  65 rr        	adc temp1
000BEAr 4  85 rr        	sta camdst_x
000BECr 4  A5 rr        	lda camera_x_pg
000BEEr 4  65 rr        	adc temp2
000BF0r 4  85 rr        	sta camdst_x_pg
000BF2r 4               
000BF2r 4  A5 rr        	lda camdst_x
000BF4r 4  18           	clc
000BF5r 4  69 07        	adc #7
000BF7r 4  29 F8        	and #%11111000   ; add the remainder to get a multiple of eight.
000BF9r 4  85 rr        	sta camdst_x
000BFBr 4  90 02        	bcc :+
000BFDr 4  E6 rr        	inc camdst_x_pg
000BFFr 4               :
000BFFr 4               
000BFFr 4               	; subtract it from the player X to determine the destination player X
000BFFr 4  38           	sec
000C00r 4  A5 rr        	lda player_x
000C02r 4  E5 rr        	sbc temp1
000C04r 4  85 rr        	sta player_x_d
000C06r 4               
000C06r 4               	; calculate camoff - the increment we should add over a span of 32 frames to smoothly
000C06r 4               	; scroll the camera
000C06r 4  20 rr rr     	jsr @compute_camoff
000C09r 4               
000C09r 4               	; shift the entirety of camoff by 3 to allow for a course correction during some frames
000C09r 4  20 rr rr     	jsr @compute_camoff2
000C0Cr 4               
000C0Cr 4  A5 rr        	lda camdst_x
000C0Er 4  85 rr        	sta roombeglo
000C10r 4  4A           	lsr
000C11r 4  4A           	lsr
000C12r 4  4A           	lsr
000C13r 4  85 rr        	sta roombeglo2
000C15r 4  A5 rr        	lda camdst_x_pg
000C17r 4  85 rr        	sta roombeghi
000C19r 4  6A           	ror
000C1Ar 4  6A           	ror
000C1Br 4  6A           	ror
000C1Cr 4  6A           	ror
000C1Dr 4  29 E0        	and #%11100000
000C1Fr 4  05 rr        	ora roombeglo2
000C21r 4  85 rr        	sta roombeglo2
000C23r 4               
000C23r 4  A9 00        	lda #0
000C25r 4  85 rr        	sta temp7                ; temp7 will now hold the camera's "sub X" position
000C27r 4               
000C27r 4  A9 00        	lda #0
000C29r 4  85 rr        	sta tr_scrnpos
000C2Br 4  85 rr        	sta quaketimer
000C2Dr 4               
000C2Dr 4               	; set the player's velocity to jump into the stage.
000C2Dr 4  A9 00        	lda #0
000C2Fr 4  85 rr        	sta player_vl_x
000C31r 4  85 rr        	sta player_vs_x
000C33r 4  85 rr        	sta dashcount
000C35r 4               
000C35r 4               	; set the auto jump flag. it'll be cleared when the player lands
000C35r 4  A9 04        	lda #g2_autojump
000C37r 4  05 rr        	ora gamectrl2
000C39r 4  85 rr        	sta gamectrl2
000C3Br 4               
000C3Br 4  A9 FE        	lda #jumpvelHI
000C3Dr 4  85 rr        	sta player_vl_y
000C3Fr 4  A9 40        	lda #jumpvelLO
000C41r 4  85 rr        	sta player_vs_y
000C43r 4  A9 0C        	lda #jumpsustain
000C45r 4  85 rr        	sta jcountdown
000C47r 4               
000C47r 4               	; clear the camera stop bits
000C47r 4  A5 rr        	lda gamectrl
000C49r 4  29 F3        	and #((gs_scrstopR|gs_scrstodR)^$FF)
000C4Br 4  85 rr        	sta gamectrl
000C4Dr 4               
000C4Dr 4  A5 rr        	lda nmictrl
000C4Fr 4  29 3F        	and #((nc_flushcol|nc_flshpalv)^$FF)
000C51r 4  85 rr        	sta nmictrl
000C53r 4               
000C53r 4               	; pre-generate all metatiles
000C53r 4  A0 00        	ldy #0
000C55r 4               @genloop:
000C55r 4  84 rr        	sty transtimer
000C57r 4  20 rr rr     	jsr h_gener_ents_r
000C5Ar 4  20 rr rr     	jsr h_gener_mts_r
000C5Dr 4  A4 rr        	ldy transtimer
000C5Fr 4  C8           	iny
000C60r 4  C0 24        	cpy #36
000C62r 4  D0 F1        	bne @genloop
000C64r 4               
000C64r 4               	; pre-generate all palette data
000C64r 4  A0 00        	ldy #0
000C66r 4               @palloop:
000C66r 4  84 rr        	sty temp6
000C68r 4  20 rr rr     	jsr h_palette_data_column
000C6Br 4               
000C6Br 4               	; an inner loop to copy from temppal to loadedpals
000C6Br 4  A5 rr        	lda temp6
000C6Dr 4  0A           	asl
000C6Er 4  0A           	asl
000C6Fr 4  0A           	asl
000C70r 4  AA           	tax
000C71r 4  A0 00        	ldy #0
000C73r 4               
000C73r 4  B9 rr rr     :	lda temppal, y
000C76r 4  9D rr rr     	sta loadedpals, x
000C79r 4  E8           	inx
000C7Ar 4  C8           	iny
000C7Br 4  C0 08        	cpy #8
000C7Dr 4  D0 F4        	bne :-
000C7Fr 4               
000C7Fr 4  A4 rr        	ldy temp6
000C81r 4  C8           	iny
000C82r 4  C0 08        	cpy #8
000C84r 4  D0 E0        	bne @palloop
000C86r 4               
000C86r 4               	; now, we will want to wait for vblank. NMIs are disabled at this point
000C86r 4               	; sometimes the code above is too slow so we may end up calling gm_leave_doframe
000C86r 4               	; during vblank, the NMI is fired, but the NMI ends up sending stuff to the
000C86r 4               	; PPU even after vblank.
000C86r 4               	;
000C86r 4               	; this is a HACK.
000C86r 4  20 rr rr     	jsr vblank_wait
000C89r 4               
000C89r 4               	; preserve the camera stop bits temporarily.
000C89r 4               	; we'll clear them so that h_gener_col_r does its job.
000C89r 4  A5 rr        	lda gamectrl
000C8Br 4  29 0C        	and #(gs_scrstopR|gs_scrstodR)
000C8Dr 4  85 rr        	sta temp9
000C8Fr 4               
000C8Fr 4  A5 rr        	lda nmictrl
000C91r 4  29 3F        	and #((nc_flushcol|nc_flshpalv)^$FF)
000C93r 4  85 rr        	sta nmictrl
000C95r 4               
000C95r 4  A5 rr        	lda gamectrl
000C97r 4  45 rr        	eor temp9
000C99r 4  09 80        	ora #gs_dontgen
000C9Br 4  85 rr        	sta gamectrl
000C9Dr 4               
000C9Dr 4               	; write 30 rows - these are not subject to camera limitations
000C9Dr 4  A0 00        	ldy #0
000C9Fr 4               @writeloop:
000C9Fr 4  84 rr        	sty transtimer
000CA1r 4  20 rr rr     	jsr h_gener_row_u
000CA4r 4               
000CA4r 4               	; also bring the player down
000CA4r 4  A5 rr        	lda player_y
000CA6r 4  18           	clc
000CA7r 4  69 08        	adc #cspeed
000CA9r 4  C9 E0        	cmp #$E0
000CABr 4  90 02        	bcc :+
000CADr 4  A9 E0        	lda #$E0
000CAFr 4  85 rr        :	sta player_y
000CB1r 4               
000CB1r 4  A9 08        	lda #cspeed
000CB3r 4  20 rr rr     	jsr gm_shifttraceYP
000CB6r 4               
000CB6r 4               	; and the camera up
000CB6r 4  A5 rr        	lda camera_y
000CB8r 4  38           	sec
000CB9r 4  E9 08        	sbc #cspeed
000CBBr 4  C9 F0        	cmp #$F0
000CBDr 4  90 03        	bcc :+
000CBFr 4  38           	sec
000CC0r 4  E9 10        	sbc #$10
000CC2r 4  85 rr        :	sta camera_y
000CC4r 4               
000CC4r 4               	; add the relevant displacement [camoff_H, camoff_M, camoff_L] to the camera's position...
000CC4r 4               	; camoff_H is the low byte, camoff_M is the high byte.
000CC4r 4  20 rr rr     	jsr @addtocameraX
000CC7r 4               
000CC7r 4               	; every some frames, add slightly more to the camera and player X to perform a course correction
000CC7r 4  A5 rr        	lda transtimer
000CC9r 4  29 01        	and #1
000CCBr 4  D0 03        	bne :+
000CCDr 4  20 rr rr     	jsr @add2ndtocameraX
000CD0r 4               
000CD0r 4  C6 rr        :	dec ntrowhead2
000CD2r 4  20 rr rr     	jsr gm_leave_doframe
000CD5r 4               
000CD5r 4               @dontdeccamy:
000CD5r 4  A4 rr        	ldy transtimer
000CD7r 4  C8           	iny
000CD8r 4  C0 1E        	cpy #30
000CDAr 4  D0 C3        	bne @writeloop
000CDCr 4               
000CDCr 4               	; add 32 to the name table write head
000CDCr 4  A5 rr        	lda ntwrhead
000CDEr 4  18           	clc
000CDFr 4  69 20        	adc #32
000CE1r 4  85 rr        	sta ntwrhead
000CE3r 4               
000CE3r 4               	; restore the camera flags
000CE3r 4  A5 rr        	lda gamectrl
000CE5r 4  05 rr        	ora temp9
000CE7r 4  85 rr        	sta gamectrl
000CE9r 4               
000CE9r 4               	; snap the camera position properly
000CE9r 4  A5 rr        	lda camdst_x
000CEBr 4  85 rr        	sta camera_x
000CEDr 4  A5 rr        	lda camdst_x_pg
000CEFr 4  85 rr        	sta camera_x_pg
000CF1r 4  29 01        	and #1
000CF3r 4  85 rr        	sta camera_x_hi
000CF5r 4               
000CF5r 4  A5 rr        	lda camera_x
000CF7r 4  85 rr        	sta roombeglo
000CF9r 4  A5 rr        	lda camera_x_pg
000CFBr 4  85 rr        	sta roombeghi
000CFDr 4               
000CFDr 4  A5 rr        	lda player_x_d
000CFFr 4  85 rr        	sta player_x
000D01r 4  A9 00        	lda #0
000D03r 4  85 rr        	sta player_sp_x
000D05r 4               
000D05r 4  A9 08        	lda #gs_scrstopR
000D07r 4  24 rr        	bit gamectrl
000D09r 4  D0 1D        	bne @dontdomore
000D0Br 4               	; camera wasn't stopped so draw 4 more cols
000D0Br 4  A0 00        	ldy #0
000D0Dr 4  84 rr        :	sty transtimer
000D0Fr 4  20 rr rr     	jsr h_gener_col_r
000D12r 4  20 rr rr     	jsr gm_leave_doframe
000D15r 4  A4 rr        	ldy transtimer
000D17r 4  C8           	iny
000D18r 4  C0 04        	cpy #4
000D1Ar 4  D0 F1        	bne :-
000D1Cr 4               
000D1Cr 4               	; generate one more column
000D1Cr 4  A9 08        	lda #gs_scrstopR
000D1Er 4  24 rr        	bit gamectrl
000D20r 4  D0 06        	bne @dontdomore
000D22r 4               
000D22r 4  20 rr rr     	jsr h_gener_ents_r
000D25r 4  20 rr rr     	jsr h_gener_mts_r
000D28r 4               
000D28r 4               @dontdomore:
000D28r 4  A5 rr        	lda gamectrl
000D2Ar 4  29 7F        	and #(gs_dontgen ^ $FF)
000D2Cr 4  85 rr        	sta gamectrl
000D2Er 4               
000D2Er 4               	; pranked. we will do one final loop to bring the player Y up to the start
000D2Er 4  A5 rr        	lda player_y
000D30r 4  C5 rr        	cmp startpy
000D32r 4  90 18        	bcc @finalloopdone
000D34r 4               
000D34r 4               @finalloop:
000D34r 4  A5 rr        	lda player_y
000D36r 4  38           	sec
000D37r 4  E9 04        	sbc #4
000D39r 4  85 rr        	sta player_y
000D3Br 4  20 rr rr     	jsr gm_addtrace
000D3Er 4  90 21        	bcc @messedupcase
000D40r 4  C5 rr        	cmp startpy
000D42r 4  90 08        	bcc @finalloopdone
000D44r 4  F0 06        	beq @finalloopdone
000D46r 4               
000D46r 4  20 rr rr     	jsr gm_leave_doframe
000D49r 4  4C rr rr     	jmp @finalloop
000D4Cr 4               
000D4Cr 4               @finalloopdone:
000D4Cr 4  A5 rr        	lda lvlyoff
000D4Er 4  0A           	asl
000D4Fr 4  0A           	asl
000D50r 4  0A           	asl
000D51r 4  85 rr        	sta camera_y
000D53r 4               
000D53r 4  A9 FD        	lda #(g3_transitU ^ $FF)
000D55r 4  25 rr        	and gamectrl3
000D57r 4  85 rr        	sta gamectrl3
000D59r 4               
000D59r 4  A5 rr        	lda roomnumber
000D5Br 4  49 01        	eor #1
000D5Dr 4  20 rr rr     	jsr gm_unload_ents_room
000D60r 4               
000D60r 4  60           	rts
000D61r 4               
000D61r 4               @messedupcase:
000D61r 4  A9 00        	lda #0
000D63r 4  85 rr        	sta player_y
000D65r 4  F0 E5        	beq @finalloopdone
000D67r 4               
000D67r 4               @addtocameraX:
000D67r 4  A5 rr        	lda camoff_sub
000D69r 4  18           	clc
000D6Ar 4  65 rr        	adc camoff_L
000D6Cr 4  85 rr        	sta camoff_sub
000D6Er 4  A5 rr        	lda camera_x
000D70r 4  65 rr        	adc camoff_M
000D72r 4  85 rr        	sta camera_x
000D74r 4  A5 rr        	lda camera_x_pg
000D76r 4  65 rr        	adc camoff_H
000D78r 4  85 rr        	sta camera_x_pg
000D7Ar 4  29 01        	and #1
000D7Cr 4  85 rr        	sta camera_x_hi
000D7Er 4               
000D7Er 4  A5 rr        	lda player_sp_x
000D80r 4  38           	sec
000D81r 4  E5 rr        	sbc camoff_L
000D83r 4  85 rr        	sta player_sp_x
000D85r 4  A5 rr        	lda player_x
000D87r 4  E5 rr        	sbc camoff_M
000D89r 4  85 rr        	sta player_x
000D8Br 4               
000D8Br 4  A5 rr        	lda camoff_M
000D8Dr 4  20 rr rr     	jsr gm_shifttrace
000D90r 4               
000D90r 4  60           	rts
000D91r 4               
000D91r 4               @add2ndtocameraX:
000D91r 4  A5 rr        	lda camoff_sub
000D93r 4  18           	clc
000D94r 4  65 rr        	adc camoff2_L
000D96r 4  85 rr        	sta camoff_sub
000D98r 4  A5 rr        	lda camera_x
000D9Ar 4  65 rr        	adc camoff2_M
000D9Cr 4  85 rr        	sta camera_x
000D9Er 4  A5 rr        	lda camera_x_pg
000DA0r 4  69 00        	adc #0
000DA2r 4  85 rr        	sta camera_x_pg
000DA4r 4  29 01        	and #1
000DA6r 4  85 rr        	sta camera_x_hi
000DA8r 4               
000DA8r 4  A5 rr        	lda player_sp_x
000DAAr 4  38           	sec
000DABr 4  E5 rr        	sbc camoff2_L
000DADr 4  85 rr        	sta player_sp_x
000DAFr 4  A5 rr        	lda player_x
000DB1r 4  E5 rr        	sbc camoff2_M
000DB3r 4  85 rr        	sta player_x
000DB5r 4               
000DB5r 4  A5 rr        	lda camoff2_M
000DB7r 4  20 rr rr     	jsr gm_shifttrace
000DBAr 4               
000DBAr 4  60           	rts
000DBBr 4               
000DBBr 4               @compute_camoff:
000DBBr 4               	; calculate the difference in [camoff_H, camoff_M] (high to low)
000DBBr 4  A5 rr        	lda camdst_x
000DBDr 4  38           	sec
000DBEr 4  E5 rr        	sbc camera_x
000DC0r 4  85 rr        	sta camoff_M
000DC2r 4  A5 rr        	lda camdst_x_pg
000DC4r 4  E5 rr        	sbc camera_x_pg
000DC6r 4  85 rr        	sta camoff_H
000DC8r 4               
000DC8r 4               	; divide it by 32. This will make it so that the camera X displacement
000DC8r 4               	; is applied smoothly over 32 frames.
000DC8r 4               
000DC8r 4               	; eventually, the camera's difference will be stored in [camoff_H, camoff_M, camoff_L] (high to low)
000DC8r 4               	; camoff_H    camoff_M
000DC8r 4               	; xxxxxxxx yyyyyyyy
000DC8r 4               	;   SHALL BECOME:
000DC8r 4               	; camoff_H    camoff_M    camoff_L
000DC8r 4               	; 00000xxx xxxxxyyy yyyyy000
000DC8r 4               
000DC8r 4  A5 rr        	lda camoff_M
000DCAr 4  0A           	asl
000DCBr 4  0A           	asl
000DCCr 4  0A           	asl
000DCDr 4  85 rr        	sta camoff_L
000DCFr 4               
000DCFr 4  A5 rr        	lda camoff_M
000DD1r 4  2A           	rol
000DD2r 4  2A           	rol
000DD3r 4  2A           	rol
000DD4r 4  2A           	rol
000DD5r 4  29 07        	and #%00000111
000DD7r 4  85 rr        	sta temp7
000DD9r 4               
000DD9r 4  A5 rr        	lda camoff_H
000DDBr 4  0A           	asl
000DDCr 4  0A           	asl
000DDDr 4  0A           	asl
000DDEr 4  05 rr        	ora temp7
000DE0r 4  85 rr        	sta camoff_M
000DE2r 4               
000DE2r 4  A5 rr        	lda camoff_H
000DE4r 4  4A           	lsr
000DE5r 4  4A           	lsr
000DE6r 4  4A           	lsr
000DE7r 4  85 rr        	sta camoff_H
000DE9r 4               
000DE9r 4               @compute_camoff2:
000DE9r 4               	; calculate the difference in [camoff_H, camoff_M] (high to low)
000DE9r 4  A5 rr        	lda camdst_x
000DEBr 4  38           	sec
000DECr 4  E5 rr        	sbc camera_x
000DEEr 4  85 rr        	sta camoff2_L
000DF0r 4  A5 rr        	lda camdst_x_pg
000DF2r 4  E5 rr        	sbc camera_x_pg
000DF4r 4  85 rr        	sta camoff2_M
000DF6r 4  60           	rts
000DF7r 4               
000DF7r 3               .include "e_physic.asm"
000DF7r 4               ; Copyright (C) 2024 iProgramInCpp
000DF7r 4               
000DF7r 4               ; ** SUBROUTINE: gm_ent_move_x
000DF7r 4               ; desc: Applies the X velocity component the specified entity.
000DF7r 4               ;       Currently does not perform collision checking against tiles, though that may soon change.
000DF7r 4               ; parameters:
000DF7r 4               ;       Y reg - The index of the entity to move
000DF7r 4               gm_ent_move_x:
000DF7r 4  B9 rr rr     	lda sprspace+sp_vel_x_lo, y
000DFAr 4  18           	clc
000DFBr 4  79 rr rr     	adc sprspace+sp_x_lo, y
000DFEr 4  99 rr rr     	sta sprspace+sp_x_lo, y
000E01r 4               
000E01r 4  B9 rr rr     	lda sprspace+sp_vel_x, y
000E04r 4  79 rr rr     	adc sprspace+sp_x, y
000E07r 4  99 rr rr     	sta sprspace+sp_x, y
000E0Ar 4               	; NOTE: I (iProgramInCpp) must be careful where enemies go to avoid them going outside
000E0Ar 4               	; the level!
000E0Ar 4               
000E0Ar 4               	; Check if the player is standing on this tile.
000E0Ar 4  E4 rr        	cpx entground
000E0Cr 4  D0 26        	bne @notStanding
000E0Er 4               
000E0Er 4               	; Yes, so offset their position by our velocity as well to keep them on the ground.
000E0Er 4               	;
000E0Er 4               	; NOTE: this can cause clipping glitches, be careful if platforms may go into walls!
000E0Er 4  B9 rr rr     	lda sprspace+sp_vel_x_lo, y
000E11r 4  18           	clc
000E12r 4  65 rr        	adc player_sp_x
000E14r 4  85 rr        	sta player_sp_x
000E16r 4               
000E16r 4  B9 rr rr     	lda sprspace+sp_vel_x, y
000E19r 4  30 11        	bmi @addMinus
000E1Br 4               
000E1Br 4               	; Adding a positive player velocity.  Fix up all instances of player being moved to >$F0.
000E1Br 4  65 rr        	adc player_x
000E1Dr 4  90 02        	bcc :+
000E1Fr 4  A9 FF        	lda #$FF
000E21r 4  C9 F0        :	cmp #$F0
000E23r 4  90 02        	bcc :+
000E25r 4  A9 F0        	lda #$F0
000E27r 4  85 rr        :	sta player_x
000E29r 4  4C rr rr     	jmp @doneAdding
000E2Cr 4               
000E2Cr 4               @addMinus:
000E2Cr 4               	; Adding a negative player velocity.  Fix up all instances of player being moved to <$00.
000E2Cr 4  65 rr        	adc player_x
000E2Er 4  B0 02        	bcs :+           ; Carry is set when an underflow happened, and underflows typically happen
000E30r 4  A9 00        	lda #0           ; with negative numbers, so if an underflow _didn't_ happen, must be the
000E32r 4  85 rr        :	sta player_x     ; case that they wrapped around.
000E34r 4               
000E34r 4               @doneAdding:
000E34r 4               
000E34r 4               @notStanding:
000E34r 4               	; TODO: Collision?  Ideally would depend on whether the collidable flag is set.
000E34r 4  60           	rts
000E35r 4               
000E35r 4               ; ** SUBROUTINE: gm_ent_move_y
000E35r 4               ; desc: Applies the Y velocity component the specified entity.
000E35r 4               ;       Currently does not perform collision checking against tiles, though that may soon change.
000E35r 4               ; parameters:
000E35r 4               ;       Y reg - The index of the entity to move
000E35r 4               gm_ent_move_y:
000E35r 4  B9 rr rr     	lda sprspace+sp_vel_y_lo, y
000E38r 4  18           	clc
000E39r 4  79 rr rr     	adc sprspace+sp_y_lo, y
000E3Cr 4  99 rr rr     	sta sprspace+sp_y_lo, y
000E3Fr 4               
000E3Fr 4  B9 rr rr     	lda sprspace+sp_vel_y, y
000E42r 4  79 rr rr     	adc sprspace+sp_y, y
000E45r 4  99 rr rr     	sta sprspace+sp_y, y
000E48r 4               	; NOTE: I (iProgramInCpp) must be careful where enemies go to avoid them going outside
000E48r 4               	; the level!
000E48r 4               
000E48r 4               	; Check if the player is standing on this tile.
000E48r 4  E4 rr        	cpx entground
000E4Ar 4  D0 20        	bne @notStanding
000E4Cr 4               
000E4Cr 4               	; Yes, so offset their position by our velocity as well to keep them on the ground.
000E4Cr 4               	;
000E4Cr 4               	; NOTE: this can cause clipping glitches, be careful if platforms may go into walls!
000E4Cr 4  B9 rr rr     	lda sprspace+sp_vel_y, y
000E4Fr 4  45 rr        	eor player_vl_y
000E51r 4  D0 0A        	bne :+
000E53r 4               
000E53r 4               	; the signs are the same therefore, copy the velocity of the platform onto the player.
000E53r 4  B9 rr rr     	lda sprspace+sp_vel_y_lo, y
000E56r 4  85 rr        	sta player_vs_y
000E58r 4  B9 rr rr     	lda sprspace+sp_vel_y, y
000E5Br 4  85 rr        	sta player_vl_y
000E5Dr 4               
000E5Dr 4               	; now add the Y delta to the player
000E5Dr 4  B9 rr rr     :	lda sprspace+sp_vel_y_lo, y
000E60r 4  18           	clc
000E61r 4  65 rr        	adc player_sp_y
000E63r 4  85 rr        	sta player_sp_y
000E65r 4               
000E65r 4               	; NOTE: in horizontal levels, overflow vertically typically doesn't happen.
000E65r 4  B9 rr rr     	lda sprspace+sp_vel_y, y
000E68r 4  65 rr        	adc player_y
000E6Ar 4  85 rr        	sta player_y
000E6Cr 4               
000E6Cr 4               @notStanding:
000E6Cr 4               
000E6Cr 4               	; Check for a squish. First, determine the direction of the platform.
000E6Cr 4  B9 rr rr     	lda sprspace+sp_vel_y, y
000E6Fr 4  30 29        	bmi @checkSquishUP
000E71r 4               
000E71r 4               	; Platform is falling, so check that the player wasn't placed inside a floor.
000E71r 4               	; TODO: don't call the whole of gm_collentceil, just the one for this Y
000E71r 4  20 rr rr     	jsr gm_collentceil
000E74r 4  D0 01        	bne :+
000E76r 4               
000E76r 4               	; no collision here!
000E76r 4  60           	rts
000E77r 4               
000E77r 4               :	; Platform has collided with player. It has returned a Y position, so snap the player there.
000E77r 4  18           	clc
000E78r 4  69 02        	adc #(8-(16-plrheight)) ; add the height of the tile, minus the top Y offset of the player hitbox
000E7Ar 4  85 rr        	sta player_y
000E7Cr 4               
000E7Cr 4               	; Ok, now check if a floor is here
000E7Cr 4  20 rr rr     	jsr gm_getmidx
000E7Fr 4  AA           	tax
000E80r 4  20 rr rr     	jsr gm_getbottomy_f
000E83r 4  A8           	tay
000E84r 4  A9 00        	lda #gc_floor
000E86r 4  20 rr rr     	jsr gm_collide
000E89r 4  F0 0E        	beq :+
000E8Br 4               
000E8Br 4               	; Collided with a floor also!
000E8Br 4  A9 F8        	lda #%11111000
000E8Dr 4  25 rr        	and player_y
000E8Fr 4  85 rr        	sta player_y
000E91r 4               
000E91r 4               	; one more collision check for good measure
000E91r 4  20 rr rr     	jsr gm_collentceil
000E94r 4  F0 03        	beq :+
000E96r 4               
000E96r 4               	; ok, we know for SURE the player was squished in between this platform and the ground. Die :(
000E96r 4  20 rr rr     	jsr gm_killplayer
000E99r 4  60           :	rts
000E9Ar 4               
000E9Ar 4               @checkSquishUP:
000E9Ar 4               	; TODO
000E9Ar 4               
000E9Ar 4  60           	rts
000E9Br 4               
000E9Br 3               
000E9Br 2               .include "audio/audio.asm"
000E9Br 3               ; Copyright (C) 2024 iProgramInCpp
000E9Br 3               
000E9Br 3               ; Define an external config for FamiStudio
000E9Br 3               FAMISTUDIO_CFG_EXTERNAL = 1
000E9Br 3               
000E9Br 3               .define FAMISTUDIO_CA65_ZP_SEGMENT   ZEROPAGE
000E9Br 3               .define FAMISTUDIO_CA65_RAM_SEGMENT  FMSRAM
000E9Br 3               .define FAMISTUDIO_CA65_CODE_SEGMENT PRG_MAIN
000E9Br 3               
000E9Br 3               FAMISTUDIO_CFG_NTSC_SUPPORT   = 1 ; no PAL support yet
000E9Br 3               FAMISTUDIO_CFG_DPCM_SUPPORT   = 1
000E9Br 3               FAMISTUDIO_CFG_THREAD         = 1 ; to be able to call FamiStudio SFX routines from main thread
000E9Br 3               
000E9Br 3               ; things defined by the demo. I don't care about most of these
000E9Br 3               FAMISTUDIO_CFG_SFX_SUPPORT    = 1
000E9Br 3               FAMISTUDIO_CFG_SFX_STREAMS    = 2
000E9Br 3               FAMISTUDIO_CFG_EQUALIZER      = 1
000E9Br 3               FAMISTUDIO_USE_VOLUME_TRACK   = 1
000E9Br 3               FAMISTUDIO_USE_PITCH_TRACK    = 1
000E9Br 3               FAMISTUDIO_USE_SLIDE_NOTES    = 1
000E9Br 3               FAMISTUDIO_USE_VIBRATO        = 1
000E9Br 3               FAMISTUDIO_USE_ARPEGGIO       = 1
000E9Br 3               FAMISTUDIO_CFG_SMOOTH_VIBRATO = 1
000E9Br 3               FAMISTUDIO_USE_RELEASE_NOTES  = 1
000E9Br 3               FAMISTUDIO_USE_DUTYCYCLE_EFFECT = 1
000E9Br 3               FAMISTUDIO_USE_VOLUME_SLIDES = 1
000E9Br 3               ;FAMISTUDIO_USE_DELTA_COUNTER = 1
000E9Br 3               ;FAMISTUDIO_USE_PHASE_RESET = 1
000E9Br 3               ;FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE = 1
000E9Br 3               FAMISTUDIO_USE_FAMITRACKER_TEMPO = 1 ; bruh
000E9Br 3               FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS = 1 ; bruuuh
000E9Br 3               FAMISTUDIO_DPCM_OFF           = $c000
000E9Br 3               
000E9Br 3               .include "famistudio.asm"
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; FAMISTUDIO SOUND ENGINE (4.2.0)
000E9Br 4               ; Copyright (c) 2019-2023 Mathieu Gauthier
000E9Br 4               ;
000E9Br 4               ; Copying and distribution of this file, with or without
000E9Br 4               ; modification, are permitted in any medium without royalty provided
000E9Br 4               ; the copyright notice and this notice are preserved in all source
000E9Br 4               ; code copies. This file is offered as-is, without any warranty.
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; This is the FamiStudio sound engine. It is used by the NSF and ROM exporter of FamiStudio and can be used to make
000E9Br 4               ; games. It supports every feature from FamiStudio, some of them are toggeable to save CPU/memory.
000E9Br 4               ;
000E9Br 4               ; This is essentially a heavily modified version of FamiTone2 by Shiru. A lot of his code and comments are still
000E9Br 4               ; present here, so massive thanks to him!! I am not trying to steal his work or anything, i renamed a lot of functions
000E9Br 4               ; and variables because at some point it was becoming a mess of coding standards and getting hard to maintain.
000E9Br 4               ;
000E9Br 4               ; Moderately advanced users can probably figure out how to use the sound engine simply by reading these comments.
000E9Br 4               ; For more in-depth documentation, please go to:
000E9Br 4               ;
000E9Br 4               ;    https://famistudio.org/doc/soundengine/
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; INTERFACE
000E9Br 4               ;
000E9Br 4               ; The interface is pretty much the same as FamiTone2, with a slightly different naming convention. The subroutines you
000E9Br 4               ; can call from your game are:
000E9Br 4               ;
000E9Br 4               ;   - famistudio_init            : Initialize the engine with some music data.
000E9Br 4               ;   - famistudio_music_play      : Start music playback with a specific song.
000E9Br 4               ;   - famistudio_music_pause     : Pause/unpause music playback.
000E9Br 4               ;   - famistudio_music_stop      : Stops music playback.
000E9Br 4               ;   - famistudio_sfx_init        : Initialize SFX engine with SFX data.
000E9Br 4               ;   - famistudio_sfx_play        : Play a SFX.
000E9Br 4               ;   - famistudio_sfx_sample_play : Play a DPCM SFX.
000E9Br 4               ;   - famistudio_update          : Updates the music/SFX engine, call once per frame, ideally from NMI.
000E9Br 4               ;
000E9Br 4               ; You can check the demo ROM to see how they are used or check out the online documentation for more info.
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; CONFIGURATION
000E9Br 4               ;
000E9Br 4               ; There are 2 main ways of configuring the engine.
000E9Br 4               ;
000E9Br 4               ;   1) The simplest way is right here, in the section below. Simply comment/uncomment these defines, and move on
000E9Br 4               ;      with your life.
000E9Br 4               ;
000E9Br 4               ;   2) The second way is "externally", using definitions coming from elsewhere in your app or the command line. If you
000E9Br 4               ;      wish do so, simply define FAMISTUDIO_CFG_EXTERNAL=1 and this whole section will be ignored. You are then
000E9Br 4               ;      responsible for providing all configuration. This is useful if you have multiple projects that needs
000E9Br 4               ;      different configurations, while pointing to the same code file. This is how the provided demos and FamiStudio
000E9Br 4               ;      uses it.
000E9Br 4               ;
000E9Br 4               ; Note that unless specified, the engine uses "if" and not "ifdef" for all boolean values so you need to define these
000E9Br 4               ; to non-zero values. Undefined values will be assumed to be zero.
000E9Br 4               ;
000E9Br 4               ; There are 4 main things to configure, each of them will be detailed below.
000E9Br 4               ;
000E9Br 4               ;   1) Segments (ZP/RAM/PRG)
000E9Br 4               ;   2) Audio expansion
000E9Br 4               ;   3) Global engine parameters
000E9Br 4               ;   4) Supported features
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_EXTERNAL
000E9Br 4                   FAMISTUDIO_CFG_EXTERNAL = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               ; Set this to configure the sound engine from outside (in your app, or from the command line)
000E9Br 4               .if !FAMISTUDIO_CFG_EXTERNAL
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; 1) SEGMENT CONFIGURATION
000E9Br 4               ;
000E9Br 4               ; You need to tell where you want to allocate the zeropage, RAM and code. This section will be slightly different for
000E9Br 4               ; each assembler.
000E9Br 4               ;
000E9Br 4               ; For CA65, you need to specify the name of your ZEROPAGE, RAM/BSS and CODE/PRG segments as c-style macros (.define)
000E9Br 4               ; like the example below.
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               .define FAMISTUDIO_CA65_ZP_SEGMENT   ZP
000E9Br 4               .define FAMISTUDIO_CA65_RAM_SEGMENT  RAM
000E9Br 4               .define FAMISTUDIO_CA65_CODE_SEGMENT PRG
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; 2) AUDIO EXPANSION CONFIGURATION
000E9Br 4               ;
000E9Br 4               ; You can enable up to one audio expansion (FAMISTUDIO_EXP_XXX). Enabling more than one expansion will lead to
000E9Br 4               ; undefined behavior. Memory usage goes up as more complex expansions are used. The audio expansion you choose
000E9Br 4               ; **MUST MATCH** with the data you will load in the engine. Loading a FDS song while enabling VRC6 will lead to
000E9Br 4               ; undefined behavior.
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               ; Konami VRC6 (2 extra square + saw)
000E9Br 4               ; FAMISTUDIO_EXP_VRC6          = 1
000E9Br 4               
000E9Br 4               ; Rainbow-Net (homebrew clone of VRC6)
000E9Br 4               ; FAMISTUDIO_EXP_RAINBOW       = 1
000E9Br 4               
000E9Br 4               ; Konami VRC7 (6 FM channels)
000E9Br 4               ; FAMISTUDIO_EXP_VRC7          = 1
000E9Br 4               
000E9Br 4               ; Nintendo MMC5 (2 extra squares, extra DPCM not supported)
000E9Br 4               ; FAMISTUDIO_EXP_MMC5          = 1
000E9Br 4               
000E9Br 4               ; Sunsoft S5B (2 extra squares, advanced features not supported.)
000E9Br 4               ; FAMISTUDIO_EXP_S5B           = 1
000E9Br 4               
000E9Br 4               ; Famicom Disk System (extra wavetable channel)
000E9Br 4               ; FAMISTUDIO_EXP_FDS           = 1
000E9Br 4               
000E9Br 4               ; Namco 163 (between 1 and 8 extra wavetable channels) + number of channels.
000E9Br 4               ; FAMISTUDIO_EXP_N163          = 1
000E9Br 4               ; FAMISTUDIO_EXP_N163_CHN_CNT  = 4
000E9Br 4               
000E9Br 4               ; EPSM (Expansion Port Sound Module)
000E9Br 4               ; FAMISTUDIO_EXP_EPSM          = 1
000E9Br 4               ; Fine-tune control for enabling specific channels
000E9Br 4               ; Default values for the channels are to enable all channels.
000E9Br 4               ; FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT     = 3
000E9Br 4               ; FAMISTUDIO_EXP_EPSM_FM_CHN_CNT      = 6
000E9Br 4               ; FAMISTUDIO_EXP_EPSM_RHYTHM_CHN1_ENABLE = 1
000E9Br 4               ; FAMISTUDIO_EXP_EPSM_RHYTHM_CHN2_ENABLE = 1
000E9Br 4               ; FAMISTUDIO_EXP_EPSM_RHYTHM_CHN3_ENABLE = 1
000E9Br 4               ; FAMISTUDIO_EXP_EPSM_RHYTHM_CHN4_ENABLE = 1
000E9Br 4               ; FAMISTUDIO_EXP_EPSM_RHYTHM_CHN5_ENABLE = 1
000E9Br 4               ; FAMISTUDIO_EXP_EPSM_RHYTHM_CHN6_ENABLE = 1
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; 3) GLOBAL ENGINE CONFIGURATION
000E9Br 4               ;
000E9Br 4               ; These are parameters that configures the engine, but are independent of the data you will be importing, such as
000E9Br 4               ; which platform (PAL/NTSC) you want to support playback for, whether SFX are enabled or not, etc. They all have the
000E9Br 4               ; form FAMISTUDIO_CFG_XXX.
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               ; One of these MUST be defined (PAL or NTSC playback). Note that only NTSC support is supported when using any of the audio expansions.
000E9Br 4               ; FAMISTUDIO_CFG_PAL_SUPPORT   = 1
000E9Br 4               FAMISTUDIO_CFG_NTSC_SUPPORT  = 1
000E9Br 4               
000E9Br 4               ; Support for sound effects playback + number of SFX that can play at once.
000E9Br 4               ; FAMISTUDIO_CFG_SFX_SUPPORT   = 1
000E9Br 4               ; FAMISTUDIO_CFG_SFX_STREAMS   = 2
000E9Br 4               
000E9Br 4               ; Blaarg's smooth vibrato technique. Eliminates phase resets ("pops") on square channels.
000E9Br 4               ; FAMISTUDIO_CFG_SMOOTH_VIBRATO = 1
000E9Br 4               
000E9Br 4               ; Enables DPCM playback support.
000E9Br 4               FAMISTUDIO_CFG_DPCM_SUPPORT   = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if you are calling sound effects from a different thread than the sound engine update.
000E9Br 4               ; FAMISTUDIO_CFG_THREAD         = 1
000E9Br 4               
000E9Br 4               ; Enable to use the CC65 compatible entrypoints via the provided header file
000E9Br 4               ; FAMISTUDIO_CFG_C_BINDINGS   = 1
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; 4) SUPPORTED FEATURES CONFIGURATION
000E9Br 4               ;
000E9Br 4               ; Every feature supported in FamiStudio is supported by this sound engine. If you know for sure that you are not using
000E9Br 4               ; specific features in your music, you can disable them to save memory/processing time. Using a feature in your song
000E9Br 4               ; and failing to enable it will likely lead to crashes (BRK), or undefined behavior. They all have the form
000E9Br 4               ; FAMISTUDIO_USE_XXX.
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               ; Must be enabled if the songs you will be importing have been created using FamiTracker tempo mode. If you are using
000E9Br 4               ; FamiStudio tempo mode, this must be undefined. You cannot mix and match tempo modes, the engine can only run in one
000E9Br 4               ; mode or the other.
000E9Br 4               ; More information at: https://famistudio.org/doc/song/#tempo-modes
000E9Br 4               ; FAMISTUDIO_USE_FAMITRACKER_TEMPO = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if the songs uses delayed notes or delayed cuts. This is obviously only available when using
000E9Br 4               ; FamiTracker tempo mode as FamiStudio tempo mode does not need this.
000E9Br 4               ; FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if the songs uses release notes.
000E9Br 4               ; More information at: https://famistudio.org/doc/pianoroll/#release-point
000E9Br 4               FAMISTUDIO_USE_RELEASE_NOTES = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if any song uses the volume track. The volume track allows manipulating the volume at the track level
000E9Br 4               ; independently from instruments.
000E9Br 4               ; More information at: https://famistudio.org/doc/pianoroll/#editing-volume-tracks-effects
000E9Br 4               FAMISTUDIO_USE_VOLUME_TRACK      = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if any song uses slides on the volume track. Volume track must be enabled too.
000E9Br 4               ; More information at: https://famistudio.org/doc/pianoroll/#editing-volume-tracks-effects
000E9Br 4               ; FAMISTUDIO_USE_VOLUME_SLIDES     = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if any song uses the pitch track. The pitch track allows manipulating the pitch at the track level
000E9Br 4               ; independently from instruments.
000E9Br 4               ; More information at: https://famistudio.org/doc/pianoroll/#pitch
000E9Br 4               FAMISTUDIO_USE_PITCH_TRACK       = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if any song uses slide notes. Slide notes allows portamento and slide effects.
000E9Br 4               ; More information at: https://famistudio.org/doc/pianoroll/#slide-notes
000E9Br 4               FAMISTUDIO_USE_SLIDE_NOTES       = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if any song uses slide notes on the noise channel too.
000E9Br 4               ; More information at: https://famistudio.org/doc/pianoroll/#slide-notes
000E9Br 4               ; FAMISTUDIO_USE_NOISE_SLIDE_NOTES = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if any song uses the vibrato speed/depth effect track.
000E9Br 4               ; More information at: https://famistudio.org/doc/pianoroll/#vibrato-depth-speed
000E9Br 4               FAMISTUDIO_USE_VIBRATO           = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if any song uses arpeggios (not to be confused with instrument arpeggio envelopes, those are always
000E9Br 4               ; supported).
000E9Br 4               ; More information at: (TODO)
000E9Br 4               FAMISTUDIO_USE_ARPEGGIO          = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if any song uses the "Duty Cycle" effect (equivalent of FamiTracker Vxx, also called "Timbre").
000E9Br 4               ; FAMISTUDIO_USE_DUTYCYCLE_EFFECT  = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if any song uses the DPCM delta counter. Only makes sense if DPCM samples
000E9Br 4               ; are enabled (FAMISTUDIO_CFG_DPCM_SUPPORT).
000E9Br 4               ; More information at: (TODO)
000E9Br 4               ; FAMISTUDIO_USE_DELTA_COUNTER     = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if your project uses more than 1 bank of DPCM samples.
000E9Br 4               ; When using this, you must implement the "famistudio_dpcm_bank_callback" callback
000E9Br 4               ; and switch to the correct bank every time a sample is played.
000E9Br 4               ; FAMISTUDIO_USE_DPCM_BANKSWITCHING = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if your project uses more than 63 unique DPCM mappings (a mapping is DPCM sample
000E9Br 4               ; assigned to a note, with a specific pitch/loop, etc.). Implied when using FAMISTUDIO_USE_DPCM_BANKSWITCHING.
000E9Br 4               ; FAMISTUDIO_USE_DPCM_EXTENDED_RANGE = 1
000E9Br 4               
000E9Br 4               ; Allows having up to 256 instrument at the cost of slightly higher CPU usage when switching instrument.
000E9Br 4               ; When this is off, the limit is 64 for regular instruments and 32 for expansion instrumnets.
000E9Br 4               ; FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if your project uses the "Phase Reset" effect.
000E9Br 4               ; FAMISTUDIO_USE_PHASE_RESET = 1
000E9Br 4               
000E9Br 4               ; Must be enabled if your project uses the FDS expansion and at least one instrument with FDS Auto-Mod enabled.
000E9Br 4               ; FAMISTUDIO_USE_FDS_AUTOMOD  = 1
000E9Br 4               
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               ; Memory location of the DPCM samples. Must be between $c000 and $ffc0, and a multiple of 64.
000E9Br 4               .ifndef FAMISTUDIO_DPCM_OFF
000E9Br 4                   FAMISTUDIO_DPCM_OFF = $c000
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; END OF CONFIGURATION
000E9Br 4               ;
000E9Br 4               ; Ideally, you should not have to change anything below this line.
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; INTERNAL DEFINES (Do not touch)
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_EXP_RAINBOW
000E9Br 4                   FAMISTUDIO_EXP_RAINBOW = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_RAINBOW
000E9Br 4                   FAMISTUDIO_EXP_VRC6 = 1
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_EXP_VRC6
000E9Br 4                   FAMISTUDIO_EXP_VRC6 = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_EXP_VRC7
000E9Br 4                   FAMISTUDIO_EXP_VRC7 = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_EXP_EPSM
000E9Br 4                   FAMISTUDIO_EXP_EPSM = 0
000E9Br 4                   FAMISTUDIO_EXP_EPSM_ENV_CNT = 0
000E9Br 4                   FAMISTUDIO_EXP_EPSM_RHYTHM_CNT = 0
000E9Br 4                   FAMISTUDIO_EXP_EPSM_FM_CHN_CNT = 0
000E9Br 4                   FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT = 0
000E9Br 4                   FAMISTUDIO_EXP_EPSM_TRIG_CHN = 0
000E9Br 4               .else
000E9Br 4                   .ifndef FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT
000E9Br 4                       FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT     = 3
000E9Br 4                   .endif
000E9Br 4                   .ifndef FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000E9Br 4                       FAMISTUDIO_EXP_EPSM_FM_CHN_CNT      = 6
000E9Br 4                   .endif
000E9Br 4                   .ifndef FAMISTUDIO_EXP_EPSM_RHYTHM_CHN1_ENABLE
000E9Br 4                       FAMISTUDIO_EXP_EPSM_RHYTHM_CHN1_ENABLE = 1
000E9Br 4                   .endif
000E9Br 4                   .ifndef FAMISTUDIO_EXP_EPSM_RHYTHM_CHN2_ENABLE
000E9Br 4                       FAMISTUDIO_EXP_EPSM_RHYTHM_CHN2_ENABLE = 1
000E9Br 4                   .endif
000E9Br 4                   .ifndef FAMISTUDIO_EXP_EPSM_RHYTHM_CHN3_ENABLE
000E9Br 4                       FAMISTUDIO_EXP_EPSM_RHYTHM_CHN3_ENABLE = 1
000E9Br 4                   .endif
000E9Br 4                   .ifndef FAMISTUDIO_EXP_EPSM_RHYTHM_CHN4_ENABLE
000E9Br 4                       FAMISTUDIO_EXP_EPSM_RHYTHM_CHN4_ENABLE = 1
000E9Br 4                   .endif
000E9Br 4                   .ifndef FAMISTUDIO_EXP_EPSM_RHYTHM_CHN5_ENABLE
000E9Br 4                       FAMISTUDIO_EXP_EPSM_RHYTHM_CHN5_ENABLE = 1
000E9Br 4                   .endif
000E9Br 4                   .ifndef FAMISTUDIO_EXP_EPSM_RHYTHM_CHN6_ENABLE
000E9Br 4                       FAMISTUDIO_EXP_EPSM_RHYTHM_CHN6_ENABLE = 1
000E9Br 4                   .endif
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_EXP_MMC5
000E9Br 4                   FAMISTUDIO_EXP_MMC5 = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_EXP_S5B
000E9Br 4                   FAMISTUDIO_EXP_S5B = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_EXP_FDS
000E9Br 4                   FAMISTUDIO_EXP_FDS = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_EXP_N163
000E9Br 4                   FAMISTUDIO_EXP_N163 = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_EXP_N163_CHN_CNT
000E9Br 4                   FAMISTUDIO_EXP_N163_CHN_CNT = 1
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_PAL_SUPPORT
000E9Br 4                   FAMISTUDIO_CFG_PAL_SUPPORT = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_NTSC_SUPPORT
000E9Br 4                   .if FAMISTUDIO_CFG_PAL_SUPPORT
000E9Br 4                       FAMISTUDIO_CFG_NTSC_SUPPORT = 0
000E9Br 4                   .else
000E9Br 4                       FAMISTUDIO_CFG_NTSC_SUPPORT = 1
000E9Br 4                   .endif
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_CFG_NTSC_SUPPORT && FAMISTUDIO_CFG_PAL_SUPPORT
000E9Br 4                   FAMISTUDIO_DUAL_SUPPORT = 1
000E9Br 4               .else
000E9Br 4                   FAMISTUDIO_DUAL_SUPPORT = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_SFX_SUPPORT
000E9Br 4                   FAMISTUDIO_CFG_SFX_SUPPORT = 0
000E9Br 4                   FAMISTUDIO_CFG_SFX_STREAMS = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_SFX_STREAMS
000E9Br 4                   FAMISTUDIO_CFG_SFX_STREAMS = 1
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_C_BINDINGS
000E9Br 4                   FAMISTUDIO_CFG_C_BINDINGS = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_SMOOTH_VIBRATO
000E9Br 4                   FAMISTUDIO_CFG_SMOOTH_VIBRATO = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_DPCM_SUPPORT
000E9Br 4                   FAMISTUDIO_CFG_DPCM_SUPPORT = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_EQUALIZER
000E9Br 4                   FAMISTUDIO_CFG_EQUALIZER = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_FAMITRACKER_TEMPO
000E9Br 4                   FAMISTUDIO_USE_FAMITRACKER_TEMPO = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
000E9Br 4                   FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_VOLUME_TRACK
000E9Br 4                   FAMISTUDIO_USE_VOLUME_TRACK = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_VOLUME_SLIDES
000E9Br 4                   FAMISTUDIO_USE_VOLUME_SLIDES = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_PITCH_TRACK
000E9Br 4                   FAMISTUDIO_USE_PITCH_TRACK = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_SLIDE_NOTES
000E9Br 4                   FAMISTUDIO_USE_SLIDE_NOTES = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_NOISE_SLIDE_NOTES
000E9Br 4                   FAMISTUDIO_USE_NOISE_SLIDE_NOTES = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_VIBRATO
000E9Br 4                   FAMISTUDIO_USE_VIBRATO = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_ARPEGGIO
000E9Br 4                   FAMISTUDIO_USE_ARPEGGIO = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_DUTYCYCLE_EFFECT
000E9Br 4                   FAMISTUDIO_USE_DUTYCYCLE_EFFECT = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_DELTA_COUNTER
000E9Br 4                   FAMISTUDIO_USE_DELTA_COUNTER = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_PHASE_RESET
000E9Br 4                   FAMISTUDIO_USE_PHASE_RESET = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_FDS_AUTOMOD
000E9Br 4                   FAMISTUDIO_USE_FDS_AUTOMOD = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_RELEASE_NOTES
000E9Br 4                   FAMISTUDIO_USE_RELEASE_NOTES = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_DPCM_EXTENDED_RANGE
000E9Br 4                   FAMISTUDIO_USE_DPCM_EXTENDED_RANGE = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE
000E9Br 4                   FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_USE_DPCM_BANKSWITCHING
000E9Br 4                   FAMISTUDIO_USE_DPCM_BANKSWITCHING = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .ifndef FAMISTUDIO_CFG_THREAD
000E9Br 4                   FAMISTUDIO_CFG_THREAD = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if (FAMISTUDIO_EXP_VRC6 + FAMISTUDIO_EXP_VRC7 + FAMISTUDIO_EXP_EPSM + FAMISTUDIO_EXP_MMC5 + FAMISTUDIO_EXP_S5B + FAMISTUDIO_EXP_FDS + FAMISTUDIO_EXP_N163) = 0
000E9Br 4                   FAMISTUDIO_EXP_NONE = 1
000E9Br 4               .else
000E9Br 4                   FAMISTUDIO_EXP_NONE = 0
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if (FAMISTUDIO_EXP_VRC7 + FAMISTUDIO_EXP_EPSM + FAMISTUDIO_EXP_N163 + FAMISTUDIO_EXP_FDS + FAMISTUDIO_EXP_S5B)
000E9Br 4                   FAMISTUDIO_EXP_NOTE_START = 5
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_VRC6
000E9Br 4                   FAMISTUDIO_EXP_NOTE_START = 7
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_USE_NOISE_SLIDE_NOTES && (FAMISTUDIO_USE_SLIDE_NOTES = 0)
000E9Br 4                   .error "Noise slide notes can only be used when regular slide notes are enabled too."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_USE_VOLUME_SLIDES && (FAMISTUDIO_USE_VOLUME_TRACK = 0)
000E9Br 4                   .error "Volume slides can only be used when the volume track is enabled too."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS && (FAMISTUDIO_USE_FAMITRACKER_TEMPO = 0)
000E9Br 4                   .error "Delayed notes or cuts only make sense when using FamiTracker tempo."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if (FAMISTUDIO_EXP_VRC6 + FAMISTUDIO_EXP_VRC7 + FAMISTUDIO_EXP_EPSM + FAMISTUDIO_EXP_MMC5 + FAMISTUDIO_EXP_S5B + FAMISTUDIO_EXP_FDS + FAMISTUDIO_EXP_N163) > 1
000E9Br 4                   .error "Only one audio expansion can be enabled."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_N163 && ((FAMISTUDIO_EXP_N163_CHN_CNT < 1) || (FAMISTUDIO_EXP_N163_CHN_CNT > 8))
000E9Br 4                   .error "N163 only supports between 1 and 8 channels."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_USE_DELTA_COUNTER && (FAMISTUDIO_CFG_DPCM_SUPPORT = 0)
000E9Br 4                   .error "Delta counter only makes sense if DPCM samples are enabled."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_USE_DPCM_BANKSWITCHING && (FAMISTUDIO_CFG_DPCM_SUPPORT = 0)
000E9Br 4                   .error "DPCM bankswitching only makes sense if DPCM samples are enabled."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               ; This is the best way i found to test if a C-style macro is defined or not...
000E9Br 4               .if .xmatch(.string(FAMISTUDIO_CA65_ZP_SEGMENT), "FAMISTUDIO_CA65_ZP_SEGMENT")
000E9Br 4                   .error "You must .define FAMISTUDIO_CA65_ZP_SEGMENT with the name of your zeropage segment."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if .xmatch(.string(FAMISTUDIO_CA65_RAM_SEGMENT), "FAMISTUDIO_CA65_RAM_SEGMENT")
000E9Br 4                   .error "You must .define FAMISTUDIO_CA65_RAM_SEGMENT with the name of your RAM/BSS segment."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if .xmatch(.string(FAMISTUDIO_CA65_CODE_SEGMENT), "FAMISTUDIO_CA65_CODE_SEGMENT")
000E9Br 4                   .error "You must .define FAMISTUDIO_CA65_CODE_SEGMENT with the name of your CODE/PRG segment."
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               FAMISTUDIO_DPCM_PTR = (FAMISTUDIO_DPCM_OFF & $3fff) >> 6
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_NONE
000E9Br 4                   FAMISTUDIO_NUM_ENVELOPES        = 3+3+2+3
000E9Br 4                   FAMISTUDIO_NUM_PITCH_ENVELOPES  = 3
000E9Br 4                   FAMISTUDIO_NUM_CHANNELS         = 5
000E9Br 4                   FAMISTUDIO_NUM_DUTY_CYCLES      = 3
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_VRC6
000E9Br 4                   FAMISTUDIO_NUM_ENVELOPES        = 3+3+2+3+3+3+3
000E9Br 4                   FAMISTUDIO_NUM_PITCH_ENVELOPES  = 6
000E9Br 4                   FAMISTUDIO_NUM_CHANNELS         = 8
000E9Br 4                   FAMISTUDIO_NUM_DUTY_CYCLES      = 6
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_VRC7
000E9Br 4                   FAMISTUDIO_NUM_ENVELOPES        = 3+3+2+3+2+2+2+2+2+2
000E9Br 4                   FAMISTUDIO_NUM_PITCH_ENVELOPES  = 9
000E9Br 4                   FAMISTUDIO_NUM_CHANNELS         = 11
000E9Br 4                   FAMISTUDIO_NUM_DUTY_CYCLES      = 3
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_EPSM
000E9Br 4                   FAMISTUDIO_EXP_EPSM_RHYTHM_CNT  = FAMISTUDIO_EXP_EPSM_RHYTHM_CHN1_ENABLE + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN2_ENABLE + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN3_ENABLE + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN4_ENABLE + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN5_ENABLE + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN6_ENABLE
000E9Br 4                   FAMISTUDIO_EXP_EPSM_ENV_CNT     = FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT + FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000E9Br 4                   FAMISTUDIO_EXP_EPSM_CHANNELS    = FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT + FAMISTUDIO_EXP_EPSM_FM_CHN_CNT + FAMISTUDIO_EXP_EPSM_RHYTHM_CNT
000E9Br 4                   FAMISTUDIO_EXP_EPSM_TRIG_CHN    = FAMISTUDIO_EXP_EPSM_FM_CHN_CNT + FAMISTUDIO_EXP_EPSM_RHYTHM_CNT
000E9Br 4               
000E9Br 4                   FAMISTUDIO_NUM_ENVELOPES        = 3+3+2+3+(FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT * 4) + (FAMISTUDIO_EXP_EPSM_FM_CHN_CNT * 2)
000E9Br 4                   FAMISTUDIO_NUM_PITCH_ENVELOPES  = 3 + FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT + FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000E9Br 4                   FAMISTUDIO_NUM_CHANNELS         = 5 + FAMISTUDIO_EXP_EPSM_CHANNELS
000E9Br 4                   FAMISTUDIO_NUM_DUTY_CYCLES      = 3
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_FDS
000E9Br 4                   FAMISTUDIO_NUM_ENVELOPES        = 3+3+2+3+2
000E9Br 4                   FAMISTUDIO_NUM_PITCH_ENVELOPES  = 4
000E9Br 4                   FAMISTUDIO_NUM_CHANNELS         = 6
000E9Br 4                   FAMISTUDIO_NUM_DUTY_CYCLES      = 3
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_MMC5
000E9Br 4                   FAMISTUDIO_NUM_ENVELOPES        = 3+3+2+3+3+3
000E9Br 4                   FAMISTUDIO_NUM_PITCH_ENVELOPES  = 5
000E9Br 4                   FAMISTUDIO_NUM_CHANNELS         = 7
000E9Br 4                   FAMISTUDIO_NUM_DUTY_CYCLES      = 5
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_N163
000E9Br 4                   FAMISTUDIO_NUM_ENVELOPES        = 3+3+2+3+(FAMISTUDIO_EXP_N163_CHN_CNT*3)
000E9Br 4                   FAMISTUDIO_NUM_PITCH_ENVELOPES  = 3+FAMISTUDIO_EXP_N163_CHN_CNT
000E9Br 4                   FAMISTUDIO_NUM_CHANNELS         = 5+FAMISTUDIO_EXP_N163_CHN_CNT
000E9Br 4                   FAMISTUDIO_NUM_DUTY_CYCLES      = 3
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_S5B
000E9Br 4                   FAMISTUDIO_NUM_ENVELOPES        = 3+3+2+3+4+4+4
000E9Br 4                   FAMISTUDIO_NUM_PITCH_ENVELOPES  = 6
000E9Br 4                   FAMISTUDIO_NUM_CHANNELS         = 8
000E9Br 4                   FAMISTUDIO_NUM_DUTY_CYCLES      = 3
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_NONE
000E9Br 4                   FAMISTUDIO_NUM_VOLUME_SLIDES = 4
000E9Br 4               .else
000E9Br 4                   FAMISTUDIO_NUM_VOLUME_SLIDES = FAMISTUDIO_NUM_CHANNELS ; DPCM volume is unused.
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_USE_NOISE_SLIDE_NOTES
000E9Br 4                   FAMISTUDIO_NUM_SLIDES = FAMISTUDIO_NUM_PITCH_ENVELOPES + 1
000E9Br 4               .else
000E9Br 4                   FAMISTUDIO_NUM_SLIDES = FAMISTUDIO_NUM_PITCH_ENVELOPES
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               ; Keep the noise slide at the end so the pitch envelopes/slides are in sync.
000E9Br 4               FAMISTUDIO_NOISE_SLIDE_INDEX = FAMISTUDIO_NUM_SLIDES - 1
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_VRC6
000E9Br 4                   FAMISTUDIO_VRC6_CH0_PITCH_ENV_IDX = 3
000E9Br 4                   FAMISTUDIO_VRC6_CH1_PITCH_ENV_IDX = 4
000E9Br 4                   FAMISTUDIO_VRC6_CH2_PITCH_ENV_IDX = 5
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_VRC7
000E9Br 4                   FAMISTUDIO_VRC7_CH0_PITCH_ENV_IDX = 3
000E9Br 4                   FAMISTUDIO_VRC7_CH1_PITCH_ENV_IDX = 4
000E9Br 4                   FAMISTUDIO_VRC7_CH2_PITCH_ENV_IDX = 5
000E9Br 4                   FAMISTUDIO_VRC7_CH3_PITCH_ENV_IDX = 6
000E9Br 4                   FAMISTUDIO_VRC7_CH4_PITCH_ENV_IDX = 7
000E9Br 4                   FAMISTUDIO_VRC7_CH5_PITCH_ENV_IDX = 8
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_FDS
000E9Br 4                   FAMISTUDIO_FDS_CH0_PITCH_ENV_IDX  = 3
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_MMC5
000E9Br 4                   FAMISTUDIO_MMC5_CH0_PITCH_ENV_IDX = 3
000E9Br 4                   FAMISTUDIO_MMC5_CH1_PITCH_ENV_IDX = 4
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_N163
000E9Br 4                   FAMISTUDIO_N163_CH0_PITCH_ENV_IDX = 3
000E9Br 4                   FAMISTUDIO_N163_CH1_PITCH_ENV_IDX = 4
000E9Br 4                   FAMISTUDIO_N163_CH2_PITCH_ENV_IDX = 5
000E9Br 4                   FAMISTUDIO_N163_CH3_PITCH_ENV_IDX = 6
000E9Br 4                   FAMISTUDIO_N163_CH4_PITCH_ENV_IDX = 7
000E9Br 4                   FAMISTUDIO_N163_CH5_PITCH_ENV_IDX = 8
000E9Br 4                   FAMISTUDIO_N163_CH6_PITCH_ENV_IDX = 9
000E9Br 4                   FAMISTUDIO_N163_CH7_PITCH_ENV_IDX = 10
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_S5B
000E9Br 4                   FAMISTUDIO_S5B_CH0_PITCH_ENV_IDX  = 3
000E9Br 4                   FAMISTUDIO_S5B_CH1_PITCH_ENV_IDX  = 4
000E9Br 4                   FAMISTUDIO_S5B_CH2_PITCH_ENV_IDX  = 5
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_EPSM
000E9Br 4                   FAMISTUDIO_EPSM_CH0_PITCH_ENV_IDX = 3
000E9Br 4                   FAMISTUDIO_EPSM_CH1_PITCH_ENV_IDX = 4
000E9Br 4                   FAMISTUDIO_EPSM_CH2_PITCH_ENV_IDX = 5
000E9Br 4                   FAMISTUDIO_EPSM_CH3_PITCH_ENV_IDX = 6
000E9Br 4                   FAMISTUDIO_EPSM_CH4_PITCH_ENV_IDX = 7
000E9Br 4                   FAMISTUDIO_EPSM_CH5_PITCH_ENV_IDX = 8
000E9Br 4                   FAMISTUDIO_EPSM_CH6_PITCH_ENV_IDX = 9
000E9Br 4                   FAMISTUDIO_EPSM_CH7_PITCH_ENV_IDX = 10
000E9Br 4                   FAMISTUDIO_EPSM_CH8_PITCH_ENV_IDX = 11
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               ; TODO: Investigate reshuffling the envelopes to keep them contiguously
000E9Br 4               ; by type (all volumes envelopes, all arp envelopes, etc.) instead of
000E9Br 4               ; by channel. This *may* simplify a lot of places where we need a lookup
000E9Br 4               ; table (famistudio_channel_to_volume_env, etc.)
000E9Br 4               FAMISTUDIO_CH0_ENVS = 0
000E9Br 4               FAMISTUDIO_CH1_ENVS = 3
000E9Br 4               FAMISTUDIO_CH2_ENVS = 6
000E9Br 4               FAMISTUDIO_CH3_ENVS = 8
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_VRC6
000E9Br 4                   FAMISTUDIO_VRC6_CH0_ENVS = 11
000E9Br 4                   FAMISTUDIO_VRC6_CH1_ENVS = 14
000E9Br 4                   FAMISTUDIO_VRC6_CH2_ENVS = 17
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_VRC7
000E9Br 4                   FAMISTUDIO_VRC7_CH0_ENVS = 11
000E9Br 4                   FAMISTUDIO_VRC7_CH1_ENVS = 13
000E9Br 4                   FAMISTUDIO_VRC7_CH2_ENVS = 15
000E9Br 4                   FAMISTUDIO_VRC7_CH3_ENVS = 17
000E9Br 4                   FAMISTUDIO_VRC7_CH4_ENVS = 19
000E9Br 4                   FAMISTUDIO_VRC7_CH5_ENVS = 21
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_FDS
000E9Br 4                   FAMISTUDIO_FDS_CH0_ENVS = 11
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_MMC5
000E9Br 4                   FAMISTUDIO_MMC5_CH0_ENVS = 11
000E9Br 4                   FAMISTUDIO_MMC5_CH1_ENVS = 14
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_N163
000E9Br 4                   FAMISTUDIO_N163_CH0_ENVS = 11
000E9Br 4                   FAMISTUDIO_N163_CH1_ENVS = 14
000E9Br 4                   FAMISTUDIO_N163_CH2_ENVS = 17
000E9Br 4                   FAMISTUDIO_N163_CH3_ENVS = 20
000E9Br 4                   FAMISTUDIO_N163_CH4_ENVS = 23
000E9Br 4                   FAMISTUDIO_N163_CH5_ENVS = 26
000E9Br 4                   FAMISTUDIO_N163_CH6_ENVS = 29
000E9Br 4                   FAMISTUDIO_N163_CH7_ENVS = 32
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_S5B
000E9Br 4                   FAMISTUDIO_S5B_CH0_ENVS = 11
000E9Br 4                   FAMISTUDIO_S5B_CH1_ENVS = 15
000E9Br 4                   FAMISTUDIO_S5B_CH2_ENVS = 19
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_EPSM
000E9Br 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
000E9Br 4               EPSM_ENV_CH1_INCREMENT = 4
000E9Br 4               .else
000E9Br 4               EPSM_ENV_CH1_INCREMENT = 2
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 1
000E9Br 4               EPSM_ENV_CH2_INCREMENT = 4
000E9Br 4               .else
000E9Br 4               EPSM_ENV_CH2_INCREMENT = 2
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 2
000E9Br 4               EPSM_ENV_CH3_INCREMENT = 4
000E9Br 4               .else
000E9Br 4               EPSM_ENV_CH3_INCREMENT = 2
000E9Br 4               .endif
000E9Br 4                   FAMISTUDIO_EPSM_CH0_ENVS = 11
000E9Br 4                   FAMISTUDIO_EPSM_CH1_ENVS =  FAMISTUDIO_EPSM_CH0_ENVS + EPSM_ENV_CH1_INCREMENT
000E9Br 4                   FAMISTUDIO_EPSM_CH2_ENVS =  FAMISTUDIO_EPSM_CH1_ENVS + EPSM_ENV_CH2_INCREMENT
000E9Br 4                   FAMISTUDIO_EPSM_CH3_ENVS =  FAMISTUDIO_EPSM_CH2_ENVS + EPSM_ENV_CH3_INCREMENT
000E9Br 4                   FAMISTUDIO_EPSM_CH4_ENVS =  FAMISTUDIO_EPSM_CH3_ENVS + 2
000E9Br 4                   FAMISTUDIO_EPSM_CH5_ENVS =  FAMISTUDIO_EPSM_CH4_ENVS + 2
000E9Br 4                   FAMISTUDIO_EPSM_CH6_ENVS =  FAMISTUDIO_EPSM_CH5_ENVS + 2
000E9Br 4                   FAMISTUDIO_EPSM_CH7_ENVS =  FAMISTUDIO_EPSM_CH6_ENVS + 2
000E9Br 4                   FAMISTUDIO_EPSM_CH8_ENVS =  FAMISTUDIO_EPSM_CH7_ENVS + 2
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               FAMISTUDIO_ENV_VOLUME_OFF        = 0
000E9Br 4               FAMISTUDIO_ENV_NOTE_OFF          = 1
000E9Br 4               FAMISTUDIO_ENV_DUTY_OFF          = 2
000E9Br 4               FAMISTUDIO_ENV_N163_WAVE_IDX_OFF = 2
000E9Br 4               FAMISTUDIO_ENV_MIXER_IDX_OFF     = 2
000E9Br 4               FAMISTUDIO_ENV_NOISE_IDX_OFF     = 3
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_VRC6
000E9Br 4                   FAMISTUDIO_VRC6_CH0_DUTY_IDX = 3
000E9Br 4                   FAMISTUDIO_VRC6_CH1_DUTY_IDX = 4
000E9Br 4                   FAMISTUDIO_VRC6_CH2_DUTY_IDX = 5
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_MMC5
000E9Br 4                   FAMISTUDIO_MMC5_CH0_DUTY_IDX = 3
000E9Br 4                   FAMISTUDIO_MMC5_CH1_DUTY_IDX = 4
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_VRC6
000E9Br 4                   FAMISTUDIO_VRC6_CH0_IDX = 5
000E9Br 4                   FAMISTUDIO_VRC6_CH1_IDX = 6
000E9Br 4                   FAMISTUDIO_VRC6_CH2_IDX = 7
000E9Br 4               .else
000E9Br 4                   FAMISTUDIO_VRC6_CH0_IDX = -1
000E9Br 4                   FAMISTUDIO_VRC6_CH1_IDX = -1
000E9Br 4                   FAMISTUDIO_VRC6_CH2_IDX = -1
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_VRC7
000E9Br 4                   FAMISTUDIO_VRC7_CH0_IDX = 5
000E9Br 4                   FAMISTUDIO_VRC7_CH1_IDX = 6
000E9Br 4                   FAMISTUDIO_VRC7_CH2_IDX = 7
000E9Br 4                   FAMISTUDIO_VRC7_CH3_IDX = 8
000E9Br 4                   FAMISTUDIO_VRC7_CH4_IDX = 9
000E9Br 4                   FAMISTUDIO_VRC7_CH5_IDX = 10
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_FDS
000E9Br 4                   FAMISTUDIO_FDS_CH0_IDX  = 5
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_MMC5
000E9Br 4                   FAMISTUDIO_MMC5_CH0_IDX = 5
000E9Br 4                   FAMISTUDIO_MMC5_CH1_IDX = 6
000E9Br 4               .else
000E9Br 4                   FAMISTUDIO_MMC5_CH0_IDX = -1
000E9Br 4                   FAMISTUDIO_MMC5_CH1_IDX = -1
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_N163
000E9Br 4                   FAMISTUDIO_N163_CH0_IDX = 5
000E9Br 4                   FAMISTUDIO_N163_CH1_IDX = 6
000E9Br 4                   FAMISTUDIO_N163_CH2_IDX = 7
000E9Br 4                   FAMISTUDIO_N163_CH3_IDX = 8
000E9Br 4                   FAMISTUDIO_N163_CH4_IDX = 9
000E9Br 4                   FAMISTUDIO_N163_CH5_IDX = 10
000E9Br 4                   FAMISTUDIO_N163_CH6_IDX = 11
000E9Br 4                   FAMISTUDIO_N163_CH7_IDX = 12
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_S5B
000E9Br 4                   FAMISTUDIO_S5B_CH0_IDX  = 5
000E9Br 4                   FAMISTUDIO_S5B_CH1_IDX  = 6
000E9Br 4                   FAMISTUDIO_S5B_CH2_IDX  = 7
000E9Br 4               .endif
000E9Br 4               .if FAMISTUDIO_EXP_EPSM
000E9Br 4                   FAMISTUDIO_EPSM_CH0_IDX = 5
000E9Br 4                   FAMISTUDIO_EPSM_CH1_IDX = 6
000E9Br 4                   FAMISTUDIO_EPSM_CH2_IDX = 7
000E9Br 4                   FAMISTUDIO_EPSM_CH3_IDX = 8
000E9Br 4                   FAMISTUDIO_EPSM_CH4_IDX = 9
000E9Br 4                   FAMISTUDIO_EPSM_CH5_IDX = 10
000E9Br 4                   FAMISTUDIO_EPSM_CH6_IDX = 11
000E9Br 4                   FAMISTUDIO_EPSM_CH7_IDX = 12
000E9Br 4                   FAMISTUDIO_EPSM_CH8_IDX = 13
000E9Br 4                   FAMISTUDIO_EPSM_CH9_IDX = 14
000E9Br 4                   FAMISTUDIO_EPSM_CH10_IDX = 15
000E9Br 4                   FAMISTUDIO_EPSM_CH11_IDX = 16
000E9Br 4                   FAMISTUDIO_EPSM_CH12_IDX = 17
000E9Br 4                   FAMISTUDIO_EPSM_CH13_IDX = 18
000E9Br 4                   FAMISTUDIO_EPSM_CH14_IDX = 19
000E9Br 4                   FAMISTUDIO_EPSM_CHAN_FM_START = FAMISTUDIO_EPSM_CH0_IDX + FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT
000E9Br 4                   FAMISTUDIO_EPSM_CHAN_RHYTHM_START = FAMISTUDIO_EPSM_CHAN_FM_START + FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               FAMISTUDIO_VRC7_PITCH_SHIFT = 3
000E9Br 4               FAMISTUDIO_EPSM_PITCH_SHIFT = 3
000E9Br 4               
000E9Br 4               .if (FAMISTUDIO_EXP_N163_CHN_CNT > 4)
000E9Br 4                   FAMISTUDIO_N163_PITCH_SHIFT = 5
000E9Br 4               .endif
000E9Br 4               .if (FAMISTUDIO_EXP_N163_CHN_CNT > 2) & (FAMISTUDIO_EXP_N163_CHN_CNT <= 4)
000E9Br 4                   FAMISTUDIO_N163_PITCH_SHIFT = 4
000E9Br 4               .endif
000E9Br 4               .if (FAMISTUDIO_EXP_N163_CHN_CNT > 1) & (FAMISTUDIO_EXP_N163_CHN_CNT <= 2)
000E9Br 4                   FAMISTUDIO_N163_PITCH_SHIFT = 3
000E9Br 4               .endif
000E9Br 4               .if (FAMISTUDIO_EXP_N163_CHN_CNT = 1)
000E9Br 4                   FAMISTUDIO_N163_PITCH_SHIFT = 2
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_VRC7
000E9Br 4                   FAMISTUDIO_PITCH_SHIFT = FAMISTUDIO_VRC7_PITCH_SHIFT
000E9Br 4               .else
000E9Br 4                   .if FAMISTUDIO_EXP_EPSM
000E9Br 4                       FAMISTUDIO_PITCH_SHIFT = FAMISTUDIO_EPSM_PITCH_SHIFT
000E9Br 4                   .else
000E9Br 4                       .if FAMISTUDIO_EXP_N163
000E9Br 4                           FAMISTUDIO_PITCH_SHIFT = FAMISTUDIO_N163_PITCH_SHIFT
000E9Br 4                       .else
000E9Br 4                           FAMISTUDIO_PITCH_SHIFT = 0
000E9Br 4                       .endif
000E9Br 4                   .endif
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_N163
000E9Br 4                   FAMISTUDIO_N163_CHN_MASK = (FAMISTUDIO_EXP_N163_CHN_CNT - 1) << 4
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_CFG_SFX_SUPPORT
000E9Br 4                   FAMISTUDIO_SFX_STRUCT_SIZE = 15
000E9Br 4               
000E9Br 4                   FAMISTUDIO_SFX_CH0 = FAMISTUDIO_SFX_STRUCT_SIZE * 0
000E9Br 4                   FAMISTUDIO_SFX_CH1 = FAMISTUDIO_SFX_STRUCT_SIZE * 1
000E9Br 4                   FAMISTUDIO_SFX_CH2 = FAMISTUDIO_SFX_STRUCT_SIZE * 2
000E9Br 4                   FAMISTUDIO_SFX_CH3 = FAMISTUDIO_SFX_STRUCT_SIZE * 3
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               FAMISTUDIO_FIRST_EXP_INST_CHANNEL = 5
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_EPSM
000E9Br 4               FAMISTUDIO_FIRST_POSITIVE_SLIDE_CHANNEL = 3 + FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT
000E9Br 4               .else
000E9Br 4               FAMISTUDIO_FIRST_POSITIVE_SLIDE_CHANNEL = 3
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; RAM VARIABLES (You should not have to play with these)
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               .segment .string(FAMISTUDIO_CA65_RAM_SEGMENT)
000000r 4               
000000r 4  xx xx xx xx  famistudio_env_value:             .res FAMISTUDIO_NUM_ENVELOPES
000004r 4  xx xx xx xx  
000008r 4  xx xx xx     
00000Br 4  xx xx xx xx  famistudio_env_repeat:            .res FAMISTUDIO_NUM_ENVELOPES
00000Fr 4  xx xx xx xx  
000013r 4  xx xx xx     
000016r 4  xx xx xx xx  famistudio_env_addr_lo:           .res FAMISTUDIO_NUM_ENVELOPES
00001Ar 4  xx xx xx xx  
00001Er 4  xx xx xx     
000021r 4  xx xx xx xx  famistudio_env_addr_hi:           .res FAMISTUDIO_NUM_ENVELOPES
000025r 4  xx xx xx xx  
000029r 4  xx xx xx     
00002Cr 4  xx xx xx xx  famistudio_env_ptr:               .res FAMISTUDIO_NUM_ENVELOPES
000030r 4  xx xx xx xx  
000034r 4  xx xx xx     
000037r 4               
000037r 4  xx xx xx     famistudio_pitch_env_value_lo:    .res FAMISTUDIO_NUM_PITCH_ENVELOPES
00003Ar 4  xx xx xx     famistudio_pitch_env_value_hi:    .res FAMISTUDIO_NUM_PITCH_ENVELOPES
00003Dr 4  xx xx xx     famistudio_pitch_env_repeat:      .res FAMISTUDIO_NUM_PITCH_ENVELOPES
000040r 4  xx xx xx     famistudio_pitch_env_addr_lo:     .res FAMISTUDIO_NUM_PITCH_ENVELOPES
000043r 4  xx xx xx     famistudio_pitch_env_addr_hi:     .res FAMISTUDIO_NUM_PITCH_ENVELOPES
000046r 4  xx xx xx     famistudio_pitch_env_ptr:         .res FAMISTUDIO_NUM_PITCH_ENVELOPES
000049r 4               .if FAMISTUDIO_USE_PITCH_TRACK
000049r 4  xx xx xx     famistudio_pitch_env_fine_value:  .res FAMISTUDIO_NUM_PITCH_ENVELOPES
00004Cr 4               .endif
00004Cr 4               
00004Cr 4               .if FAMISTUDIO_USE_SLIDE_NOTES
00004Cr 4  xx xx xx     famistudio_slide_step:            .res FAMISTUDIO_NUM_SLIDES
00004Fr 4  xx xx xx     famistudio_slide_pitch_lo:        .res FAMISTUDIO_NUM_SLIDES
000052r 4  xx xx xx     famistudio_slide_pitch_hi:        .res FAMISTUDIO_NUM_SLIDES
000055r 4               .endif
000055r 4               
000055r 4  xx xx xx xx  famistudio_chn_ptr_lo:            .res FAMISTUDIO_NUM_CHANNELS
000059r 4  xx           
00005Ar 4  xx xx xx xx  famistudio_chn_ptr_hi:            .res FAMISTUDIO_NUM_CHANNELS
00005Er 4  xx           
00005Fr 4  xx xx xx xx  famistudio_chn_note:              .res FAMISTUDIO_NUM_CHANNELS
000063r 4  xx           
000064r 4  xx xx xx xx  famistudio_chn_repeat:            .res FAMISTUDIO_NUM_CHANNELS
000068r 4  xx           
000069r 4  xx xx xx xx  famistudio_chn_return_lo:         .res FAMISTUDIO_NUM_CHANNELS
00006Dr 4  xx           
00006Er 4  xx xx xx xx  famistudio_chn_return_hi:         .res FAMISTUDIO_NUM_CHANNELS
000072r 4  xx           
000073r 4  xx xx xx xx  famistudio_chn_ref_len:           .res FAMISTUDIO_NUM_CHANNELS
000077r 4  xx           
000078r 4               .if FAMISTUDIO_USE_VOLUME_TRACK
000078r 4  xx xx xx xx  famistudio_chn_volume_track:      .res FAMISTUDIO_NUM_CHANNELS
00007Cr 4  xx           
00007Dr 4               .if FAMISTUDIO_USE_VOLUME_SLIDES
00007Dr 4  xx xx xx xx  famistudio_chn_volume_slide_step:   .res FAMISTUDIO_NUM_VOLUME_SLIDES
000081r 4  xx xx xx xx  famistudio_chn_volume_slide_target: .res FAMISTUDIO_NUM_VOLUME_SLIDES
000085r 4               .endif
000085r 4               .endif
000085r 4               .if FAMISTUDIO_USE_VIBRATO || FAMISTUDIO_USE_ARPEGGIO
000085r 4  xx xx xx xx  famistudio_chn_env_override:      .res FAMISTUDIO_NUM_CHANNELS ; bit 7 = pitch, bit 0 = arpeggio.
000089r 4  xx           
00008Ar 4               .endif
00008Ar 4               .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
00008Ar 4  xx xx xx xx  famistudio_chn_note_delay:        .res FAMISTUDIO_NUM_CHANNELS
00008Er 4  xx           
00008Fr 4  xx xx xx xx  famistudio_chn_cut_delay:         .res FAMISTUDIO_NUM_CHANNELS
000093r 4  xx           
000094r 4               .endif
000094r 4               .if FAMISTUDIO_CFG_EQUALIZER
000094r 4  xx xx xx xx  famistudio_chn_note_counter:      .res FAMISTUDIO_NUM_CHANNELS
000098r 4  xx           
000099r 4               .endif
000099r 4               .if FAMISTUDIO_USE_PHASE_RESET
000099r 4               famistudio_phase_reset:           .res 1 ; bit 0/1 = 2a03, bit 2/3/4 = vrc6, 5/6 = mmc5, bit 7 = fds
000099r 4               .if FAMISTUDIO_EXP_N163
000099r 4               famistudio_phase_reset_n163:      .res 1 ; bit 0...7 = n163
000099r 4               .endif
000099r 4               .endif
000099r 4               .if FAMISTUDIO_USE_DELTA_COUNTER
000099r 4               famistudio_dmc_delta_counter:     .res 1
000099r 4               .endif
000099r 4               .if FAMISTUDIO_EXP_VRC6
000099r 4               famistudio_vrc6_saw_volume:       .res 1 ; -1 = 1/4, 0 = 1/2, 1 = Full
000099r 4               .if FAMISTUDIO_USE_PHASE_RESET
000099r 4               famistudio_vrc6_pulse1_prev_hi:   .res 1
000099r 4               famistudio_vrc6_pulse2_prev_hi:   .res 1
000099r 4               famistudio_vrc6_saw_prev_hi:      .res 1
000099r 4               .else
000099r 4               famistudio_vrc6_pulse1_prev_hi = famistudio_vrc6_saw_volume
000099r 4               famistudio_vrc6_pulse2_prev_hi = famistudio_vrc6_saw_volume
000099r 4               famistudio_vrc6_saw_prev_hi    = famistudio_vrc6_saw_volume
000099r 4               .endif
000099r 4               .endif
000099r 4               .if FAMISTUDIO_EXP_VRC7
000099r 4               famistudio_chn_vrc7_prev_hi:      .res 6
000099r 4               famistudio_chn_vrc7_patch:        .res 6
000099r 4               famistudio_chn_vrc7_trigger:      .res 6 ; bit 0 = new note triggered, bit 7 = note released.
000099r 4               .endif
000099r 4               .if FAMISTUDIO_EXP_EPSM
000099r 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
000099r 4               famistudio_chn_epsm_rhythm_volume: .res FAMISTUDIO_EXP_EPSM_RHYTHM_CNT
000099r 4               famistudio_chn_epsm_rhythm_stereo: .res FAMISTUDIO_EXP_EPSM_RHYTHM_CNT
000099r 4               .endif
000099r 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT+FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
000099r 4               famistudio_chn_epsm_trigger:       .res FAMISTUDIO_EXP_EPSM_FM_CHN_CNT + FAMISTUDIO_EXP_EPSM_RHYTHM_CNT ; bit 0 = new note triggered, bit 7 = note released.
000099r 4               .endif
000099r 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT > 0
000099r 4               famistudio_chn_epsm_fm_stereo:     .res FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000099r 4               famistudio_chn_epsm_fm_instrument: .res FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000099r 4               famistudio_chn_epsm_alg:           .res FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000099r 4               famistudio_chn_epsm_vol_op1:       .res FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000099r 4               famistudio_chn_epsm_vol_op2:       .res FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000099r 4               famistudio_chn_epsm_vol_op3:       .res FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000099r 4               famistudio_chn_epsm_vol_op4:       .res FAMISTUDIO_EXP_EPSM_FM_CHN_CNT
000099r 4               .endif
000099r 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
000099r 4               famistudio_epsm_env_period_lo:     .res 1
000099r 4               famistudio_epsm_env_period_hi:     .res 1
000099r 4               famistudio_epsm_env_override:      .res 1
000099r 4               famistudio_epsm_chn_env_shape:     .res FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT ; bit 7 = note attack.
000099r 4               famistudio_epsm_chn_env_octave:    .res FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT
000099r 4               .endif
000099r 4               .endif
000099r 4               .if FAMISTUDIO_EXP_N163
000099r 4               famistudio_chn_n163_instrument:   .res FAMISTUDIO_EXP_N163_CHN_CNT
000099r 4               famistudio_chn_n163_wave_index:   .res FAMISTUDIO_EXP_N163_CHN_CNT
000099r 4               famistudio_chn_n163_wave_len:     .res FAMISTUDIO_EXP_N163_CHN_CNT
000099r 4               .endif
000099r 4               .if FAMISTUDIO_EXP_S5B
000099r 4               famistudio_s5b_env_period_lo:     .res 1
000099r 4               famistudio_s5b_env_period_hi:     .res 1
000099r 4               famistudio_s5b_env_override:      .res 1 ; if non zero, it means we had an env period effect this frame.
000099r 4               famistudio_s5b_chn_env_shape:     .res 3 ; bit 7 = note attack
000099r 4               famistudio_s5b_chn_env_octave:    .res 3
000099r 4               .endif
000099r 4               .if FAMISTUDIO_USE_DUTYCYCLE_EFFECT
000099r 4  xx xx xx     famistudio_duty_cycle:            .res FAMISTUDIO_NUM_DUTY_CYCLES
00009Cr 4               .endif
00009Cr 4               
00009Cr 4               .if FAMISTUDIO_USE_FAMITRACKER_TEMPO
00009Cr 4  xx           famistudio_tempo_step_lo:         .res 1
00009Dr 4  xx           famistudio_tempo_step_hi:         .res 1
00009Er 4  xx           famistudio_tempo_acc_lo:          .res 1
00009Fr 4  xx           famistudio_tempo_acc_hi:          .res 1
0000A0r 4               .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
0000A0r 4  xx           famistudio_tempo_advance_row:     .res 1
0000A1r 4               .endif
0000A1r 4               .else
0000A1r 4               famistudio_tempo_env_ptr_lo:      .res 1
0000A1r 4               famistudio_tempo_env_ptr_hi:      .res 1
0000A1r 4               famistudio_tempo_env_counter:     .res 1
0000A1r 4               famistudio_tempo_env_idx:         .res 1
0000A1r 4               famistudio_tempo_frame_num:       .res 1
0000A1r 4               famistudio_tempo_frame_cnt:       .res 1
0000A1r 4               .endif
0000A1r 4               
0000A1r 4  xx           famistudio_pal_adjust:            .res 1
0000A2r 4  xx           famistudio_song_list_lo:          .res 1
0000A3r 4  xx           famistudio_song_list_hi:          .res 1
0000A4r 4  xx           famistudio_instrument_lo:         .res 1
0000A5r 4  xx           famistudio_instrument_hi:         .res 1
0000A6r 4  xx           famistudio_dpcm_list_lo:          .res 1 ; TODO: Not needed if DPCM support is disabled.
0000A7r 4  xx           famistudio_dpcm_list_hi:          .res 1 ; TODO: Not needed if DPCM support is disabled.
0000A8r 4  xx           famistudio_dpcm_effect:           .res 1 ; TODO: Not needed if DPCM support is disabled.
0000A9r 4  xx           famistudio_pulse1_prev:           .res 1
0000AAr 4  xx           famistudio_pulse2_prev:           .res 1
0000ABr 4  xx           famistudio_song_speed:            .res 1
0000ACr 4               
0000ACr 4               .if FAMISTUDIO_EXP_MMC5
0000ACr 4               famistudio_mmc5_pulse1_prev:      .res 1
0000ACr 4               famistudio_mmc5_pulse2_prev:      .res 1
0000ACr 4               .endif
0000ACr 4               
0000ACr 4               .if FAMISTUDIO_EXP_FDS
0000ACr 4               famistudio_fds_mod_speed:         .res 2
0000ACr 4               famistudio_fds_mod_depth:         .res 1
0000ACr 4               famistudio_fds_mod_delay:         .res 1
0000ACr 4               famistudio_fds_mod_delay_counter: .res 1
0000ACr 4               famistudio_fds_override_flags:    .res 1 ; Bit 7 = mod speed overriden, bit 6 mod depth overriden
0000ACr 4               .if FAMISTUDIO_USE_FDS_AUTOMOD
0000ACr 4               famistudio_fds_automod_numer:     .res 1 ; 0 = auto-mod off.
0000ACr 4               famistudio_fds_automod_denom:     .res 1
0000ACr 4               .endif
0000ACr 4               .if FAMISTUDIO_USE_PHASE_RESET
0000ACr 4               famistudio_fds_prev_hi:           .res 1
0000ACr 4               .endif
0000ACr 4               .endif
0000ACr 4               
0000ACr 4               .if FAMISTUDIO_EXP_VRC7
0000ACr 4               famistudio_vrc7_dummy:            .res 1 ; TODO: Find a dummy address i can simply write to without side effects.
0000ACr 4               .endif
0000ACr 4               
0000ACr 4               ; FDS, N163 and VRC7 have very different instrument layout and are 16-bytes, so we keep them seperate.
0000ACr 4               .if FAMISTUDIO_EXP_FDS || FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_EPSM || FAMISTUDIO_EXP_S5B
0000ACr 4               famistudio_exp_instrument_lo:     .res 1
0000ACr 4               famistudio_exp_instrument_hi:     .res 1
0000ACr 4               .endif
0000ACr 4               
0000ACr 4               .if FAMISTUDIO_CFG_SFX_SUPPORT
0000ACr 4               
0000ACr 4  xx xx xx xx  famistudio_output_buf:     .res 11
0000B0r 4  xx xx xx xx  
0000B4r 4  xx xx xx     
0000B7r 4  xx           famistudio_sfx_addr_lo:    .res 1
0000B8r 4  xx           famistudio_sfx_addr_hi:    .res 1
0000B9r 4  xx xx xx xx  famistudio_sfx_base_addr:  .res (FAMISTUDIO_CFG_SFX_STREAMS * FAMISTUDIO_SFX_STRUCT_SIZE)
0000BDr 4  xx xx xx xx  
0000C1r 4  xx xx xx xx  
0000D7r 4               
0000D7r 4               ; TODO: Refactor SFX memory layout. These uses a AoS approach, not fan.
0000D7r 4               famistudio_sfx_repeat = famistudio_sfx_base_addr + 0
0000D7r 4               famistudio_sfx_ptr_lo = famistudio_sfx_base_addr + 1
0000D7r 4               famistudio_sfx_ptr_hi = famistudio_sfx_base_addr + 2
0000D7r 4               famistudio_sfx_offset = famistudio_sfx_base_addr + 3
0000D7r 4               famistudio_sfx_buffer = famistudio_sfx_base_addr + 4
0000D7r 4               
0000D7r 4               .endif
0000D7r 4               
0000D7r 4               ;======================================================================================================================
0000D7r 4               ; ZEROPAGE VARIABLES
0000D7r 4               ;
0000D7r 4               ; These are only used as temporary variable during the famistudio_xxx calls.
0000D7r 4               ; Feel free to alias those with other ZP values in your programs to save a few bytes.
0000D7r 4               ;======================================================================================================================
0000D7r 4               
0000D7r 4               .segment .string(FAMISTUDIO_CA65_ZP_SEGMENT) : zeropage
0000E6r 4               
0000E6r 4  xx           famistudio_r0:   .res 1
0000E7r 4  xx           famistudio_r1:   .res 1
0000E8r 4  xx           famistudio_r2:   .res 1
0000E9r 4  xx           famistudio_r3:   .res 1
0000EAr 4               
0000EAr 4  xx xx        famistudio_ptr0: .res 2
0000ECr 4  xx xx        famistudio_ptr1: .res 2
0000EEr 4               .if FAMISTUDIO_EXP_EPSM || FAMISTUDIO_EXP_FDS || FAMISTUDIO_EXP_S5B
0000EEr 4               famistudio_ptr2: .res 2
0000EEr 4               .endif
0000EEr 4               
0000EEr 4               famistudio_ptr0_lo = famistudio_ptr0+0
0000EEr 4               famistudio_ptr0_hi = famistudio_ptr0+1
0000EEr 4               famistudio_ptr1_lo = famistudio_ptr1+0
0000EEr 4               famistudio_ptr1_hi = famistudio_ptr1+1
0000EEr 4               
0000EEr 4               ;======================================================================================================================
0000EEr 4               ; CODE
0000EEr 4               ;======================================================================================================================
0000EEr 4               
0000EEr 4               .export famistudio_init
0000EEr 4               .export famistudio_music_play
0000EEr 4               .export famistudio_music_pause
0000EEr 4               .export famistudio_music_stop
0000EEr 4               .export famistudio_update
0000EEr 4               .if FAMISTUDIO_CFG_SFX_SUPPORT
0000EEr 4               .if FAMISTUDIO_CFG_DPCM_SUPPORT
0000EEr 4               .export famistudio_sfx_sample_play
0000EEr 4               .endif
0000EEr 4               .export famistudio_sfx_init
0000EEr 4               .export famistudio_sfx_play
0000EEr 4               .exportzp FAMISTUDIO_SFX_CH0
0000EEr 4               .exportzp FAMISTUDIO_SFX_CH1
0000EEr 4               .exportzp FAMISTUDIO_SFX_CH2
0000EEr 4               .exportzp FAMISTUDIO_SFX_CH3
0000EEr 4               .endif
0000EEr 4               .if FAMISTUDIO_USE_DPCM_BANKSWITCHING
0000EEr 4               .global famistudio_dpcm_bank_callback
0000EEr 4               .endif
0000EEr 4               
0000EEr 4               .segment .string(FAMISTUDIO_CA65_CODE_SEGMENT)
000E9Br 4               
000E9Br 4               FAMISTUDIO_APU_PL1_VOL    = $4000
000E9Br 4               FAMISTUDIO_APU_PL1_SWEEP  = $4001
000E9Br 4               FAMISTUDIO_APU_PL1_LO     = $4002
000E9Br 4               FAMISTUDIO_APU_PL1_HI     = $4003
000E9Br 4               FAMISTUDIO_APU_PL2_VOL    = $4004
000E9Br 4               FAMISTUDIO_APU_PL2_SWEEP  = $4005
000E9Br 4               FAMISTUDIO_APU_PL2_LO     = $4006
000E9Br 4               FAMISTUDIO_APU_PL2_HI     = $4007
000E9Br 4               FAMISTUDIO_APU_TRI_LINEAR = $4008
000E9Br 4               FAMISTUDIO_APU_TRI_LO     = $400a
000E9Br 4               FAMISTUDIO_APU_TRI_HI     = $400b
000E9Br 4               FAMISTUDIO_APU_NOISE_VOL  = $400c
000E9Br 4               FAMISTUDIO_APU_NOISE_LO   = $400e
000E9Br 4               FAMISTUDIO_APU_NOISE_HI   = $400f
000E9Br 4               FAMISTUDIO_APU_DMC_FREQ   = $4010
000E9Br 4               FAMISTUDIO_APU_DMC_RAW    = $4011
000E9Br 4               FAMISTUDIO_APU_DMC_START  = $4012
000E9Br 4               FAMISTUDIO_APU_DMC_LEN    = $4013
000E9Br 4               FAMISTUDIO_APU_SND_CHN    = $4015
000E9Br 4               FAMISTUDIO_APU_FRAME_CNT  = $4017
000E9Br 4               
000E9Br 4               .if FAMISTUDIO_EXP_RAINBOW
000E9Br 4               FAMISTUDIO_VRC6_PL1_VOL   = $41a0
000E9Br 4               FAMISTUDIO_VRC6_PL1_LO    = $41a1
000E9Br 4               FAMISTUDIO_VRC6_PL1_HI    = $41a2
000E9Br 4               FAMISTUDIO_VRC6_FREQ_CTRL = $41a0 ; Dummy
000E9Br 4               FAMISTUDIO_VRC6_PL2_VOL   = $41a3
000E9Br 4               FAMISTUDIO_VRC6_PL2_LO    = $41a4
000E9Br 4               FAMISTUDIO_VRC6_PL2_HI    = $41a5
000E9Br 4               FAMISTUDIO_VRC6_SAW_VOL   = $41a6
000E9Br 4               FAMISTUDIO_VRC6_SAW_LO    = $41a7
000E9Br 4               FAMISTUDIO_VRC6_SAW_HI    = $41a8
000E9Br 4               .else
000E9Br 4               FAMISTUDIO_VRC6_PL1_VOL   = $9000
000E9Br 4               FAMISTUDIO_VRC6_PL1_LO    = $9001
000E9Br 4               FAMISTUDIO_VRC6_PL1_HI    = $9002
000E9Br 4               FAMISTUDIO_VRC6_FREQ_CTRL = $9003
000E9Br 4               FAMISTUDIO_VRC6_PL2_VOL   = $a000
000E9Br 4               FAMISTUDIO_VRC6_PL2_LO    = $a001
000E9Br 4               FAMISTUDIO_VRC6_PL2_HI    = $a002
000E9Br 4               FAMISTUDIO_VRC6_SAW_VOL   = $b000
000E9Br 4               FAMISTUDIO_VRC6_SAW_LO    = $b001
000E9Br 4               FAMISTUDIO_VRC6_SAW_HI    = $b002
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               FAMISTUDIO_VRC7_SILENCE   = $e000
000E9Br 4               FAMISTUDIO_VRC7_REG_SEL   = $9010
000E9Br 4               FAMISTUDIO_VRC7_REG_WRITE = $9030
000E9Br 4               FAMISTUDIO_VRC7_REG_LO_1  = $10
000E9Br 4               FAMISTUDIO_VRC7_REG_LO_2  = $11
000E9Br 4               FAMISTUDIO_VRC7_REG_LO_3  = $12
000E9Br 4               FAMISTUDIO_VRC7_REG_LO_4  = $13
000E9Br 4               FAMISTUDIO_VRC7_REG_LO_5  = $14
000E9Br 4               FAMISTUDIO_VRC7_REG_LO_6  = $15
000E9Br 4               FAMISTUDIO_VRC7_REG_HI_1  = $20
000E9Br 4               FAMISTUDIO_VRC7_REG_HI_2  = $21
000E9Br 4               FAMISTUDIO_VRC7_REG_HI_3  = $22
000E9Br 4               FAMISTUDIO_VRC7_REG_HI_4  = $23
000E9Br 4               FAMISTUDIO_VRC7_REG_HI_5  = $24
000E9Br 4               FAMISTUDIO_VRC7_REG_HI_6  = $25
000E9Br 4               FAMISTUDIO_VRC7_REG_VOL_1 = $30
000E9Br 4               FAMISTUDIO_VRC7_REG_VOL_2 = $31
000E9Br 4               FAMISTUDIO_VRC7_REG_VOL_3 = $32
000E9Br 4               FAMISTUDIO_VRC7_REG_VOL_4 = $33
000E9Br 4               FAMISTUDIO_VRC7_REG_VOL_5 = $34
000E9Br 4               FAMISTUDIO_VRC7_REG_VOL_6 = $35
000E9Br 4               
000E9Br 4               FAMISTUDIO_EPSM_REG_SEL0   = $401c
000E9Br 4               FAMISTUDIO_EPSM_REG_WRITE0 = $401d
000E9Br 4               FAMISTUDIO_EPSM_REG_SEL1   = $401e
000E9Br 4               FAMISTUDIO_EPSM_REG_WRITE1 = $401f
000E9Br 4               FAMISTUDIO_EPSM_REG_KEY    = $28
000E9Br 4               FAMISTUDIO_EPSM_REG_DT_MUL = $30
000E9Br 4               FAMISTUDIO_EPSM_REG_TL     = $40
000E9Br 4               FAMISTUDIO_EPSM_REG_KS_AR  = $50
000E9Br 4               FAMISTUDIO_EPSM_REG_AMO_DR = $60
000E9Br 4               FAMISTUDIO_EPSM_REG_SR     = $70
000E9Br 4               FAMISTUDIO_EPSM_REG_SL_RR  = $80
000E9Br 4               FAMISTUDIO_EPSM_REG_SSG    = $90
000E9Br 4               FAMISTUDIO_EPSM_REG_FN_LO  = $A0
000E9Br 4               FAMISTUDIO_EPSM_REG_FN_LO2 = $A1
000E9Br 4               FAMISTUDIO_EPSM_REG_FN_LO3 = $A2
000E9Br 4               FAMISTUDIO_EPSM_REG_FN_HI  = $A4
000E9Br 4               FAMISTUDIO_EPSM_REG_FN_HI2 = $A5
000E9Br 4               FAMISTUDIO_EPSM_REG_FN_HI3 = $A6
000E9Br 4               FAMISTUDIO_EPSM_REG_FB     = $B0
000E9Br 4               FAMISTUDIO_EPSM_REG_AM_PM  = $B4
000E9Br 4               FAMISTUDIO_EPSM_REG_LFO    = $22
000E9Br 4               FAMISTUDIO_EPSM_REG_RHY_KY = $10
000E9Br 4               FAMISTUDIO_EPSM_REG_RHY_BD = $18
000E9Br 4               FAMISTUDIO_EPSM_REG_RHY_SD = $19
000E9Br 4               FAMISTUDIO_EPSM_REG_RHY_TC = $1a
000E9Br 4               FAMISTUDIO_EPSM_REG_RHY_HH = $1b
000E9Br 4               FAMISTUDIO_EPSM_REG_RHY_TOM = $1c
000E9Br 4               FAMISTUDIO_EPSM_REG_RHY_RIM = $1d
000E9Br 4               FAMISTUDIO_EPSM_REG_LO_1  = $10
000E9Br 4               FAMISTUDIO_EPSM_REG_LO_2  = $11
000E9Br 4               FAMISTUDIO_EPSM_REG_LO_3  = $12
000E9Br 4               FAMISTUDIO_EPSM_REG_LO_4  = $13
000E9Br 4               FAMISTUDIO_EPSM_REG_LO_5  = $14
000E9Br 4               FAMISTUDIO_EPSM_REG_LO_6  = $15
000E9Br 4               FAMISTUDIO_EPSM_REG_HI_1  = $20
000E9Br 4               FAMISTUDIO_EPSM_REG_HI_2  = $21
000E9Br 4               FAMISTUDIO_EPSM_REG_HI_3  = $22
000E9Br 4               FAMISTUDIO_EPSM_REG_HI_4  = $23
000E9Br 4               FAMISTUDIO_EPSM_REG_HI_5  = $24
000E9Br 4               FAMISTUDIO_EPSM_REG_HI_6  = $25
000E9Br 4               FAMISTUDIO_EPSM_REG_VOL_1 = $30
000E9Br 4               FAMISTUDIO_EPSM_REG_VOL_2 = $31
000E9Br 4               FAMISTUDIO_EPSM_REG_VOL_3 = $32
000E9Br 4               FAMISTUDIO_EPSM_REG_VOL_4 = $33
000E9Br 4               FAMISTUDIO_EPSM_REG_VOL_5 = $34
000E9Br 4               FAMISTUDIO_EPSM_REG_VOL_6 = $35
000E9Br 4               FAMISTUDIO_EPSM_ADDR       = $401c
000E9Br 4               FAMISTUDIO_EPSM_DATA       = $401d
000E9Br 4               FAMISTUDIO_EPSM_REG_LO_A   = $00
000E9Br 4               FAMISTUDIO_EPSM_REG_HI_A   = $01
000E9Br 4               FAMISTUDIO_EPSM_REG_LO_B   = $02
000E9Br 4               FAMISTUDIO_EPSM_REG_HI_B   = $03
000E9Br 4               FAMISTUDIO_EPSM_REG_LO_C   = $04
000E9Br 4               FAMISTUDIO_EPSM_REG_HI_C   = $05
000E9Br 4               FAMISTUDIO_EPSM_REG_NOISE  = $06
000E9Br 4               FAMISTUDIO_EPSM_REG_TONE   = $07
000E9Br 4               FAMISTUDIO_EPSM_REG_VOL_A  = $08
000E9Br 4               FAMISTUDIO_EPSM_REG_VOL_B  = $09
000E9Br 4               FAMISTUDIO_EPSM_REG_VOL_C  = $0a
000E9Br 4               FAMISTUDIO_EPSM_REG_ENV_LO = $0b
000E9Br 4               FAMISTUDIO_EPSM_REG_ENV_HI = $0c
000E9Br 4               FAMISTUDIO_EPSM_REG_SHAPE  = $0d
000E9Br 4               FAMISTUDIO_EPSM_REG_IO_A   = $0e
000E9Br 4               FAMISTUDIO_EPSM_REG_IO_B   = $0f
000E9Br 4               
000E9Br 4               FAMISTUDIO_MMC5_PL1_VOL    = $5000
000E9Br 4               FAMISTUDIO_MMC5_PL1_SWEEP  = $5001
000E9Br 4               FAMISTUDIO_MMC5_PL1_LO     = $5002
000E9Br 4               FAMISTUDIO_MMC5_PL1_HI     = $5003
000E9Br 4               FAMISTUDIO_MMC5_PL2_VOL    = $5004
000E9Br 4               FAMISTUDIO_MMC5_PL2_SWEEP  = $5005
000E9Br 4               FAMISTUDIO_MMC5_PL2_LO     = $5006
000E9Br 4               FAMISTUDIO_MMC5_PL2_HI     = $5007
000E9Br 4               FAMISTUDIO_MMC5_PCM_MODE   = $5010
000E9Br 4               FAMISTUDIO_MMC5_SND_CHN    = $5015
000E9Br 4               FAMISTUDIO_MMC5_EXRAM_MODE = $5104
000E9Br 4               
000E9Br 4               FAMISTUDIO_N163_SILENCE       = $e000
000E9Br 4               FAMISTUDIO_N163_ADDR          = $f800
000E9Br 4               FAMISTUDIO_N163_DATA          = $4800
000E9Br 4               FAMISTUDIO_N163_REG_FREQ_LO   = $78
000E9Br 4               FAMISTUDIO_N163_REG_PHASE_LO  = $79
000E9Br 4               FAMISTUDIO_N163_REG_FREQ_MID  = $7a
000E9Br 4               FAMISTUDIO_N163_REG_PHASE_MID = $7b
000E9Br 4               FAMISTUDIO_N163_REG_FREQ_HI   = $7c
000E9Br 4               FAMISTUDIO_N163_REG_PHASE_HI  = $7d
000E9Br 4               FAMISTUDIO_N163_REG_WAVE      = $7e
000E9Br 4               FAMISTUDIO_N163_REG_VOLUME    = $7f
000E9Br 4               
000E9Br 4               FAMISTUDIO_S5B_ADDR       = $c000
000E9Br 4               FAMISTUDIO_S5B_DATA       = $e000
000E9Br 4               FAMISTUDIO_S5B_REG_LO_A   = $00
000E9Br 4               FAMISTUDIO_S5B_REG_HI_A   = $01
000E9Br 4               FAMISTUDIO_S5B_REG_LO_B   = $02
000E9Br 4               FAMISTUDIO_S5B_REG_HI_B   = $03
000E9Br 4               FAMISTUDIO_S5B_REG_LO_C   = $04
000E9Br 4               FAMISTUDIO_S5B_REG_HI_C   = $05
000E9Br 4               FAMISTUDIO_S5B_REG_NOISE  = $06
000E9Br 4               FAMISTUDIO_S5B_REG_TONE   = $07
000E9Br 4               FAMISTUDIO_S5B_REG_VOL_A  = $08
000E9Br 4               FAMISTUDIO_S5B_REG_VOL_B  = $09
000E9Br 4               FAMISTUDIO_S5B_REG_VOL_C  = $0a
000E9Br 4               FAMISTUDIO_S5B_REG_ENV_LO = $0b
000E9Br 4               FAMISTUDIO_S5B_REG_ENV_HI = $0c
000E9Br 4               FAMISTUDIO_S5B_REG_SHAPE  = $0d
000E9Br 4               FAMISTUDIO_S5B_REG_IO_A   = $0e
000E9Br 4               FAMISTUDIO_S5B_REG_IO_B   = $0f
000E9Br 4               
000E9Br 4               FAMISTUDIO_FDS_WAV_START  = $4040
000E9Br 4               FAMISTUDIO_FDS_VOL_ENV    = $4080
000E9Br 4               FAMISTUDIO_FDS_FREQ_LO    = $4082
000E9Br 4               FAMISTUDIO_FDS_FREQ_HI    = $4083
000E9Br 4               FAMISTUDIO_FDS_SWEEP_ENV  = $4084
000E9Br 4               FAMISTUDIO_FDS_SWEEP_BIAS = $4085
000E9Br 4               FAMISTUDIO_FDS_MOD_LO     = $4086
000E9Br 4               FAMISTUDIO_FDS_MOD_HI     = $4087
000E9Br 4               FAMISTUDIO_FDS_MOD_TABLE  = $4088
000E9Br 4               FAMISTUDIO_FDS_VOL        = $4089
000E9Br 4               FAMISTUDIO_FDS_ENV_SPEED  = $408A
000E9Br 4               
000E9Br 4               .if !FAMISTUDIO_CFG_SFX_SUPPORT
000E9Br 4                   ; Output directly to APU
000E9Br 4                   FAMISTUDIO_ALIAS_PL1_VOL    = FAMISTUDIO_APU_PL1_VOL
000E9Br 4                   FAMISTUDIO_ALIAS_PL1_LO     = FAMISTUDIO_APU_PL1_LO
000E9Br 4                   FAMISTUDIO_ALIAS_PL1_HI     = FAMISTUDIO_APU_PL1_HI
000E9Br 4                   FAMISTUDIO_ALIAS_PL2_VOL    = FAMISTUDIO_APU_PL2_VOL
000E9Br 4                   FAMISTUDIO_ALIAS_PL2_LO     = FAMISTUDIO_APU_PL2_LO
000E9Br 4                   FAMISTUDIO_ALIAS_PL2_HI     = FAMISTUDIO_APU_PL2_HI
000E9Br 4                   FAMISTUDIO_ALIAS_TRI_LINEAR = FAMISTUDIO_APU_TRI_LINEAR
000E9Br 4                   FAMISTUDIO_ALIAS_TRI_LO     = FAMISTUDIO_APU_TRI_LO
000E9Br 4                   FAMISTUDIO_ALIAS_TRI_HI     = FAMISTUDIO_APU_TRI_HI
000E9Br 4                   FAMISTUDIO_ALIAS_NOISE_VOL  = FAMISTUDIO_APU_NOISE_VOL
000E9Br 4                   FAMISTUDIO_ALIAS_NOISE_LO   = FAMISTUDIO_APU_NOISE_LO
000E9Br 4               .else
000E9Br 4                   ; Otherwise write to the output buffer
000E9Br 4                   FAMISTUDIO_ALIAS_PL1_VOL    = famistudio_output_buf + 0
000E9Br 4                   FAMISTUDIO_ALIAS_PL1_LO     = famistudio_output_buf + 1
000E9Br 4                   FAMISTUDIO_ALIAS_PL1_HI     = famistudio_output_buf + 2
000E9Br 4                   FAMISTUDIO_ALIAS_PL2_VOL    = famistudio_output_buf + 3
000E9Br 4                   FAMISTUDIO_ALIAS_PL2_LO     = famistudio_output_buf + 4
000E9Br 4                   FAMISTUDIO_ALIAS_PL2_HI     = famistudio_output_buf + 5
000E9Br 4                   FAMISTUDIO_ALIAS_TRI_LINEAR = famistudio_output_buf + 6
000E9Br 4                   FAMISTUDIO_ALIAS_TRI_LO     = famistudio_output_buf + 7
000E9Br 4                   FAMISTUDIO_ALIAS_TRI_HI     = famistudio_output_buf + 8
000E9Br 4                   FAMISTUDIO_ALIAS_NOISE_VOL  = famistudio_output_buf + 9
000E9Br 4                   FAMISTUDIO_ALIAS_NOISE_LO   = famistudio_output_buf + 10
000E9Br 4               .endif
000E9Br 4               
000E9Br 4               ;======================================================================================================================
000E9Br 4               ; FAMISTUDIO_INIT (public)
000E9Br 4               ;
000E9Br 4               ; Reset APU, initialize the sound engine with some music data.
000E9Br 4               ;
000E9Br 4               ; [in] a : Playback platform, zero for PAL, non-zero for NTSC.
000E9Br 4               ; [in] x : Pointer to music data (lo)
000E9Br 4               ; [in] y : Pointer to music data (hi)
000E9Br 4               ;======================================================================================================================
000E9Br 4               
000E9Br 4               famistudio_init:
000E9Br 4               
000E9Br 4                   @music_data_ptr = famistudio_ptr0
000E9Br 4               
000E9Br 4  8E rr rr         stx famistudio_song_list_lo
000E9Er 4  8C rr rr         sty famistudio_song_list_hi
000EA1r 4  86 rr            stx @music_data_ptr+0
000EA3r 4  84 rr            sty @music_data_ptr+1
000EA5r 4               
000EA5r 4               .if FAMISTUDIO_DUAL_SUPPORT
000EA5r 4                   tax
000EA5r 4                   beq @pal
000EA5r 4                   lda #97
000EA5r 4               @pal:
000EA5r 4               .else
000EA5r 4                   .if FAMISTUDIO_CFG_PAL_SUPPORT
000EA5r 4                       lda #0
000EA5r 4                   .endif
000EA5r 4                   .if FAMISTUDIO_CFG_NTSC_SUPPORT
000EA5r 4  A9 61                lda #97
000EA7r 4                   .endif
000EA7r 4               .endif
000EA7r 4  8D rr rr         sta famistudio_pal_adjust
000EAAr 4               
000EAAr 4  20 rr rr         jsr famistudio_music_stop
000EADr 4               
000EADr 4                   ; Instrument address
000EADr 4  A0 01            ldy #1
000EAFr 4  B1 rr            lda (@music_data_ptr),y
000EB1r 4  8D rr rr         sta famistudio_instrument_lo
000EB4r 4  C8               iny
000EB5r 4  B1 rr            lda (@music_data_ptr),y
000EB7r 4  8D rr rr         sta famistudio_instrument_hi
000EBAr 4  C8               iny
000EBBr 4               
000EBBr 4                   ; Expansions instrument address
000EBBr 4                   .if FAMISTUDIO_EXP_FDS || FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_EPSM || FAMISTUDIO_EXP_S5B
000EBBr 4                       lda (@music_data_ptr),y
000EBBr 4                       sta famistudio_exp_instrument_lo
000EBBr 4                       iny
000EBBr 4                       lda (@music_data_ptr),y
000EBBr 4                       sta famistudio_exp_instrument_hi
000EBBr 4                       iny
000EBBr 4                   .endif
000EBBr 4               
000EBBr 4                   ; Sample list address
000EBBr 4  B1 rr            lda (@music_data_ptr),y
000EBDr 4  8D rr rr         sta famistudio_dpcm_list_lo
000EC0r 4  C8               iny
000EC1r 4  B1 rr            lda (@music_data_ptr),y
000EC3r 4  8D rr rr         sta famistudio_dpcm_list_hi
000EC6r 4               
000EC6r 4  A9 80            lda #$80 ; Previous pulse period MSB, to not write it when not changed
000EC8r 4  8D rr rr         sta famistudio_pulse1_prev
000ECBr 4  8D rr rr         sta famistudio_pulse2_prev
000ECEr 4               
000ECEr 4  A9 0F            lda #$0f ; Enable channels, stop DMC
000ED0r 4  8D 15 40         sta FAMISTUDIO_APU_SND_CHN
000ED3r 4  A9 80            lda #$80 ; Disable triangle length counter
000ED5r 4  8D 08 40         sta FAMISTUDIO_APU_TRI_LINEAR
000ED8r 4  A9 00            lda #$00 ; Load noise length
000EDAr 4  8D 0F 40         sta FAMISTUDIO_APU_NOISE_HI
000EDDr 4               
000EDDr 4  A9 30            lda #$30 ; Volumes to 0
000EDFr 4  8D 00 40         sta FAMISTUDIO_APU_PL1_VOL
000EE2r 4  8D 04 40         sta FAMISTUDIO_APU_PL2_VOL
000EE5r 4  8D 0C 40         sta FAMISTUDIO_APU_NOISE_VOL
000EE8r 4  A9 08            lda #$08 ; No sweep
000EEAr 4  8D 01 40         sta FAMISTUDIO_APU_PL1_SWEEP
000EEDr 4  8D 05 40         sta FAMISTUDIO_APU_PL2_SWEEP
000EF0r 4               
000EF0r 4               .if FAMISTUDIO_EXP_VRC6
000EF0r 4               @init_vrc6:
000EF0r 4                   lda #0
000EF0r 4                   sta FAMISTUDIO_VRC6_FREQ_CTRL ; NESDEV wiki says to write zero at startup.
000EF0r 4               .endif
000EF0r 4               
000EF0r 4               .if FAMISTUDIO_EXP_VRC7
000EF0r 4               @init_vrc7:
000EF0r 4                   lda #0
000EF0r 4                   sta FAMISTUDIO_VRC7_SILENCE ; Enable VRC7 audio.
000EF0r 4               .endif
000EF0r 4               
000EF0r 4               @init_epsm:
000EF0r 4               .if FAMISTUDIO_EXP_EPSM
000EF0r 4                   lda #FAMISTUDIO_EPSM_REG_TONE
000EF0r 4                   sta FAMISTUDIO_EPSM_ADDR
000EF0r 4                   lda #$38 ; No noise, just 3 tones for now.
000EF0r 4                   sta FAMISTUDIO_EPSM_DATA
000EF0r 4                   lda #$29
000EF0r 4                   sta FAMISTUDIO_EPSM_ADDR
000EF0r 4                   lda #$80
000EF0r 4                   sta FAMISTUDIO_EPSM_DATA
000EF0r 4                   lda #$27
000EF0r 4                   sta FAMISTUDIO_EPSM_ADDR
000EF0r 4                   lda #$00
000EF0r 4                   sta FAMISTUDIO_EPSM_DATA
000EF0r 4                   lda #$11
000EF0r 4                   sta FAMISTUDIO_EPSM_ADDR
000EF0r 4                   lda #$37
000EF0r 4                   sta FAMISTUDIO_EPSM_DATA
000EF0r 4               .endif
000EF0r 4               
000EF0r 4               .if FAMISTUDIO_EXP_MMC5
000EF0r 4               @init_mmc5:
000EF0r 4                   lda #$00
000EF0r 4                   sta FAMISTUDIO_MMC5_PCM_MODE
000EF0r 4                   lda #$03
000EF0r 4                   sta FAMISTUDIO_MMC5_SND_CHN
000EF0r 4                   lda #$80 ; Previous pulse period MSB, to not write it when not changed
000EF0r 4                   sta famistudio_mmc5_pulse1_prev
000EF0r 4                   sta famistudio_mmc5_pulse2_prev
000EF0r 4               .endif
000EF0r 4               
000EF0r 4               .if FAMISTUDIO_EXP_S5B
000EF0r 4               @init_s5b:
000EF0r 4                   lda #FAMISTUDIO_S5B_REG_TONE
000EF0r 4                   sta FAMISTUDIO_S5B_ADDR
000EF0r 4                   lda #$38 ; No noise, just 3 tones for now.
000EF0r 4                   sta FAMISTUDIO_S5B_DATA
000EF0r 4               .endif
000EF0r 4               
000EF0r 4  4C rr rr         jmp famistudio_music_stop
000EF3r 4               
000EF3r 4               ;======================================================================================================================
000EF3r 4               ; FAMISTUDIO_MUSIC_STOP (public)
000EF3r 4               ;
000EF3r 4               ; Stops any music currently playing, if any. Note that this will not update the APU, so sound might linger. Calling
000EF3r 4               ; famistudio_update after this will update the APU.
000EF3r 4               ;
000EF3r 4               ; [in] no input params.
000EF3r 4               ;======================================================================================================================
000EF3r 4               
000EF3r 4               famistudio_music_stop:
000EF3r 4               
000EF3r 4  A9 00            lda #0
000EF5r 4  8D rr rr         sta famistudio_song_speed
000EF8r 4  8D rr rr         sta famistudio_dpcm_effect
000EFBr 4               
000EFBr 4  A2 00            ldx #0
000EFDr 4               
000EFDr 4               @set_channels:
000EFDr 4               
000EFDr 4  9D rr rr         sta famistudio_chn_repeat,x
000F00r 4  9D rr rr         sta famistudio_chn_note,x
000F03r 4  9D rr rr         sta famistudio_chn_ref_len,x
000F06r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
000F06r 4  9D rr rr             sta famistudio_chn_volume_track,x
000F09r 4                   .endif
000F09r 4                   .if FAMISTUDIO_USE_VIBRATO || FAMISTUDIO_USE_ARPEGGIO
000F09r 4  9D rr rr             sta famistudio_chn_env_override,x
000F0Cr 4                   .endif
000F0Cr 4                   .if FAMISTUDIO_CFG_EQUALIZER
000F0Cr 4  9D rr rr             sta famistudio_chn_note_counter,x
000F0Fr 4                   .endif
000F0Fr 4                   .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
000F0Fr 4  A9 FF                lda #$ff
000F11r 4  9D rr rr             sta famistudio_chn_note_delay,x
000F14r 4  9D rr rr             sta famistudio_chn_cut_delay,x
000F17r 4  A9 00                lda #0
000F19r 4                   .endif
000F19r 4  E8               inx
000F1Ar 4  E0 05            cpx #FAMISTUDIO_NUM_CHANNELS
000F1Cr 4  D0 DF            bne @set_channels
000F1Er 4               
000F1Er 4               .if FAMISTUDIO_USE_DUTYCYCLE_EFFECT
000F1Er 4  A2 00        ldx #0
000F20r 4               @set_duty_cycles:
000F20r 4  9D rr rr         sta famistudio_duty_cycle,x
000F23r 4  E8               inx
000F24r 4  E0 03            cpx #FAMISTUDIO_NUM_DUTY_CYCLES
000F26r 4  D0 F8            bne @set_duty_cycles
000F28r 4               .endif
000F28r 4               
000F28r 4               .if FAMISTUDIO_USE_SLIDE_NOTES
000F28r 4  A2 00            ldx #0
000F2Ar 4               @set_slides:
000F2Ar 4  9D rr rr         sta famistudio_slide_step, x
000F2Dr 4  E8               inx
000F2Er 4  E0 03            cpx #FAMISTUDIO_NUM_SLIDES
000F30r 4  D0 F8            bne @set_slides
000F32r 4               .endif
000F32r 4               
000F32r 4               .if FAMISTUDIO_USE_VOLUME_SLIDES
000F32r 4  A2 00            ldx #0
000F34r 4               @set_volume_slides:
000F34r 4  9D rr rr         sta famistudio_chn_volume_slide_step, x
000F37r 4  9D rr rr         sta famistudio_chn_volume_slide_target, x
000F3Ar 4  E8               inx
000F3Br 4  E0 04            cpx #FAMISTUDIO_NUM_VOLUME_SLIDES
000F3Dr 4  D0 F5            bne @set_volume_slides
000F3Fr 4               .endif
000F3Fr 4               
000F3Fr 4  A2 00            ldx #0
000F41r 4               
000F41r 4               @set_envelopes:
000F41r 4               
000F41r 4  A9 rr            lda #<famistudio_dummy_envelope
000F43r 4  9D rr rr         sta famistudio_env_addr_lo,x
000F46r 4  A9 rr            lda #>famistudio_dummy_envelope
000F48r 4  9D rr rr         sta famistudio_env_addr_hi,x
000F4Br 4  A9 00            lda #0
000F4Dr 4  9D rr rr         sta famistudio_env_repeat,x
000F50r 4  9D rr rr         sta famistudio_env_value,x
000F53r 4  9D rr rr         sta famistudio_env_ptr,x
000F56r 4  E8               inx
000F57r 4  E0 0B            cpx #FAMISTUDIO_NUM_ENVELOPES
000F59r 4  D0 E6            bne @set_envelopes
000F5Br 4               
000F5Br 4  A2 00            ldx #0
000F5Dr 4               @set_pitch_envelopes:
000F5Dr 4               
000F5Dr 4  A9 rr            lda #<famistudio_dummy_pitch_envelope
000F5Fr 4  9D rr rr         sta famistudio_pitch_env_addr_lo,x
000F62r 4  A9 rr            lda #>famistudio_dummy_pitch_envelope
000F64r 4  9D rr rr         sta famistudio_pitch_env_addr_hi,x
000F67r 4  A9 00            lda #0
000F69r 4  9D rr rr         sta famistudio_pitch_env_repeat,x
000F6Cr 4  9D rr rr         sta famistudio_pitch_env_value_lo,x
000F6Fr 4  9D rr rr         sta famistudio_pitch_env_value_hi,x
000F72r 4                   .if FAMISTUDIO_USE_PITCH_TRACK
000F72r 4  9D rr rr             sta famistudio_pitch_env_fine_value,x
000F75r 4                   .endif
000F75r 4  A9 01            lda #1
000F77r 4  9D rr rr         sta famistudio_pitch_env_ptr,x
000F7Ar 4  E8               inx
000F7Br 4  E0 03            cpx #FAMISTUDIO_NUM_PITCH_ENVELOPES
000F7Dr 4  D0 DE            bne @set_pitch_envelopes
000F7Fr 4               
000F7Fr 4  4C rr rr         jmp famistudio_sample_stop
000F82r 4               
000F82r 4               ;======================================================================================================================
000F82r 4               ; FAMISTUDIO_MUSIC_PLAY (public)
000F82r 4               ;
000F82r 4               ; Plays a song from the loaded music data (from a previous call to famistudio_init).
000F82r 4               ;
000F82r 4               ; [in] a : Song index.
000F82r 4               ;======================================================================================================================
000F82r 4               
000F82r 4               famistudio_music_play:
000F82r 4               
000F82r 4                   @tmp = famistudio_r0
000F82r 4                   @song_list_ptr = famistudio_ptr0
000F82r 4                   @temp_env_ptr  = famistudio_ptr1
000F82r 4               
000F82r 4  AE rr rr         ldx famistudio_song_list_lo
000F85r 4  86 rr            stx @song_list_ptr+0
000F87r 4  AE rr rr         ldx famistudio_song_list_hi
000F8Ar 4  86 rr            stx @song_list_ptr+1
000F8Cr 4               
000F8Cr 4  A0 00            ldy #0
000F8Er 4  D1 rr            cmp (@song_list_ptr),y
000F90r 4  90 01            bcc @valid_song
000F92r 4  60               rts ; Invalid song index.
000F93r 4               
000F93r 4               @valid_song:
000F93r 4               .if FAMISTUDIO_NUM_CHANNELS = 5
000F93r 4                   ; Here we basically assume we have 17 songs or less (17 songs * 14 bytes per song + 5 bytes header < 256).
000F93r 4  0A               asl
000F94r 4  85 rr            sta @tmp
000F96r 4  0A               asl
000F97r 4  AA               tax
000F98r 4  0A               asl
000F99r 4  65 rr            adc @tmp
000F9Br 4  86 rr            stx @tmp
000F9Dr 4  65 rr            adc @tmp
000F9Fr 4  69 05            adc #5 ; Song count + instrument ptr + sample ptr
000FA1r 4  A8               tay
000FA2r 4               .else
000FA2r 4                   ; This supports a larger number of songs as it increments the pointer itself, not Y.
000FA2r 4                   ; As the number of channel becomes huge, this become necessary to support a decent
000FA2r 4                   ; number of songs.
000FA2r 4                   tax
000FA2r 4                   lda @song_list_ptr+0
000FA2r 4                   @song_mult_loop:
000FA2r 4                       dex
000FA2r 4                       bmi @song_mult_loop_done
000FA2r 4                       adc #(FAMISTUDIO_NUM_CHANNELS * 2 + 4)
000FA2r 4                       bcc @song_mult_loop
000FA2r 4                       inc @song_list_ptr+1
000FA2r 4                       clc
000FA2r 4                       bcc @song_mult_loop
000FA2r 4               
000FA2r 4                   @song_mult_loop_done:
000FA2r 4                       sta @song_list_ptr+0
000FA2r 4               
000FA2r 4               .if FAMISTUDIO_EXP_FDS || FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_EPSM || FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_S5B
000FA2r 4                   ldy #7 ; Song count + instrument ptr + exp instrument ptr + sample ptr
000FA2r 4               .else
000FA2r 4                   ldy #5 ; Song count + instrument ptr + sample ptr
000FA2r 4               .endif
000FA2r 4               .endif
000FA2r 4               
000FA2r 4  20 rr rr         jsr famistudio_music_stop
000FA5r 4               
000FA5r 4  A2 00            ldx #0
000FA7r 4               
000FA7r 4               @set_channels:
000FA7r 4               
000FA7r 4                   ; Channel data address
000FA7r 4  B1 rr            lda (@song_list_ptr),y
000FA9r 4  9D rr rr         sta famistudio_chn_ptr_lo,x
000FACr 4  C8               iny
000FADr 4  B1 rr            lda (@song_list_ptr),y
000FAFr 4  9D rr rr         sta famistudio_chn_ptr_hi,x
000FB2r 4  C8               iny
000FB3r 4               
000FB3r 4  A9 00            lda #0
000FB5r 4  9D rr rr         sta famistudio_chn_repeat,x
000FB8r 4  9D rr rr         sta famistudio_chn_note,x
000FBBr 4  9D rr rr         sta famistudio_chn_ref_len,x
000FBEr 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
000FBEr 4  A9 F0                lda #$f0
000FC0r 4  9D rr rr             sta famistudio_chn_volume_track,x
000FC3r 4                   .endif
000FC3r 4                   .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
000FC3r 4  A9 FF                lda #$ff
000FC5r 4  9D rr rr             sta famistudio_chn_note_delay,x
000FC8r 4  9D rr rr             sta famistudio_chn_cut_delay,x
000FCBr 4                   .endif
000FCBr 4               
000FCBr 4               @nextchannel:
000FCBr 4  E8               inx
000FCCr 4  E0 05            cpx #FAMISTUDIO_NUM_CHANNELS
000FCEr 4  D0 D7            bne @set_channels
000FD0r 4               
000FD0r 4               .if FAMISTUDIO_USE_FAMITRACKER_TEMPO
000FD0r 4  AD rr rr         lda famistudio_pal_adjust
000FD3r 4  F0 02            beq @pal
000FD5r 4  C8               iny
000FD6r 4  C8               iny
000FD7r 4               @pal:
000FD7r 4               
000FD7r 4                   ; Tempo increment.
000FD7r 4  B1 rr            lda (@song_list_ptr),y
000FD9r 4  8D rr rr         sta famistudio_tempo_step_lo
000FDCr 4  C8               iny
000FDDr 4  B1 rr            lda (@song_list_ptr),y
000FDFr 4  8D rr rr         sta famistudio_tempo_step_hi
000FE2r 4               
000FE2r 4  A9 00            lda #0 ; Reset tempo accumulator
000FE4r 4  8D rr rr         sta famistudio_tempo_acc_lo
000FE7r 4  A9 06            lda #6 ; Default speed
000FE9r 4  8D rr rr         sta famistudio_tempo_acc_hi
000FECr 4  8D rr rr         sta famistudio_song_speed ; Apply default speed, this also enables music
000FEFr 4               .else
000FEFr 4                   lda (@song_list_ptr),y
000FEFr 4                   sta famistudio_tempo_env_ptr_lo
000FEFr 4                   sta @temp_env_ptr+0
000FEFr 4                   iny
000FEFr 4                   lda (@song_list_ptr),y
000FEFr 4                   sta famistudio_tempo_env_ptr_hi
000FEFr 4                   sta @temp_env_ptr+1
000FEFr 4                   iny
000FEFr 4                   lda (@song_list_ptr),y
000FEFr 4               .if FAMISTUDIO_DUAL_SUPPORT ; Dual mode
000FEFr 4                   ldx famistudio_pal_adjust
000FEFr 4                   bne @ntsc_target
000FEFr 4                   ora #1
000FEFr 4                   @ntsc_target:
000FEFr 4               .elseif FAMISTUDIO_CFG_PAL_SUPPORT ; PAL only
000FEFr 4                   ora #1
000FEFr 4               .endif
000FEFr 4                   tax
000FEFr 4                   lda famistudio_tempo_frame_lookup, x ; Lookup contains the number of frames to run (0,1,2) to maintain tempo
000FEFr 4                   sta famistudio_tempo_frame_num
000FEFr 4                   ldy #0
000FEFr 4                   sty famistudio_tempo_env_idx
000FEFr 4                   lda (@temp_env_ptr),y
000FEFr 4                   clc
000FEFr 4                   adc #1
000FEFr 4                   sta famistudio_tempo_env_counter
000FEFr 4                   lda #6
000FEFr 4                   sta famistudio_song_speed ; Non-zero simply so the song isnt considered paused.
000FEFr 4               .endif
000FEFr 4               
000FEFr 4               .if FAMISTUDIO_EXP_VRC7
000FEFr 4                   lda #0
000FEFr 4                   ldx #5
000FEFr 4                   @clear_vrc7_loop:
000FEFr 4                       sta famistudio_chn_vrc7_prev_hi, x
000FEFr 4                       sta famistudio_chn_vrc7_patch, x
000FEFr 4                       sta famistudio_chn_vrc7_trigger,x
000FEFr 4                       dex
000FEFr 4                       bpl @clear_vrc7_loop
000FEFr 4               .endif
000FEFr 4               
000FEFr 4               .if FAMISTUDIO_EXP_EPSM
000FEFr 4               .if FAMISTUDIO_EXP_EPSM_TRIG_CHN > 0
000FEFr 4                   lda #0
000FEFr 4                   ldx #FAMISTUDIO_EXP_EPSM_FM_CHN_CNT + FAMISTUDIO_EXP_EPSM_RHYTHM_CNT - 1
000FEFr 4                   @clear_epsm_loop:
000FEFr 4                       sta famistudio_chn_epsm_trigger,x
000FEFr 4                       dex
000FEFr 4                       bpl @clear_epsm_loop
000FEFr 4               .endif
000FEFr 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
000FEFr 4                   lda #0
000FEFr 4                   sta famistudio_epsm_env_period_lo
000FEFr 4                   sta famistudio_epsm_env_period_hi
000FEFr 4                   sta famistudio_epsm_env_override
000FEFr 4                   ldx #(FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT - 1)
000FEFr 4                   @clear_epsm_sq_loop:
000FEFr 4                       sta famistudio_epsm_chn_env_shape, x
000FEFr 4                       sta famistudio_epsm_chn_env_octave, x
000FEFr 4                       dex
000FEFr 4                       bpl @clear_epsm_sq_loop
000FEFr 4               .endif
000FEFr 4               .endif
000FEFr 4               
000FEFr 4               .if FAMISTUDIO_EXP_VRC6
000FEFr 4                   lda #0
000FEFr 4                   sta famistudio_vrc6_saw_volume
000FEFr 4                   .if FAMISTUDIO_USE_PHASE_RESET
000FEFr 4                       sta famistudio_vrc6_pulse1_prev_hi
000FEFr 4                       sta famistudio_vrc6_pulse2_prev_hi
000FEFr 4                       sta famistudio_vrc6_saw_prev_hi
000FEFr 4                   .endif
000FEFr 4               .endif
000FEFr 4               
000FEFr 4               .if FAMISTUDIO_USE_PHASE_RESET
000FEFr 4                   lda #0
000FEFr 4                   sta famistudio_phase_reset
000FEFr 4                   .if FAMISTUDIO_EXP_N163
000FEFr 4                       sta famistudio_phase_reset_n163
000FEFr 4                   .endif
000FEFr 4               .endif
000FEFr 4               
000FEFr 4               .if FAMISTUDIO_USE_DELTA_COUNTER
000FEFr 4                   lda #$ff
000FEFr 4                   sta famistudio_dmc_delta_counter
000FEFr 4               .endif
000FEFr 4               
000FEFr 4               .if FAMISTUDIO_EXP_FDS
000FEFr 4                   lda #0
000FEFr 4                   sta famistudio_fds_mod_speed+0
000FEFr 4                   sta famistudio_fds_mod_speed+1
000FEFr 4                   sta famistudio_fds_mod_depth
000FEFr 4                   sta famistudio_fds_mod_delay
000FEFr 4                   sta famistudio_fds_mod_delay_counter
000FEFr 4                   sta famistudio_fds_override_flags
000FEFr 4                   .if FAMISTUDIO_USE_FDS_AUTOMOD
000FEFr 4                       sta famistudio_fds_automod_numer
000FEFr 4                       sta famistudio_fds_automod_denom
000FEFr 4                   .endif
000FEFr 4                   .if FAMISTUDIO_USE_PHASE_RESET
000FEFr 4                       sta famistudio_fds_prev_hi
000FEFr 4                   .endif
000FEFr 4               .endif
000FEFr 4               
000FEFr 4               .if FAMISTUDIO_EXP_N163
000FEFr 4                   lda #0
000FEFr 4                   ldx #(FAMISTUDIO_EXP_N163_CHN_CNT - 1)
000FEFr 4                   @clear_n163_loop:
000FEFr 4                       sta famistudio_chn_n163_wave_index, x
000FEFr 4                       sta famistudio_chn_n163_wave_len, x
000FEFr 4                       dex
000FEFr 4                       bpl @clear_n163_loop
000FEFr 4               .endif
000FEFr 4               
000FEFr 4               .if FAMISTUDIO_EXP_S5B
000FEFr 4                   lda #0
000FEFr 4                   sta famistudio_s5b_env_period_lo
000FEFr 4                   sta famistudio_s5b_env_period_hi
000FEFr 4                   sta famistudio_s5b_env_override
000FEFr 4                   sta famistudio_s5b_chn_env_shape+0
000FEFr 4                   sta famistudio_s5b_chn_env_shape+1
000FEFr 4                   sta famistudio_s5b_chn_env_shape+2
000FEFr 4                   sta famistudio_s5b_chn_env_octave+0
000FEFr 4                   sta famistudio_s5b_chn_env_octave+1
000FEFr 4                   sta famistudio_s5b_chn_env_octave+2
000FEFr 4               .endif
000FEFr 4               
000FEFr 4               @skip:
000FEFr 4  60               rts
000FF0r 4               
000FF0r 4               ;======================================================================================================================
000FF0r 4               ; FAMISTUDIO_MUSIC_PAUSE (public)
000FF0r 4               ;
000FF0r 4               ; Pause/unpause the currently playing song. Note that this will not update the APU, so sound might linger. Calling
000FF0r 4               ; famistudio_update after this will update the APU.
000FF0r 4               ;
000FF0r 4               ; [in] a : zero to play, non-zero to pause.
000FF0r 4               ;======================================================================================================================
000FF0r 4               
000FF0r 4               famistudio_music_pause:
000FF0r 4               
000FF0r 4  AA               tax
000FF1r 4  F0 18            beq @unpause
000FF3r 4               
000FF3r 4               @pause:
000FF3r 4               
000FF3r 4  20 rr rr         jsr famistudio_sample_stop
000FF6r 4               
000FF6r 4  A9 00            lda #0
000FF8r 4  8D rr rr         sta famistudio_env_value+FAMISTUDIO_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
000FFBr 4  8D rr rr         sta famistudio_env_value+FAMISTUDIO_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
000FFEr 4  8D rr rr         sta famistudio_env_value+FAMISTUDIO_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001001r 4  8D rr rr         sta famistudio_env_value+FAMISTUDIO_CH3_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .if FAMISTUDIO_EXP_VRC6
001004r 4                   sta famistudio_env_value+FAMISTUDIO_VRC6_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_VRC6_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_VRC6_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_VRC7
001004r 4                   sta famistudio_env_value+FAMISTUDIO_VRC7_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_VRC7_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_VRC7_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_VRC7_CH3_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_VRC7_CH4_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_VRC7_CH5_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_FDS
001004r 4                   sta famistudio_env_value+FAMISTUDIO_FDS_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_MMC5
001004r 4                   sta famistudio_env_value+FAMISTUDIO_MMC5_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_MMC5_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_N163
001004r 4                   sta famistudio_env_value+FAMISTUDIO_N163_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_N163_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_N163_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_N163_CH3_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_N163_CH4_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_N163_CH5_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_N163_CH6_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_N163_CH7_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_S5B
001004r 4                   sta famistudio_env_value+FAMISTUDIO_S5B_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_S5B_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4                   sta famistudio_env_value+FAMISTUDIO_S5B_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_EPSM
001004r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 0
001004r 4                   sta famistudio_env_value+FAMISTUDIO_EPSM_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 1
001004r 4                   sta famistudio_env_value+FAMISTUDIO_EPSM_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 2
001004r 4                   sta famistudio_env_value+FAMISTUDIO_EPSM_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 3
001004r 4                   sta famistudio_env_value+FAMISTUDIO_EPSM_CH3_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 4
001004r 4                   sta famistudio_env_value+FAMISTUDIO_EPSM_CH4_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 5
001004r 4                   sta famistudio_env_value+FAMISTUDIO_EPSM_CH5_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 6
001004r 4                   sta famistudio_env_value+FAMISTUDIO_EPSM_CH6_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 7
001004r 4                   sta famistudio_env_value+FAMISTUDIO_EPSM_CH7_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 8
001004r 4                   sta famistudio_env_value+FAMISTUDIO_EPSM_CH8_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001004r 4               .endif
001004r 4               .endif
001004r 4  AD rr rr         lda famistudio_song_speed ; <= 0 pauses the music
001007r 4  09 80            ora #$80
001009r 4  D0 05            bne @done
00100Br 4               @unpause:
00100Br 4  AD rr rr         lda famistudio_song_speed ; > 0 unpause music
00100Er 4  29 7F            and #$7f
001010r 4               @done:
001010r 4  8D rr rr         sta famistudio_song_speed
001013r 4               
001013r 4  60               rts
001014r 4               
001014r 4               ;======================================================================================================================
001014r 4               ; FAMISTUDIO_GET_NOTE_PITCH_MACRO (internal)
001014r 4               ;
001014r 4               ; Uber-macro used to compute the final pitch of a note, taking into account the current note, arpeggios, instrument
001014r 4               ; pitch envelopes, slide notes and fine pitch tracks.
001014r 4               ;
001014r 4               ; [in] x : note index.
001014r 4               ; [in] y : slide/pitch envelope index.
001014r 4               ; [out] famistudio_ptr1 : Final note pitch.
001014r 4               ;======================================================================================================================
001014r 4               
001014r 4               .macro famistudio_get_note_pitch_macro pitch_env_offset, pitch_shift, note_table_lsb, note_table_msb
001014r 4               
001014r 4                   .local @pitch
001014r 4                   .local @tmp_ror
001014r 4                   .local @pos
001014r 4                   .local @no_slide
001014r 4                   .local @no_adjust
001014r 4               
001014r 4                   @pitch   = famistudio_ptr1
001014r 4                   @tmp_ror = famistudio_r0
001014r 4               
001014r 4               .if FAMISTUDIO_USE_PITCH_TRACK
001014r 4               
001014r 4                   ; Pitch envelope + fine pitch (sign extended)
001014r 4                   clc
001014r 4                   lda famistudio_pitch_env_fine_value+pitch_env_offset, y
001014r 4                   adc famistudio_pitch_env_value_lo+pitch_env_offset, y
001014r 4                   sta @pitch+0
001014r 4                   lda famistudio_pitch_env_fine_value+pitch_env_offset, y
001014r 4                   and #$80
001014r 4                   beq @pos
001014r 4                   lda #$ff
001014r 4               @pos:
001014r 4                   adc famistudio_pitch_env_value_hi+pitch_env_offset, y
001014r 4                   sta @pitch+1
001014r 4               
001014r 4               .else
001014r 4               
001014r 4                   ; Pitch envelope only
001014r 4                   lda famistudio_pitch_env_value_lo+pitch_env_offset, y
001014r 4                   sta @pitch+0
001014r 4                   lda famistudio_pitch_env_value_hi+pitch_env_offset, y
001014r 4                   sta @pitch+1
001014r 4               
001014r 4               .endif
001014r 4               
001014r 4               .if FAMISTUDIO_USE_SLIDE_NOTES
001014r 4               
001014r 4                   ; Check if there is an active slide.
001014r 4                   lda famistudio_slide_step+pitch_env_offset, y
001014r 4                   beq @no_slide
001014r 4               
001014r 4                   ; Add slide
001014r 4               .if pitch_shift >= 1
001014r 4                   ; These channels dont have fractional part for slides and have the same shift for slides + pitch.
001014r 4                   clc
001014r 4                   lda famistudio_slide_pitch_lo+pitch_env_offset, y
001014r 4                   adc @pitch+0
001014r 4                   sta @pitch+0
001014r 4                   lda famistudio_slide_pitch_hi+pitch_env_offset, y
001014r 4                   adc @pitch+1
001014r 4                   sta @pitch+1
001014r 4                .else
001014r 4                   ; Most channels have 1 bit of fraction for slides.
001014r 4                   lda famistudio_slide_pitch_hi+pitch_env_offset, y
001014r 4                   cmp #$80 ; Sign extend upcoming right shift.
001014r 4                   ror ; We have 1 bit of fraction for slides, shift right hi byte.
001014r 4                   sta @tmp_ror
001014r 4                   lda famistudio_slide_pitch_lo+pitch_env_offset, y
001014r 4                   ror ; Shift right low byte.
001014r 4                   clc
001014r 4                   adc @pitch+0
001014r 4                   sta @pitch+0
001014r 4                   lda @tmp_ror
001014r 4                   adc @pitch+1
001014r 4                   sta @pitch+1
001014r 4               .endif
001014r 4               .endif
001014r 4               
001014r 4               @no_slide:
001014r 4               
001014r 4                   .if pitch_shift >= 1
001014r 4                       asl @pitch+0
001014r 4                       rol @pitch+1
001014r 4                   .if pitch_shift >= 2
001014r 4                       asl @pitch+0
001014r 4                       rol @pitch+1
001014r 4                   .if pitch_shift >= 3
001014r 4                       asl @pitch+0
001014r 4                       rol @pitch+1
001014r 4                   .if pitch_shift >= 4
001014r 4                       asl @pitch+0
001014r 4                       rol @pitch+1
001014r 4                   .if pitch_shift >= 5
001014r 4                       asl @pitch+0
001014r 4                       rol @pitch+1
001014r 4                   .endif
001014r 4                   .endif
001014r 4                   .endif
001014r 4                   .endif
001014r 4                   .endif
001014r 4               
001014r 4                   ; Finally, add note pitch.
001014r 4                   clc
001014r 4                   lda note_table_lsb,x
001014r 4                   adc @pitch+0
001014r 4                   sta @pitch+0
001014r 4                   lda note_table_msb,x
001014r 4                   adc @pitch+1
001014r 4                   sta @pitch+1
001014r 4               
001014r 4               .endmacro
001014r 4               
001014r 4               famistudio_get_note_pitch:
001014r 4  18 B9 rr rr      famistudio_get_note_pitch_macro 0, 0, famistudio_note_table_lsb, famistudio_note_table_msb
001018r 4  79 rr rr 85  
00101Cr 4  rr B9 rr rr  
001056r 4  60               rts
001057r 4               
001057r 4               .if FAMISTUDIO_EXP_VRC6
001057r 4               famistudio_get_note_pitch_vrc6_saw:
001057r 4                   famistudio_get_note_pitch_macro 0, 0, famistudio_saw_note_table_lsb, famistudio_saw_note_table_msb
001057r 4                   rts
001057r 4               .endif
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_SMOOTH_VIBRATO (internal)
001057r 4               ;
001057r 4               ; Implementation of Blaarg's smooth vibrato to eliminate pops on square channels. Called either from regular channel
001057r 4               ; updates or from SFX code.
001057r 4               ;
001057r 4               ; [in] a : new hi period.
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               .macro famistudio_smooth_vibrato pulse_lo, pulse_prev, reg_hi, reg_lo, reg_sweep
001057r 4               
001057r 4                   .local @hi_delta_too_big
001057r 4                   .local @done
001057r 4               
001057r 4                   ; Blaarg's smooth vibrato technique, only used if high period delta is 1 or -1.
001057r 4                   and #7 ; Clamp hi-period to sane range, breaks smooth vibrato otherwise.
001057r 4                   tax ; X = new hi-period
001057r 4                   sec
001057r 4                   sbc pulse_prev ; A = signed hi-period delta.
001057r 4                   beq @done
001057r 4                   stx pulse_prev
001057r 4                   tay
001057r 4                   iny ; We only care about -1 ($ff) and 1. Adding one means we only check of 0 or 2, we already checked for zero (so < 3).
001057r 4                   cpy #$03
001057r 4                   bcs @hi_delta_too_big
001057r 4                   ldx #$40
001057r 4                   stx FAMISTUDIO_APU_FRAME_CNT ; Reset frame counter in case it was about to clock
001057r 4                   lda famistudio_smooth_vibrato_period_lo_lookup, y ; Be sure low 8 bits of timer period are $ff (for positive delta), or $00 (for negative delta)
001057r 4                   sta reg_lo
001057r 4                   lda famistudio_smooth_vibrato_sweep_lookup, y ; Sweep enabled, shift = 7, set negative flag or delta is negative..
001057r 4                   sta reg_sweep
001057r 4                   lda #$c0
001057r 4                   sta FAMISTUDIO_APU_FRAME_CNT ; Clock sweep immediately
001057r 4                   lda #$08
001057r 4                   sta reg_sweep ; Disable sweep
001057r 4                   lda pulse_lo
001057r 4                   sta reg_lo ; Restore lo-period.
001057r 4                   jmp @done
001057r 4               @hi_delta_too_big:
001057r 4                   stx reg_hi
001057r 4               @done:
001057r 4               .endmacro
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_CHANNEL_SOUND (internal)
001057r 4               ;
001057r 4               ; Uber-macro used to update the APU registers for a given 2A03/VRC6/MMC5 channel. This macro is an absolute mess, but
001057r 4               ; it is still more maintainable than having many different functions.
001057r 4               ;
001057r 4               ; [in] no input params.
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               .macro famistudio_update_channel_sound idx, env_offset, pulse_prev, reg_hi, reg_lo, reg_vol, reg_sweep
001057r 4               
001057r 4                   .local @pitch
001057r 4                   .local @tmp
001057r 4                   .local @nocut
001057r 4                   .local @set_volume
001057r 4                   .local @compute_volume
001057r 4                   .local @hi_delta_too_big
001057r 4                   .local @noise_slide_shift_loop
001057r 4                   .local @no_noise_slide
001057r 4               
001057r 4                   @tmp   = famistudio_r0
001057r 4                   @pitch = famistudio_ptr1
001057r 4               
001057r 4                   lda famistudio_chn_note+idx
001057r 4                   bne @nocut
001057r 4                   jmp @set_volume
001057r 4               
001057r 4               @nocut:
001057r 4                   clc
001057r 4                   adc famistudio_env_value+env_offset+FAMISTUDIO_ENV_NOTE_OFF
001057r 4               
001057r 4               .if idx = 3 ; Noise channel is a bit special
001057r 4               
001057r 4               .if FAMISTUDIO_USE_NOISE_SLIDE_NOTES
001057r 4               
001057r 4                   ; Check if there is an active slide on the noise channel.
001057r 4                   ldy famistudio_slide_step+FAMISTUDIO_NOISE_SLIDE_INDEX
001057r 4                   beq @no_noise_slide
001057r 4               
001057r 4                       ; We have 4 bits of fraction for noise slides.
001057r 4                       sta @tmp
001057r 4               
001057r 4                       lda famistudio_slide_pitch_lo+FAMISTUDIO_NOISE_SLIDE_INDEX
001057r 4                       sta @pitch+0
001057r 4                       lda famistudio_slide_pitch_hi+FAMISTUDIO_NOISE_SLIDE_INDEX
001057r 4                       cmp #$80
001057r 4                       ror
001057r 4                       ror @pitch+0
001057r 4                       cmp #$80
001057r 4                       ror
001057r 4                       ror @pitch+0
001057r 4                       cmp #$80
001057r 4                       ror
001057r 4                       ror @pitch+0
001057r 4                       cmp #$80
001057r 4                       ror
001057r 4                       lda @pitch+0
001057r 4                       ror
001057r 4               
001057r 4                       clc
001057r 4                       adc @tmp
001057r 4               
001057r 4               .endif
001057r 4               
001057r 4               @no_noise_slide:
001057r 4                   and #$0f
001057r 4                   eor #$0f
001057r 4                   sta @tmp
001057r 4               
001057r 4                   ldx famistudio_env_value+env_offset+FAMISTUDIO_ENV_DUTY_OFF
001057r 4                   lda famistudio_duty_lookup, x
001057r 4                   asl a
001057r 4                   and #$80
001057r 4                   ora @tmp
001057r 4               
001057r 4               .else
001057r 4               
001057r 4                   .if FAMISTUDIO_DUAL_SUPPORT
001057r 4                       clc
001057r 4                       adc famistudio_pal_adjust
001057r 4                   .endif
001057r 4                   tax
001057r 4               
001057r 4                   ; This basically does same as "famistudio_channel_to_pitch_env"
001057r 4                   .if idx < 3
001057r 4                       ldy #idx
001057r 4                   .else
001057r 4                       ldy #(idx - 2)
001057r 4                   .endif
001057r 4               
001057r 4                   .if FAMISTUDIO_EXP_VRC6 && idx = FAMISTUDIO_VRC6_CH2_IDX
001057r 4                       jsr famistudio_get_note_pitch_vrc6_saw
001057r 4                   .else
001057r 4                       jsr famistudio_get_note_pitch
001057r 4                   .endif
001057r 4               
001057r 4                   lda @pitch+0
001057r 4                   sta reg_lo
001057r 4                   lda @pitch+1
001057r 4               
001057r 4                   ; HACK : VRC6 only. We are out of macro param for NESASM. TODO : Is that still true?
001057r 4                   .if idx >= FAMISTUDIO_VRC6_CH0_IDX && idx <= FAMISTUDIO_VRC6_CH2_IDX
001057r 4                       .if FAMISTUDIO_USE_PHASE_RESET
001057r 4                           sta pulse_prev
001057r 4                       .endif
001057r 4                       ora #$80
001057r 4                   .else
001057r 4                       .if (!.blank(pulse_prev)) && ((!FAMISTUDIO_CFG_SFX_SUPPORT) || (.blank(reg_sweep)))
001057r 4                           .if (!.blank(reg_sweep)) && FAMISTUDIO_CFG_SMOOTH_VIBRATO
001057r 4                               famistudio_smooth_vibrato @pitch, pulse_prev, reg_hi, reg_lo, reg_sweep
001057r 4                           .else
001057r 4                               cmp pulse_prev
001057r 4                               beq @compute_volume
001057r 4                               sta pulse_prev
001057r 4                           .endif
001057r 4                       .endif
001057r 4                   .endif
001057r 4               
001057r 4               .endif ; idx = 3
001057r 4               
001057r 4               .if .blank(pulse_prev) || .blank(reg_sweep) || FAMISTUDIO_CFG_SFX_SUPPORT || (!FAMISTUDIO_CFG_SMOOTH_VIBRATO)
001057r 4                   sta reg_hi
001057r 4               .endif
001057r 4               
001057r 4               @compute_volume:
001057r 4               
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_chn_volume_track+idx
001057r 4                       .if FAMISTUDIO_USE_VOLUME_SLIDES
001057r 4                           ; During a slide, the lower 4 bits are fraction.
001057r 4                           and #$f0
001057r 4                       .endif
001057r 4                       ora famistudio_env_value+env_offset+FAMISTUDIO_ENV_VOLUME_OFF
001057r 4                       tax
001057r 4                       lda famistudio_volume_table, x
001057r 4                   .else
001057r 4                       lda famistudio_env_value+env_offset+FAMISTUDIO_ENV_VOLUME_OFF
001057r 4                   .endif
001057r 4               
001057r 4               .if FAMISTUDIO_EXP_VRC6 && (idx = FAMISTUDIO_VRC6_CH2_IDX)
001057r 4                   ; VRC6 saw has 6-bits
001057r 4                   ldx famistudio_vrc6_saw_volume
001057r 4                   bmi @set_volume
001057r 4                   asl
001057r 4                   ldx famistudio_vrc6_saw_volume
001057r 4                   beq @set_volume
001057r 4                   asl
001057r 4               .endif
001057r 4               
001057r 4               @set_volume:
001057r 4               
001057r 4               .if idx = 0 || idx = 1 || idx = 3 || (FAMISTUDIO_EXP_MMC5 && (idx = FAMISTUDIO_MMC5_CH0_IDX || idx = FAMISTUDIO_MMC5_CH1_IDX))
001057r 4                   ldx famistudio_env_value+env_offset+FAMISTUDIO_ENV_DUTY_OFF
001057r 4                   ora famistudio_duty_lookup, x
001057r 4               .elseif FAMISTUDIO_EXP_VRC6 && (idx = FAMISTUDIO_VRC6_CH0_IDX || idx = FAMISTUDIO_VRC6_CH1_IDX)
001057r 4                   ldx famistudio_env_value+env_offset+FAMISTUDIO_ENV_DUTY_OFF
001057r 4                   ora famistudio_vrc6_duty_lookup, x
001057r 4               .endif
001057r 4               
001057r 4               ; HACK : We are out of macro param for NESASM.
001057r 4               .if idx = 2
001057r 4                   ora #$80
001057r 4               .elseif idx = 3
001057r 4                   ora #$f0
001057r 4               .endif
001057r 4               
001057r 4                   sta reg_vol
001057r 4               
001057r 4               .endmacro
001057r 4               
001057r 4               .if FAMISTUDIO_EXP_FDS
001057r 4               
001057r 4               .if FAMISTUDIO_USE_FDS_AUTOMOD
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_MUL (internal)
001057r 4               ;
001057r 4               ; From : https://codebase64.org/doku.php?id=base:8bit_multiplication_16bit_product
001057r 4               ; Using the 16x8 version. May overflow if using too large numbers.
001057r 4               ;
001057r 4               ; [in]  ptr0 : 16-bit number
001057r 4               ; [in]  r1   : 8-bit number
001057r 4               ; [out] x+a  : Result lo-byte
001057r 4               ; [out] y    : Result hi-byte
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               famistudio_mul:
001057r 4               
001057r 4                   @num1 = famistudio_ptr1
001057r 4                   @num2 = famistudio_r1
001057r 4               
001057r 4                   lda #$00
001057r 4                   tay
001057r 4                   beq @enter_loop
001057r 4               @do_add:
001057r 4                   clc
001057r 4                   adc @num1+0
001057r 4                   tax
001057r 4                   tya
001057r 4                   adc @num1+1
001057r 4                   tay
001057r 4                   txa
001057r 4               @loop:
001057r 4                   asl @num1+0
001057r 4                   rol @num1+1
001057r 4               @enter_loop:
001057r 4                   lsr @num2
001057r 4                   bcs @do_add
001057r 4                   bne @loop
001057r 4                   rts
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_DIV (internal)
001057r 4               ;
001057r 4               ; From : https://forums.nesdev.org/viewtopic.php?p=895&sid=5c263dea8d9e3cf15cd1093856f211a9#p895 (tepples)
001057r 4               ;
001057r 4               ; [in]  ptr0 : 16-bit number
001057r 4               ; [in]  r1   : 8-bit divisor
001057r 4               ; [out] ptr0 : Result
001057r 4               ; [out] a    : Remainder
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               famistudio_div:
001057r 4               
001057r 4                   @dividend = famistudio_ptr1
001057r 4                   @divisor  = famistudio_r1
001057r 4               
001057r 4                   ldx #16
001057r 4                   lda #0
001057r 4               @divloop:
001057r 4                   asl @dividend
001057r 4                   rol @dividend+1
001057r 4                   rol a
001057r 4                   cmp @divisor
001057r 4                   bcc @no_sub
001057r 4                   sbc @divisor
001057r 4                   inc @dividend
001057r 4               @no_sub:
001057r 4                   dex
001057r 4                   bne @divloop
001057r 4                   rts
001057r 4               
001057r 4               .endif
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_FDS_CHANNEL_SOUND (internal)
001057r 4               ;
001057r 4               ; Updates the FDS audio registers.
001057r 4               ;
001057r 4               ; [in] no input params.
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               famistudio_update_fds_channel_sound:
001057r 4               
001057r 4                   @pitch = famistudio_ptr1
001057r 4                   @mul   = famistudio_r1
001057r 4                   @div   = famistudio_r1
001057r 4               
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_FDS_CH0_IDX
001057r 4                   bne @nocut
001057r 4                   jmp @set_volume
001057r 4               
001057r 4               @nocut:
001057r 4                   clc
001057r 4                   adc famistudio_env_value+FAMISTUDIO_FDS_CH0_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001057r 4                   tax
001057r 4               
001057r 4                   ldy #0
001057r 4                   famistudio_get_note_pitch_macro FAMISTUDIO_FDS_CH0_PITCH_ENV_IDX, 0, famistudio_fds_note_table_lsb, famistudio_fds_note_table_msb
001057r 4               
001057r 4                   lda @pitch+0
001057r 4                   sta FAMISTUDIO_FDS_FREQ_LO
001057r 4                   lda @pitch+1
001057r 4                   sta FAMISTUDIO_FDS_FREQ_HI
001057r 4                   .if FAMISTUDIO_USE_PHASE_RESET
001057r 4                       sta famistudio_fds_prev_hi
001057r 4                   .endif
001057r 4               
001057r 4               @check_mod_delay:
001057r 4                   lda famistudio_fds_mod_delay_counter
001057r 4                   beq @zero_delay
001057r 4                   dec famistudio_fds_mod_delay_counter
001057r 4                   lda #$80
001057r 4                   sta FAMISTUDIO_FDS_MOD_HI
001057r 4                   bne @compute_volume
001057r 4               
001057r 4               @zero_delay:
001057r 4               
001057r 4                   lda famistudio_fds_mod_depth
001057r 4                   beq @mod_depth
001057r 4               
001057r 4                   .if FAMISTUDIO_USE_FDS_AUTOMOD
001057r 4                       lda famistudio_fds_automod_numer
001057r 4                       beq @manual_mod
001057r 4               
001057r 4                       @auto_mod_mul_div:
001057r 4                           sta @mul
001057r 4                           jsr famistudio_mul
001057r 4                           stx @pitch+0
001057r 4                           sty @pitch+1
001057r 4                           lda famistudio_fds_automod_denom
001057r 4                           sta @div
001057r 4                           jsr famistudio_div
001057r 4                           lda @pitch+1
001057r 4                           cmp #$10
001057r 4                           bcc @write_auto_mod
001057r 4                           @write_max:
001057r 4                               lda #$0f
001057r 4                               sta FAMISTUDIO_FDS_MOD_HI
001057r 4                               lda #$ff
001057r 4                               sta FAMISTUDIO_FDS_MOD_LO
001057r 4                               jmp @mod_depth
001057r 4               
001057r 4                           @write_auto_mod:
001057r 4                               sta FAMISTUDIO_FDS_MOD_HI
001057r 4                               lda @pitch+0
001057r 4                               sta FAMISTUDIO_FDS_MOD_LO
001057r 4                               jmp @mod_depth
001057r 4                   .endif
001057r 4               
001057r 4                   @manual_mod:
001057r 4                       lda famistudio_fds_mod_speed+1
001057r 4                       sta FAMISTUDIO_FDS_MOD_HI
001057r 4                       lda famistudio_fds_mod_speed+0
001057r 4                       sta FAMISTUDIO_FDS_MOD_LO
001057r 4               
001057r 4                   @mod_depth:
001057r 4                       lda famistudio_fds_mod_depth
001057r 4                       ora #$80
001057r 4                       sta FAMISTUDIO_FDS_SWEEP_ENV
001057r 4               
001057r 4               @compute_volume:
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_chn_volume_track+FAMISTUDIO_FDS_CH0_IDX
001057r 4                       .if FAMISTUDIO_USE_VOLUME_SLIDES
001057r 4                           ; During a slide, the lower 4 bits are fraction.
001057r 4                           and #$f0
001057r 4                       .endif
001057r 4                       ora famistudio_env_value+FAMISTUDIO_FDS_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001057r 4                       tax
001057r 4                       lda famistudio_volume_table, x
001057r 4                   .else
001057r 4                       lda famistudio_env_value+FAMISTUDIO_FDS_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001057r 4                   .endif
001057r 4                   asl ; FDS volume is 6-bits, but clamped to 32. Just double it.
001057r 4               
001057r 4               @set_volume:
001057r 4                   ora #$80
001057r 4                   sta FAMISTUDIO_FDS_VOL_ENV
001057r 4                   lda #0
001057r 4                   sta famistudio_fds_override_flags
001057r 4                   rts
001057r 4               
001057r 4               .endif
001057r 4               
001057r 4               .if FAMISTUDIO_EXP_VRC7
001057r 4               
001057r 4               famistudio_vrc7_reg_table_lo:
001057r 4                   .byte FAMISTUDIO_VRC7_REG_LO_1, FAMISTUDIO_VRC7_REG_LO_2, FAMISTUDIO_VRC7_REG_LO_3, FAMISTUDIO_VRC7_REG_LO_4, FAMISTUDIO_VRC7_REG_LO_5, FAMISTUDIO_VRC7_REG_LO_6
001057r 4               famistudio_vrc7_reg_table_hi:
001057r 4                   .byte FAMISTUDIO_VRC7_REG_HI_1, FAMISTUDIO_VRC7_REG_HI_2, FAMISTUDIO_VRC7_REG_HI_3, FAMISTUDIO_VRC7_REG_HI_4, FAMISTUDIO_VRC7_REG_HI_5, FAMISTUDIO_VRC7_REG_HI_6
001057r 4               famistudio_vrc7_vol_table:
001057r 4                   .byte FAMISTUDIO_VRC7_REG_VOL_1, FAMISTUDIO_VRC7_REG_VOL_2, FAMISTUDIO_VRC7_REG_VOL_3, FAMISTUDIO_VRC7_REG_VOL_4, FAMISTUDIO_VRC7_REG_VOL_5, FAMISTUDIO_VRC7_REG_VOL_6
001057r 4               famistudio_vrc7_env_table:
001057r 4                   .byte FAMISTUDIO_VRC7_CH0_ENVS, FAMISTUDIO_VRC7_CH1_ENVS, FAMISTUDIO_VRC7_CH2_ENVS, FAMISTUDIO_VRC7_CH3_ENVS, FAMISTUDIO_VRC7_CH4_ENVS, FAMISTUDIO_VRC7_CH5_ENVS
001057r 4               famistudio_vrc7_invert_vol_table:
001057r 4                   .byte $0f, $0e, $0d, $0c, $0b, $0a, $09, $08, $07, $06, $05, $04, $03, $02, $01, $00
001057r 4               
001057r 4               ; From nesdev wiki.
001057r 4               famistudio_vrc7_wait_reg_write:
001057r 4                   stx famistudio_vrc7_dummy
001057r 4                   ldx #$08
001057r 4                   @wait_loop:
001057r 4                       dex
001057r 4                       bne @wait_loop
001057r 4                       ldx famistudio_vrc7_dummy
001057r 4                   rts
001057r 4               
001057r 4               ; From nesdev wiki.
001057r 4               famistudio_vrc7_wait_reg_select:
001057r 4                   rts
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_VRC7_CHANNEL_SOUND (internal)
001057r 4               ;
001057r 4               ; Updates the VRC7 audio registers for a given channel.
001057r 4               ;
001057r 4               ; [in] y: VRC7 channel idx (0,1,2,3,4,5)
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               famistudio_update_vrc7_channel_sound:
001057r 4               
001057r 4                   @tmp   = famistudio_r0
001057r 4                   @pitch = famistudio_ptr1
001057r 4               
001057r 4               @check_cut:
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_VRC7_CH0_IDX,y
001057r 4                   bne @check_release
001057r 4               
001057r 4               @cut:
001057r 4                   ; Untrigger note.
001057r 4                   lda famistudio_vrc7_reg_table_hi,y
001057r 4                   sta FAMISTUDIO_VRC7_REG_SEL
001057r 4                   jsr famistudio_vrc7_wait_reg_select
001057r 4               
001057r 4                   lda famistudio_chn_vrc7_prev_hi, y
001057r 4                   and #$cf ; Remove trigger + sustain
001057r 4                   sta famistudio_chn_vrc7_prev_hi, y
001057r 4                   sta FAMISTUDIO_VRC7_REG_WRITE
001057r 4                   jsr famistudio_vrc7_wait_reg_write
001057r 4               
001057r 4                   rts
001057r 4               
001057r 4               @check_release:
001057r 4               
001057r 4                   lda famistudio_chn_vrc7_trigger,y
001057r 4                   bpl @check_attack
001057r 4               
001057r 4                   @release:
001057r 4               
001057r 4                       lda famistudio_chn_vrc7_prev_hi, y
001057r 4                       and #$ef ; remove trigger
001057r 4                       sta famistudio_chn_vrc7_prev_hi, y
001057r 4                       jmp @musical_note
001057r 4               
001057r 4               @check_attack:
001057r 4               
001057r 4                   lda famistudio_chn_vrc7_trigger,y
001057r 4                   and #1
001057r 4                   beq @musical_note
001057r 4               
001057r 4                   @attack:
001057r 4               
001057r 4                       lda famistudio_chn_vrc7_prev_hi, y
001057r 4                       and #$10
001057r 4                       beq @prev_note_had_release
001057r 4               
001057r 4                       ; Two attacks in a row, need to insert a dummy release.
001057r 4                       @prev_note_had_attack:
001057r 4               
001057r 4                           lda famistudio_vrc7_reg_table_hi,y
001057r 4                           sta FAMISTUDIO_VRC7_REG_SEL
001057r 4                           jsr famistudio_vrc7_wait_reg_select
001057r 4                           lda #0
001057r 4                           sta FAMISTUDIO_VRC7_REG_WRITE
001057r 4                           jsr famistudio_vrc7_wait_reg_write
001057r 4                           jmp @musical_note
001057r 4               
001057r 4                       @prev_note_had_release:
001057r 4                           lda famistudio_chn_vrc7_prev_hi, y
001057r 4                           ora #$10
001057r 4                           sta famistudio_chn_vrc7_prev_hi, y
001057r 4               
001057r 4               @musical_note:
001057r 4               
001057r 4                   ; Read/multiply volume
001057r 4                   ldx famistudio_vrc7_env_table,y
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_chn_volume_track+FAMISTUDIO_VRC7_CH0_IDX, y
001057r 4                       .if FAMISTUDIO_USE_VOLUME_SLIDES
001057r 4                           ; During a slide, the lower 4 bits are fraction.
001057r 4                           and #$f0
001057r 4                       .endif
001057r 4                       ora famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .else
001057r 4                       lda famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .endif
001057r 4                   tax
001057r 4               
001057r 4                   ; Write volume
001057r 4                   lda famistudio_vrc7_vol_table,y
001057r 4                   sta FAMISTUDIO_VRC7_REG_SEL
001057r 4                   jsr famistudio_vrc7_wait_reg_select
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_volume_table,x
001057r 4                       tax
001057r 4                   .endif
001057r 4                   lda famistudio_vrc7_invert_vol_table,x
001057r 4                   ora famistudio_chn_vrc7_patch,y
001057r 4                   sta FAMISTUDIO_VRC7_REG_WRITE
001057r 4                   jsr famistudio_vrc7_wait_reg_write
001057r 4               
001057r 4                   ; Read note, apply arpeggio
001057r 4                   ldx famistudio_vrc7_env_table,y
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_VRC7_CH0_IDX,y
001057r 4                   clc
001057r 4                   adc famistudio_env_value+FAMISTUDIO_ENV_NOTE_OFF,x
001057r 4                   tax
001057r 4               
001057r 4                   ; Apply pitch envelope, fine pitch & slides
001057r 4                   famistudio_get_note_pitch_macro FAMISTUDIO_VRC7_CH0_PITCH_ENV_IDX, FAMISTUDIO_VRC7_PITCH_SHIFT, famistudio_vrc7_note_table_lsb, famistudio_vrc7_note_table_msb
001057r 4               
001057r 4                   ; Compute octave by dividing by 2 until we are <= 512 (0x100).
001057r 4                   ldx #0
001057r 4                   @compute_octave_loop:
001057r 4                       lda @pitch+1
001057r 4                       cmp #2
001057r 4                       bcc @octave_done
001057r 4                       lsr
001057r 4                       sta @pitch+1
001057r 4                       ror @pitch+0
001057r 4                       inx
001057r 4                       jmp @compute_octave_loop
001057r 4               
001057r 4                   @octave_done:
001057r 4               
001057r 4                   ; Write pitch (lo)
001057r 4                   lda famistudio_vrc7_reg_table_lo,y
001057r 4                   sta FAMISTUDIO_VRC7_REG_SEL
001057r 4                   jsr famistudio_vrc7_wait_reg_select
001057r 4               
001057r 4                   lda @pitch+0
001057r 4                   sta FAMISTUDIO_VRC7_REG_WRITE
001057r 4                   jsr famistudio_vrc7_wait_reg_write
001057r 4               
001057r 4                   ; Write pitch (hi)
001057r 4                   lda famistudio_chn_vrc7_prev_hi, y
001057r 4                   and #$10
001057r 4                   sta @tmp
001057r 4               
001057r 4                   lda famistudio_vrc7_reg_table_hi,y
001057r 4                   sta FAMISTUDIO_VRC7_REG_SEL
001057r 4                   jsr famistudio_vrc7_wait_reg_select
001057r 4               
001057r 4                   txa
001057r 4                   asl
001057r 4                   ora #$20
001057r 4                   ora @pitch+1
001057r 4                   ora @tmp
001057r 4                   sta famistudio_chn_vrc7_prev_hi, y
001057r 4                   sta FAMISTUDIO_VRC7_REG_WRITE
001057r 4                   jsr famistudio_vrc7_wait_reg_write
001057r 4               
001057r 4                   lda #0
001057r 4                   sta famistudio_chn_vrc7_trigger,y
001057r 4               
001057r 4                   rts
001057r 4               
001057r 4               .endif
001057r 4               
001057r 4               .if FAMISTUDIO_EXP_EPSM
001057r 4               FM_ENV_OFFSET = FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT*4
001057r 4               RHY_ENV_OFFSET = FM_ENV_OFFSET + FAMISTUDIO_EXP_EPSM_FM_CHN_CNT*2
001057r 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT > 0
001057r 4               famistudio_epsm_vol_table_op1:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_TL, FAMISTUDIO_EPSM_REG_TL+1, FAMISTUDIO_EPSM_REG_TL+2,FAMISTUDIO_EPSM_REG_TL, FAMISTUDIO_EPSM_REG_TL+1, FAMISTUDIO_EPSM_REG_TL+2
001057r 4               famistudio_epsm_vol_table_op2:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_TL+8, FAMISTUDIO_EPSM_REG_TL+1+8, FAMISTUDIO_EPSM_REG_TL+2+8,FAMISTUDIO_EPSM_REG_TL+8, FAMISTUDIO_EPSM_REG_TL+1+8, FAMISTUDIO_EPSM_REG_TL+2+8
001057r 4               famistudio_epsm_vol_table_op3:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_TL+4, FAMISTUDIO_EPSM_REG_TL+1+4, FAMISTUDIO_EPSM_REG_TL+2+4,FAMISTUDIO_EPSM_REG_TL+4, FAMISTUDIO_EPSM_REG_TL+1+4, FAMISTUDIO_EPSM_REG_TL+2+4
001057r 4               famistudio_epsm_vol_table_op4:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_TL+12, FAMISTUDIO_EPSM_REG_TL+1+12, FAMISTUDIO_EPSM_REG_TL+2+12,FAMISTUDIO_EPSM_REG_TL+12, FAMISTUDIO_EPSM_REG_TL+1+12, FAMISTUDIO_EPSM_REG_TL+2+12
001057r 4               famistudio_epsm_fm_vol_table:
001057r 4                   .byte $7e, $65, $50, $3f, $32, $27, $1e, $17, $12, $0d, $09, $06, $04, $02, $01, $00
001057r 4               famistudio_epsm_fm_stereo_reg_table:
001057r 4                   .byte $b4,$b5,$b6
001057r 4                   .byte $b4,$b5,$b6
001057r 4               famistudio_channel_epsm_chan_table:
001057r 4                   .byte $00, $01, $02
001057r 4                   .byte $00, $01, $02
001057r 4               .endif
001057r 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
001057r 4               famistudio_epsm_rhythm_key_table:
001057r 4                   .byte $01,$02,$04,$08,$10,$20
001057r 4               famistudio_epsm_rhythm_reg_table:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_RHY_BD, FAMISTUDIO_EPSM_REG_RHY_SD, FAMISTUDIO_EPSM_REG_RHY_TC, FAMISTUDIO_EPSM_REG_RHY_HH, FAMISTUDIO_EPSM_REG_RHY_TOM, FAMISTUDIO_EPSM_REG_RHY_RIM
001057r 4               .endif
001057r 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT > 0
001057r 4               famistudio_epsm_reg_table_lo:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_FN_LO, FAMISTUDIO_EPSM_REG_FN_LO2, FAMISTUDIO_EPSM_REG_FN_LO3, FAMISTUDIO_EPSM_REG_FN_LO, FAMISTUDIO_EPSM_REG_FN_LO2, FAMISTUDIO_EPSM_REG_FN_LO3
001057r 4               famistudio_epsm_reg_table_hi:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_FN_HI, FAMISTUDIO_EPSM_REG_FN_HI2, FAMISTUDIO_EPSM_REG_FN_HI3, FAMISTUDIO_EPSM_REG_FN_HI, FAMISTUDIO_EPSM_REG_FN_HI2, FAMISTUDIO_EPSM_REG_FN_HI3
001057r 4               famistudio_epsm_vol_table:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_VOL_1, FAMISTUDIO_EPSM_REG_VOL_2, FAMISTUDIO_EPSM_REG_VOL_3, FAMISTUDIO_EPSM_REG_VOL_4, FAMISTUDIO_EPSM_REG_VOL_5, FAMISTUDIO_EPSM_REG_VOL_6
001057r 4               famistudio_epsm_fm_env_table:
001057r 4                   .byte FAMISTUDIO_EPSM_CH0_ENVS + FM_ENV_OFFSET
001057r 4                   .byte FAMISTUDIO_EPSM_CH0_ENVS + FM_ENV_OFFSET + 2
001057r 4                   .byte FAMISTUDIO_EPSM_CH0_ENVS + FM_ENV_OFFSET + 4
001057r 4                   .byte FAMISTUDIO_EPSM_CH0_ENVS + FM_ENV_OFFSET + 6
001057r 4                   .byte FAMISTUDIO_EPSM_CH0_ENVS + FM_ENV_OFFSET + 8
001057r 4                   .byte FAMISTUDIO_EPSM_CH0_ENVS + FM_ENV_OFFSET + 10
001057r 4               famistudio_epsm_register_order:
001057r 4                   .byte $B0, $B4, $30, $50, $60, $70, $80, $90, $38, $58, $68, $78, $88, $98, $34, $54, $64, $74, $84, $94, $3c, $5c, $6c, $7c, $8c, $9c, $40, $48, $44, $4c, $22 ;40,48,44,4c replaced for not sending data there during instrument updates,
001057r 4               famistudio_epsm_channel_key_table:
001057r 4                   .byte $f0, $f1, $f2, $f4, $f5, $f6
001057r 4               .endif
001057r 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
001057r 4               famistudio_epsm_sqr_reg_table_lo:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_LO_A, FAMISTUDIO_EPSM_REG_LO_B, FAMISTUDIO_EPSM_REG_LO_C
001057r 4               famistudio_epsm_sqr_reg_table_hi:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_HI_A, FAMISTUDIO_EPSM_REG_HI_B, FAMISTUDIO_EPSM_REG_HI_C
001057r 4               famistudio_epsm_square_vol_table:
001057r 4                   .byte FAMISTUDIO_EPSM_REG_VOL_A, FAMISTUDIO_EPSM_REG_VOL_B, FAMISTUDIO_EPSM_REG_VOL_C
001057r 4               famistudio_epsm_square_env_table:
001057r 4                   .byte FAMISTUDIO_EPSM_CH0_ENVS, FAMISTUDIO_EPSM_CH1_ENVS, FAMISTUDIO_EPSM_CH2_ENVS
001057r 4               famistudio_epsm_square_noise_mask:
001057r 4                   .byte $08, $10, $20
001057r 4               .endif
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_EPSM_SQUARE_CHANNEL_SOUND (internal)
001057r 4               ;
001057r 4               ; Updates the EPSM audio registers for a given channel.
001057r 4               ;
001057r 4               ; [in] y: EPSM channel idx (0,1,2)
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
001057r 4               famistudio_update_epsm_square_channel_sound:
001057r 4               
001057r 4                   @pitch   = famistudio_ptr1
001057r 4                   @env_bit = famistudio_ptr1_lo
001057r 4               
001057r 4                   ; These are shared by all 3 channels.
001057r 4                   @env_period = famistudio_ptr0
001057r 4                   @attack     = famistudio_ptr2
001057r 4                   @env_shape  = famistudio_r1
001057r 4                   @env_octave = famistudio_r2
001057r 4                   @noise_freq = famistudio_r3
001057r 4               
001057r 4                   ; First channel will clear these, last channel will write the registers.
001057r 4                   cpy #0
001057r 4                   bne @not_first_channel
001057r 4                   sty @env_shape
001057r 4                   sty @noise_freq
001057r 4                   sty @attack
001057r 4                   lda #$80 ; This mean 'manual pitch'
001057r 4                   sty @env_octave
001057r 4               
001057r 4               @not_first_channel:
001057r 4                   ldx #0 ; This will fetch volume 0.
001057r 4                   stx @env_bit
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_EPSM_CH0_IDX,y
001057r 4                   bne @nocut
001057r 4                   jmp @update_volume
001057r 4               
001057r 4               @nocut:
001057r 4                   ; Store noise if mixer has it enabled
001057r 4                   ldx famistudio_epsm_square_env_table,y
001057r 4                   lda famistudio_env_value+FAMISTUDIO_ENV_MIXER_IDX_OFF,x
001057r 4                   and famistudio_epsm_square_noise_mask,y
001057r 4                   bne @nonoise
001057r 4                   lda famistudio_env_value+FAMISTUDIO_ENV_NOISE_IDX_OFF,x
001057r 4                   sta @noise_freq
001057r 4               
001057r 4               @nonoise:
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_EPSM_CH0_IDX,y
001057r 4                   ; Read note, apply arpeggio
001057r 4                   clc
001057r 4                   ldx famistudio_epsm_square_env_table,y
001057r 4                   adc famistudio_env_value+FAMISTUDIO_ENV_NOTE_OFF,x
001057r 4                   tax
001057r 4               
001057r 4                   ; Apply pitch envelope, fine pitch & slides
001057r 4                   famistudio_get_note_pitch_macro FAMISTUDIO_EPSM_CH0_PITCH_ENV_IDX, 0, famistudio_epsm_s_note_table_lsb, famistudio_epsm_s_note_table_msb
001057r 4               
001057r 4                   ; Write pitch
001057r 4                   lda famistudio_epsm_sqr_reg_table_lo,y
001057r 4                   sta FAMISTUDIO_EPSM_ADDR
001057r 4                   lda @pitch+0
001057r 4                   sta FAMISTUDIO_EPSM_DATA
001057r 4                   lda famistudio_epsm_sqr_reg_table_hi,y
001057r 4                   sta FAMISTUDIO_EPSM_ADDR
001057r 4                   lda @pitch+1
001057r 4                   sta FAMISTUDIO_EPSM_DATA
001057r 4               
001057r 4                   ; Store env shape + period if active.
001057r 4                   lda famistudio_epsm_chn_env_shape,y
001057r 4                   and #$0f
001057r 4                   beq @noenv
001057r 4                   sta @env_shape
001057r 4               
001057r 4                   ; If bit 7 of any channel is on, well reset the envelope.
001057r 4                   lda famistudio_epsm_chn_env_shape,y
001057r 4                   ora @attack
001057r 4                   sta @attack
001057r 4                   lda famistudio_epsm_chn_env_shape,y
001057r 4                   and #$0f
001057r 4                   sta famistudio_epsm_chn_env_shape,y
001057r 4               
001057r 4                   ; Store auto-period settings
001057r 4                   lda famistudio_epsm_chn_env_octave,y
001057r 4                   sta @env_octave
001057r 4                   cmp #$80 ; This mean 'manual pitch'
001057r 4                   beq @manual_period
001057r 4               
001057r 4                   @auto_period:
001057r 4                       lda @pitch+0
001057r 4                       sta @env_period+0
001057r 4                       lda @pitch+1
001057r 4                       sta @env_period+1
001057r 4                       jmp @set_envelope_volume_flag
001057r 4               
001057r 4                   @manual_period:
001057r 4                       lda famistudio_epsm_env_period_lo
001057r 4                       sta @env_period+0
001057r 4                       lda famistudio_epsm_env_period_hi
001057r 4                       sta @env_period+1
001057r 4               
001057r 4               @set_envelope_volume_flag:
001057r 4                   lda #$10
001057r 4               
001057r 4               @noenv:
001057r 4                   sta @env_bit
001057r 4               
001057r 4                   ; Read/multiply volume
001057r 4                   ldx famistudio_epsm_square_env_table,y
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_chn_volume_track+FAMISTUDIO_EPSM_CH0_IDX, y
001057r 4                       .if FAMISTUDIO_USE_VOLUME_SLIDES
001057r 4                           ; During a slide, the lower 4 bits are fraction.
001057r 4                           and #$f0
001057r 4                       .endif
001057r 4                       ora famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .else
001057r 4                       lda famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .endif
001057r 4                   tax
001057r 4               
001057r 4               @update_volume:
001057r 4                   ; Write volume
001057r 4                   lda famistudio_epsm_square_vol_table,y
001057r 4                   sta FAMISTUDIO_EPSM_ADDR
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_volume_table,x
001057r 4                       ora @env_bit
001057r 4                   .else
001057r 4                       txa
001057r 4                       ora @env_bit
001057r 4                   .endif
001057r 4                   sta FAMISTUDIO_EPSM_DATA
001057r 4               
001057r 4               @write_shared_registers:
001057r 4                   ; Channel 2 writes all 5 shared registers.
001057r 4                   cpy #(FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT - 1)
001057r 4                   bne @done
001057r 4                   lda @env_shape
001057r 4                   beq @write_shared_noise
001057r 4                   ldx @env_octave
001057r 4                   cpx #$80
001057r 4                   beq @write_shared_env_register
001057r 4               
001057r 4               @compute_auto_period:
001057r 4                   cpx #0
001057r 4                   beq @write_shared_env_register
001057r 4                   bpl @positive_octave_loop
001057r 4               
001057r 4                   @negative_octave_loop:
001057r 4                           asl @env_period+0
001057r 4                           rol @env_period+1
001057r 4                           inx
001057r 4                           bne @negative_octave_loop
001057r 4                       beq @write_shared_env_register
001057r 4               
001057r 4                   @positive_octave_loop:
001057r 4                       cpx #1
001057r 4                       bne @do_shift
001057r 4                       @rounding:
001057r 4                           lda @env_period+0
001057r 4                           and #1
001057r 4                           beq @do_shift
001057r 4                           lda @env_period+0
001057r 4                           clc
001057r 4                           adc #1
001057r 4                           sta @env_period+0
001057r 4                           bcc @do_shift
001057r 4                           inc @env_period+1
001057r 4                       @do_shift:
001057r 4                           lsr @env_period+1
001057r 4                           ror @env_period+0
001057r 4                           dex
001057r 4                           bne @positive_octave_loop
001057r 4               
001057r 4               @write_shared_env_register:
001057r 4               
001057r 4                   ; Envelope period.
001057r 4                   lda #FAMISTUDIO_EPSM_REG_ENV_LO
001057r 4                   sta FAMISTUDIO_EPSM_ADDR
001057r 4                   lda @env_period+0
001057r 4                   sta FAMISTUDIO_EPSM_DATA
001057r 4                   lda #FAMISTUDIO_EPSM_REG_ENV_HI
001057r 4                   sta FAMISTUDIO_EPSM_ADDR
001057r 4                   lda @env_period+1
001057r 4                   sta FAMISTUDIO_EPSM_DATA
001057r 4               
001057r 4                   ; Reset envelope if there was an attack.
001057r 4                   lda @attack
001057r 4                   bpl @write_shared_noise
001057r 4                       lda #FAMISTUDIO_EPSM_REG_SHAPE
001057r 4                       sta FAMISTUDIO_EPSM_ADDR
001057r 4                       lda @env_shape
001057r 4                       sta FAMISTUDIO_EPSM_DATA
001057r 4               
001057r 4               @write_shared_noise:
001057r 4               
001057r 4                   ; Tone/noise enabled.
001057r 4                   lda #FAMISTUDIO_EPSM_REG_TONE
001057r 4                   sta FAMISTUDIO_EPSM_ADDR
001057r 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT = 3
001057r 4                   lda famistudio_env_value+FAMISTUDIO_EPSM_CH2_ENVS+FAMISTUDIO_ENV_MIXER_IDX_OFF
001057r 4                   asl
001057r 4                   ora famistudio_env_value+FAMISTUDIO_EPSM_CH1_ENVS+FAMISTUDIO_ENV_MIXER_IDX_OFF
001057r 4                   asl
001057r 4                   ora famistudio_env_value+FAMISTUDIO_EPSM_CH0_ENVS+FAMISTUDIO_ENV_MIXER_IDX_OFF
001057r 4               .elseif FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT = 2
001057r 4                   lda famistudio_env_value+FAMISTUDIO_EPSM_CH1_ENVS+FAMISTUDIO_ENV_MIXER_IDX_OFF
001057r 4                   asl
001057r 4                   ora famistudio_env_value+FAMISTUDIO_EPSM_CH0_ENVS+FAMISTUDIO_ENV_MIXER_IDX_OFF
001057r 4               .else
001057r 4                   lda famistudio_env_value+FAMISTUDIO_EPSM_CH0_ENVS+FAMISTUDIO_ENV_MIXER_IDX_OFF
001057r 4               .endif
001057r 4                   sta FAMISTUDIO_EPSM_DATA
001057r 4               
001057r 4                   ; Noise freq
001057r 4                   lda #FAMISTUDIO_EPSM_REG_NOISE
001057r 4                   sta FAMISTUDIO_EPSM_ADDR
001057r 4                   lda @noise_freq
001057r 4                   sta FAMISTUDIO_EPSM_DATA
001057r 4               
001057r 4                   lda #0
001057r 4                   sta famistudio_epsm_env_override
001057r 4               
001057r 4               @done:
001057r 4                   rts
001057r 4               
001057r 4               .endif
001057r 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT > 0
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_EPSM_FM_CHANNEL_SOUND (internal)
001057r 4               ;
001057r 4               ; Updates the EPSM audio registers for a given channel.
001057r 4               ;
001057r 4               ; [in] y: EPSM channel idx (0,1,2,3,4,5)
001057r 4               ;======================================================================================================================
001057r 4               famistudio_update_epsm_fm_channel_sound:
001057r 4               
001057r 4                   @pitch      = famistudio_ptr1
001057r 4                   @reg_offset = famistudio_r1
001057r 4                   @vol_offset = famistudio_r0
001057r 4                   @chan_idx   = famistudio_r2
001057r 4               
001057r 4                   sty @chan_idx
001057r 4                   ; If the writes are done to channels 0-2, use FAMISTUDIO_EPSM_REG_SEL0 if 3-5 use FAMISTUDIO_EPSM_REG_SEL1
001057r 4                   ; This reg_offset stores the difference so we can later load it into x and do sta FAMISTUDIO_EPSM_REG_SEL0, x
001057r 4                   ; to account for the difference
001057r 4                   lda #0
001057r 4                   cpy #3
001057r 4                   bcc @fm_0_2
001057r 4                       lda #2
001057r 4                   @fm_0_2:
001057r 4                   sta @reg_offset
001057r 4               
001057r 4               @check_cut:
001057r 4               
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_EPSM_CHAN_FM_START,y
001057r 4                   bne @nocut
001057r 4               
001057r 4               @cut:
001057r 4                   ; Untrigger note.
001057r 4                   lda #FAMISTUDIO_EPSM_REG_KEY
001057r 4                   sta FAMISTUDIO_EPSM_REG_SEL0
001057r 4               
001057r 4                   lda famistudio_epsm_channel_key_table, y
001057r 4                   and #$0f ; remove trigger
001057r 4                   sta FAMISTUDIO_EPSM_REG_WRITE0
001057r 4               
001057r 4                   ;Mute channel
001057r 4                   ldx @reg_offset
001057r 4                   lda famistudio_epsm_fm_stereo_reg_table,y
001057r 4                   sta FAMISTUDIO_EPSM_REG_SEL0,x
001057r 4                   lda #$00
001057r 4                   sta FAMISTUDIO_EPSM_REG_WRITE0,x
001057r 4                   rts
001057r 4               
001057r 4               @nocut:
001057r 4               
001057r 4                   ; Check if the channel needs to stop the note
001057r 4               
001057r 4                   ; Un-trigger previous note if needed.
001057r 4                   lda famistudio_chn_epsm_trigger,y
001057r 4                   beq @update_instrument_check
001057r 4                   @untrigger_prev_note:
001057r 4                       ; Untrigger note.
001057r 4                       lda #FAMISTUDIO_EPSM_REG_KEY
001057r 4                       sta FAMISTUDIO_EPSM_REG_SEL0
001057r 4               
001057r 4                       lda famistudio_epsm_channel_key_table, y
001057r 4                       and #$0f ; remove trigger
001057r 4                       sta FAMISTUDIO_EPSM_REG_WRITE0
001057r 4               ;        nop
001057r 4               ;        nop
001057r 4               ;        nop
001057r 4                       nop
001057r 4                       nop
001057r 4                       nop
001057r 4               ;        rts
001057r 4                   @update_instrument_check:
001057r 4                   lda famistudio_chn_epsm_fm_instrument,y
001057r 4               	cmp #$ff
001057r 4               	beq @no_instrument_update
001057r 4               	jsr update_fm_instrument
001057r 4               	ldy @chan_idx
001057r 4               	lda #$ff
001057r 4               	sta famistudio_chn_epsm_fm_instrument,y
001057r 4               	@no_instrument_update:
001057r 4               
001057r 4                   ldx @reg_offset
001057r 4                   lda famistudio_epsm_fm_stereo_reg_table,y
001057r 4                   sta FAMISTUDIO_EPSM_REG_SEL0,x
001057r 4                   lda famistudio_chn_epsm_fm_stereo,y
001057r 4                   sta FAMISTUDIO_EPSM_REG_WRITE0,x
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_EPSM_CHAN_FM_START,y
001057r 4                   ; Read note, apply arpeggio
001057r 4                   clc
001057r 4                   ldx famistudio_epsm_fm_env_table,y
001057r 4                   adc famistudio_env_value+FAMISTUDIO_ENV_NOTE_OFF,x
001057r 4                   tax
001057r 4               
001057r 4                   ; Apply pitch envelope, fine pitch & slides
001057r 4                   famistudio_get_note_pitch_macro (FAMISTUDIO_EPSM_CH0_PITCH_ENV_IDX + FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT), FAMISTUDIO_EPSM_PITCH_SHIFT, famistudio_epsm_note_table_lsb, famistudio_epsm_note_table_msb
001057r 4               
001057r 4                   ; Compute octave by dividing by 2 until we are <= 512 (0x100).
001057r 4                   ldx #0
001057r 4               
001057r 4                   lda @pitch+1
001057r 4                   cmp #$02 ; check if shifted the pitch to a 9 bit number yet.
001057r 4                   bcc @octave_done
001057r 4                   @compute_octave_loop:
001057r 4                       inx
001057r 4                       lsr
001057r 4                       ror @pitch+0
001057r 4                       cmp #$02
001057r 4                       bcc @octave_done
001057r 4                       bcs @compute_octave_loop ;unconditional
001057r 4                   @octave_done:
001057r 4                   sta @pitch+1
001057r 4               
001057r 4                   ; 9 bit pitch * 4 to get the pitch back to an 11 bit number
001057r 4                   ; the final 16 bit pitch will look like 00ooohhh llllllll where o = octave, h = pitch bits 8-11, l = pitch bits 0-8
001057r 4                   asl @pitch+0
001057r 4                   rol @pitch+1
001057r 4                   asl @pitch+0
001057r 4                   rol @pitch+1
001057r 4               
001057r 4                   txa ; x holds the 3 bit octave information. octave = log2(pitch_hi)
001057r 4                   asl
001057r 4                   asl
001057r 4                   asl
001057r 4                   ora @pitch+1
001057r 4                   sta @pitch+1
001057r 4               
001057r 4                   @write_hi_period:
001057r 4               
001057r 4                   ; Write pitch (hi)
001057r 4                   ldx @reg_offset
001057r 4                   lda famistudio_epsm_reg_table_hi,y
001057r 4                   sta FAMISTUDIO_EPSM_REG_SEL0,x
001057r 4                   lda @pitch+1
001057r 4                   sta FAMISTUDIO_EPSM_REG_WRITE0,x
001057r 4               
001057r 4                   ; Write pitch (lo)
001057r 4                   lda famistudio_epsm_reg_table_lo,y
001057r 4                   sta FAMISTUDIO_EPSM_REG_SEL0,x
001057r 4                   lda @pitch+0
001057r 4                   sta FAMISTUDIO_EPSM_REG_WRITE0,x
001057r 4               
001057r 4                   ; Read/multiply volume
001057r 4                   ldx famistudio_epsm_fm_env_table,y
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_chn_volume_track+FAMISTUDIO_EPSM_CHAN_FM_START, y
001057r 4                       .if FAMISTUDIO_USE_VOLUME_SLIDES
001057r 4                           ; During a slide, the lower 4 bits are fraction.
001057r 4                           and #$f0
001057r 4                       .endif
001057r 4                       ora famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .else
001057r 4                       lda famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .endif
001057r 4               
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       tax
001057r 4                       lda famistudio_volume_table,x
001057r 4                   .endif
001057r 4                       sta @vol_offset
001057r 4               
001057r 4                   @update_volume:
001057r 4                   ldx @vol_offset
001057r 4                   lda famistudio_epsm_fm_vol_table,x
001057r 4                   sta @vol_offset ; store volume level here
001057r 4               
001057r 4                   ldx @reg_offset
001057r 4                   lda famistudio_chn_epsm_alg,y
001057r 4                   cmp #4
001057r 4                   bcc @op_4 ; 0-1-2-3
001057r 4                   beq @op_2_4 ; 4
001057r 4                   cmp #7 ; 5
001057r 4                   bcc @op_2_3_4 ; 6
001057r 4               	           ; 7
001057r 4                   @op_1_2_3_4:
001057r 4                       lda famistudio_epsm_vol_table_op1,y
001057r 4                       sta FAMISTUDIO_EPSM_REG_SEL0,x
001057r 4                       lda famistudio_chn_epsm_vol_op1,y
001057r 4                       clc
001057r 4                       adc @vol_offset
001057r 4                       bpl @save_op1
001057r 4                       lda #127
001057r 4                   @save_op1:
001057r 4                       sta FAMISTUDIO_EPSM_REG_WRITE0,x
001057r 4                   @op_2_3_4:
001057r 4                       lda famistudio_epsm_vol_table_op3,y
001057r 4                       sta FAMISTUDIO_EPSM_REG_SEL0,x
001057r 4                       lda famistudio_chn_epsm_vol_op3,y
001057r 4                       clc
001057r 4                       adc @vol_offset
001057r 4                       bpl @save_op3
001057r 4                       lda #127
001057r 4                   @save_op3:
001057r 4                       sta FAMISTUDIO_EPSM_REG_WRITE0,x
001057r 4                   @op_2_4:
001057r 4                       lda famistudio_epsm_vol_table_op2,y
001057r 4                       sta FAMISTUDIO_EPSM_REG_SEL0,x
001057r 4                       lda famistudio_chn_epsm_vol_op2,y
001057r 4                       clc
001057r 4                       adc @vol_offset
001057r 4                       bpl @save_op2
001057r 4                       lda #127
001057r 4                   @save_op2:
001057r 4                       sta FAMISTUDIO_EPSM_REG_WRITE0,x
001057r 4                   @op_4:
001057r 4                       ; Write volume
001057r 4                       lda famistudio_epsm_vol_table_op4,y ; 4
001057r 4                       sta FAMISTUDIO_EPSM_REG_SEL0,x ; 5
001057r 4                       lda famistudio_chn_epsm_vol_op4,y ; 4
001057r 4               	clc ; 2
001057r 4                       adc @vol_offset ; 3
001057r 4                       bpl @save_op4 ; 2/3
001057r 4                       lda #127 ; 2
001057r 4                   @save_op4:
001057r 4                       sta FAMISTUDIO_EPSM_REG_WRITE0,x ; 5  = 26/27
001057r 4               
001057r 4                       nop
001057r 4                       clc
001057r 4                       lda famistudio_chn_epsm_trigger,y
001057r 4                       bpl @no_release
001057r 4               
001057r 4               @release:
001057r 4                       ; Untrigger note.
001057r 4                       lda #FAMISTUDIO_EPSM_REG_KEY
001057r 4                       sta FAMISTUDIO_EPSM_REG_SEL0
001057r 4               
001057r 4                       lda famistudio_epsm_channel_key_table, y
001057r 4                       and #$0f ; remove trigger
001057r 4                       sta FAMISTUDIO_EPSM_REG_WRITE0
001057r 4               
001057r 4                       rts
001057r 4               @no_release:
001057r 4                       lda #0
001057r 4                       sta famistudio_chn_epsm_trigger,y
001057r 4                       lda #FAMISTUDIO_EPSM_REG_KEY
001057r 4                       sta FAMISTUDIO_EPSM_REG_SEL0
001057r 4                       lda famistudio_epsm_channel_key_table, y
001057r 4                       sta FAMISTUDIO_EPSM_REG_WRITE0
001057r 4               
001057r 4                   rts
001057r 4               
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_EPSM_WRITE_PATCH_REGISTER (internal)
001057r 4               ;
001057r 4               ; Internal function to set a EPSM instrument for a given channel
001057r 4               ;
001057r 4               ; [in] y/r0: channel index
001057r 4               ; [in] x:    index of first envelope of instrument
001057r 4               ; [in] a:    instrument index.
001057r 4               ;======================================================================================================================
001057r 4               .macro famistudio_epsm_write_patch_registers select, write
001057r 4               
001057r 4                   .local @loop_main_patch
001057r 4                   .local @loop_extra_patch
001057r 4                   .local @alg_4
001057r 4                   .local @alg_5_6
001057r 4                   .local @alg_0_1_2_3
001057r 4               
001057r 4                   ldy #30-5 ; we skip updating the 4 operators
001057r 4                   ldx @reg_offset
001057r 4                   @loop_extra_patch:
001057r 4                       txa	; 2
001057r 4                       ora famistudio_epsm_register_order,y ; 4
001057r 4                       sta select ; 4
001057r 4                       lda (@ex_patch),y ; 5
001057r 4                       sta write ; 4
001057r 4                       dey	; 2
001057r 4                       nop	; 2 DELAY FOR MESEN-X
001057r 4                       bpl @loop_extra_patch ; 3  ; =26
001057r 4               
001057r 4                   ldx @chan_idx2
001057r 4                   lda famistudio_chn_epsm_alg,x
001057r 4                   cmp #4
001057r 4                   bcc @alg_0_1_2_3 ; 0-1-2-3
001057r 4                   beq @alg_4 ; 4
001057r 4                   jmp @alg_5_6 ; 5
001057r 4                   @alg_0_1_2_3:
001057r 4                   ;3+2+1
001057r 4                   ldy #27
001057r 4                   ldx @reg_offset
001057r 4                   txa	; 2
001057r 4                   ora famistudio_epsm_register_order,y ; 4
001057r 4                   sta select ; 4
001057r 4                   lda (@ex_patch),y ; 5
001057r 4                   sta write ; 4
001057r 4                   nop	; 2 DELAY FOR MESEN-X
001057r 4                   @alg_4:
001057r 4                   ;3+1
001057r 4                   ldy #28
001057r 4                   ldx @reg_offset
001057r 4                   txa	; 2
001057r 4                   ora famistudio_epsm_register_order,y ; 4
001057r 4                   sta select ; 4
001057r 4                   lda (@ex_patch),y ; 5
001057r 4                   sta write ; 4
001057r 4                   nop	; 2 DELAY FOR MESEN-X
001057r 4                   @alg_5_6:
001057r 4                   ;1
001057r 4                   ldy #26
001057r 4                   ldx @reg_offset
001057r 4                   txa	; 2
001057r 4                   ora famistudio_epsm_register_order,y ; 4
001057r 4                   sta select ; 4
001057r 4                   lda (@ex_patch),y ; 5
001057r 4                   sta write ; 4
001057r 4                   nop	; 2 DELAY FOR MESEN-X
001057r 4               .endmacro
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_EPSM_FM_INSTRUMENT (internal)
001057r 4               ;
001057r 4               ; Updates the EPSM audio registers for a given channel.
001057r 4               ;
001057r 4               ; [in] y: EPSM channel idx (0,1,2,3,4,5)
001057r 4               ;======================================================================================================================
001057r 4                   ; Now we are dealing with either a FM or Rhythm instrument. a = channel index
001057r 4                   ; if we are an FM instrument then there is a offset we need to apply to the register select
001057r 4               
001057r 4                   ; Skip over the two SSG specific envelopes by jumping up 4 bytes
001057r 4               update_fm_instrument:
001057r 4                   @ptr          = famistudio_ptr1
001057r 4                   @env_ptr      = famistudio_ptr2
001057r 4                   @ex_patch     = famistudio_ptr2
001057r 4                   @chan_idx     = famistudio_r0
001057r 4                   @chan_idx2    = famistudio_r2
001057r 4                   @update_flags = famistudio_r1 ; bit 7 = no attack, bit 6 = has set delayed cut
001057r 4                   @reg_offset   = famistudio_r3
001057r 4                   jsr famistudio_get_exp_inst_ptr
001057r 4                   clc
001057r 4                   tya
001057r 4                   adc #14 ; skip over envelopes + square stuff.
001057r 4                   tay
001057r 4                   ; And then read the pointer to the extended instrument patch data
001057r 4                   lda (@ptr),y
001057r 4                   sta @ex_patch
001057r 4                   iny
001057r 4                   lda (@ptr),y
001057r 4                   sta @ex_patch+1
001057r 4               
001057r 4               @fm_channel:
001057r 4                   ldx @chan_idx2
001057r 4                   ; FM channel 1-6, we need to look up the register select offset from the table
001057r 4                   lda famistudio_channel_epsm_chan_table,x
001057r 4                   sta @reg_offset
001057r 4                   ldy #0
001057r 4                   ; Now we need to store the algorithm and stereo for later use
001057r 4                   lda (@ex_patch),y
001057r 4                   and #$07
001057r 4                   sta famistudio_chn_epsm_alg,x ;store algorithm
001057r 4                   iny
001057r 4                   lda (@ex_patch),y
001057r 4                   sta famistudio_chn_epsm_fm_stereo ,x
001057r 4                   dey
001057r 4               
001057r 4                   ; Now if we are channels 1-3 then we use @reg_set_0, otherwise for 4-6 its reg set 1
001057r 4                   lda @chan_idx2
001057r 4                   cmp #3
001057r 4                   bpl @reg_set_1
001057r 4               
001057r 4                   @reg_set_0:
001057r 4                       famistudio_epsm_write_patch_registers FAMISTUDIO_EPSM_REG_SEL0, FAMISTUDIO_EPSM_REG_WRITE0
001057r 4                       jmp @last_reg
001057r 4               
001057r 4                   @reg_set_1:
001057r 4                       famistudio_epsm_write_patch_registers FAMISTUDIO_EPSM_REG_SEL1, FAMISTUDIO_EPSM_REG_WRITE1
001057r 4                       nop
001057r 4               
001057r 4                   @last_reg:
001057r 4                       ldy #30 ; last reg patch ptr
001057r 4                       lda #$22 ; famistudio_epsm_register_order,x
001057r 4                       clc
001057r 4                       adc @reg_offset
001057r 4                       sta FAMISTUDIO_EPSM_REG_SEL0
001057r 4                       lda (@ex_patch),y
001057r 4                       sta FAMISTUDIO_EPSM_REG_WRITE0
001057r 4                       lda @chan_idx2
001057r 4                       tax
001057r 4                       ldy #26
001057r 4                       lda (@ex_patch),y
001057r 4                       sta famistudio_chn_epsm_vol_op1,x
001057r 4                       iny
001057r 4                       lda (@ex_patch),y
001057r 4                       sta famistudio_chn_epsm_vol_op2,x
001057r 4                       iny
001057r 4                       lda (@ex_patch),y
001057r 4                       sta famistudio_chn_epsm_vol_op3,x
001057r 4                       iny
001057r 4                       lda (@ex_patch),y
001057r 4                       sta famistudio_chn_epsm_vol_op4,x
001057r 4                   @done:
001057r 4               rts
001057r 4               .endif
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_EPSM_RHYTHM_CHANNEL_SOUND (internal)
001057r 4               ;
001057r 4               ; Updates the EPSM audio registers for a given channel.
001057r 4               ;
001057r 4               ; [in] y: EPSM channel idx (0,1,2,3,4,5)
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
001057r 4               famistudio_update_epsm_rhythm_channel_sound:
001057r 4               
001057r 4                   @pitch = famistudio_ptr1
001057r 4               
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_EPSM_CHAN_RHYTHM_START,y
001057r 4                   bne @nocut
001057r 4                   sta famistudio_chn_epsm_trigger+FAMISTUDIO_EXP_EPSM_FM_CHN_CNT,y
001057r 4                   ldx #0 ; This will fetch volume 0.
001057r 4                   beq @noupdate
001057r 4               
001057r 4               @nocut:
001057r 4               
001057r 4                   lda famistudio_chn_epsm_trigger+FAMISTUDIO_EXP_EPSM_FM_CHN_CNT,y
001057r 4                   cmp #$10
001057r 4                   beq @noupdate
001057r 4               
001057r 4                   ; Read/multiply volume
001057r 4                   ldx famistudio_chn_epsm_rhythm_volume,y
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_chn_volume_track+FAMISTUDIO_EPSM_CHAN_RHYTHM_START, y
001057r 4                       .if FAMISTUDIO_USE_VOLUME_SLIDES
001057r 4                           ; During a slide, the lower 4 bits are fraction.
001057r 4                           and #$f0
001057r 4                       .endif
001057r 4                       ora famistudio_chn_epsm_rhythm_volume,y
001057r 4                   .else
001057r 4                       lda famistudio_chn_epsm_rhythm_volume,y
001057r 4                   .endif
001057r 4                   tax
001057r 4               
001057r 4               @update_volume:
001057r 4                   ; Write volume
001057r 4                   lda famistudio_epsm_rhythm_reg_table,y
001057r 4                   sta FAMISTUDIO_EPSM_ADDR
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_volume_table,x
001057r 4                   .else
001057r 4                       txa
001057r 4                   .endif
001057r 4                       rol
001057r 4                       adc famistudio_chn_epsm_rhythm_stereo,y
001057r 4                       sta FAMISTUDIO_EPSM_DATA
001057r 4               
001057r 4                   lda #$10 ;FAMISTUDIO_EPSM_REG_RHY_KY
001057r 4                   sta famistudio_chn_epsm_trigger+FAMISTUDIO_EXP_EPSM_FM_CHN_CNT,y
001057r 4                   sta FAMISTUDIO_EPSM_ADDR
001057r 4                   nop ;Some delay needed before writing the rhythm key
001057r 4                   nop
001057r 4                   lda famistudio_epsm_rhythm_key_table,y
001057r 4                   sta FAMISTUDIO_EPSM_DATA
001057r 4               
001057r 4               @noupdate:
001057r 4                   rts
001057r 4               
001057r 4               .endif
001057r 4               .endif
001057r 4               
001057r 4               .if FAMISTUDIO_EXP_N163
001057r 4               
001057r 4               ; This is getting out of hand. Maybe we should compute those on the fly.
001057r 4               famistudio_n163_freq_table_lo:
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_LO - $00
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_LO - $08
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_LO - $10
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_LO - $18
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_LO - $20
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_LO - $28
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_LO - $30
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_LO - $38
001057r 4               famistudio_n163_freq_table_mid:
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_MID - $00
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_MID - $08
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_MID - $10
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_MID - $18
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_MID - $20
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_MID - $28
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_MID - $30
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_MID - $38
001057r 4               famistudio_n163_freq_table_hi:
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_HI - $00
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_HI - $08
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_HI - $10
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_HI - $18
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_HI - $20
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_HI - $28
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_HI - $30
001057r 4                   .byte FAMISTUDIO_N163_REG_FREQ_HI - $38
001057r 4               famistudio_n163_vol_table:
001057r 4                   .byte FAMISTUDIO_N163_REG_VOLUME - $00
001057r 4                   .byte FAMISTUDIO_N163_REG_VOLUME - $08
001057r 4                   .byte FAMISTUDIO_N163_REG_VOLUME - $10
001057r 4                   .byte FAMISTUDIO_N163_REG_VOLUME - $18
001057r 4                   .byte FAMISTUDIO_N163_REG_VOLUME - $20
001057r 4                   .byte FAMISTUDIO_N163_REG_VOLUME - $28
001057r 4                   .byte FAMISTUDIO_N163_REG_VOLUME - $30
001057r 4                   .byte FAMISTUDIO_N163_REG_VOLUME - $38
001057r 4               famistudio_n163_env_table:
001057r 4                   .byte FAMISTUDIO_N163_CH0_ENVS
001057r 4                   .byte FAMISTUDIO_N163_CH1_ENVS
001057r 4                   .byte FAMISTUDIO_N163_CH2_ENVS
001057r 4                   .byte FAMISTUDIO_N163_CH3_ENVS
001057r 4                   .byte FAMISTUDIO_N163_CH4_ENVS
001057r 4                   .byte FAMISTUDIO_N163_CH5_ENVS
001057r 4                   .byte FAMISTUDIO_N163_CH6_ENVS
001057r 4                   .byte FAMISTUDIO_N163_CH7_ENVS
001057r 4               .if FAMISTUDIO_USE_PHASE_RESET
001057r 4               famistudio_n163_phase_table_lo:
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_LO - $00
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_LO - $08
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_LO - $10
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_LO - $18
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_LO - $20
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_LO - $28
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_LO - $30
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_LO - $38
001057r 4               famistudio_n163_phase_table_mid:
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_MID - $00
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_MID - $08
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_MID - $10
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_MID - $18
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_MID - $20
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_MID - $28
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_MID - $30
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_MID - $38
001057r 4               famistudio_n163_phase_table_hi:
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_HI - $00
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_HI - $08
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_HI - $10
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_HI - $18
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_HI - $20
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_HI - $28
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_HI - $30
001057r 4                   .byte FAMISTUDIO_N163_REG_PHASE_HI - $38
001057r 4               .endif
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_N163_CHANNEL_SOUND (internal)
001057r 4               ;
001057r 4               ; Updates the N163 audio registers for a given channel.
001057r 4               ;
001057r 4               ; [in] y: N163 channel idx (0,1,2,3,4,5,6,7)
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               famistudio_update_n163_channel_sound:
001057r 4               
001057r 4                   @pitch    = famistudio_ptr1
001057r 4                   @pitch_hi = famistudio_r2
001057r 4               
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_N163_CH0_IDX,y
001057r 4                   bne @nocut
001057r 4                   ldx #0 ; This will fetch volume 0.
001057r 4                   jmp @update_volume
001057r 4               
001057r 4               @nocut:
001057r 4               
001057r 4                   jsr famistudio_update_n163_wave
001057r 4               
001057r 4                   ; Read note, apply arpeggio
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_N163_CH0_IDX,y
001057r 4                   clc
001057r 4                   ldx famistudio_n163_env_table,y
001057r 4                   adc famistudio_env_value+FAMISTUDIO_ENV_NOTE_OFF,x
001057r 4                   tax
001057r 4               
001057r 4                   ; Apply pitch envelope, fine pitch & slides
001057r 4                   famistudio_get_note_pitch_macro FAMISTUDIO_N163_CH0_PITCH_ENV_IDX, FAMISTUDIO_N163_PITCH_SHIFT, famistudio_n163_note_table_lsb, famistudio_n163_note_table_msb
001057r 4               
001057r 4                   ; Convert 16-bit -> 18-bit.
001057r 4                   asl @pitch+0
001057r 4                   rol @pitch+1
001057r 4                   lda #0
001057r 4                   adc #0
001057r 4                   sta @pitch_hi
001057r 4                   asl @pitch+0
001057r 4                   rol @pitch+1
001057r 4                   rol @pitch_hi
001057r 4               
001057r 4                   ; Write pitch
001057r 4                   lda famistudio_n163_freq_table_lo,y
001057r 4                   sta FAMISTUDIO_N163_ADDR
001057r 4                   lda @pitch+0
001057r 4                   sta FAMISTUDIO_N163_DATA
001057r 4                   lda famistudio_n163_freq_table_mid,y
001057r 4                   sta FAMISTUDIO_N163_ADDR
001057r 4                   lda @pitch+1
001057r 4                   sta FAMISTUDIO_N163_DATA
001057r 4                   lda famistudio_n163_freq_table_hi,y
001057r 4                   sta FAMISTUDIO_N163_ADDR
001057r 4                   lda famistudio_chn_n163_wave_len,y
001057r 4                   ora @pitch_hi
001057r 4                   sta FAMISTUDIO_N163_DATA
001057r 4               
001057r 4                   ; Read/multiply volume
001057r 4                   ldx famistudio_n163_env_table,y
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_chn_volume_track+FAMISTUDIO_N163_CH0_IDX, y
001057r 4                       .if FAMISTUDIO_USE_VOLUME_SLIDES
001057r 4                           ; During a slide, the lower 4 bits are fraction.
001057r 4                           and #$f0
001057r 4                       .endif
001057r 4                       ora famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .else
001057r 4                       lda famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .endif
001057r 4                   tax
001057r 4               
001057r 4               @update_volume:
001057r 4                   ; Write volume
001057r 4                   lda famistudio_n163_vol_table,y
001057r 4                   sta FAMISTUDIO_N163_ADDR
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_volume_table,x
001057r 4                   .else
001057r 4                       txa
001057r 4                   .endif
001057r 4                   ora #FAMISTUDIO_N163_CHN_MASK
001057r 4                   sta FAMISTUDIO_N163_DATA
001057r 4               
001057r 4               @done:
001057r 4                   rts
001057r 4               
001057r 4               .endif
001057r 4               
001057r 4               .if FAMISTUDIO_EXP_S5B
001057r 4               
001057r 4               famistudio_s5b_reg_table_lo:
001057r 4                   .byte FAMISTUDIO_S5B_REG_LO_A, FAMISTUDIO_S5B_REG_LO_B, FAMISTUDIO_S5B_REG_LO_C
001057r 4               famistudio_s5b_reg_table_hi:
001057r 4                   .byte FAMISTUDIO_S5B_REG_HI_A, FAMISTUDIO_S5B_REG_HI_B, FAMISTUDIO_S5B_REG_HI_C
001057r 4               famistudio_s5b_vol_table:
001057r 4                   .byte FAMISTUDIO_S5B_REG_VOL_A, FAMISTUDIO_S5B_REG_VOL_B, FAMISTUDIO_S5B_REG_VOL_C
001057r 4               famistudio_s5b_env_table:
001057r 4                   .byte FAMISTUDIO_S5B_CH0_ENVS, FAMISTUDIO_S5B_CH1_ENVS, FAMISTUDIO_S5B_CH2_ENVS
001057r 4               famistudio_s5b_noise_mask:
001057r 4                   .byte $08, $10, $20
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_S5B_CHANNEL_SOUND (internal)
001057r 4               ;
001057r 4               ; Updates the S5B audio registers for a given channel.
001057r 4               ;
001057r 4               ; [in] y: S5B channel idx (0,1,2)
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               famistudio_update_s5b_channel_sound:
001057r 4               
001057r 4                   @pitch   = famistudio_ptr1
001057r 4                   @env_bit = famistudio_ptr1_lo
001057r 4               
001057r 4                   ; These are shared by all 3 channels.
001057r 4                   @env_period = famistudio_ptr0
001057r 4                   @attack     = famistudio_ptr2
001057r 4                   @env_shape  = famistudio_r1
001057r 4                   @env_octave = famistudio_r2
001057r 4                   @noise_freq = famistudio_r3
001057r 4               
001057r 4                   ; First channel will clear these, last channel will write the registers.
001057r 4                   cpy #0
001057r 4                   bne @not_first_channel
001057r 4                   sty @env_shape
001057r 4                   sty @noise_freq
001057r 4                   sty @attack
001057r 4                   lda #$80 ; This mean 'manual pitch'
001057r 4                   sty @env_octave
001057r 4               
001057r 4               @not_first_channel:
001057r 4                   ldx #0 ; This will fetch volume 0.
001057r 4                   stx @env_bit
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_S5B_CH0_IDX,y
001057r 4                   bne @nocut
001057r 4                   jmp @update_volume
001057r 4               
001057r 4               @nocut:
001057r 4                   ; Store noise if mixer has it enabled
001057r 4                   ldx famistudio_s5b_env_table,y
001057r 4                   lda famistudio_env_value+FAMISTUDIO_ENV_MIXER_IDX_OFF,x
001057r 4                   and famistudio_s5b_noise_mask,y
001057r 4                   bne @nonoise
001057r 4                   lda famistudio_env_value+FAMISTUDIO_ENV_NOISE_IDX_OFF,x
001057r 4                   sta @noise_freq
001057r 4               
001057r 4               @nonoise:
001057r 4                   lda famistudio_chn_note+FAMISTUDIO_S5B_CH0_IDX,y
001057r 4                   ; Read note, apply arpeggio
001057r 4                   clc
001057r 4                   ldx famistudio_s5b_env_table,y
001057r 4                   adc famistudio_env_value+FAMISTUDIO_ENV_NOTE_OFF,x
001057r 4                   tax
001057r 4               
001057r 4                   ; Apply pitch envelope, fine pitch & slides
001057r 4                   famistudio_get_note_pitch_macro FAMISTUDIO_S5B_CH0_PITCH_ENV_IDX, 0, famistudio_note_table_lsb, famistudio_note_table_msb
001057r 4               
001057r 4                   ; Write pitch + 1 (pitches on S5B are off by one compared to regular note table)
001057r 4                   lda famistudio_s5b_reg_table_lo,y
001057r 4                   sta FAMISTUDIO_S5B_ADDR
001057r 4                   lda @pitch+0
001057r 4                   clc
001057r 4                   adc #1
001057r 4                   sta FAMISTUDIO_S5B_DATA
001057r 4                   sta @pitch+0
001057r 4                   lda famistudio_s5b_reg_table_hi,y
001057r 4                   sta FAMISTUDIO_S5B_ADDR
001057r 4                   lda @pitch+1
001057r 4                   adc #0
001057r 4                   sta FAMISTUDIO_S5B_DATA
001057r 4                   sta @pitch+1
001057r 4               
001057r 4                   ; Store env shape + period if active.
001057r 4                   lda famistudio_s5b_chn_env_shape,y
001057r 4                   and #$0f
001057r 4                   beq @noenv
001057r 4                   sta @env_shape
001057r 4               
001057r 4                   ; If bit 7 of any channel is on, well reset the envelope.
001057r 4                   lda famistudio_s5b_chn_env_shape,y
001057r 4                   ora @attack
001057r 4                   sta @attack
001057r 4                   lda famistudio_s5b_chn_env_shape,y
001057r 4                   and #$0f
001057r 4                   sta famistudio_s5b_chn_env_shape,y
001057r 4               
001057r 4                   ; Store auto-period settings
001057r 4                   lda famistudio_s5b_chn_env_octave,y
001057r 4                   sta @env_octave
001057r 4                   cmp #$80 ; This mean 'manual pitch'
001057r 4                   beq @manual_period
001057r 4               
001057r 4                   @auto_period:
001057r 4                       lda @pitch+0
001057r 4                       sta @env_period+0
001057r 4                       lda @pitch+1
001057r 4                       sta @env_period+1
001057r 4                       jmp @set_envelope_volume_flag
001057r 4               
001057r 4                   @manual_period:
001057r 4                       lda famistudio_s5b_env_period_lo
001057r 4                       sta @env_period+0
001057r 4                       lda famistudio_s5b_env_period_hi
001057r 4                       sta @env_period+1
001057r 4               
001057r 4               @set_envelope_volume_flag:
001057r 4                   lda #$10
001057r 4               
001057r 4               @noenv:
001057r 4                   sta @env_bit
001057r 4               
001057r 4                   ; Read/multiply volume
001057r 4                   ldx famistudio_s5b_env_table,y
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_chn_volume_track+FAMISTUDIO_S5B_CH0_IDX, y
001057r 4                       .if FAMISTUDIO_USE_VOLUME_SLIDES
001057r 4                           ; During a slide, the lower 4 bits are fraction.
001057r 4                           and #$f0
001057r 4                       .endif
001057r 4                       ora famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .else
001057r 4                       lda famistudio_env_value+FAMISTUDIO_ENV_VOLUME_OFF,x
001057r 4                   .endif
001057r 4                   tax
001057r 4               
001057r 4               @update_volume:
001057r 4                   ; Write volume
001057r 4                   lda famistudio_s5b_vol_table,y
001057r 4                   sta FAMISTUDIO_S5B_ADDR
001057r 4                   .if FAMISTUDIO_USE_VOLUME_TRACK
001057r 4                       lda famistudio_volume_table,x
001057r 4                       ora @env_bit
001057r 4                   .else
001057r 4                       txa
001057r 4                       ora @env_bit
001057r 4                   .endif
001057r 4                   sta FAMISTUDIO_S5B_DATA
001057r 4               
001057r 4               @write_shared_registers:
001057r 4                   ; Channel 2 writes all 5 shared registers.
001057r 4                   cpy #2
001057r 4                   bne @done
001057r 4                   lda @env_shape
001057r 4                   beq @write_shared_noise
001057r 4                   ldx @env_octave
001057r 4                   cpx #$80
001057r 4                   beq @write_shared_env_register
001057r 4               
001057r 4               @compute_auto_period:
001057r 4                   cpx #0
001057r 4                   beq @write_shared_env_register
001057r 4                   bpl @positive_octave_loop
001057r 4               
001057r 4                   @negative_octave_loop:
001057r 4                           asl @env_period+0
001057r 4                           rol @env_period+1
001057r 4                           inx
001057r 4                           bne @negative_octave_loop
001057r 4                       beq @write_shared_env_register
001057r 4               
001057r 4                   @positive_octave_loop:
001057r 4                       cpx #1
001057r 4                       bne @do_shift
001057r 4                       @rounding:
001057r 4                           lda @env_period+0
001057r 4                           and #1
001057r 4                           beq @do_shift
001057r 4                           lda @env_period+0
001057r 4                           clc
001057r 4                           adc #1
001057r 4                           sta @env_period+0
001057r 4                           bcc @do_shift
001057r 4                           inc @env_period+1
001057r 4                       @do_shift:
001057r 4                           lsr @env_period+1
001057r 4                           ror @env_period+0
001057r 4                           dex
001057r 4                           bne @positive_octave_loop
001057r 4               
001057r 4               @write_shared_env_register:
001057r 4               
001057r 4                   ; Envelope period.
001057r 4                   lda #FAMISTUDIO_S5B_REG_ENV_LO
001057r 4                   sta FAMISTUDIO_S5B_ADDR
001057r 4                   lda @env_period+0
001057r 4                   sta FAMISTUDIO_S5B_DATA
001057r 4                   lda #FAMISTUDIO_S5B_REG_ENV_HI
001057r 4                   sta FAMISTUDIO_S5B_ADDR
001057r 4                   lda @env_period+1
001057r 4                   sta FAMISTUDIO_S5B_DATA
001057r 4               
001057r 4                   ; Reset envelope if there was an attack.
001057r 4                   lda @attack
001057r 4                   bpl @write_shared_noise
001057r 4                       lda #FAMISTUDIO_S5B_REG_SHAPE
001057r 4                       sta FAMISTUDIO_S5B_ADDR
001057r 4                       lda @env_shape
001057r 4                       sta FAMISTUDIO_S5B_DATA
001057r 4               
001057r 4               @write_shared_noise:
001057r 4               
001057r 4                   ; Tone/noise enabled.
001057r 4                   lda #FAMISTUDIO_S5B_REG_TONE
001057r 4                   sta FAMISTUDIO_S5B_ADDR
001057r 4                   lda famistudio_env_value+FAMISTUDIO_S5B_CH2_ENVS+FAMISTUDIO_ENV_MIXER_IDX_OFF
001057r 4                   asl
001057r 4                   ora famistudio_env_value+FAMISTUDIO_S5B_CH1_ENVS+FAMISTUDIO_ENV_MIXER_IDX_OFF
001057r 4                   asl
001057r 4                   ora famistudio_env_value+FAMISTUDIO_S5B_CH0_ENVS+FAMISTUDIO_ENV_MIXER_IDX_OFF
001057r 4                   sta FAMISTUDIO_S5B_DATA
001057r 4               
001057r 4                   ; Noise freq
001057r 4                   lda #FAMISTUDIO_S5B_REG_NOISE
001057r 4                   sta FAMISTUDIO_S5B_ADDR
001057r 4                   lda @noise_freq
001057r 4                   sta FAMISTUDIO_S5B_DATA
001057r 4               
001057r 4                   lda #0
001057r 4                   sta famistudio_s5b_env_override
001057r 4               
001057r 4               @done:
001057r 4                   rts
001057r 4               
001057r 4               .endif
001057r 4               
001057r 4               .if FAMISTUDIO_USE_PHASE_RESET
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_PROCESS_PHASE_RESETS (internal)
001057r 4               ;
001057r 4               ; Reset phases for channels that requested it this frame.
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               .macro conditional_phase_reset_regular prev_hi, reg_hi
001057r 4                   .local @done
001057r 4                   lsr
001057r 4                   bcc @done
001057r 4                   ldy prev_hi
001057r 4                   sty reg_hi
001057r 4                   @done:
001057r 4               .endmacro
001057r 4               
001057r 4               .macro conditional_phase_reset_vrc6 prev_hi, reg_hi
001057r 4                   .local @done
001057r 4                   lsr
001057r 4                   bcc @done
001057r 4                   tax
001057r 4                   lda prev_hi
001057r 4                   sta reg_hi
001057r 4                   ora #$80
001057r 4                   sta reg_hi
001057r 4                   txa
001057r 4                   @done:
001057r 4               .endmacro
001057r 4               
001057r 4               .macro conditional_phase_reset_fds prev_hi, reg_hi
001057r 4                   .local @done
001057r 4                   lsr
001057r 4                   bcc @done
001057r 4                   lda prev_hi
001057r 4                   ora #$80
001057r 4                   sta reg_hi
001057r 4                   and #$7f
001057r 4                   sta reg_hi
001057r 4                   @done:
001057r 4               .endmacro
001057r 4               
001057r 4               famistudio_process_phase_resets:
001057r 4               
001057r 4                   ; We group all the phase resets here at the end of the frame to make it easier to replicate in the main app since
001057r 4                   ; this routine will have very predictable # of cycle between channels, and having channels closers mean its easier
001057r 4                   ; to sync 2 channels together. The downside is that we need to keep the previous hi-period for VRC6 (3-bytes) and
001057r 4                   ; FDS (1-byte).
001057r 4               
001057r 4                   lda famistudio_phase_reset
001057r 4               
001057r 4                   ; TODO : What about SFX here? A phase reset here will reset the SFX? Or will it?
001057r 4                   conditional_phase_reset_regular famistudio_pulse1_prev, FAMISTUDIO_APU_PL1_HI
001057r 4                   conditional_phase_reset_regular famistudio_pulse2_prev, FAMISTUDIO_APU_PL2_HI
001057r 4               
001057r 4                   .if FAMISTUDIO_EXP_VRC6
001057r 4                       conditional_phase_reset_vrc6 famistudio_vrc6_pulse1_prev_hi, FAMISTUDIO_VRC6_PL1_HI
001057r 4                       conditional_phase_reset_vrc6 famistudio_vrc6_pulse2_prev_hi, FAMISTUDIO_VRC6_PL2_HI
001057r 4                       conditional_phase_reset_vrc6 famistudio_vrc6_saw_prev_hi, FAMISTUDIO_VRC6_SAW_HI
001057r 4                   .else
001057r 4                       lsr
001057r 4                       lsr
001057r 4                       lsr
001057r 4                   .endif
001057r 4               
001057r 4                   .if FAMISTUDIO_EXP_MMC5
001057r 4                       conditional_phase_reset_regular famistudio_mmc5_pulse1_prev, FAMISTUDIO_MMC5_PL1_HI
001057r 4                       conditional_phase_reset_regular famistudio_mmc5_pulse2_prev, FAMISTUDIO_MMC5_PL2_HI
001057r 4                   .else
001057r 4                       lsr
001057r 4                       lsr
001057r 4                   .endif
001057r 4               
001057r 4                   .if FAMISTUDIO_EXP_FDS
001057r 4                       conditional_phase_reset_fds famistudio_fds_prev_hi, FAMISTUDIO_FDS_FREQ_HI
001057r 4                   .endif
001057r 4               
001057r 4                   .if FAMISTUDIO_EXP_N163
001057r 4                   ldx #0
001057r 4                   @n163_phase_reset_loop:
001057r 4                       lda famistudio_channel_to_phase_reset_mask+FAMISTUDIO_N163_CH0_IDX, x
001057r 4                       and famistudio_phase_reset_n163
001057r 4                       beq @next_n163_channel
001057r 4                           ldy #0
001057r 4                           lda famistudio_n163_phase_table_lo,x
001057r 4                           sta FAMISTUDIO_N163_ADDR
001057r 4                           sty FAMISTUDIO_N163_DATA
001057r 4                           lda famistudio_n163_phase_table_mid,x
001057r 4                           sta FAMISTUDIO_N163_ADDR
001057r 4                           sty FAMISTUDIO_N163_DATA
001057r 4                           lda famistudio_n163_phase_table_hi,x
001057r 4                           sta FAMISTUDIO_N163_ADDR
001057r 4                           sty FAMISTUDIO_N163_DATA
001057r 4                       @next_n163_channel:
001057r 4                           inx
001057r 4                           cpx #FAMISTUDIO_EXP_N163_CHN_CNT
001057r 4                           bne @n163_phase_reset_loop
001057r 4                   .endif
001057r 4               
001057r 4                   @clear_phase_reset_flags:
001057r 4                       lda #0
001057r 4                       sta famistudio_phase_reset
001057r 4                       .if FAMISTUDIO_EXP_N163
001057r 4                           sta famistudio_phase_reset_n163
001057r 4                       .endif
001057r 4                       rts
001057r 4               
001057r 4               .endif
001057r 4               
001057r 4               .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
001057r 4               
001057r 4               ;======================================================================================================================
001057r 4               ; FAMISTUDIO_UPDATE_ROW_WITH_DELAYS (internal)
001057r 4               ;
001057r 4               ; Advance the song for a given channel, but while managing notes/cuts delays.
001057r 4               ;
001057r 4               ; [in] x: channel index (also true when leaving the function)
001057r 4               ;======================================================================================================================
001057r 4               
001057r 4               famistudio_advance_channel_with_delays:
001057r 4               
001057r 4                   ; Is the tempo telling us to advance by 1 row?
001057r 4  AD rr rr         lda famistudio_tempo_advance_row
00105Ar 4  F0 10            beq @check_delayed_note
00105Cr 4               
00105Cr 4                   ; Tempo says we need to advance, was there a delayed note wairing?
00105Cr 4  BD rr rr         lda famistudio_chn_note_delay,x
00105Fr 4  30 18            bmi @advance
001061r 4               
001061r 4                   ; Need to clear any pending delayed note before advancing (will be inaudible).
001061r 4                   @clear_delayed_note:
001061r 4  A9 FF            lda #$ff
001063r 4  9D rr rr         sta famistudio_chn_note_delay,x
001066r 4  20 rr rr         jsr famistudio_advance_channel ; This is the update for the de delayed note.
001069r 4  4C rr rr         jmp @advance
00106Cr 4               
00106Cr 4                   ; Tempo said we didnt need to advance, see if there is delayed note with a counter that reached zero.
00106Cr 4                   @check_delayed_note:
00106Cr 4  BD rr rr         lda famistudio_chn_note_delay,x
00106Fr 4  30 0B            bmi @check_delayed_cut
001071r 4  38               sec
001072r 4  E9 01            sbc #1
001074r 4  9D rr rr         sta famistudio_chn_note_delay,x
001077r 4  10 03            bpl @check_delayed_cut ; When wrapping from 0 -> 0xff, we play the note.
001079r 4               
001079r 4                   ; Finally, advance by 1 row.
001079r 4                   @advance:
001079r 4  20 rr rr         jsr famistudio_advance_channel
00107Cr 4               
00107Cr 4                   ; Handle delayed cuts.
00107Cr 4                   @check_delayed_cut:
00107Cr 4  BD rr rr         lda famistudio_chn_cut_delay,x
00107Fr 4  30 0D            bmi @done
001081r 4  38               sec
001082r 4  E9 01            sbc #1
001084r 4  9D rr rr         sta famistudio_chn_cut_delay,x
001087r 4  10 05            bpl @done ; When wrapping from 0 -> 0xff, we play the note.
001089r 4               
001089r 4                   ; Write a stop note.
001089r 4  A9 00            lda #0
00108Br 4  9D rr rr         sta famistudio_chn_note,x
00108Er 4               
00108Er 4                   @done:
00108Er 4  60               rts
00108Fr 4               
00108Fr 4               .endif
00108Fr 4               
00108Fr 4               ;======================================================================================================================
00108Fr 4               ; FAMISTUDIO_UPDATE (public)
00108Fr 4               ;
00108Fr 4               ; Main update function, should be called once per frame, ideally at the end of NMI. Will update the tempo, advance
00108Fr 4               ; the song if needed, update instrument and apply any change to the APU registers.
00108Fr 4               ;
00108Fr 4               ; [in] no input params.
00108Fr 4               ;======================================================================================================================
00108Fr 4               
00108Fr 4               famistudio_update:
00108Fr 4               
00108Fr 4                   @pitch_env_type = famistudio_r0
00108Fr 4                   @temp_pitch     = famistudio_r1
00108Fr 4                   @tempo_env_ptr  = famistudio_ptr0
00108Fr 4                   @env_ptr        = famistudio_ptr0
00108Fr 4                   @pitch_env_ptr  = famistudio_ptr0
00108Fr 4               
00108Fr 4               .if FAMISTUDIO_CFG_THREAD
00108Fr 4  A5 rr            lda famistudio_ptr0_lo
001091r 4  48               pha
001092r 4  A5 rr            lda famistudio_ptr0_hi
001094r 4  48               pha
001095r 4               .endif
001095r 4               
001095r 4  AD rr rr         lda famistudio_song_speed ; Speed 0 means that no music is playing currently
001098r 4  30 02            bmi @pause ; Bit 7 set is the pause flag
00109Ar 4  D0 03            bne @update
00109Cr 4               @pause:
00109Cr 4               .if !FAMISTUDIO_USE_FAMITRACKER_TEMPO
00109Cr 4                   lda #1
00109Cr 4                   sta famistudio_tempo_frame_cnt
00109Cr 4               .endif
00109Cr 4  4C rr rr         jmp @update_sound
00109Fr 4               
00109Fr 4               ;----------------------------------------------------------------------------------------------------------------------
00109Fr 4               @update:
00109Fr 4               
00109Fr 4               .if FAMISTUDIO_USE_FAMITRACKER_TEMPO
00109Fr 4               
00109Fr 4  AD rr rr         lda famistudio_tempo_acc_hi
0010A2r 4  CD rr rr         cmp famistudio_song_speed
0010A5r 4                   .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
0010A5r 4  A2 00                ldx #0
0010A7r 4  8E rr rr             stx famistudio_tempo_advance_row
0010AAr 4  90 0B                bcc @advance_song
0010ACr 4                   .else
0010ACr 4                       bcc @update_envelopes
0010ACr 4                   .endif
0010ACr 4  ED rr rr         sbc famistudio_song_speed ; Carry is set.
0010AFr 4  8D rr rr         sta famistudio_tempo_acc_hi
0010B2r 4                   .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
0010B2r 4  A2 01                ldx #1
0010B4r 4  8E rr rr             stx famistudio_tempo_advance_row
0010B7r 4                   .endif
0010B7r 4               
0010B7r 4               .else ; FamiStudio tempo
0010B7r 4               
0010B7r 4                   ; Decrement envelope counter, see if we need to advance.
0010B7r 4                   dec famistudio_tempo_env_counter
0010B7r 4                   beq @advance_tempo_envelope
0010B7r 4                   lda #1
0010B7r 4                   jmp @store_frame_count
0010B7r 4               
0010B7r 4               @advance_tempo_envelope:
0010B7r 4                   ; Advance the envelope by one step.
0010B7r 4                   lda famistudio_tempo_env_ptr_lo
0010B7r 4                   sta @tempo_env_ptr+0
0010B7r 4                   lda famistudio_tempo_env_ptr_hi
0010B7r 4                   sta @tempo_env_ptr+1
0010B7r 4               
0010B7r 4                   inc famistudio_tempo_env_idx
0010B7r 4                   ldy famistudio_tempo_env_idx
0010B7r 4                   lda (@tempo_env_ptr),y
0010B7r 4                   bpl @store_counter ; Negative value means we loop back to to index 1.
0010B7r 4               
0010B7r 4               @tempo_envelope_end:
0010B7r 4                   ldy #1
0010B7r 4                   sty famistudio_tempo_env_idx
0010B7r 4                   lda (@tempo_env_ptr),y
0010B7r 4               
0010B7r 4               @store_counter:
0010B7r 4                   ; Reset the counter
0010B7r 4                   sta famistudio_tempo_env_counter
0010B7r 4                   lda famistudio_tempo_frame_num
0010B7r 4                   bne @store_frame_count
0010B7r 4                   jmp @skip_frame
0010B7r 4               
0010B7r 4               @store_frame_count:
0010B7r 4                   sta famistudio_tempo_frame_cnt
0010B7r 4               
0010B7r 4               .endif
0010B7r 4               
0010B7r 4               ;----------------------------------------------------------------------------------------------------------------------
0010B7r 4               @advance_song:
0010B7r 4  A2 00            ldx #0
0010B9r 4                   @channel_loop:
0010B9r 4                       .if !FAMISTUDIO_CFG_DPCM_SUPPORT
0010B9r 4                           cpx #4
0010B9r 4                           beq @channel_loop_end
0010B9r 4                       .endif
0010B9r 4                       .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
0010B9r 4  20 rr rr                 jsr famistudio_advance_channel_with_delays
0010BCr 4                       .else
0010BCr 4                           jsr famistudio_advance_channel
0010BCr 4                       .endif
0010BCr 4                       @channel_loop_end:
0010BCr 4  E8                   inx
0010BDr 4  E0 05                cpx #FAMISTUDIO_NUM_CHANNELS
0010BFr 4  D0 F8                bne @channel_loop
0010C1r 4               
0010C1r 4               ;----------------------------------------------------------------------------------------------------------------------
0010C1r 4               @update_envelopes:
0010C1r 4  A2 00            ldx #0
0010C3r 4               
0010C3r 4               @env_process:
0010C3r 4  BD rr rr         lda famistudio_env_repeat,x
0010C6r 4  F0 05            beq @env_read
0010C8r 4  DE rr rr         dec famistudio_env_repeat,x
0010CBr 4  D0 2B            bne @env_next
0010CDr 4               
0010CDr 4               @env_read:
0010CDr 4  BD rr rr         lda famistudio_env_addr_lo,x
0010D0r 4  85 rr            sta @env_ptr+0
0010D2r 4  BD rr rr         lda famistudio_env_addr_hi,x
0010D5r 4  85 rr            sta @env_ptr+1
0010D7r 4  BC rr rr         ldy famistudio_env_ptr,x
0010DAr 4               
0010DAr 4               @env_read_value:
0010DAr 4  B1 rr            lda (@env_ptr),y
0010DCr 4  10 09            bpl @env_special ; Values below 128 used as a special code, loop or repeat
0010DEr 4  18               clc              ; Values above 128 are output value+192 (output values are signed -63..64)
0010DFr 4  69 40            adc #256-192
0010E1r 4  9D rr rr         sta famistudio_env_value,x
0010E4r 4  C8               iny
0010E5r 4  D0 0D            bne @env_next_store_ptr
0010E7r 4               
0010E7r 4               @env_special:
0010E7r 4  D0 07            bne @env_set_repeat  ; Zero is the loop point, non-zero values used for the repeat counter
0010E9r 4  C8               iny
0010EAr 4  B1 rr            lda (@env_ptr),y     ; Read loop position
0010ECr 4  A8               tay
0010EDr 4  4C rr rr         jmp @env_read_value
0010F0r 4               
0010F0r 4               @env_set_repeat:
0010F0r 4  C8               iny
0010F1r 4  9D rr rr         sta famistudio_env_repeat,x ; Store the repeat counter value
0010F4r 4               
0010F4r 4               @env_next_store_ptr:
0010F4r 4  98               tya
0010F5r 4  9D rr rr         sta famistudio_env_ptr,x
0010F8r 4               
0010F8r 4               @env_next:
0010F8r 4  E8               inx
0010F9r 4               
0010F9r 4  E0 0B            cpx #FAMISTUDIO_NUM_ENVELOPES
0010FBr 4  D0 C6            bne @env_process
0010FDr 4               
0010FDr 4               ;----------------------------------------------------------------------------------------------------------------------
0010FDr 4               @update_pitch_envelopes:
0010FDr 4  A2 00            ldx #0
0010FFr 4  4C rr rr         jmp @pitch_env_process
001102r 4               
001102r 4               @pitch_env_process:
001102r 4  BD rr rr         lda famistudio_pitch_env_repeat,x
001105r 4  F0 05            beq @pitch_env_read
001107r 4  DE rr rr         dec famistudio_pitch_env_repeat,x
00110Ar 4  D0 61            bne @pitch_env_next
00110Cr 4               
00110Cr 4               @pitch_env_read:
00110Cr 4  BD rr rr         lda famistudio_pitch_env_addr_lo,x
00110Fr 4  85 rr            sta @pitch_env_ptr+0
001111r 4  BD rr rr         lda famistudio_pitch_env_addr_hi,x
001114r 4  85 rr            sta @pitch_env_ptr+1
001116r 4  A0 00            ldy #0
001118r 4  B1 rr            lda (@pitch_env_ptr),y
00111Ar 4  85 rr            sta @pitch_env_type ; First value is 0 for absolute envelope, 0x80 for relative.
00111Cr 4  BC rr rr         ldy famistudio_pitch_env_ptr,x
00111Fr 4               
00111Fr 4               @pitch_env_read_value:
00111Fr 4  B1 rr            lda (@pitch_env_ptr),y
001121r 4  10 37            bpl @pitch_env_special
001123r 4  18               clc
001124r 4  69 40            adc #256-192
001126r 4  24 rr            bit @pitch_env_type
001128r 4  30 15            bmi @pitch_relative
00112Ar 4               
00112Ar 4               @pitch_absolute:
00112Ar 4  9D rr rr         sta famistudio_pitch_env_value_lo,x
00112Dr 4  09 00            ora #0
00112Fr 4  30 05            bmi @pitch_absolute_neg
001131r 4  A9 00            lda #0
001133r 4  4C rr rr         jmp @pitch_absolute_set_value_hi
001136r 4               @pitch_absolute_neg:
001136r 4  A9 FF            lda #$ff
001138r 4               @pitch_absolute_set_value_hi:
001138r 4  9D rr rr         sta famistudio_pitch_env_value_hi,x
00113Br 4  C8               iny
00113Cr 4  4C rr rr         jmp @pitch_env_next_store_ptr
00113Fr 4               
00113Fr 4               @pitch_relative:
00113Fr 4  85 rr            sta @temp_pitch
001141r 4  18               clc
001142r 4  7D rr rr         adc famistudio_pitch_env_value_lo,x
001145r 4  9D rr rr         sta famistudio_pitch_env_value_lo,x
001148r 4  A5 rr            lda @temp_pitch
00114Ar 4  29 80            and #$80
00114Cr 4  10 02            bpl @pitch_relative_pos
00114Er 4  A9 FF            lda #$ff
001150r 4               @pitch_relative_pos:
001150r 4  7D rr rr         adc famistudio_pitch_env_value_hi,x
001153r 4  9D rr rr         sta famistudio_pitch_env_value_hi,x
001156r 4  C8               iny
001157r 4  4C rr rr         jmp @pitch_env_next_store_ptr
00115Ar 4               
00115Ar 4               @pitch_env_special:
00115Ar 4  D0 07            bne @pitch_env_set_repeat
00115Cr 4  C8               iny
00115Dr 4  B1 rr            lda (@pitch_env_ptr),y
00115Fr 4  A8               tay
001160r 4  4C rr rr         jmp @pitch_env_read_value
001163r 4               
001163r 4               @pitch_env_set_repeat:
001163r 4  C8               iny
001164r 4  05 rr            ora @pitch_env_type ; This is going to set the relative flag in the hi-bit.
001166r 4  9D rr rr         sta famistudio_pitch_env_repeat,x
001169r 4               
001169r 4               @pitch_env_next_store_ptr:
001169r 4  98               tya
00116Ar 4  9D rr rr         sta famistudio_pitch_env_ptr,x
00116Dr 4               
00116Dr 4               @pitch_env_next:
00116Dr 4  E8               inx
00116Er 4               
00116Er 4  E0 03            cpx #FAMISTUDIO_NUM_PITCH_ENVELOPES
001170r 4  D0 90            bne @pitch_env_process
001172r 4               
001172r 4               .if FAMISTUDIO_USE_SLIDE_NOTES
001172r 4               ;----------------------------------------------------------------------------------------------------------------------
001172r 4               @update_slides:
001172r 4  A2 00            ldx #0
001174r 4               
001174r 4               @slide_process:
001174r 4  BD rr rr         lda famistudio_slide_step,x ; Zero repeat means no active slide.
001177r 4  F0 2B            beq @slide_next
001179r 4  18               clc ; Add step to slide pitch (16bit + 8bit signed).
00117Ar 4  BD rr rr         lda famistudio_slide_step,x
00117Dr 4  7D rr rr         adc famistudio_slide_pitch_lo,x
001180r 4  9D rr rr         sta famistudio_slide_pitch_lo,x
001183r 4  BD rr rr         lda famistudio_slide_step,x
001186r 4  29 80            and #$80
001188r 4  F0 0D            beq @positive_slide
00118Ar 4               
00118Ar 4               @negative_slide:
00118Ar 4  A9 FF            lda #$ff
00118Cr 4  7D rr rr         adc famistudio_slide_pitch_hi,x
00118Fr 4  9D rr rr         sta famistudio_slide_pitch_hi,x
001192r 4  10 10            bpl @slide_next
001194r 4  4C rr rr         jmp @clear_slide
001197r 4               
001197r 4               @positive_slide:
001197r 4  7D rr rr         adc famistudio_slide_pitch_hi,x
00119Ar 4  9D rr rr         sta famistudio_slide_pitch_hi,x
00119Dr 4  30 05            bmi @slide_next
00119Fr 4               
00119Fr 4               @clear_slide:
00119Fr 4  A9 00            lda #0
0011A1r 4  9D rr rr         sta famistudio_slide_step,x
0011A4r 4               
0011A4r 4               @slide_next:
0011A4r 4  E8               inx
0011A5r 4  E0 03            cpx #FAMISTUDIO_NUM_SLIDES
0011A7r 4  D0 CB            bne @slide_process
0011A9r 4               .endif
0011A9r 4               
0011A9r 4               .if FAMISTUDIO_USE_VOLUME_SLIDES
0011A9r 4               
0011A9r 4               ; FIXME : This seem wayyyy more complicated than it should.
0011A9r 4               ; - The track volume has 4 bits of fraction : VVVVFFFF
0011A9r 4               ; - The slide step is signed : SVVVFFFF
0011A9r 4               ; - The slide target (end volume) is simply : VVVV0000
0011A9r 4               ;
0011A9r 4               ; foreach slides
0011A9r 4               ;     if step != 0
0011A9r 4               ;         volume += step
0011A9r 4               ;         if step > 0 && volume >= target || step < 0 && volume <= target
0011A9r 4               ;             volume = target
0011A9r 4               ;             step = 0
0011A9r 4               
0011A9r 4               @update_volume_slides:
0011A9r 4  A2 00            ldx #0
0011ABr 4               
0011ABr 4               @volume_side_process:
0011ABr 4  BD rr rr         lda famistudio_chn_volume_slide_step,x
0011AEr 4  F0 3B            beq @volume_slide_next
0011B0r 4  18               clc
0011B1r 4  30 0F            bmi @negative_volume_slide
0011B3r 4               
0011B3r 4               @positive_volume_slide:
0011B3r 4                   ; If the slide goes up, stop if we hit the target or go over it, over 15 (carry will be set)
0011B3r 4  7D rr rr         adc famistudio_chn_volume_track,x
0011B6r 4  B0 28            bcs @clear_volume_slide
0011B8r 4  9D rr rr         sta famistudio_chn_volume_track,x
0011BBr 4  DD rr rr         cmp famistudio_chn_volume_slide_target,x
0011BEr 4  90 2B            bcc @volume_slide_next
0011C0r 4  B0 1E            bcs @clear_volume_slide
0011C2r 4               
0011C2r 4               @negative_volume_slide:
0011C2r 4                   ; If the slide goes do, stop if we hit the target or go below it, or below zero.
0011C2r 4                   ; This is a bit trickier since we cant rely on the carry or any flag to
0011C2r 4                   ; tell us if we wrapped around.
0011C2r 4  7D rr rr         adc famistudio_chn_volume_track,x
0011C5r 4  BC rr rr         ldy famistudio_chn_volume_track,x
0011C8r 4  30 0C            bmi @slide_upper_half
0011CAr 4               
0011CAr 4               @slide_lower_half:
0011CAr 4  9D rr rr         sta famistudio_chn_volume_track,x
0011CDr 4  DD rr rr         cmp famistudio_chn_volume_slide_target,x
0011D0r 4  F0 0E            beq @clear_volume_slide
0011D2r 4  30 0C            bmi @clear_volume_slide
0011D4r 4  10 15            bpl @volume_slide_next
0011D6r 4               
0011D6r 4               @slide_upper_half:
0011D6r 4  9D rr rr         sta famistudio_chn_volume_track,x
0011D9r 4  DD rr rr         cmp famistudio_chn_volume_slide_target,x
0011DCr 4  F0 02            beq @clear_volume_slide
0011DEr 4  B0 0B            bcs @volume_slide_next
0011E0r 4               
0011E0r 4               @clear_volume_slide:
0011E0r 4  BD rr rr         lda famistudio_chn_volume_slide_target,x
0011E3r 4  9D rr rr         sta famistudio_chn_volume_track,x
0011E6r 4  A9 00            lda #0
0011E8r 4  9D rr rr         sta famistudio_chn_volume_slide_step,x
0011EBr 4               
0011EBr 4               @volume_slide_next:
0011EBr 4  E8               inx
0011ECr 4  E0 04            cpx #FAMISTUDIO_NUM_VOLUME_SLIDES
0011EEr 4  D0 BB            bne @volume_side_process
0011F0r 4               .endif
0011F0r 4               
0011F0r 4               .if FAMISTUDIO_CFG_EQUALIZER
0011F0r 4               @update_equalizer:
0011F0r 4  A2 00            ldx #0
0011F2r 4                   @eq_channel_loop:
0011F2r 4  BD rr rr             lda famistudio_chn_note_counter, x
0011F5r 4  F0 03                beq @no_note
0011F7r 4  DE rr rr                 dec famistudio_chn_note_counter, x
0011FAr 4                       @no_note:
0011FAr 4  E8                   inx
0011FBr 4  E0 05                cpx #FAMISTUDIO_NUM_CHANNELS
0011FDr 4  D0 F3                bne @eq_channel_loop
0011FFr 4               .endif
0011FFr 4               
0011FFr 4               ;----------------------------------------------------------------------------------------------------------------------
0011FFr 4               @update_sound:
0011FFr 4               
0011FFr 4  AD rr rr D0      famistudio_update_channel_sound 0, FAMISTUDIO_CH0_ENVS, famistudio_pulse1_prev, FAMISTUDIO_ALIAS_PL1_HI, FAMISTUDIO_ALIAS_PL1_LO, FAMISTUDIO_ALIAS_PL1_VOL, FAMISTUDIO_APU_PL1_SWEEP
001203r 4  03 4C rr rr  
001207r 4  18 6D rr rr  
001230r 4  AD rr rr D0      famistudio_update_channel_sound 1, FAMISTUDIO_CH1_ENVS, famistudio_pulse2_prev, FAMISTUDIO_ALIAS_PL2_HI, FAMISTUDIO_ALIAS_PL2_LO, FAMISTUDIO_ALIAS_PL2_VOL, FAMISTUDIO_APU_PL2_SWEEP
001234r 4  03 4C rr rr  
001238r 4  18 6D rr rr  
001261r 4  AD rr rr D0      famistudio_update_channel_sound 2, FAMISTUDIO_CH2_ENVS, , FAMISTUDIO_ALIAS_TRI_HI, FAMISTUDIO_ALIAS_TRI_LO, FAMISTUDIO_ALIAS_TRI_LINEAR
001265r 4  03 4C rr rr  
001269r 4  18 6D rr rr  
00128Er 4  AD rr rr D0      famistudio_update_channel_sound 3, FAMISTUDIO_CH3_ENVS, , FAMISTUDIO_ALIAS_NOISE_LO, , FAMISTUDIO_ALIAS_NOISE_VOL
001292r 4  03 4C rr rr  
001296r 4  18 6D rr rr  
0012C5r 4               
0012C5r 4               .if FAMISTUDIO_EXP_VRC6
0012C5r 4               @update_vrc6_sound:
0012C5r 4                   famistudio_update_channel_sound FAMISTUDIO_VRC6_CH0_IDX, FAMISTUDIO_VRC6_CH0_ENVS, famistudio_vrc6_pulse1_prev_hi, FAMISTUDIO_VRC6_PL1_HI, FAMISTUDIO_VRC6_PL1_LO, FAMISTUDIO_VRC6_PL1_VOL
0012C5r 4                   famistudio_update_channel_sound FAMISTUDIO_VRC6_CH1_IDX, FAMISTUDIO_VRC6_CH1_ENVS, famistudio_vrc6_pulse2_prev_hi, FAMISTUDIO_VRC6_PL2_HI, FAMISTUDIO_VRC6_PL2_LO, FAMISTUDIO_VRC6_PL2_VOL
0012C5r 4                   famistudio_update_channel_sound FAMISTUDIO_VRC6_CH2_IDX, FAMISTUDIO_VRC6_CH2_ENVS, famistudio_vrc6_saw_prev_hi, FAMISTUDIO_VRC6_SAW_HI, FAMISTUDIO_VRC6_SAW_LO, FAMISTUDIO_VRC6_SAW_VOL
0012C5r 4               .endif
0012C5r 4               
0012C5r 4               .if FAMISTUDIO_EXP_MMC5
0012C5r 4               @update_mmc5_sound:
0012C5r 4                   famistudio_update_channel_sound FAMISTUDIO_MMC5_CH0_IDX, FAMISTUDIO_MMC5_CH0_ENVS, famistudio_mmc5_pulse1_prev, FAMISTUDIO_MMC5_PL1_HI, FAMISTUDIO_MMC5_PL1_LO, FAMISTUDIO_MMC5_PL1_VOL
0012C5r 4                   famistudio_update_channel_sound FAMISTUDIO_MMC5_CH1_IDX, FAMISTUDIO_MMC5_CH1_ENVS, famistudio_mmc5_pulse2_prev, FAMISTUDIO_MMC5_PL2_HI, FAMISTUDIO_MMC5_PL2_LO, FAMISTUDIO_MMC5_PL2_VOL
0012C5r 4               .endif
0012C5r 4               
0012C5r 4               .if FAMISTUDIO_EXP_FDS
0012C5r 4               @update_fds_sound:
0012C5r 4                   jsr famistudio_update_fds_channel_sound
0012C5r 4               .endif
0012C5r 4               
0012C5r 4               .if FAMISTUDIO_EXP_VRC7
0012C5r 4               @update_vrc7_sound:
0012C5r 4                   ldy #0
0012C5r 4                   @vrc7_channel_loop:
0012C5r 4                       jsr famistudio_update_vrc7_channel_sound
0012C5r 4                       iny
0012C5r 4                       cpy #6
0012C5r 4                       bne @vrc7_channel_loop
0012C5r 4               .endif
0012C5r 4               
0012C5r 4               .if FAMISTUDIO_EXP_N163
0012C5r 4               @update_n163_sound:
0012C5r 4                   ldy #0
0012C5r 4                   @n163_channel_loop:
0012C5r 4                       jsr famistudio_update_n163_channel_sound
0012C5r 4                       iny
0012C5r 4                       cpy #FAMISTUDIO_EXP_N163_CHN_CNT
0012C5r 4                       bne @n163_channel_loop
0012C5r 4               .endif
0012C5r 4               
0012C5r 4               .if FAMISTUDIO_EXP_S5B
0012C5r 4               @update_s5b_sound:
0012C5r 4                   ldy #0
0012C5r 4                   @s5b_channel_loop:
0012C5r 4                       jsr famistudio_update_s5b_channel_sound
0012C5r 4                       iny
0012C5r 4                       cpy #3
0012C5r 4                       bne @s5b_channel_loop
0012C5r 4               .endif
0012C5r 4               
0012C5r 4               .if FAMISTUDIO_EXP_EPSM
0012C5r 4               @update_epsm_sound:
0012C5r 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
0012C5r 4                   ldy #0
0012C5r 4                   @epsm_square_channel_loop:
0012C5r 4                       jsr famistudio_update_epsm_square_channel_sound
0012C5r 4                       iny
0012C5r 4                       cpy #FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT
0012C5r 4                       bne @epsm_square_channel_loop
0012C5r 4               .endif
0012C5r 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT > 0
0012C5r 4                   ldy #FAMISTUDIO_EXP_EPSM_FM_CHN_CNT - 1
0012C5r 4                   @epsm_fm_channel_loop:
0012C5r 4                       jsr famistudio_update_epsm_fm_channel_sound
0012C5r 4                       dey
0012C5r 4                       bpl @epsm_fm_channel_loop
0012C5r 4               .endif
0012C5r 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
0012C5r 4               @loop_cnt = famistudio_r2
0012C5r 4                   lda #5
0012C5r 4                   sta @loop_cnt
0012C5r 4                   @epsm_rhythm_channel_loop:
0012C5r 4                       ldx @loop_cnt
0012C5r 4                       ldy famistudio_rhythm_lut,x
0012C5r 4                       bmi @skip_epsm_rhythm_update ; if the value we load is $ff then
0012C5r 4                       jsr famistudio_update_epsm_rhythm_channel_sound
0012C5r 4                   @skip_epsm_rhythm_update:
0012C5r 4                       dec @loop_cnt
0012C5r 4                       bpl @epsm_rhythm_channel_loop
0012C5r 4               .endif
0012C5r 4               .endif
0012C5r 4               
0012C5r 4               .if FAMISTUDIO_USE_PHASE_RESET
0012C5r 4                   jsr famistudio_process_phase_resets
0012C5r 4               .endif
0012C5r 4               
0012C5r 4               @update_sound_done:
0012C5r 4               .if FAMISTUDIO_USE_FAMITRACKER_TEMPO
0012C5r 4  AD rr rr         lda famistudio_song_speed
0012C8r 4  30 13            bmi @skip_famitracker_tempo_update ; bit 7 = paused
0012CAr 4  18                   clc  ; Update frame counter that considers speed, tempo, and PAL/NTSC
0012CBr 4  AD rr rr             lda famistudio_tempo_acc_lo
0012CEr 4  6D rr rr             adc famistudio_tempo_step_lo
0012D1r 4  8D rr rr             sta famistudio_tempo_acc_lo
0012D4r 4  AD rr rr             lda famistudio_tempo_acc_hi
0012D7r 4  6D rr rr             adc famistudio_tempo_step_hi
0012DAr 4  8D rr rr             sta famistudio_tempo_acc_hi
0012DDr 4                   @skip_famitracker_tempo_update:
0012DDr 4               .else
0012DDr 4                   ; See if we need to run a double frame (playing NTSC song on PAL)
0012DDr 4                   dec famistudio_tempo_frame_cnt
0012DDr 4                   beq @skip_frame
0012DDr 4                   jmp @advance_song
0012DDr 4               .endif
0012DDr 4               
0012DDr 4               @skip_frame:
0012DDr 4               
0012DDr 4               ;----------------------------------------------------------------------------------------------------------------------
0012DDr 4               .if FAMISTUDIO_CFG_SFX_SUPPORT
0012DDr 4               
0012DDr 4                   ; Process all sound effect streams
0012DDr 4                   .if FAMISTUDIO_CFG_SFX_STREAMS > 0
0012DDr 4  A2 00            ldx #FAMISTUDIO_SFX_CH0
0012DFr 4  20 rr rr         jsr famistudio_sfx_update
0012E2r 4                   .endif
0012E2r 4                   .if FAMISTUDIO_CFG_SFX_STREAMS > 1
0012E2r 4  A2 0F            ldx #FAMISTUDIO_SFX_CH1
0012E4r 4  20 rr rr         jsr famistudio_sfx_update
0012E7r 4                   .endif
0012E7r 4                   .if FAMISTUDIO_CFG_SFX_STREAMS > 2
0012E7r 4                   ldx #FAMISTUDIO_SFX_CH2
0012E7r 4                   jsr famistudio_sfx_update
0012E7r 4                   .endif
0012E7r 4                   .if FAMISTUDIO_CFG_SFX_STREAMS > 3
0012E7r 4                   ldx #FAMISTUDIO_SFX_CH3
0012E7r 4                   jsr famistudio_sfx_update
0012E7r 4                   .endif
0012E7r 4               
0012E7r 4                   ; Send data from the output buffer to the APU
0012E7r 4               
0012E7r 4  AD rr rr         lda famistudio_output_buf      ; Pulse 1 volume
0012EAr 4  8D 00 40         sta FAMISTUDIO_APU_PL1_VOL
0012EDr 4  AD rr rr         lda famistudio_output_buf+1    ; Pulse 1 period LSB
0012F0r 4  8D 02 40         sta FAMISTUDIO_APU_PL1_LO
0012F3r 4  AD rr rr         lda famistudio_output_buf+2    ; Pulse 1 period MSB, only applied when changed
0012F6r 4               
0012F6r 4                   .if FAMISTUDIO_CFG_SMOOTH_VIBRATO
0012F6r 4  29 07 AA 38          famistudio_smooth_vibrato famistudio_output_buf+1, famistudio_pulse1_prev, FAMISTUDIO_APU_PL1_HI, FAMISTUDIO_APU_PL1_LO, FAMISTUDIO_APU_PL1_SWEEP
0012FAr 4  ED rr rr F0  
0012FEr 4  30 8E rr rr  
00132Fr 4                   .else
00132Fr 4                       cmp famistudio_pulse1_prev
00132Fr 4                       beq @no_pulse1_upd
00132Fr 4                       sta famistudio_pulse1_prev
00132Fr 4                       sta FAMISTUDIO_APU_PL1_HI
00132Fr 4                   .endif
00132Fr 4               
00132Fr 4               @no_pulse1_upd:
00132Fr 4  AD rr rr         lda famistudio_output_buf+3    ; Pulse 2 volume
001332r 4  8D 04 40         sta FAMISTUDIO_APU_PL2_VOL
001335r 4  AD rr rr         lda famistudio_output_buf+4    ; Pulse 2 period LSB
001338r 4  8D 06 40         sta FAMISTUDIO_APU_PL2_LO
00133Br 4  AD rr rr         lda famistudio_output_buf+5    ; Pulse 2 period MSB, only applied when changed
00133Er 4               
00133Er 4                   .if FAMISTUDIO_CFG_SMOOTH_VIBRATO
00133Er 4  29 07 AA 38          famistudio_smooth_vibrato famistudio_output_buf+4, famistudio_pulse2_prev, FAMISTUDIO_APU_PL2_HI, FAMISTUDIO_APU_PL2_LO, FAMISTUDIO_APU_PL2_SWEEP
001342r 4  ED rr rr F0  
001346r 4  30 8E rr rr  
001377r 4                   .else
001377r 4                       cmp famistudio_pulse2_prev
001377r 4                       beq @no_pulse2_upd
001377r 4                       sta famistudio_pulse2_prev
001377r 4                       sta FAMISTUDIO_APU_PL2_HI
001377r 4                   .endif
001377r 4               
001377r 4               @no_pulse2_upd:
001377r 4  AD rr rr         lda famistudio_output_buf+6    ; Triangle volume (plays or not)
00137Ar 4  8D 08 40         sta FAMISTUDIO_APU_TRI_LINEAR
00137Dr 4  AD rr rr         lda famistudio_output_buf+7    ; Triangle period LSB
001380r 4  8D 0A 40         sta FAMISTUDIO_APU_TRI_LO
001383r 4  AD rr rr         lda famistudio_output_buf+8    ; Triangle period MSB
001386r 4  8D 0B 40         sta FAMISTUDIO_APU_TRI_HI
001389r 4               
001389r 4  AD rr rr         lda famistudio_output_buf+9    ; Noise volume
00138Cr 4  8D 0C 40         sta FAMISTUDIO_APU_NOISE_VOL
00138Fr 4  AD rr rr         lda famistudio_output_buf+10   ; Noise period
001392r 4  8D 0E 40         sta FAMISTUDIO_APU_NOISE_LO
001395r 4               
001395r 4               .endif
001395r 4               
001395r 4               .if FAMISTUDIO_CFG_THREAD
001395r 4  68               pla
001396r 4  85 rr            sta famistudio_ptr0_hi
001398r 4  68               pla
001399r 4  85 rr            sta famistudio_ptr0_lo
00139Br 4               .endif
00139Br 4               
00139Br 4  60               rts
00139Cr 4               
00139Cr 4               ;======================================================================================================================
00139Cr 4               ; FAMISTUDIO_DO_NOTE_ATTACK + EXP VARIANTS (internal)
00139Cr 4               ;
00139Cr 4               ; Internal function to reset all the envelopes of a channnel (note attack).
00139Cr 4               ;
00139Cr 4               ; [in] x/r0 : channel index
00139Cr 4               ;======================================================================================================================
00139Cr 4               
00139Cr 4               .if FAMISTUDIO_EXP_VRC7
00139Cr 4               
00139Cr 4               famistudio_do_vrc7_note_attack:
00139Cr 4               
00139Cr 4                   @chan_idx = famistudio_r0
00139Cr 4               
00139Cr 4                   ; Set trigger flag for VRC7
00139Cr 4                   lda #1
00139Cr 4                   ldx @chan_idx
00139Cr 4                   sta famistudio_chn_vrc7_trigger-FAMISTUDIO_VRC7_CH0_IDX,x
00139Cr 4                   rts
00139Cr 4               
00139Cr 4               .endif
00139Cr 4               
00139Cr 4               .if FAMISTUDIO_EXP_EPSM
00139Cr 4               
00139Cr 4               famistudio_do_epsm_note_attack:
00139Cr 4               
00139Cr 4                   @chan_idx = famistudio_r0
00139Cr 4                   @tmp_y    = famistudio_r1
00139Cr 4               
00139Cr 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT+FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
00139Cr 4                   sty @tmp_y
00139Cr 4                   ldy @chan_idx
00139Cr 4                   cpy #FAMISTUDIO_EPSM_CHAN_FM_START
00139Cr 4                   bcs @fm_or_rhythm_channel
00139Cr 4               .endif
00139Cr 4               
00139Cr 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
00139Cr 4               @square_channel:
00139Cr 4               
00139Cr 4                   ; Reset mixer/noise envelopes.
00139Cr 4                   ldx famistudio_channel_env,y
00139Cr 4                   lda #0
00139Cr 4                   sta famistudio_env_repeat+FAMISTUDIO_ENV_MIXER_IDX_OFF,x
00139Cr 4                   sta famistudio_env_ptr+FAMISTUDIO_ENV_MIXER_IDX_OFF,x
00139Cr 4                   sta famistudio_env_value+FAMISTUDIO_ENV_MIXER_IDX_OFF,x
00139Cr 4                   sta famistudio_env_repeat+FAMISTUDIO_ENV_NOISE_IDX_OFF,x
00139Cr 4                   sta famistudio_env_ptr+FAMISTUDIO_ENV_NOISE_IDX_OFF,x
00139Cr 4                   sta famistudio_env_value+FAMISTUDIO_ENV_NOISE_IDX_OFF,x
00139Cr 4               
00139Cr 4                   ; Set hi-bit of envelope shape to remember to reset it.
00139Cr 4                   lda #$80
00139Cr 4                   ldx @chan_idx
00139Cr 4                   ora famistudio_epsm_chn_env_shape-FAMISTUDIO_EPSM_CH0_IDX,x
00139Cr 4                   sta famistudio_epsm_chn_env_shape-FAMISTUDIO_EPSM_CH0_IDX,x
00139Cr 4               
00139Cr 4                   beq @done
00139Cr 4               .endif
00139Cr 4               
00139Cr 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT+FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
00139Cr 4               @fm_or_rhythm_channel:
00139Cr 4               
00139Cr 4                   ; Set trigger flag for FM/rhythm. For rhythm we'll actually write
00139Cr 4                   ; out of bounds here, but the rhtyhm key array is immediately after.
00139Cr 4                   lda #1
00139Cr 4                   sta famistudio_chn_epsm_trigger-FAMISTUDIO_EPSM_CHAN_FM_START,y
00139Cr 4               .endif
00139Cr 4               
00139Cr 4               @done:
00139Cr 4                   ldx @chan_idx
00139Cr 4                   ldy @tmp_y
00139Cr 4                   rts
00139Cr 4               
00139Cr 4               .endif
00139Cr 4               
00139Cr 4               .if FAMISTUDIO_EXP_N163
00139Cr 4               
00139Cr 4               famistudio_do_n163_note_attack:
00139Cr 4               
00139Cr 4                   @chan_idx = famistudio_r0
00139Cr 4                   @tmp_y    = famistudio_r1
00139Cr 4               
00139Cr 4                   ; Reset wave envelope.
00139Cr 4                   sty @tmp_y
00139Cr 4                   ldy @chan_idx
00139Cr 4                   ldx famistudio_channel_env,y
00139Cr 4                   lda #0
00139Cr 4                   sta famistudio_env_repeat+FAMISTUDIO_ENV_N163_WAVE_IDX_OFF,x
00139Cr 4                   lda #1 ; Index 0 is release point, so envelope starts at 1.
00139Cr 4                   sta famistudio_env_ptr+FAMISTUDIO_ENV_N163_WAVE_IDX_OFF,x
00139Cr 4               
00139Cr 4                   ; Clear wave index to -1 to force reload.
00139Cr 4                   ldx @chan_idx
00139Cr 4                   lda #$ff
00139Cr 4                   sta famistudio_chn_n163_wave_index-FAMISTUDIO_N163_CH0_IDX, x
00139Cr 4                   ldy @tmp_y
00139Cr 4                   rts
00139Cr 4               
00139Cr 4               .endif
00139Cr 4               
00139Cr 4               .if FAMISTUDIO_EXP_S5B
00139Cr 4               
00139Cr 4               famistudio_do_s5b_note_attack:
00139Cr 4               
00139Cr 4                   @chan_idx = famistudio_r0
00139Cr 4                   @tmp_y    = famistudio_r1
00139Cr 4               
00139Cr 4                   ; Reset mixer/noise envelopes.
00139Cr 4                   sty @tmp_y
00139Cr 4                   ldy @chan_idx
00139Cr 4                   ldx famistudio_channel_env,y
00139Cr 4                   lda #0
00139Cr 4                   sta famistudio_env_repeat+FAMISTUDIO_ENV_MIXER_IDX_OFF,x
00139Cr 4                   sta famistudio_env_ptr+FAMISTUDIO_ENV_MIXER_IDX_OFF,x
00139Cr 4                   sta famistudio_env_value+FAMISTUDIO_ENV_MIXER_IDX_OFF,x
00139Cr 4                   sta famistudio_env_repeat+FAMISTUDIO_ENV_NOISE_IDX_OFF,x
00139Cr 4                   sta famistudio_env_ptr+FAMISTUDIO_ENV_NOISE_IDX_OFF,x
00139Cr 4                   sta famistudio_env_value+FAMISTUDIO_ENV_NOISE_IDX_OFF,x
00139Cr 4                   ldx @chan_idx
00139Cr 4                   ldy @tmp_y
00139Cr 4               
00139Cr 4                   ; Set hi-bit of envelope shape to remember to reset it.
00139Cr 4                   lda #$80
00139Cr 4                   ora famistudio_s5b_chn_env_shape-FAMISTUDIO_S5B_CH0_IDX,x
00139Cr 4                   sta famistudio_s5b_chn_env_shape-FAMISTUDIO_S5B_CH0_IDX,x
00139Cr 4                   rts
00139Cr 4               
00139Cr 4               .endif
00139Cr 4               
00139Cr 4               .if FAMISTUDIO_EXP_FDS
00139Cr 4               
00139Cr 4               famistudio_do_fds_note_attack:
00139Cr 4               
00139Cr 4                   @chan_idx = famistudio_r0
00139Cr 4               
00139Cr 4                   ; TODO : We used to set the modulation value here, but that's bad.
00139Cr 4                   ; https://www.nesdev.org/wiki/FDS_audio#Mod_frequency_high_($4087)
00139Cr 4                   ; lda #$80
00139Cr 4                   ; sta FAMISTUDIO_FDS_MOD_HI
00139Cr 4                   ; lda #0
00139Cr 4                   ; sta FAMISTUDIO_FDS_SWEEP_BIAS
00139Cr 4               
00139Cr 4                   lda famistudio_fds_mod_delay
00139Cr 4                   sta famistudio_fds_mod_delay_counter
00139Cr 4                   ldx @chan_idx
00139Cr 4                   rts
00139Cr 4               
00139Cr 4               .endif
00139Cr 4               
00139Cr 4               famistudio_do_note_attack:
00139Cr 4               
00139Cr 4                   @chan_idx = famistudio_r0
00139Cr 4                   @tmp_x    = famistudio_r2
00139Cr 4               
00139Cr 4               .if FAMISTUDIO_CFG_EQUALIZER
00139Cr 4  A9 09            lda #9
00139Er 4  9D rr rr         sta famistudio_chn_note_counter,x
0013A1r 4               .endif
0013A1r 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
0013A1r 4                   lda @chan_idx
0013A1r 4                   cmp #FAMISTUDIO_EPSM_CHAN_RHYTHM_START
0013A1r 4                   bcs @epsm_instrument
0013A1r 4               .endif
0013A1r 4  BD rr rr         lda famistudio_channel_env,x
0013A4r 4  AA               tax
0013A5r 4               
0013A5r 4                   ; Volume envelope.
0013A5r 4  A9 01            lda #1
0013A7r 4  9D rr rr         sta famistudio_env_ptr,x ; Reset volume envelope pointer to 1 (volume have releases point in index 0)
0013AAr 4  A9 00            lda #0
0013ACr 4  9D rr rr         sta famistudio_env_repeat,x
0013AFr 4               
0013AFr 4                   ; Arpeggio envelope
0013AFr 4  9D rr rr         sta famistudio_env_repeat+FAMISTUDIO_ENV_NOTE_OFF,x
0013B2r 4  9D rr rr         sta famistudio_env_ptr+FAMISTUDIO_ENV_NOTE_OFF,x
0013B5r 4               
0013B5r 4                   ; Duty envelope (optional)
0013B5r 4  A5 rr            lda @chan_idx
0013B7r 4  C9 02            cmp #2 ; Triangle has no duty.
0013B9r 4  F0 18            beq @no_duty
0013BBr 4               .if FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_S5B || FAMISTUDIO_EXP_FDS || FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_EPSM
0013BBr 4                   cmp #5
0013BBr 4                   bcs @no_duty
0013BBr 4               .endif
0013BBr 4               @duty:
0013BBr 4  A9 00            lda #0
0013BDr 4  9D rr rr         sta famistudio_env_repeat+FAMISTUDIO_ENV_DUTY_OFF,x
0013C0r 4  9D rr rr         sta famistudio_env_ptr+FAMISTUDIO_ENV_DUTY_OFF,x
0013C3r 4                   .if FAMISTUDIO_USE_DUTYCYCLE_EFFECT
0013C3r 4  86 rr                stx @tmp_x
0013C5r 4  A6 rr                ldx @chan_idx
0013C7r 4  BD rr rr             lda famistudio_channel_to_dutycycle,x
0013CAr 4  AA                   tax
0013CBr 4  BD rr rr             lda famistudio_duty_cycle,x
0013CEr 4  A6 rr                ldx @tmp_x
0013D0r 4                   .endif
0013D0r 4  9D rr rr         sta famistudio_env_value+FAMISTUDIO_ENV_DUTY_OFF,x
0013D3r 4               
0013D3r 4               @no_duty:
0013D3r 4                   ; Pitch envelope
0013D3r 4  A6 rr            ldx @chan_idx
0013D5r 4  BD rr rr         lda famistudio_channel_to_pitch_env, x
0013D8r 4  30 11            bmi @no_pitch
0013DAr 4  AA               tax
0013DBr 4               
0013DBr 4               @reset_pitch_env:
0013DBr 4  A9 00            lda #0
0013DDr 4  9D rr rr         sta famistudio_pitch_env_value_lo,x
0013E0r 4  9D rr rr         sta famistudio_pitch_env_value_hi,x
0013E3r 4  9D rr rr         sta famistudio_pitch_env_repeat,x
0013E6r 4  A9 01            lda #1
0013E8r 4  9D rr rr         sta famistudio_pitch_env_ptr,x     ; Reset pitch envelope pointer to 1 (pitch envelope have relative/absolute flag in the first byte)
0013EBr 4               
0013EBr 4               @no_pitch:
0013EBr 4               
0013EBr 4               .if FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_EPSM || FAMISTUDIO_EXP_S5B || FAMISTUDIO_EXP_FDS
0013EBr 4                   lda @chan_idx
0013EBr 4                   cmp #5
0013EBr 4                   bcc @done
0013EBr 4                   @vrc7_instrument:
0013EBr 4                   .if FAMISTUDIO_EXP_VRC7
0013EBr 4                       jmp famistudio_do_vrc7_note_attack
0013EBr 4                   .endif
0013EBr 4                   @n163_instrument:
0013EBr 4                   .if FAMISTUDIO_EXP_N163
0013EBr 4                       jmp famistudio_do_n163_note_attack
0013EBr 4                   .endif
0013EBr 4                   @s5b_instrument:
0013EBr 4                   .if FAMISTUDIO_EXP_S5B
0013EBr 4                       jmp famistudio_do_s5b_note_attack
0013EBr 4                   .endif
0013EBr 4                   @fds_instrument:
0013EBr 4                   .if FAMISTUDIO_EXP_FDS
0013EBr 4                       jmp famistudio_do_fds_note_attack
0013EBr 4                   .endif
0013EBr 4                   @epsm_instrument:
0013EBr 4                   .if FAMISTUDIO_EXP_EPSM
0013EBr 4                       jmp famistudio_do_epsm_note_attack
0013EBr 4                   .endif
0013EBr 4               .endif
0013EBr 4               
0013EBr 4               @done:
0013EBr 4  A6 rr            ldx @chan_idx
0013EDr 4  60               rts
0013EEr 4               
0013EEr 4               ;======================================================================================================================
0013EEr 4               ; FAMISTUDIO_LOAD_BASIC_ENVELOPES (internal)
0013EEr 4               ;
0013EEr 4               ; Internal function to load the most common envelopes (volume, arp, duty (optional) and pitch) for an instrument.
0013EEr 4               ;
0013EEr 4               ; [in] x:      first envelope index.
0013EEr 4               ; [in] r0:     instrument index.
0013EEr 4               ; [in] ptr1/y: point to instrument data to load.
0013EEr 4               ;======================================================================================================================
0013EEr 4               
0013EEr 4               famistudio_load_basic_envelopes:
0013EEr 4               
0013EEr 4                   @instrument_ptr = famistudio_ptr1
0013EEr 4                   @chan_idx      = famistudio_r0
0013EEr 4                   @tmp_x         = famistudio_r3
0013EEr 4               
0013EEr 4                   ; Volume envelope
0013EEr 4  B1 rr            lda (@instrument_ptr),y
0013F0r 4  9D rr rr         sta famistudio_env_addr_lo,x
0013F3r 4  C8               iny
0013F4r 4  B1 rr            lda (@instrument_ptr),y
0013F6r 4  C8               iny
0013F7r 4  9D rr rr         sta famistudio_env_addr_hi,x
0013FAr 4  E8               inx
0013FBr 4               
0013FBr 4                   ; Arpeggio envelope
0013FBr 4               .if FAMISTUDIO_USE_ARPEGGIO
0013FBr 4  86 rr            stx @tmp_x
0013FDr 4  A6 rr            ldx @chan_idx
0013FFr 4  BD rr rr         lda famistudio_chn_env_override,x ; Check if its overriden by arpeggio.
001402r 4  4A               lsr
001403r 4  A6 rr            ldx @tmp_x
001405r 4  90 04            bcc @arpeggio_envelope
001407r 4  C8               iny ; Instrument arpeggio is overriden by arpeggio, dont touch!
001408r 4  4C rr rr         jmp @duty_envelope
00140Br 4               .endif
00140Br 4               
00140Br 4               @arpeggio_envelope:
00140Br 4  B1 rr            lda (@instrument_ptr),y
00140Dr 4  9D rr rr         sta famistudio_env_addr_lo,x
001410r 4  C8               iny
001411r 4  B1 rr            lda (@instrument_ptr),y
001413r 4  9D rr rr         sta famistudio_env_addr_hi,x
001416r 4               
001416r 4               @duty_envelope:
001416r 4                   ; Duty cycle envelope
001416r 4  A5 rr            lda @chan_idx
001418r 4  C9 02            cmp #2 ; Triangle has no duty.
00141Ar 4  F0 10            beq @no_duty
00141Cr 4               .if FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_S5B || FAMISTUDIO_EXP_FDS || FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_EPSM
00141Cr 4                   cmp #5
00141Cr 4                   bcs @pitch_envelope
00141Cr 4               .endif
00141Cr 4                   @duty:
00141Cr 4  E8                   inx
00141Dr 4  C8                   iny
00141Er 4  B1 rr                lda (@instrument_ptr),y
001420r 4  9D rr rr             sta famistudio_env_addr_lo,x
001423r 4  C8                   iny
001424r 4  B1 rr                lda (@instrument_ptr),y
001426r 4  9D rr rr             sta famistudio_env_addr_hi,x
001429r 4  4C rr rr             jmp @pitch_envelope
00142Cr 4                   @no_duty:
00142Cr 4  C8                   iny
00142Dr 4  C8                   iny
00142Er 4               
00142Er 4               @pitch_envelope:
00142Er 4                   ; Pitch envelopes.
00142Er 4               .if !FAMISTUDIO_EXP_NONE
00142Er 4                   stx @tmp_x
00142Er 4               .endif
00142Er 4  A6 rr            ldx @chan_idx
001430r 4               .if FAMISTUDIO_USE_VIBRATO
001430r 4  BD rr rr         lda famistudio_chn_env_override,x
001433r 4  0A               asl ; Bit-7 tells us if the pitch env is overriden, temporarely store in carry.
001434r 4               .endif
001434r 4  BD rr rr         lda famistudio_channel_to_pitch_env, x
001437r 4  30 14            bmi @done
001439r 4  AA               tax
00143Ar 4               .if FAMISTUDIO_USE_VIBRATO
00143Ar 4  6A               ror ; Bring back our bit-7 from above.
00143Br 4  10 04            bpl @no_vibrato ; In bit 7 is set, instrument pitch is overriden by vibrato, dont touch pitch envelope!
00143Dr 4  C8               iny
00143Er 4  C8               iny
00143Fr 4  D0 0C            bne @done
001441r 4                   @no_vibrato:
001441r 4               .endif
001441r 4  C8               iny
001442r 4  B1 rr            lda (@instrument_ptr),y
001444r 4  9D rr rr         sta famistudio_pitch_env_addr_lo,x
001447r 4  C8               iny
001448r 4  B1 rr            lda (@instrument_ptr),y
00144Ar 4  9D rr rr         sta famistudio_pitch_env_addr_hi,x
00144Dr 4               @done:
00144Dr 4               .if !FAMISTUDIO_EXP_NONE
00144Dr 4                   ; For expansion, preserve X (envelope index) and Y (pointer in instrument data)
00144Dr 4                   ; as they may want to load more after.
00144Dr 4                   ldx @tmp_x
00144Dr 4                   inx
00144Dr 4                   iny
00144Dr 4               .endif
00144Dr 4  60               rts
00144Er 4               
00144Er 4               ;======================================================================================================================
00144Er 4               ; FAMISTUDIO_SET_INSTRUMENT (internal)
00144Er 4               ;
00144Er 4               ; Internal function to set an instrument for a given channel. Will initialize all instrument envelopes.
00144Er 4               ;
00144Er 4               ; [in] x/r0: channel index
00144Er 4               ; [in] a:    instrument index.
00144Er 4               ;======================================================================================================================
00144Er 4               
00144Er 4               famistudio_set_instrument:
00144Er 4               
00144Er 4                   @instrument_ptr = famistudio_ptr1
00144Er 4                   @chan_idx      = famistudio_r0
00144Er 4               
00144Er 4                   ; Pre-multiply by 4 if not using extended range, faster pointer arithmetic.
00144Er 4                   .if !FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE
00144Er 4  0A               asl a
00144Fr 4  0A               asl a
001450r 4                   .endif
001450r 4               
001450r 4  A4 rr            ldy @chan_idx
001452r 4  BE rr rr         ldx famistudio_channel_env,y
001455r 4               
001455r 4               .if FAMISTUDIO_EXP_FDS || FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_EPSM || FAMISTUDIO_EXP_S5B
001455r 4                   cpy #5
001455r 4                   bcc @base_instrument
001455r 4                   .if FAMISTUDIO_EXP_FDS
001455r 4                   @fds_instrument:
001455r 4                       jmp famistudio_set_fds_instrument
001455r 4                   .endif
001455r 4                   .if FAMISTUDIO_EXP_VRC7
001455r 4                   @vrc7_instrument:
001455r 4                       jmp famistudio_set_vrc7_instrument
001455r 4                   .endif
001455r 4                   .if FAMISTUDIO_EXP_N163
001455r 4                   @n163_instrument:
001455r 4                       jmp famistudio_set_n163_instrument
001455r 4                   .endif
001455r 4                   .if FAMISTUDIO_EXP_S5B
001455r 4                   @s5b_instrument:
001455r 4                       jmp famistudio_set_s5b_instrument
001455r 4                   .endif
001455r 4                   .if FAMISTUDIO_EXP_EPSM
001455r 4                   @epsm_instrument:
001455r 4                       jmp famistudio_set_epsm_instrument
001455r 4                   .endif
001455r 4               .endif
001455r 4               
001455r 4               @base_instrument:
001455r 4               
001455r 4                   .if !FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE
001455r 4  0A                   asl ; Instrument number is pre multiplied by 4
001456r 4  A8                   tay
001457r 4  AD rr rr             lda famistudio_instrument_hi
00145Ar 4  69 00                adc #0 ; Use carry to extend range for 64 instruments
00145Cr 4  85 rr                sta @instrument_ptr+1
00145Er 4  AD rr rr             lda famistudio_instrument_lo
001461r 4  85 rr                sta @instrument_ptr+0
001463r 4                   .else
001463r 4                       ; Multiply by instrument stride of 8.
001463r 4                       ldy #0
001463r 4                       sty @instrument_ptr+1
001463r 4                       asl
001463r 4                       rol @instrument_ptr+1
001463r 4                       asl
001463r 4                       rol @instrument_ptr+1
001463r 4                       asl
001463r 4                       rol @instrument_ptr+1
001463r 4                       clc
001463r 4                       adc famistudio_instrument_lo
001463r 4                       sta @instrument_ptr+0
001463r 4                       lda @instrument_ptr+1
001463r 4                       adc famistudio_instrument_hi
001463r 4                       sta @instrument_ptr+1
001463r 4                   .endif
001463r 4               
001463r 4  4C rr rr         jmp famistudio_load_basic_envelopes ; Will 'rts'
001466r 4               
001466r 4               .if FAMISTUDIO_EXP_FDS || FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_EPSM || FAMISTUDIO_EXP_S5B
001466r 4               
001466r 4               ;======================================================================================================================
001466r 4               ; FAMISTUDIO_GET_EXP_INST_PTR (internal)
001466r 4               ;
001466r 4               ; Retrives the expansion instrument pointer for a given index.
001466r 4               ;
001466r 4               ; [in]  a:      instrument index.
001466r 4               ; [out] ptr1/y: the instrument pointer + offset
001466r 4               ;======================================================================================================================
001466r 4               
001466r 4               famistudio_get_exp_inst_ptr:
001466r 4               
001466r 4                   @instrument_ptr = famistudio_ptr1
001466r 4               
001466r 4               .if !FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE
001466r 4                   asl ; Instrument number is pre multiplied by 4
001466r 4                   asl
001466r 4                   tay
001466r 4                   lda famistudio_exp_instrument_hi
001466r 4                   adc #0  ; Use carry to extend range for 32 expansion instruments
001466r 4                   sta @instrument_ptr+1
001466r 4                   lda famistudio_exp_instrument_lo
001466r 4                   sta @instrument_ptr+0
001466r 4               .else
001466r 4                   ; Multiply by expansion instrument stride of 16.
001466r 4                   ldy #0
001466r 4                   sty @instrument_ptr+1
001466r 4                   asl
001466r 4                   rol @instrument_ptr+1
001466r 4                   asl
001466r 4                   rol @instrument_ptr+1
001466r 4                   asl
001466r 4                   rol @instrument_ptr+1
001466r 4                   asl
001466r 4                   rol @instrument_ptr+1
001466r 4                   clc
001466r 4                   adc famistudio_exp_instrument_lo
001466r 4                   sta @instrument_ptr+0
001466r 4                   lda @instrument_ptr+1
001466r 4                   adc famistudio_exp_instrument_hi
001466r 4                   sta @instrument_ptr+1
001466r 4               .endif
001466r 4               
001466r 4                   rts
001466r 4               
001466r 4               .endif
001466r 4               
001466r 4               .if FAMISTUDIO_EXP_FDS || FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_EPSM
001466r 4               
001466r 4               .macro skip_exp_basic_envelopes
001466r 4               .if FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE
001466r 4                   ldy #6
001466r 4               .else
001466r 4                   iny
001466r 4                   iny
001466r 4                   iny
001466r 4                   iny
001466r 4                   iny
001466r 4                   iny
001466r 4               .endif
001466r 4               .endmacro
001466r 4               
001466r 4               .endif
001466r 4               
001466r 4               .if FAMISTUDIO_EXP_VRC7
001466r 4               
001466r 4               ;======================================================================================================================
001466r 4               ; FAMISTUDIO_SET_VRC7_INSTRUMENT (internal)
001466r 4               ;
001466r 4               ; Internal function to set a VRC7 instrument for a given channel. Will load custom patch if needed.
001466r 4               ;
001466r 4               ; [in] y/r0: channel index
001466r 4               ; [in] x:    index of first envelope of instrument
001466r 4               ; [in] a:    instrument index.
001466r 4               ;======================================================================================================================
001466r 4               
001466r 4               famistudio_set_vrc7_instrument:
001466r 4               
001466r 4                   @ptr          = famistudio_ptr1
001466r 4                   @chan_idx     = famistudio_r0
001466r 4                   @update_flags = famistudio_r1 ; bit 7 = no attack, bit 6 = has set delayed cut
001466r 4               
001466r 4                   jsr famistudio_get_exp_inst_ptr
001466r 4                   bit @update_flags
001466r 4                   bpl @load_envelopes
001466r 4               
001466r 4                   @skip_envelopes:
001466r 4                       skip_exp_basic_envelopes
001466r 4                       jmp @load_patch
001466r 4                   @load_envelopes:
001466r 4                       jsr famistudio_load_basic_envelopes
001466r 4               
001466r 4                   @load_patch:
001466r 4                   ldx @chan_idx
001466r 4                   lda (@ptr),y
001466r 4                   sta famistudio_chn_vrc7_patch-FAMISTUDIO_VRC7_CH0_IDX,x
001466r 4                   bne @done
001466r 4               
001466r 4                   @read_custom_patch:
001466r 4                   ldx #0
001466r 4                   iny
001466r 4                   iny
001466r 4                   @read_patch_loop:
001466r 4                       stx FAMISTUDIO_VRC7_REG_SEL
001466r 4                       jsr famistudio_vrc7_wait_reg_select
001466r 4                       lda (@ptr),y
001466r 4                       iny
001466r 4                       sta FAMISTUDIO_VRC7_REG_WRITE
001466r 4                       jsr famistudio_vrc7_wait_reg_write
001466r 4                       inx
001466r 4                       cpx #8
001466r 4                       bne @read_patch_loop
001466r 4               
001466r 4                   @done:
001466r 4                   rts
001466r 4               
001466r 4               .endif
001466r 4               
001466r 4               .if FAMISTUDIO_EXP_S5B
001466r 4               
001466r 4               ;======================================================================================================================
001466r 4               ; FAMISTUDIO_SET_S5B_INSTRUMENT (internal)
001466r 4               ;
001466r 4               ; Internal function to set a S5B instrument.
001466r 4               ;
001466r 4               ; [in] y/r0: channel index
001466r 4               ; [in] x:    index of first envelope of instrument
001466r 4               ; [in] a:    instrument index.
001466r 4               ;======================================================================================================================
001466r 4               
001466r 4               famistudio_set_s5b_instrument:
001466r 4               
001466r 4                   @chan_idx = famistudio_r0
001466r 4                   @ptr      = famistudio_ptr1
001466r 4               
001466r 4                   jsr famistudio_get_exp_inst_ptr
001466r 4                   jsr famistudio_load_basic_envelopes
001466r 4               
001466r 4                   @mixer:
001466r 4                   sec
001466r 4               
001466r 4                   ; After 'famistudio_load_basic_envelopes' x should point to the correct envelope.
001466r 4                   @loop:
001466r 4                       lda (@ptr),y
001466r 4                       sta famistudio_env_addr_lo,x
001466r 4                       iny
001466r 4                       lda (@ptr),y
001466r 4                       sta famistudio_env_addr_hi,x
001466r 4                       bcc @load_env_params
001466r 4                       clc
001466r 4                       inx
001466r 4                       iny
001466r 4                       bcc @loop
001466r 4               
001466r 4                   @load_env_params:
001466r 4               
001466r 4                   ; Envelope shape + auto-pitch octave
001466r 4                   ldx @chan_idx
001466r 4                   iny
001466r 4                   lda (@ptr),y
001466r 4                   sta famistudio_s5b_chn_env_shape-FAMISTUDIO_S5B_CH0_IDX,x
001466r 4                   iny
001466r 4                   lda (@ptr),y
001466r 4                   sta famistudio_s5b_chn_env_octave-FAMISTUDIO_S5B_CH0_IDX,x
001466r 4               
001466r 4                   ; Skip if using auto-period
001466r 4                   cmp #$80
001466r 4                   bne @done
001466r 4               
001466r 4                   ; Skip if effect set manual period this frame.
001466r 4                   lda famistudio_s5b_env_override
001466r 4                   bne @done
001466r 4               
001466r 4                   iny
001466r 4                   lda (@ptr),y
001466r 4                   sta famistudio_s5b_env_period_lo
001466r 4                   iny
001466r 4                   lda (@ptr),y
001466r 4                   sta famistudio_s5b_env_period_hi
001466r 4               
001466r 4                   @done:
001466r 4                   rts
001466r 4               
001466r 4               .endif
001466r 4               
001466r 4               .if FAMISTUDIO_EXP_EPSM
001466r 4               
001466r 4               ;======================================================================================================================
001466r 4               ; FAMISTUDIO_SET_EPSM_INSTRUMENT (internal)
001466r 4               ;
001466r 4               ; Internal function to set a EPSM instrument.
001466r 4               ;
001466r 4               ; [in] x/r0: channel index
001466r 4               ; [in] a:    instrument index.
001466r 4               ;======================================================================================================================
001466r 4               
001466r 4               famistudio_set_epsm_instrument:
001466r 4               
001466r 4                   @ptr          = famistudio_ptr1
001466r 4                   @env_ptr      = famistudio_ptr2
001466r 4                   @ex_patch     = famistudio_ptr2
001466r 4                   @chan_idx     = famistudio_r0
001466r 4                   @chan_idx2    = famistudio_r0
001466r 4                   @update_flags = famistudio_r1 ; bit 7 = no attack, bit 6 = has set delayed cut
001466r 4                   @reg_offset   = famistudio_r3
001466r 4               
001466r 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
001466r 4                   cpy #FAMISTUDIO_EPSM_CHAN_RHYTHM_START
001466r 4                   bcc @process_regular_instrument
001466r 4                       ; We are processing a rhythm instrument, so skip all the fluff.
001466r 4                       ; We only need to load the volume of the instrument and store it in the attack.
001466r 4                       ; load the instrument
001466r 4                       ;sty @chan_idx
001466r 4                   jsr famistudio_get_exp_inst_ptr
001466r 4               
001466r 4                       ; Load the offset for the rhythm track and keep it in x
001466r 4                       ldx @chan_idx
001466r 4                       lda famistudio_rhythm_lut-FAMISTUDIO_EPSM_CHAN_RHYTHM_START, x
001466r 4                       tax
001466r 4               
001466r 4                       ; Read the first envelope pointer for the volume, we'll use this to get the volume later
001466r 4               	sty @reg_offset
001466r 4                   lda (@ptr),y
001466r 4                   sta @env_ptr
001466r 4                   iny
001466r 4                   lda (@ptr),y
001466r 4                   sta @env_ptr+1
001466r 4                   ; the first value is the release point, so load the second offset which is the volume
001466r 4                   ldy #1
001466r 4                   lda (@env_ptr),y
001466r 4                   and #$0F
001466r 4                   sta famistudio_chn_epsm_rhythm_volume,x
001466r 4                   lda @reg_offset
001466r 4                   clc
001466r 4                   adc #14 ; skip over envelopes + square stuff.
001466r 4                   tay
001466r 4                   lda (@ptr),y
001466r 4                   sta @ex_patch
001466r 4                   iny
001466r 4                   lda (@ptr),y
001466r 4                   sta @ex_patch+1
001466r 4               	ldy #1
001466r 4                   lda (@ex_patch),y
001466r 4                   and #$c0
001466r 4                   sta famistudio_chn_epsm_rhythm_stereo,x
001466r 4               
001466r 4                       rts
001466r 4               .endif
001466r 4               @process_regular_instrument:
001466r 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT > 0
001466r 4                   cpy #FAMISTUDIO_EPSM_CHAN_FM_START
001466r 4                   bcc @skip_fm_instrument
001466r 4                       sta famistudio_chn_epsm_fm_instrument-FAMISTUDIO_EPSM_CHAN_FM_START,y
001466r 4                   @skip_fm_instrument:
001466r 4               .endif
001466r 4                   jsr famistudio_get_exp_inst_ptr
001466r 4                   bit @update_flags
001466r 4                   bpl @load_envelopes
001466r 4               
001466r 4                   ; The exporter will ensure this only happens on FM channels.
001466r 4                   @skip_envelopes:
001466r 4                       skip_exp_basic_envelopes
001466r 4                       jmp @check_square_channel
001466r 4                   @load_envelopes:
001466r 4                       jsr famistudio_load_basic_envelopes
001466r 4               
001466r 4                   @check_square_channel:
001466r 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT > 0
001466r 4                   ; channels 0-2 (square) do not need any further handling since they do not support patches
001466r 4                   lda @chan_idx
001466r 4                   cmp #FAMISTUDIO_EPSM_CHAN_FM_START
001466r 4                   bcs @not_square_channel
001466r 4                       ;lda famistudio_channel_env,x
001466r 4                       ;tax
001466r 4               .endif
001466r 4               .if FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
001466r 4                       @noise:
001466r 4                       sec
001466r 4               
001466r 4                   @loop:
001466r 4                       lda (@ptr),y
001466r 4                       sta famistudio_env_addr_lo,x
001466r 4                       iny
001466r 4                       lda (@ptr),y
001466r 4                       sta famistudio_env_addr_hi,x
001466r 4                       bcc @load_env_params
001466r 4                       clc
001466r 4                       inx
001466r 4                       iny
001466r 4                       bcc @loop
001466r 4               
001466r 4                   @load_env_params:
001466r 4               
001466r 4                       ; Envelope shape + auto-pitch octave
001466r 4                       ldx @chan_idx
001466r 4                       iny
001466r 4                       lda (@ptr),y
001466r 4                       sta famistudio_epsm_chn_env_shape-FAMISTUDIO_EPSM_CH0_IDX,x
001466r 4                       iny
001466r 4                       lda (@ptr),y
001466r 4                       sta famistudio_epsm_chn_env_octave-FAMISTUDIO_EPSM_CH0_IDX,x
001466r 4               
001466r 4                       ; Skip if using auto-period
001466r 4                       cmp #$80
001466r 4                       bne @done
001466r 4               
001466r 4                       ; Skip if effect set manual period this frame.
001466r 4                       lda famistudio_epsm_env_override
001466r 4                       bne @done
001466r 4               
001466r 4                       iny
001466r 4                       lda (@ptr),y
001466r 4                       sta famistudio_epsm_env_period_lo
001466r 4                       iny
001466r 4                       lda (@ptr),y
001466r 4                       sta famistudio_epsm_env_period_hi
001466r 4               
001466r 4                       @done:
001466r 4               
001466r 4               .endif
001466r 4                       rts
001466r 4               
001466r 4               @not_square_channel:
001466r 4                   rts
001466r 4               .endif
001466r 4               
001466r 4               .if FAMISTUDIO_EXP_FDS
001466r 4               
001466r 4               ;======================================================================================================================
001466r 4               ; FAMISTUDIO_SET_FDS_INSTRUMENT (internal)
001466r 4               ;
001466r 4               ; Internal function to set a FDS instrument. Will upload the wave and modulation envelope if needed.
001466r 4               ;
001466r 4               ; [in] y/r0: channel index
001466r 4               ; [in] x:    index of first envelope of instrument
001466r 4               ; [in] a:    instrument index.
001466r 4               ;======================================================================================================================
001466r 4               
001466r 4               famistudio_set_fds_instrument:
001466r 4               
001466r 4                   @ptr          = famistudio_ptr1
001466r 4                   @wave_ptr     = famistudio_ptr2
001466r 4                   @tmp_y        = famistudio_r3
001466r 4               
001466r 4                   jsr famistudio_get_exp_inst_ptr
001466r 4                   jsr famistudio_load_basic_envelopes
001466r 4               
001466r 4                   @write_fds_wave:
001466r 4               
001466r 4                       ora #$80
001466r 4                       sta FAMISTUDIO_FDS_VOL ; Enable wave RAM write
001466r 4               
001466r 4                       ; FDS Waveform
001466r 4                       lda (@ptr),y
001466r 4                       sta @wave_ptr+0
001466r 4                       iny
001466r 4                       lda (@ptr),y
001466r 4                       sta @wave_ptr+1
001466r 4                       iny
001466r 4                       sty @tmp_y
001466r 4               
001466r 4                       ldy #0
001466r 4                       @wave_loop:
001466r 4                           lda (@wave_ptr),y
001466r 4                           sta FAMISTUDIO_FDS_WAV_START,y
001466r 4                           iny
001466r 4                           cpy #64
001466r 4                           bne @wave_loop
001466r 4               
001466r 4                       ldy @tmp_y
001466r 4                       lda #$80
001466r 4                       sta FAMISTUDIO_FDS_MOD_HI ; Need to disable modulation before writing.
001466r 4                       lda (@ptr),y ; Read master volume
001466r 4                       sta FAMISTUDIO_FDS_VOL ; Disable RAM write.
001466r 4                       lda #0
001466r 4                       sta FAMISTUDIO_FDS_SWEEP_BIAS
001466r 4                       iny
001466r 4               
001466r 4                       ; FDS Modulation
001466r 4                       lda (@ptr),y
001466r 4                       sta @wave_ptr+0
001466r 4                       iny
001466r 4                       lda (@ptr),y
001466r 4                       sta @wave_ptr+1
001466r 4                       iny
001466r 4                       sty @tmp_y
001466r 4               
001466r 4                       ldy #0
001466r 4                       @mod_loop:
001466r 4                           lda (@wave_ptr),y
001466r 4                           sta FAMISTUDIO_FDS_MOD_TABLE
001466r 4                           iny
001466r 4                           cpy #32
001466r 4                           bne @mod_loop
001466r 4               
001466r 4                       ldy @tmp_y
001466r 4               
001466r 4                   @load_mod_param:
001466r 4               
001466r 4                   .if FAMISTUDIO_USE_FDS_AUTOMOD
001466r 4                       lda (@ptr),y
001466r 4                       beq @check_mod_speed
001466r 4               
001466r 4                       @auto_mod:
001466r 4                           iny
001466r 4                           lda (@ptr),y
001466r 4                           sta famistudio_fds_automod_numer
001466r 4                           iny
001466r 4                           lda (@ptr),y
001466r 4                           sta famistudio_fds_automod_denom
001466r 4                           bne @check_mod_depth
001466r 4                   .else
001466r 4                       iny
001466r 4                       iny
001466r 4                   .endif
001466r 4               
001466r 4                       @check_mod_speed:
001466r 4                           iny
001466r 4                           .if FAMISTUDIO_USE_FDS_AUTOMOD
001466r 4                               lda #0
001466r 4                               sta famistudio_fds_automod_numer
001466r 4                           .endif
001466r 4                           bit famistudio_fds_override_flags
001466r 4                           bmi @mod_speed_overriden
001466r 4               
001466r 4                           @load_mod_speed:
001466r 4                               lda (@ptr),y
001466r 4                               sta famistudio_fds_mod_speed+0
001466r 4                               iny
001466r 4                               lda (@ptr),y
001466r 4                               sta famistudio_fds_mod_speed+1
001466r 4                               jmp @check_mod_depth
001466r 4               
001466r 4                           @mod_speed_overriden:
001466r 4                               iny
001466r 4               
001466r 4                       @check_mod_depth:
001466r 4                           iny
001466r 4                           bit famistudio_fds_override_flags
001466r 4                           bvs @mod_depth_overriden
001466r 4               
001466r 4                           @load_mod_depth:
001466r 4                               lda (@ptr),y
001466r 4                               sta famistudio_fds_mod_depth
001466r 4               
001466r 4                           @mod_depth_overriden:
001466r 4                               iny
001466r 4                               lda (@ptr),y
001466r 4                               sta famistudio_fds_mod_delay
001466r 4                   rts
001466r 4               
001466r 4               .endif
001466r 4               
001466r 4               .if FAMISTUDIO_EXP_N163
001466r 4               
001466r 4               famistudio_n163_wave_table:
001466r 4                   .byte FAMISTUDIO_N163_REG_WAVE - $00
001466r 4                   .byte FAMISTUDIO_N163_REG_WAVE - $08
001466r 4                   .byte FAMISTUDIO_N163_REG_WAVE - $10
001466r 4                   .byte FAMISTUDIO_N163_REG_WAVE - $18
001466r 4                   .byte FAMISTUDIO_N163_REG_WAVE - $20
001466r 4                   .byte FAMISTUDIO_N163_REG_WAVE - $28
001466r 4                   .byte FAMISTUDIO_N163_REG_WAVE - $30
001466r 4                   .byte FAMISTUDIO_N163_REG_WAVE - $38
001466r 4               
001466r 4               ;======================================================================================================================
001466r 4               ; FAMISTUDIO_UPDATE_N163_WAVE (internal)
001466r 4               ;
001466r 4               ; Internal function to upload the waveform (if needed) of an N163 instrument.
001466r 4               ;
001466r 4               ; [in] y: N163 channel idx (0,1,2,3,4,5,6,7)
001466r 4               ;======================================================================================================================
001466r 4               
001466r 4               famistudio_update_n163_wave:
001466r 4               
001466r 4                   @ptr           = famistudio_ptr1
001466r 4                   @wave_ptr      = famistudio_ptr0
001466r 4                   @wave_pos      = famistudio_r1
001466r 4                   @wave_len      = famistudio_r2
001466r 4               
001466r 4                   lda famistudio_n163_env_table, y
001466r 4                   tax
001466r 4               
001466r 4                   ; See if the wave index has changed.
001466r 4                   lda famistudio_env_value+FAMISTUDIO_ENV_N163_WAVE_IDX_OFF,x
001466r 4                   cmp famistudio_chn_n163_wave_index,y
001466r 4                   beq @done
001466r 4               
001466r 4                   ; Retrieve the instrument pointer.
001466r 4                   sta famistudio_chn_n163_wave_index,y
001466r 4                   tya
001466r 4                   tax
001466r 4                   lda famistudio_chn_n163_instrument,y
001466r 4                   jsr famistudio_get_exp_inst_ptr
001466r 4               
001466r 4                   lda famistudio_n163_wave_table, x
001466r 4                   sta FAMISTUDIO_N163_ADDR
001466r 4               
001466r 4                   ; Wave position
001466r 4                   tya
001466r 4                   adc #8 ; Carry is clear here.
001466r 4                   tay
001466r 4                   lda (@ptr),y
001466r 4                   sta @wave_pos
001466r 4                   sta FAMISTUDIO_N163_DATA
001466r 4                   iny
001466r 4               
001466r 4                   ; Wave length
001466r 4                   lda (@ptr),y
001466r 4                   lsr
001466r 4                   sta @wave_len
001466r 4                   lda #$80 ; (128 - wave length / 2) * 2 == 256 - wave length
001466r 4                   sec
001466r 4                   sbc @wave_len
001466r 4                   asl
001466r 4                   sta famistudio_chn_n163_wave_len, x
001466r 4                   iny
001466r 4               
001466r 4                   ; Load the wave table pointer.
001466r 4                   lda (@ptr),y
001466r 4                   sta @wave_ptr+0
001466r 4                   iny
001466r 4                   lda (@ptr),y
001466r 4                   sta @wave_ptr+1
001466r 4               
001466r 4                   ; Load the pointer for the current wave in the table.
001466r 4                   lda famistudio_chn_n163_wave_index,x
001466r 4                   asl
001466r 4                   tay
001466r 4                   lda (@wave_ptr),y
001466r 4                   sta @ptr+0
001466r 4                   iny
001466r 4                   lda (@wave_ptr),y
001466r 4                   sta @ptr+1
001466r 4               
001466r 4                   ; Upload to N163
001466r 4                   ldy #0
001466r 4                   lda @wave_pos
001466r 4                   lsr
001466r 4                   ora #$80
001466r 4                   sta FAMISTUDIO_N163_ADDR
001466r 4                   ldy #0
001466r 4                   @wave_loop:
001466r 4                       lda (@ptr),y
001466r 4                       sta FAMISTUDIO_N163_DATA
001466r 4                       iny
001466r 4                       cpy @wave_len
001466r 4                       bne @wave_loop
001466r 4               
001466r 4                   txa
001466r 4                   tay
001466r 4               
001466r 4                   @done:
001466r 4                   rts
001466r 4               
001466r 4               ;======================================================================================================================
001466r 4               ; FAMISTUDIO_SET_N163_INSTRUMENT (internal)
001466r 4               ;
001466r 4               ; Internal function to set a N163 instrument.
001466r 4               ;
001466r 4               ; [in] y/r0: channel index
001466r 4               ; [in] x:    index of first envelope of instrument
001466r 4               ; [in] a:    instrument index.
001466r 4               ;======================================================================================================================
001466r 4               
001466r 4               famistudio_set_n163_instrument:
001466r 4               
001466r 4                   @ptr      = famistudio_ptr1
001466r 4                   @chan_idx = famistudio_r0
001466r 4               
001466r 4                   ; Store instrument number (premultipled by 4 if not using extended range)
001466r 4                   sta famistudio_chn_n163_instrument-FAMISTUDIO_N163_CH0_IDX,y
001466r 4               
001466r 4                   jsr famistudio_get_exp_inst_ptr
001466r 4                   jsr famistudio_load_basic_envelopes
001466r 4               
001466r 4                   ; Load the wave index envelope, x will point to the correct envelope.
001466r 4                   lda (@ptr),y
001466r 4                   sta famistudio_env_addr_lo,x
001466r 4                   iny
001466r 4                   lda (@ptr),y
001466r 4                   sta famistudio_env_addr_hi,x
001466r 4               
001466r 4                   rts
001466r 4               
001466r 4               .endif
001466r 4               
001466r 4               ;======================================================================================================================
001466r 4               ; FAMISTUDIO_UPDATE_CHANNEL (internal)
001466r 4               ;
001466r 4               ; Advances the song by one frame for a given channel. If a new note or effect(s) are found, they will be processed.
001466r 4               ;
001466r 4               ; [in]  x: channel index
001466r 4               ; [out] z: non-zero if we triggered a new note.
001466r 4               ;======================================================================================================================
001466r 4               
001466r 4               famistudio_advance_channel:
001466r 4               
001466r 4                   @chan_idx         = famistudio_r0
001466r 4                   @update_flags     = famistudio_r1 ; bit 7 = no attack, bit 6 = has set delayed cut
001466r 4                   @temp_ptr_y       = famistudio_r2
001466r 4                   @tmp_slide_from   = famistudio_r2
001466r 4                   @tmp_slide_idx    = famistudio_r2
001466r 4                   @tmp_duty_cycle   = famistudio_r2
001466r 4                   @tmp_ptr_lo       = famistudio_r2
001466r 4                   @tmp_y1           = famistudio_r2
001466r 4                   @slide_delta_lo   = famistudio_ptr1_hi
001466r 4                   @tmp_y2           = famistudio_ptr1_lo
001466r 4                   @channel_data_ptr = famistudio_ptr0
001466r 4                   @opcode_jmp_ptr   = famistudio_ptr1
001466r 4                   @tempo_env_ptr    = famistudio_ptr1
001466r 4                   @env_ptr          = famistudio_ptr1
001466r 4               
001466r 4  BD rr rr         lda famistudio_chn_repeat,x
001469r 4  F0 06            beq @no_repeat
00146Br 4  DE rr rr         dec famistudio_chn_repeat,x
00146Er 4  A9 00            lda #0
001470r 4  60               rts
001471r 4               
001471r 4               @no_repeat:
001471r 4  BD rr rr         lda famistudio_chn_ptr_lo,x
001474r 4  85 rr            sta @channel_data_ptr+0
001476r 4  BD rr rr         lda famistudio_chn_ptr_hi,x
001479r 4  85 rr            sta @channel_data_ptr+1
00147Br 4  A0 00            ldy #0
00147Dr 4  84 rr            sty @update_flags
00147Fr 4  86 rr            stx @chan_idx
001481r 4               
001481r 4               @read_byte:
001481r 4  B1 rr            lda (@channel_data_ptr),y
001483r 4  C8               iny
001484r 4               
001484r 4               ; $80 to $ff = sequence of empty notes (up to 64) or instrument changes (up to 64)
001484r 4               @check_negative:
001484r 4  09 00            ora #0
001486r 4  30 2A            bmi @empty_notes_or_instrument_change
001488r 4               
001488r 4               ; $00 to $3f = notes from C1 to D6 (most common notes, same as FT2 range)
001488r 4               ; $40 to $6f = opcodes for various things.
001488r 4               @check_regular_note:
001488r 4  C9 40            cmp #$40
00148Ar 4  90 3C            bcc @common_note
00148Cr 4               
00148Cr 4               .if FAMISTUDIO_USE_VOLUME_TRACK
00148Cr 4               ; $70 to $7f = volume change
00148Cr 4               @check_volume_track:
00148Cr 4  C9 70            cmp #$70
00148Er 4  90 10            bcc @jmp_to_opcode
001490r 4               
001490r 4               @volume_track:
001490r 4  29 0F            and #$0f
001492r 4  0A               asl
001493r 4  0A               asl
001494r 4  0A               asl
001495r 4  0A               asl
001496r 4  9D rr rr         sta famistudio_chn_volume_track,x
001499r 4                   ; Clear any volume slide.
001499r 4                   .if FAMISTUDIO_USE_VOLUME_SLIDES
001499r 4  A9 00                lda #0
00149Br 4  9D rr rr             sta famistudio_chn_volume_slide_step,x
00149Er 4                   .endif
00149Er 4  90 E1            bcc @read_byte
0014A0r 4               .endif
0014A0r 4               
0014A0r 4               @jmp_to_opcode:
0014A0r 4  29 3F            and #$3f
0014A2r 4  AA               tax
0014A3r 4  BD rr rr         lda @famistudio_opcode_jmp_lo,x
0014A6r 4  85 rr            sta @opcode_jmp_ptr+0
0014A8r 4  BD rr rr         lda @famistudio_opcode_jmp_hi,x
0014ABr 4  85 rr            sta @opcode_jmp_ptr+1
0014ADr 4  A6 rr            ldx @chan_idx
0014AFr 4  6C rr rr         jmp (@opcode_jmp_ptr)
0014B2r 4               
0014B2r 4               @empty_notes_or_instrument_change:
0014B2r 4  29 7F            and #$7f
0014B4r 4  4A               lsr a
0014B5r 4  B0 0C            bcs @set_repeat
0014B7r 4               
0014B7r 4               @instrument_change:
0014B7r 4                   ; Set the instrument. `famistudio_set_instrument` (or proc it calls) are not
0014B7r 4                   ; allowed to clobber r0/r1/r2 or ptr0.
0014B7r 4  84 rr            sty @temp_ptr_y
0014B9r 4  20 rr rr         jsr famistudio_set_instrument ; Will clobber x/y, need to save/restore them.
0014BCr 4  A4 rr            ldy @temp_ptr_y
0014BEr 4  A6 rr            ldx @chan_idx
0014C0r 4  4C rr rr         jmp @read_byte
0014C3r 4               
0014C3r 4               @set_repeat:
0014C3r 4  9D rr rr         sta famistudio_chn_repeat,x ; Set up repeat counter
0014C6r 4  B0 4D            bcs @done
0014C8r 4               
0014C8r 4               @common_note:
0014C8r 4  C9 00            cmp #0
0014CAr 4  F0 02            beq @play_note
0014CCr 4  69 0B                adc #11 ; Carry is set here.
0014CEr 4               
0014CEr 4               @play_note:
0014CEr 4  9D rr rr         sta famistudio_chn_note,x ; Store note code
0014D1r 4               
0014D1r 4               .if FAMISTUDIO_USE_SLIDE_NOTES
0014D1r 4               @clear_previous_slide:
0014D1r 4  BD rr rr         lda famistudio_channel_to_slide,x ; Clear any previous slide on new note.
0014D4r 4  30 08            bmi @cancel_delayed_cut
0014D6r 4  AA               tax
0014D7r 4  A9 00            lda #0
0014D9r 4  9D rr rr         sta famistudio_slide_step,x
0014DCr 4  A6 rr            ldx @chan_idx
0014DEr 4               .endif
0014DEr 4               
0014DEr 4               @cancel_delayed_cut:
0014DEr 4               .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
0014DEr 4                   ; Any note with an attack clears any pending delayed cut, unless it was set during this update (flags bit 6).
0014DEr 4  24 rr            bit @update_flags
0014E0r 4  70 05            bvs @check_dpcm_channel
0014E2r 4  A9 FF            lda #$ff
0014E4r 4  9D rr rr         sta famistudio_chn_cut_delay,x
0014E7r 4               .endif
0014E7r 4               
0014E7r 4               @check_dpcm_channel:
0014E7r 4               .if FAMISTUDIO_CFG_DPCM_SUPPORT
0014E7r 4                   ; We play/stop DPCM samples immediately.
0014E7r 4  E0 04            cpx #4
0014E9r 4  D0 1E            bne @check_attack
0014EBr 4  AD rr rr             lda famistudio_chn_note+4
0014EEr 4  D0 07                bne @play_sample
0014F0r 4  20 rr rr             jsr famistudio_sample_stop
0014F3r 4  A2 04                ldx #4
0014F5r 4  D0 1E                bne @done
0014F7r 4                       @play_sample:
0014F7r 4  E9 0C                    sbc #12 ; Carry already set. HACK : Our "notes" for DPCM start at SingleByteNoteMin (12). Need to undo that here. See C# code.
0014F9r 4  84 rr                    sty @tmp_y1
0014FBr 4  20 rr rr                 jsr famistudio_music_sample_play
0014FEr 4  A4 rr                    ldy @tmp_y1
001500r 4  A2 04                    ldx #4
001502r 4                           .if FAMISTUDIO_CFG_EQUALIZER
001502r 4  A9 09                        lda #9
001504r 4  9D rr rr                     sta famistudio_chn_note_counter,x
001507r 4                           .endif
001507r 4  D0 0C                    bne @done
001509r 4               .endif
001509r 4               
001509r 4               @check_attack:
001509r 4  BD rr rr         lda famistudio_chn_note,x
00150Cr 4  F0 07            beq @done
00150Er 4  24 rr            bit @update_flags
001510r 4  30 03            bmi @done
001512r 4               
001512r 4                   ; Note attack. `famistudio_do_note_attack` (or any proc it calls) are not
001512r 4                   ; allowed to clobber r0 or ptr0. They can clobber r1 if they are done using it.
001512r 4  20 rr rr         jsr famistudio_do_note_attack ; Note attack.
001515r 4               
001515r 4               @done:
001515r 4  BD rr rr         lda famistudio_chn_ref_len,x ; Check reference row counter
001518r 4  F0 12            beq @flush_y                 ; If it is zero, there is no reference
00151Ar 4  DE rr rr         dec famistudio_chn_ref_len,x ; Decrease row counter
00151Dr 4  D0 0D            bne @flush_y
00151Fr 4               
00151Fr 4  BD rr rr         lda famistudio_chn_return_lo,x ; End of a reference, return to previous pointer
001522r 4  9D rr rr         sta famistudio_chn_ptr_lo,x
001525r 4  BD rr rr         lda famistudio_chn_return_hi,x
001528r 4  9D rr rr         sta famistudio_chn_ptr_hi,x
00152Br 4  60               rts
00152Cr 4               
00152Cr 4               @flush_y:
00152Cr 4               
00152Cr 4  18               clc
00152Dr 4  98               tya
00152Er 4  65 rr            adc @channel_data_ptr+0
001530r 4  9D rr rr         sta famistudio_chn_ptr_lo,x
001533r 4  A9 00            lda #0
001535r 4  65 rr            adc @channel_data_ptr+1
001537r 4  9D rr rr         sta famistudio_chn_ptr_hi,x
00153Ar 4  60               rts
00153Br 4               
00153Br 4               @opcode_extended_note:
00153Br 4  B1 rr            lda (@channel_data_ptr),y
00153Dr 4  C8               iny
00153Er 4  4C rr rr         jmp @play_note
001541r 4               
001541r 4               @opcode_set_reference:
001541r 4  18               clc ; Remember return address+3
001542r 4  98               tya
001543r 4  69 03            adc #3
001545r 4  65 rr            adc @channel_data_ptr+0
001547r 4  9D rr rr         sta famistudio_chn_return_lo,x
00154Ar 4  A5 rr            lda @channel_data_ptr+1
00154Cr 4  69 00            adc #0
00154Er 4  9D rr rr         sta famistudio_chn_return_hi,x
001551r 4  B1 rr            lda (@channel_data_ptr),y ; Read length of the reference (how many rows)
001553r 4  9D rr rr         sta famistudio_chn_ref_len,x
001556r 4  C8               iny
001557r 4  B1 rr            lda (@channel_data_ptr),y ; Read 16-bit absolute address of the reference
001559r 4  85 rr            sta @tmp_ptr_lo
00155Br 4  C8               iny
00155Cr 4  B1 rr            lda (@channel_data_ptr),y
00155Er 4  85 rr            sta @channel_data_ptr+1
001560r 4  A5 rr            lda @tmp_ptr_lo
001562r 4  85 rr            sta @channel_data_ptr+0
001564r 4  A0 00            ldy #0
001566r 4  4C rr rr         jmp @read_byte
001569r 4               
001569r 4               @opcode_loop:
001569r 4  B1 rr            lda (@channel_data_ptr),y
00156Br 4  85 rr            sta @tmp_ptr_lo
00156Dr 4  C8               iny
00156Er 4  B1 rr            lda (@channel_data_ptr),y
001570r 4  85 rr            sta @channel_data_ptr+1
001572r 4  A5 rr            lda @tmp_ptr_lo
001574r 4  85 rr            sta @channel_data_ptr+0
001576r 4  A0 00            ldy #0
001578r 4  4C rr rr         jmp @read_byte
00157Br 4               
00157Br 4               @opcode_disable_attack:
00157Br 4  A9 80            lda #$80
00157Dr 4  05 rr            ora @update_flags
00157Fr 4  85 rr            sta @update_flags
001581r 4  4C rr rr         jmp @read_byte
001584r 4               
001584r 4               @opcode_end_song:
001584r 4  A9 80            lda #$80 ; TODO : Should we stop, or just call famistudio_music_stop here?
001586r 4  8D rr rr         sta famistudio_song_speed
001589r 4  4C rr rr         jmp @read_byte
00158Cr 4               
00158Cr 4               .if FAMISTUDIO_USE_RELEASE_NOTES
00158Cr 4               @jump_to_release_envelope:
00158Cr 4  BD rr rr         lda famistudio_env_addr_lo,x ; Load envelope data address into temp
00158Fr 4  85 rr            sta @env_ptr+0
001591r 4  BD rr rr         lda famistudio_env_addr_hi,x
001594r 4  85 rr            sta @env_ptr+1
001596r 4               
001596r 4  84 rr            sty @tmp_y1
001598r 4  A0 00            ldy #0
00159Ar 4  B1 rr            lda (@env_ptr),y ; Read first byte of the envelope data, this contains the release index.
00159Cr 4  F0 08            beq @env_has_no_release
00159Er 4               
00159Er 4  9D rr rr         sta famistudio_env_ptr,x
0015A1r 4  A9 00            lda #0
0015A3r 4  9D rr rr         sta famistudio_env_repeat,x ; Need to reset envelope repeat to force update.
0015A6r 4               
0015A6r 4               @env_has_no_release:
0015A6r 4  A6 rr            ldx @chan_idx
0015A8r 4  A4 rr            ldy @tmp_y1
0015AAr 4  60               rts
0015ABr 4               
0015ABr 4               .if FAMISTUDIO_EXP_VRC7
0015ABr 4               @opcode_vrc7_release_note:
0015ABr 4                   lda #$80
0015ABr 4                   sta famistudio_chn_vrc7_trigger-FAMISTUDIO_VRC7_CH0_IDX,x ; Set release flag for VRC7
0015ABr 4               .endif
0015ABr 4               
0015ABr 4               .if FAMISTUDIO_EXP_FDS
0015ABr 4               @opcode_fds_release_note:
0015ABr 4                   ldx #FAMISTUDIO_FDS_CH0_ENVS
0015ABr 4                   jsr @jump_to_release_envelope
0015ABr 4               .endif
0015ABr 4               
0015ABr 4               .if FAMISTUDIO_EXP_N163
0015ABr 4               @opcode_n163_release_note:
0015ABr 4                   lda famistudio_channel_env,x
0015ABr 4                   tax
0015ABr 4                   inx ; +2 for FAMISTUDIO_ENV_N163_WAVE_IDX_OFF.
0015ABr 4                   inx
0015ABr 4                   jsr @jump_to_release_envelope
0015ABr 4               .endif
0015ABr 4               
0015ABr 4               .if FAMISTUDIO_EXP_EPSM
0015ABr 4               @opcode_epsm_release_note:
0015ABr 4                   lda #$80
0015ABr 4               	.if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT+FAMISTUDIO_EXP_EPSM_RHYTHM_CNT > 0
0015ABr 4                   sta famistudio_chn_epsm_trigger-FAMISTUDIO_EPSM_CHAN_FM_START,x ; Set release flag for EPSM
0015ABr 4               	.endif
0015ABr 4               .endif
0015ABr 4               
0015ABr 4               @opcode_release_note:
0015ABr 4  BD rr rr         lda famistudio_channel_to_volume_env,x ; DPCM(5) will never have releases.
0015AEr 4  AA               tax
0015AFr 4  20 rr rr         jsr @jump_to_release_envelope
0015B2r 4  18               clc
0015B3r 4  4C rr rr         jmp @done
0015B6r 4               .endif
0015B6r 4               
0015B6r 4               .if FAMISTUDIO_EXP_EPSM && FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
0015B6r 4               @opcode_epsm_manual_env_period:
0015B6r 4                   lda (@channel_data_ptr),y
0015B6r 4                   iny
0015B6r 4                   sta famistudio_epsm_env_period_lo
0015B6r 4                   lda (@channel_data_ptr),y
0015B6r 4                   iny
0015B6r 4                   sta famistudio_epsm_env_period_hi
0015B6r 4                   lda #1
0015B6r 4                   sta famistudio_epsm_env_override
0015B6r 4                   jmp @read_byte
0015B6r 4               .endif
0015B6r 4               
0015B6r 4               .if FAMISTUDIO_EXP_S5B
0015B6r 4               @opcode_s5b_manual_env_period:
0015B6r 4                   lda (@channel_data_ptr),y
0015B6r 4                   iny
0015B6r 4                   sta famistudio_s5b_env_period_lo
0015B6r 4                   lda (@channel_data_ptr),y
0015B6r 4                   iny
0015B6r 4                   sta famistudio_s5b_env_period_hi
0015B6r 4                   lda #1
0015B6r 4                   sta famistudio_s5b_env_override
0015B6r 4                   jmp @read_byte
0015B6r 4               .endif
0015B6r 4               
0015B6r 4               .if FAMISTUDIO_USE_FAMITRACKER_TEMPO
0015B6r 4               @opcode_famitracker_speed:
0015B6r 4  B1 rr            lda (@channel_data_ptr),y
0015B8r 4  C8               iny
0015B9r 4  8D rr rr         sta famistudio_song_speed
0015BCr 4  4C rr rr         jmp @read_byte
0015BFr 4               .endif
0015BFr 4               
0015BFr 4               .if FAMISTUDIO_EXP_FDS
0015BFr 4               @opcode_fds_mod_depth:
0015BFr 4                   lda (@channel_data_ptr),y
0015BFr 4                   iny
0015BFr 4                   sta famistudio_fds_mod_depth
0015BFr 4                   lda #$40
0015BFr 4                   ora famistudio_fds_override_flags
0015BFr 4                   sta famistudio_fds_override_flags
0015BFr 4                   jmp @read_byte
0015BFr 4               
0015BFr 4               @opcode_fds_mod_speed:
0015BFr 4                   lda (@channel_data_ptr),y
0015BFr 4                   iny
0015BFr 4                   sta famistudio_fds_mod_speed+0
0015BFr 4                   lda (@channel_data_ptr),y
0015BFr 4                   iny
0015BFr 4                   sta famistudio_fds_mod_speed+1
0015BFr 4                   lda #$80
0015BFr 4                   ora famistudio_fds_override_flags
0015BFr 4                   sta famistudio_fds_override_flags
0015BFr 4                   jmp @read_byte
0015BFr 4               .endif
0015BFr 4               
0015BFr 4               .if FAMISTUDIO_EXP_VRC6
0015BFr 4               @opcode_vrc6_saw_volume:
0015BFr 4                   lda (@channel_data_ptr),y
0015BFr 4                   iny
0015BFr 4                   sta famistudio_vrc6_saw_volume
0015BFr 4                   jmp @read_byte
0015BFr 4               .endif
0015BFr 4               
0015BFr 4               .if FAMISTUDIO_USE_VOLUME_SLIDES
0015BFr 4               @opcode_volume_slide:
0015BFr 4  B1 rr            lda (@channel_data_ptr),y
0015C1r 4  C8               iny
0015C2r 4  9D rr rr         sta famistudio_chn_volume_slide_step, x
0015C5r 4  B1 rr            lda (@channel_data_ptr),y
0015C7r 4  C8               iny
0015C8r 4  9D rr rr         sta famistudio_chn_volume_slide_target, x
0015CBr 4  4C rr rr         jmp @read_byte
0015CEr 4               .endif
0015CEr 4               
0015CEr 4               .if FAMISTUDIO_USE_DELTA_COUNTER
0015CEr 4               @opcode_dmc_counter:
0015CEr 4                   lda (@channel_data_ptr),y
0015CEr 4                   bmi @set_immediately
0015CEr 4               @store_for_later:
0015CEr 4                   sta famistudio_dmc_delta_counter
0015CEr 4                   bpl @inc_and_return
0015CEr 4               @set_immediately:
0015CEr 4                   and #$7f
0015CEr 4                   sta FAMISTUDIO_APU_DMC_RAW
0015CEr 4               @inc_and_return:
0015CEr 4                   iny
0015CEr 4                   jmp @read_byte
0015CEr 4               .endif
0015CEr 4               
0015CEr 4               .if FAMISTUDIO_USE_PHASE_RESET
0015CEr 4               @opcode_phase_reset:
0015CEr 4                   lda famistudio_channel_to_phase_reset_mask, x
0015CEr 4                   ora famistudio_phase_reset
0015CEr 4                   sta famistudio_phase_reset
0015CEr 4                   jmp @read_byte
0015CEr 4               
0015CEr 4               .if FAMISTUDIO_EXP_N163
0015CEr 4               @opcode_n163_phase_reset:
0015CEr 4                   lda famistudio_channel_to_phase_reset_mask, x
0015CEr 4                   ora famistudio_phase_reset_n163
0015CEr 4                   sta famistudio_phase_reset_n163
0015CEr 4                   jmp @read_byte
0015CEr 4               .endif
0015CEr 4               .endif
0015CEr 4               
0015CEr 4               .if FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE
0015CEr 4               @opcode_extended_instrument:
0015CEr 4                   lda (@channel_data_ptr),y
0015CEr 4                   iny
0015CEr 4                   jmp @instrument_change
0015CEr 4               .endif
0015CEr 4               
0015CEr 4               .if FAMISTUDIO_USE_PITCH_TRACK
0015CEr 4               @opcode_fine_pitch:
0015CEr 4  BD rr rr         lda famistudio_channel_to_pitch_env,x
0015D1r 4  AA               tax
0015D2r 4  B1 rr            lda (@channel_data_ptr),y
0015D4r 4  C8               iny
0015D5r 4  9D rr rr         sta famistudio_pitch_env_fine_value,x
0015D8r 4  A6 rr            ldx @chan_idx
0015DAr 4  4C rr rr         jmp @read_byte
0015DDr 4               .endif
0015DDr 4               
0015DDr 4               .if FAMISTUDIO_USE_VIBRATO
0015DDr 4               @opcode_clear_pitch_override_flag:
0015DDr 4  A9 7F            lda #$7f
0015DFr 4  3D rr rr         and famistudio_chn_env_override,x
0015E2r 4  9D rr rr         sta famistudio_chn_env_override,x
0015E5r 4  4C rr rr         jmp @read_byte
0015E8r 4               
0015E8r 4               @opcode_override_pitch_envelope:
0015E8r 4  A9 80            lda #$80
0015EAr 4  1D rr rr         ora famistudio_chn_env_override,x
0015EDr 4  9D rr rr         sta famistudio_chn_env_override,x
0015F0r 4  BD rr rr         lda famistudio_channel_to_pitch_env,x
0015F3r 4  AA               tax
0015F4r 4  B1 rr            lda (@channel_data_ptr),y
0015F6r 4  C8               iny
0015F7r 4  9D rr rr         sta famistudio_pitch_env_addr_lo,x
0015FAr 4  B1 rr            lda (@channel_data_ptr),y
0015FCr 4  C8               iny
0015FDr 4  9D rr rr         sta famistudio_pitch_env_addr_hi,x
001600r 4  A9 00            lda #0
001602r 4  9D rr rr         sta famistudio_pitch_env_repeat,x
001605r 4  A9 01            lda #1
001607r 4  9D rr rr         sta famistudio_pitch_env_ptr,x
00160Ar 4  A6 rr            ldx @chan_idx
00160Cr 4  4C rr rr         jmp @read_byte
00160Fr 4               .endif
00160Fr 4               
00160Fr 4               .if FAMISTUDIO_USE_ARPEGGIO
00160Fr 4               @opcode_clear_arpeggio_override_flag:
00160Fr 4  A9 FE            lda #$fe
001611r 4  3D rr rr         and famistudio_chn_env_override,x
001614r 4  9D rr rr         sta famistudio_chn_env_override,x
001617r 4  4C rr rr         jmp @read_byte
00161Ar 4               
00161Ar 4               @opcode_override_arpeggio_envelope:
00161Ar 4  A9 01            lda #$01
00161Cr 4  1D rr rr         ora famistudio_chn_env_override,x
00161Fr 4  9D rr rr         sta famistudio_chn_env_override,x
001622r 4  BD rr rr         lda famistudio_channel_to_arpeggio_env,x
001625r 4  AA               tax
001626r 4  B1 rr            lda (@channel_data_ptr),y
001628r 4  C8               iny
001629r 4  9D rr rr         sta famistudio_env_addr_lo,x
00162Cr 4  B1 rr            lda (@channel_data_ptr),y
00162Er 4  C8               iny
00162Fr 4  9D rr rr         sta famistudio_env_addr_hi,x
001632r 4  A9 00            lda #0
001634r 4  9D rr rr         sta famistudio_env_repeat,x ; Reset the envelope since this might be a no-attack note.
001637r 4  9D rr rr         sta famistudio_env_value,x
00163Ar 4  9D rr rr         sta famistudio_env_ptr,x
00163Dr 4  A6 rr            ldx @chan_idx
00163Fr 4  4C rr rr         jmp @read_byte
001642r 4               
001642r 4               @opcode_reset_arpeggio:
001642r 4  BD rr rr         lda famistudio_channel_to_arpeggio_env,x
001645r 4  AA               tax
001646r 4  A9 00            lda #0
001648r 4  9D rr rr         sta famistudio_env_repeat,x
00164Br 4  9D rr rr         sta famistudio_env_value,x
00164Er 4  9D rr rr         sta famistudio_env_ptr,x
001651r 4  A6 rr            ldx @chan_idx
001653r 4  4C rr rr         jmp @read_byte
001656r 4               .endif
001656r 4               
001656r 4               .if FAMISTUDIO_USE_DUTYCYCLE_EFFECT
001656r 4               @opcode_duty_cycle_effect:
001656r 4  BD rr rr         lda famistudio_channel_to_dutycycle,x
001659r 4  AA               tax
00165Ar 4  B1 rr            lda (@channel_data_ptr),y
00165Cr 4  C8               iny
00165Dr 4  9D rr rr         sta famistudio_duty_cycle,x
001660r 4  85 rr            sta @tmp_duty_cycle
001662r 4  A6 rr            ldx @chan_idx
001664r 4  BD rr rr         lda famistudio_channel_to_duty_env,x
001667r 4  AA               tax
001668r 4  A5 rr            lda @tmp_duty_cycle
00166Ar 4  9D rr rr         sta famistudio_env_value,x
00166Dr 4  A6 rr            ldx @chan_idx
00166Fr 4  4C rr rr         jmp @read_byte
001672r 4               .endif
001672r 4               
001672r 4               .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
001672r 4               @opcode_note_delay:
001672r 4  B1 rr            lda (@channel_data_ptr),y
001674r 4  C8               iny
001675r 4  9D rr rr         sta famistudio_chn_note_delay,x
001678r 4  4C rr rr         jmp @flush_y
00167Br 4               
00167Br 4               @opcode_cut_delay:
00167Br 4  A9 40            lda #$40
00167Dr 4  85 rr            sta @update_flags
00167Fr 4  B1 rr            lda (@channel_data_ptr),y
001681r 4  C8               iny
001682r 4  9D rr rr         sta famistudio_chn_cut_delay,x
001685r 4  4C rr rr         jmp @read_byte
001688r 4               .elseif !FAMISTUDIO_USE_FAMITRACKER_TEMPO
001688r 4               @opcode_set_tempo_envelope:
001688r 4                   ; Load and reset the new tempo envelope.
001688r 4                   lda (@channel_data_ptr),y
001688r 4                   iny
001688r 4                   sta famistudio_tempo_env_ptr_lo
001688r 4                   sta @tempo_env_ptr+0
001688r 4                   lda (@channel_data_ptr),y
001688r 4                   iny
001688r 4                   sta famistudio_tempo_env_ptr_hi
001688r 4                   sta @tempo_env_ptr+1
001688r 4                   jmp @reset_tempo_env
001688r 4               @opcode_reset_tempo_envelope:
001688r 4                   lda famistudio_tempo_env_ptr_lo
001688r 4                   sta @tempo_env_ptr+0
001688r 4                   lda famistudio_tempo_env_ptr_hi
001688r 4                   sta @tempo_env_ptr+1
001688r 4               @reset_tempo_env:
001688r 4                   sty @tmp_y1
001688r 4                   ldy #0
001688r 4                   sty famistudio_tempo_env_idx
001688r 4                   lda (@tempo_env_ptr),y
001688r 4                   sta famistudio_tempo_env_counter
001688r 4                   ldy @tmp_y1
001688r 4                   jmp @read_byte
001688r 4               .endif
001688r 4               
001688r 4               .if FAMISTUDIO_USE_SLIDE_NOTES
001688r 4               
001688r 4               .if FAMISTUDIO_USE_NOISE_SLIDE_NOTES
001688r 4               @noise_slide:
001688r 4                   lda (@channel_data_ptr),y ; Read slide step size
001688r 4                   iny
001688r 4                   sta famistudio_slide_step+FAMISTUDIO_NOISE_SLIDE_INDEX
001688r 4                   lda (@channel_data_ptr),y ; Read slide note from
001688r 4                   iny
001688r 4                   sec
001688r 4                   sbc (@channel_data_ptr),y ; Read slide note to
001688r 4                   sta famistudio_slide_pitch_lo+FAMISTUDIO_NOISE_SLIDE_INDEX
001688r 4                   bpl @positive_noise_slide
001688r 4               @negative_noise_slide:
001688r 4                   ; Sign extend.
001688r 4                   lda #$ff
001688r 4                   bmi @noise_shift
001688r 4               @positive_noise_slide:
001688r 4                   lda #$00
001688r 4               @noise_shift:
001688r 4                   ; Noise slides have 4-bits of fraction.
001688r 4                   asl famistudio_slide_pitch_lo+FAMISTUDIO_NOISE_SLIDE_INDEX
001688r 4                   rol
001688r 4                   asl famistudio_slide_pitch_lo+FAMISTUDIO_NOISE_SLIDE_INDEX
001688r 4                   rol
001688r 4                   asl famistudio_slide_pitch_lo+FAMISTUDIO_NOISE_SLIDE_INDEX
001688r 4                   rol
001688r 4                   asl famistudio_slide_pitch_lo+FAMISTUDIO_NOISE_SLIDE_INDEX
001688r 4                   rol
001688r 4                   sta famistudio_slide_pitch_hi+FAMISTUDIO_NOISE_SLIDE_INDEX
001688r 4                   jmp @slide_done_pos
001688r 4               .endif
001688r 4               
001688r 4               @opcode_slide:
001688r 4               .if FAMISTUDIO_USE_NOISE_SLIDE_NOTES
001688r 4                   cpx #3
001688r 4                   beq @noise_slide
001688r 4               .endif
001688r 4  BD rr rr         lda famistudio_channel_to_slide,x
00168Br 4  AA               tax
00168Cr 4  B1 rr            lda (@channel_data_ptr),y ; Read slide step size
00168Er 4  C8               iny
00168Fr 4  9D rr rr         sta famistudio_slide_step,x
001692r 4  B1 rr            lda (@channel_data_ptr),y ; Read slide note from
001694r 4  C8               iny
001695r 4  84 rr            sty @tmp_y2
001697r 4               .if FAMISTUDIO_DUAL_SUPPORT
001697r 4                   clc
001697r 4                   adc famistudio_pal_adjust
001697r 4               .endif
001697r 4  85 rr            sta @tmp_slide_from
001699r 4  B1 rr            lda (@channel_data_ptr),y ; Read slide note to
00169Br 4  A4 rr            ldy @tmp_slide_from       ; reload note from
00169Dr 4               .if FAMISTUDIO_DUAL_SUPPORT
00169Dr 4                   adc famistudio_pal_adjust
00169Dr 4               .endif
00169Dr 4  86 rr            stx @tmp_slide_idx ; X contained the slide index.
00169Fr 4  AA               tax
0016A0r 4               .ifdef FAMISTUDIO_EXP_NOTE_START
0016A0r 4                   lda @chan_idx
0016A0r 4               .if FAMISTUDIO_EXP_EPSM
0016A0r 4                   cmp #FAMISTUDIO_EPSM_CHAN_FM_START
0016A0r 4                   bcs @note_table_epsm
0016A0r 4               .endif
0016A0r 4                   cmp #FAMISTUDIO_EXP_NOTE_START
0016A0r 4                   bcs @note_table_expansion
0016A0r 4               .endif
0016A0r 4  38               sec ; Subtract the pitch of both notes.
0016A1r 4  B9 rr rr         lda famistudio_note_table_lsb,y
0016A4r 4  FD rr rr         sbc famistudio_note_table_lsb,x
0016A7r 4  85 rr            sta @slide_delta_lo
0016A9r 4  B9 rr rr         lda famistudio_note_table_msb,y
0016ACr 4  FD rr rr         sbc famistudio_note_table_msb,x
0016AFr 4               .ifdef FAMISTUDIO_EXP_NOTE_START
0016AFr 4                   jmp @note_table_done
0016AFr 4               .if FAMISTUDIO_EXP_EPSM
0016AFr 4               @note_table_epsm:
0016AFr 4               .if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT > 0
0016AFr 4                   lda famistudio_epsm_note_table_lsb,y
0016AFr 4                   sbc famistudio_epsm_note_table_lsb,x
0016AFr 4                   sta @slide_delta_lo
0016AFr 4                   lda famistudio_epsm_note_table_msb,y
0016AFr 4                   sbc famistudio_epsm_note_table_msb,x
0016AFr 4                   jmp @note_table_done
0016AFr 4               .endif
0016AFr 4               .endif
0016AFr 4               @note_table_expansion:
0016AFr 4                   lda famistudio_exp_note_table_lsb,y
0016AFr 4                   sbc famistudio_exp_note_table_lsb,x
0016AFr 4                   sta @slide_delta_lo
0016AFr 4                   lda famistudio_exp_note_table_msb,y
0016AFr 4                   sbc famistudio_exp_note_table_msb,x
0016AFr 4               @note_table_done:
0016AFr 4               .endif
0016AFr 4  A6 rr            ldx @tmp_slide_idx ; slide index.
0016B1r 4  9D rr rr         sta famistudio_slide_pitch_hi,x
0016B4r 4                   .if FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_EPSM
0016B4r 4                       cpx #FAMISTUDIO_FIRST_POSITIVE_SLIDE_CHANNEL ; Slide #3 is the first of expansion slides.
0016B4r 4                       bcs @positive_shift
0016B4r 4                   .endif
0016B4r 4                   @negative_shift:
0016B4r 4  A5 rr                lda @slide_delta_lo
0016B6r 4  0A                   asl ; Shift-left, we have 1 bit of fractional slide.
0016B7r 4  9D rr rr             sta famistudio_slide_pitch_lo,x
0016BAr 4  3E rr rr             rol famistudio_slide_pitch_hi,x ; Shift-left, we have 1 bit of fractional slide.
0016BDr 4                   .if FAMISTUDIO_EXP_N163 || FAMISTUDIO_EXP_VRC7 || FAMISTUDIO_EXP_EPSM
0016BDr 4                       jmp @shift_done
0016BDr 4                   @positive_shift:
0016BDr 4                       lda @slide_delta_lo
0016BDr 4                       sta famistudio_slide_pitch_lo,x
0016BDr 4                       ldy #FAMISTUDIO_PITCH_SHIFT
0016BDr 4                       @positive_shift_loop:
0016BDr 4                           lda famistudio_slide_pitch_hi,x
0016BDr 4                           cmp #$80
0016BDr 4                           ror famistudio_slide_pitch_hi,x
0016BDr 4                           ror famistudio_slide_pitch_lo,x
0016BDr 4                           dey
0016BDr 4                           bne @positive_shift_loop
0016BDr 4                   @shift_done:
0016BDr 4                   .endif
0016BDr 4  A6 rr            ldx @chan_idx
0016BFr 4  A4 rr            ldy @tmp_y2
0016C1r 4               
0016C1r 4               @slide_done_pos:
0016C1r 4  B1 rr            lda (@channel_data_ptr),y ; Re-read the target note (ugly...)
0016C3r 4  9D rr rr         sta famistudio_chn_note,x ; Store note code
0016C6r 4  C8               iny
0016C7r 4  4C rr rr         jmp @cancel_delayed_cut
0016CAr 4               .endif
0016CAr 4               
0016CAr 4               @opcode_invalid:
0016CAr 4               
0016CAr 4                   ; If you hit this, this mean you either:
0016CAr 4                   ; - exported a song that uses FamiStudio tempo but have defined "FAMISTUDIO_USE_FAMITRACKER_TEMPO"
0016CAr 4                   ; - use delayed notes/cuts, but didnt enable "FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS"
0016CAr 4                   ; - use vibrato effect, but didnt enable "FAMISTUDIO_USE_VIBRATO"
0016CAr 4                   ; - use arpeggiated chords, but didnt enable "FAMISTUDIO_USE_ARPEGGIO"
0016CAr 4                   ; - use fine pitches, but didnt enable "FAMISTUDIO_USE_PITCH_TRACK"
0016CAr 4                   ; - use a duty cycle effect, but didnt enable "FAMISTUDIO_USE_DUTYCYCLE_EFFECT"
0016CAr 4                   ; - use slide notes, but didnt enable "FAMISTUDIO_USE_SLIDE_NOTES"
0016CAr 4                   ; - use volume slides, but didnt enable "FAMISTUDIO_USE_VOLUME_SLIDES"
0016CAr 4                   ; - use DMC counter effect, but didnt enable "FAMISTUDIO_USE_DELTA_COUNTER"
0016CAr 4                   ; - use a Phase Reset efect, but didnt enable the "FAMISTUDIO_USE_PHASE_RESET"
0016CAr 4                   ; - use an instrument > 63, but didnt enable "FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE"
0016CAr 4               
0016CAr 4  00               brk
0016CBr 4               
0016CBr 4               @famistudio_opcode_jmp_lo:
0016CBr 4  rr               .byte <@opcode_extended_note                ; $40
0016CCr 4  rr               .byte <@opcode_set_reference                ; $41
0016CDr 4  rr               .byte <@opcode_loop                         ; $42
0016CEr 4  rr               .byte <@opcode_disable_attack               ; $43
0016CFr 4  rr               .byte <@opcode_end_song                     ; $44
0016D0r 4               .if FAMISTUDIO_USE_RELEASE_NOTES
0016D0r 4  rr               .byte <@opcode_release_note                 ; $45
0016D1r 4               .else
0016D1r 4                   .byte <@opcode_invalid                      ; $45
0016D1r 4               .endif
0016D1r 4               .if FAMISTUDIO_USE_FAMITRACKER_TEMPO
0016D1r 4  rr               .byte <@opcode_famitracker_speed            ; $46
0016D2r 4               .else
0016D2r 4                   .byte <@opcode_invalid                      ; $46
0016D2r 4               .endif
0016D2r 4               .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
0016D2r 4  rr               .byte <@opcode_note_delay                   ; $47
0016D3r 4  rr               .byte <@opcode_cut_delay                    ; $48
0016D4r 4               .elseif !FAMISTUDIO_USE_FAMITRACKER_TEMPO
0016D4r 4                   .byte <@opcode_set_tempo_envelope           ; $47
0016D4r 4                   .byte <@opcode_reset_tempo_envelope         ; $48
0016D4r 4               .else
0016D4r 4                   .byte <@opcode_invalid                      ; $47
0016D4r 4                   .byte <@opcode_invalid                      ; $48
0016D4r 4               .endif
0016D4r 4               .if FAMISTUDIO_USE_VIBRATO
0016D4r 4  rr               .byte <@opcode_override_pitch_envelope      ; $49
0016D5r 4  rr               .byte <@opcode_clear_pitch_override_flag    ; $4a
0016D6r 4               .else
0016D6r 4                   .byte <@opcode_invalid                      ; $49
0016D6r 4                   .byte <@opcode_invalid                      ; $4a
0016D6r 4               .endif
0016D6r 4               .if FAMISTUDIO_USE_ARPEGGIO
0016D6r 4  rr               .byte <@opcode_override_arpeggio_envelope   ; $4b
0016D7r 4  rr               .byte <@opcode_clear_arpeggio_override_flag ; $4c
0016D8r 4  rr               .byte <@opcode_reset_arpeggio               ; $4d
0016D9r 4               .else
0016D9r 4                   .byte <@opcode_invalid                      ; $4b
0016D9r 4                   .byte <@opcode_invalid                      ; $4c
0016D9r 4                   .byte <@opcode_invalid                      ; $4d
0016D9r 4               .endif
0016D9r 4               .if FAMISTUDIO_USE_PITCH_TRACK
0016D9r 4  rr               .byte <@opcode_fine_pitch                   ; $4e
0016DAr 4               .else
0016DAr 4                   .byte <@opcode_invalid                      ; $4e
0016DAr 4               .endif
0016DAr 4               .if FAMISTUDIO_USE_DUTYCYCLE_EFFECT
0016DAr 4  rr               .byte <@opcode_duty_cycle_effect            ; $4f
0016DBr 4               .else
0016DBr 4                   .byte <@opcode_invalid                      ; $4f
0016DBr 4               .endif
0016DBr 4               .if FAMISTUDIO_USE_SLIDE_NOTES
0016DBr 4  rr               .byte <@opcode_slide                        ; $50
0016DCr 4               .else
0016DCr 4                   .byte <@opcode_invalid                      ; $50
0016DCr 4               .endif
0016DCr 4               .if FAMISTUDIO_USE_VOLUME_SLIDES
0016DCr 4  rr               .byte <@opcode_volume_slide                 ; $51
0016DDr 4               .else
0016DDr 4                   .byte <@opcode_invalid                      ; $51
0016DDr 4               .endif
0016DDr 4               .if FAMISTUDIO_USE_DELTA_COUNTER
0016DDr 4                   .byte <@opcode_dmc_counter                  ; $52
0016DDr 4               .else
0016DDr 4  rr               .byte <@opcode_invalid                      ; $52
0016DEr 4               .endif
0016DEr 4               .if FAMISTUDIO_USE_PHASE_RESET
0016DEr 4                   .byte <@opcode_phase_reset                  ; $53
0016DEr 4               .else
0016DEr 4  rr               .byte <@opcode_invalid                      ; $53
0016DFr 4               .endif
0016DFr 4               .if FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE
0016DFr 4                   .byte <@opcode_extended_instrument          ; $54
0016DFr 4               .else
0016DFr 4  rr               .byte <@opcode_invalid                      ; $54
0016E0r 4               .endif
0016E0r 4               .if !FAMISTUDIO_EXP_NONE                        ; Begin expansion-specific opcodes
0016E0r 4               .if FAMISTUDIO_EXP_VRC6
0016E0r 4                   .byte <@opcode_vrc6_saw_volume              ; $55
0016E0r 4               .else
0016E0r 4                   .byte <@opcode_invalid                      ; $55
0016E0r 4               .endif
0016E0r 4               .if FAMISTUDIO_EXP_VRC7 && FAMISTUDIO_USE_RELEASE_NOTES
0016E0r 4                   .byte <@opcode_vrc7_release_note            ; $56
0016E0r 4               .else
0016E0r 4                   .byte <@opcode_invalid                      ; $56
0016E0r 4               .endif
0016E0r 4               .if FAMISTUDIO_EXP_FDS
0016E0r 4                   .byte <@opcode_fds_mod_speed                ; $57
0016E0r 4                   .byte <@opcode_fds_mod_depth                ; $58
0016E0r 4               .else
0016E0r 4                   .byte <@opcode_invalid                      ; $57
0016E0r 4                   .byte <@opcode_invalid                      ; $58
0016E0r 4               .endif
0016E0r 4               .if FAMISTUDIO_EXP_FDS && FAMISTUDIO_USE_RELEASE_NOTES
0016E0r 4                   .byte <@opcode_fds_release_note             ; $59
0016E0r 4               .else
0016E0r 4                   .byte <@opcode_invalid                      ; $59
0016E0r 4               .endif
0016E0r 4               .if FAMISTUDIO_EXP_N163 && FAMISTUDIO_USE_RELEASE_NOTES
0016E0r 4                   .byte <@opcode_n163_release_note            ; $5a
0016E0r 4               .else
0016E0r 4                   .byte <@opcode_invalid                      ; $5a
0016E0r 4               .endif
0016E0r 4               .if FAMISTUDIO_EXP_N163 && FAMISTUDIO_USE_PHASE_RESET
0016E0r 4                   .byte <@opcode_n163_phase_reset             ; $5b
0016E0r 4               .else
0016E0r 4                   .byte <@opcode_invalid                      ; $5b
0016E0r 4               .endif
0016E0r 4               .if FAMISTUDIO_EXP_EPSM && FAMISTUDIO_USE_RELEASE_NOTES
0016E0r 4                   .byte <@opcode_epsm_release_note            ; $5c
0016E0r 4               .else
0016E0r 4                   .byte <@opcode_invalid                      ; $5c
0016E0r 4               .endif
0016E0r 4               .if FAMISTUDIO_EXP_EPSM && FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
0016E0r 4                   .byte <@opcode_epsm_manual_env_period       ; $5d
0016E0r 4               .else
0016E0r 4                   .byte <@opcode_invalid                      ; $5d
0016E0r 4               .endif
0016E0r 4               .if FAMISTUDIO_EXP_S5B
0016E0r 4                   .byte <@opcode_s5b_manual_env_period        ; $5e
0016E0r 4               .else
0016E0r 4                   .byte <@opcode_invalid                      ; $5e
0016E0r 4               .endif
0016E0r 4               .endif
0016E0r 4               
0016E0r 4               @famistudio_opcode_jmp_hi:
0016E0r 4  rr               .byte >@opcode_extended_note                ; $40
0016E1r 4  rr               .byte >@opcode_set_reference                ; $41
0016E2r 4  rr               .byte >@opcode_loop                         ; $42
0016E3r 4  rr               .byte >@opcode_disable_attack               ; $43
0016E4r 4  rr               .byte >@opcode_end_song                     ; $44
0016E5r 4               .if FAMISTUDIO_USE_RELEASE_NOTES
0016E5r 4  rr               .byte >@opcode_release_note                 ; $45
0016E6r 4               .else
0016E6r 4                   .byte >@opcode_invalid                      ; $45
0016E6r 4               .endif
0016E6r 4               .if FAMISTUDIO_USE_FAMITRACKER_TEMPO
0016E6r 4  rr               .byte >@opcode_famitracker_speed            ; $46
0016E7r 4               .else
0016E7r 4                   .byte >@opcode_invalid                      ; $46
0016E7r 4               .endif
0016E7r 4               .if FAMISTUDIO_USE_FAMITRACKER_DELAYED_NOTES_OR_CUTS
0016E7r 4  rr               .byte >@opcode_note_delay                   ; $47
0016E8r 4  rr               .byte >@opcode_cut_delay                    ; $48
0016E9r 4               .elseif !FAMISTUDIO_USE_FAMITRACKER_TEMPO
0016E9r 4                   .byte >@opcode_set_tempo_envelope           ; $47
0016E9r 4                   .byte >@opcode_reset_tempo_envelope         ; $48
0016E9r 4               .else
0016E9r 4                   .byte >@opcode_invalid                      ; $47
0016E9r 4                   .byte >@opcode_invalid                      ; $48
0016E9r 4               .endif
0016E9r 4               .if FAMISTUDIO_USE_VIBRATO
0016E9r 4  rr               .byte >@opcode_override_pitch_envelope      ; $49
0016EAr 4  rr               .byte >@opcode_clear_pitch_override_flag    ; $4a
0016EBr 4               .else
0016EBr 4                   .byte >@opcode_invalid                      ; $49
0016EBr 4                   .byte >@opcode_invalid                      ; $4a
0016EBr 4               .endif
0016EBr 4               .if FAMISTUDIO_USE_ARPEGGIO
0016EBr 4  rr               .byte >@opcode_override_arpeggio_envelope   ; $4b
0016ECr 4  rr               .byte >@opcode_clear_arpeggio_override_flag ; $4c
0016EDr 4  rr               .byte >@opcode_reset_arpeggio               ; $4d
0016EEr 4               .else
0016EEr 4                   .byte >@opcode_invalid                      ; $4b
0016EEr 4                   .byte >@opcode_invalid                      ; $4c
0016EEr 4                   .byte >@opcode_invalid                      ; $4d
0016EEr 4               .endif
0016EEr 4               .if FAMISTUDIO_USE_PITCH_TRACK
0016EEr 4  rr               .byte >@opcode_fine_pitch                   ; $4e
0016EFr 4               .else
0016EFr 4                   .byte >@opcode_invalid                      ; $4e
0016EFr 4               .endif
0016EFr 4               .if FAMISTUDIO_USE_DUTYCYCLE_EFFECT
0016EFr 4  rr               .byte >@opcode_duty_cycle_effect            ; $4f
0016F0r 4               .else
0016F0r 4                   .byte >@opcode_invalid                      ; $4f
0016F0r 4               .endif
0016F0r 4               .if FAMISTUDIO_USE_SLIDE_NOTES
0016F0r 4  rr               .byte >@opcode_slide                        ; $50
0016F1r 4               .else
0016F1r 4                   .byte >@opcode_invalid                      ; $50
0016F1r 4               .endif
0016F1r 4               .if FAMISTUDIO_USE_VOLUME_SLIDES
0016F1r 4  rr               .byte >@opcode_volume_slide                 ; $51
0016F2r 4               .else
0016F2r 4                   .byte >@opcode_invalid                      ; $51
0016F2r 4               .endif
0016F2r 4               .if FAMISTUDIO_USE_DELTA_COUNTER
0016F2r 4                   .byte >@opcode_dmc_counter                  ; $52
0016F2r 4               .else
0016F2r 4  rr               .byte >@opcode_invalid                      ; $52
0016F3r 4               .endif
0016F3r 4               .if FAMISTUDIO_USE_PHASE_RESET
0016F3r 4                   .byte >@opcode_phase_reset                  ; $53
0016F3r 4               .else
0016F3r 4  rr               .byte >@opcode_invalid                      ; $53
0016F4r 4               .endif
0016F4r 4               .if FAMISTUDIO_USE_INSTRUMENT_EXTENDED_RANGE
0016F4r 4                   .byte >@opcode_extended_instrument          ; $54
0016F4r 4               .else
0016F4r 4  rr               .byte >@opcode_invalid                      ; $54
0016F5r 4               .endif
0016F5r 4               .if !FAMISTUDIO_EXP_NONE                        ; Begin expansion-specific opcodes
0016F5r 4               .if FAMISTUDIO_EXP_VRC6
0016F5r 4                   .byte >@opcode_vrc6_saw_volume              ; $55
0016F5r 4               .else
0016F5r 4                   .byte >@opcode_invalid                      ; $55
0016F5r 4               .endif
0016F5r 4               .if FAMISTUDIO_EXP_VRC7 && FAMISTUDIO_USE_RELEASE_NOTES
0016F5r 4                   .byte >@opcode_vrc7_release_note            ; $56
0016F5r 4               .else
0016F5r 4                   .byte >@opcode_invalid                      ; $56
0016F5r 4               .endif
0016F5r 4               .if FAMISTUDIO_EXP_FDS
0016F5r 4                   .byte >@opcode_fds_mod_speed                ; $57
0016F5r 4                   .byte >@opcode_fds_mod_depth                ; $58
0016F5r 4               .else
0016F5r 4                   .byte >@opcode_invalid                      ; $57
0016F5r 4                   .byte >@opcode_invalid                      ; $58
0016F5r 4               .endif
0016F5r 4               .if FAMISTUDIO_EXP_FDS && FAMISTUDIO_USE_RELEASE_NOTES
0016F5r 4                   .byte >@opcode_fds_release_note             ; $59
0016F5r 4               .else
0016F5r 4                   .byte >@opcode_invalid                      ; $59
0016F5r 4               .endif
0016F5r 4               .if FAMISTUDIO_EXP_N163 && FAMISTUDIO_USE_RELEASE_NOTES
0016F5r 4                   .byte >@opcode_n163_release_note            ; $5a
0016F5r 4               .else
0016F5r 4                   .byte >@opcode_invalid                      ; $5a
0016F5r 4               .endif
0016F5r 4               .if FAMISTUDIO_EXP_N163 && FAMISTUDIO_USE_PHASE_RESET
0016F5r 4                   .byte >@opcode_n163_phase_reset             ; $5b
0016F5r 4               .else
0016F5r 4                   .byte >@opcode_invalid                      ; $5b
0016F5r 4               .endif
0016F5r 4               .if FAMISTUDIO_EXP_EPSM && FAMISTUDIO_USE_RELEASE_NOTES
0016F5r 4                   .byte >@opcode_epsm_release_note            ; $5c
0016F5r 4               .else
0016F5r 4                   .byte >@opcode_invalid                      ; $5c
0016F5r 4               .endif
0016F5r 4               .if FAMISTUDIO_EXP_EPSM && FAMISTUDIO_EXP_EPSM_SSG_CHN_CNT > 0
0016F5r 4                   .byte >@opcode_epsm_manual_env_period       ; $5d
0016F5r 4               .else
0016F5r 4                   .byte >@opcode_invalid                      ; $5d
0016F5r 4               .endif
0016F5r 4               .if FAMISTUDIO_EXP_S5B
0016F5r 4                   .byte >@opcode_s5b_manual_env_period        ; $5e
0016F5r 4               .else
0016F5r 4                   .byte >@opcode_invalid                      ; $5e
0016F5r 4               .endif
0016F5r 4               .endif
0016F5r 4               
0016F5r 4               ;======================================================================================================================
0016F5r 4               ; FAMISTUDIO_SAMPLE_STOP (internal)
0016F5r 4               ;
0016F5r 4               ; Stop DPCM sample if it plays
0016F5r 4               ;
0016F5r 4               ; [in] no input params.
0016F5r 4               ;======================================================================================================================
0016F5r 4               
0016F5r 4               famistudio_sample_stop:
0016F5r 4               
0016F5r 4  A9 0F            lda #%00001111
0016F7r 4  8D 15 40         sta FAMISTUDIO_APU_SND_CHN
0016FAr 4  60               rts
0016FBr 4               
0016FBr 4               
0016FBr 4               .if FAMISTUDIO_CFG_DPCM_SUPPORT
0016FBr 4               
0016FBr 4               ;======================================================================================================================
0016FBr 4               ; FAMISTUDIO_SAMPLE_PLAY_SFX (public)
0016FBr 4               ;
0016FBr 4               ; Play DPCM sample with higher priority, for sound effects
0016FBr 4               ;
0016FBr 4               ; [in] a: Sample index, 1...63.
0016FBr 4               ;======================================================================================================================
0016FBr 4               
0016FBr 4               famistudio_sfx_sample_play:
0016FBr 4               
0016FBr 4  A2 01            ldx #1
0016FDr 4  8E rr rr         stx famistudio_dpcm_effect
001700r 4               
001700r 4               sample_play:
001700r 4               
001700r 4                   @tmp = famistudio_r3
001700r 4                   @sample_index = famistudio_r3
001700r 4                   @sample_data_ptr = famistudio_ptr1
001700r 4               
001700r 4               .if FAMISTUDIO_USE_DPCM_BANKSWITCHING || FAMISTUDIO_USE_DPCM_EXTENDED_RANGE
001700r 4                   ; famistudio_dpcm_list + sample number * (4 or 5)
001700r 4                   sta @sample_index
001700r 4                   ldy #0
001700r 4                   sty @sample_data_ptr+1
001700r 4                   asl
001700r 4                   rol @sample_data_ptr+1
001700r 4                   asl
001700r 4                   rol @sample_data_ptr+1 ; Will clear carry
001700r 4               .if FAMISTUDIO_USE_DPCM_BANKSWITCHING
001700r 4                   ; Multiply by 5 instead of 4.
001700r 4                   adc @sample_index
001700r 4                   bcc @add_list_ptr
001700r 4                       inc @sample_data_ptr+1
001700r 4                       clc
001700r 4                   @add_list_ptr:
001700r 4               .endif
001700r 4                       adc famistudio_dpcm_list_lo
001700r 4                       sta @sample_data_ptr+0
001700r 4                       lda @sample_data_ptr+1
001700r 4                       adc famistudio_dpcm_list_hi
001700r 4                       sta @sample_data_ptr+1
001700r 4               .else
001700r 4  0A               asl ; Sample number * 4, offset in the sample table
001701r 4  0A               asl ; Carry should be clear now, we dont allow more than 63 sample mappings.
001702r 4  6D rr rr         adc famistudio_dpcm_list_lo
001705r 4  85 rr            sta @sample_data_ptr+0
001707r 4  A9 00            lda #0
001709r 4  6D rr rr         adc famistudio_dpcm_list_hi
00170Cr 4  85 rr            sta @sample_data_ptr+1
00170Er 4               .endif
00170Er 4               
00170Er 4               @stop_dpcm:
00170Er 4  A9 0F            lda #%00001111 ; Stop DPCM
001710r 4  8D 15 40         sta FAMISTUDIO_APU_SND_CHN
001713r 4               
001713r 4  A0 00            ldy #0
001715r 4  B1 rr            lda (@sample_data_ptr),y ; Sample offset
001717r 4  8D 12 40         sta FAMISTUDIO_APU_DMC_START
00171Ar 4  C8               iny
00171Br 4  B1 rr            lda (@sample_data_ptr),y ; Sample length
00171Dr 4  8D 13 40         sta FAMISTUDIO_APU_DMC_LEN
001720r 4  C8               iny
001721r 4  B1 rr            lda (@sample_data_ptr),y ; Pitch and loop
001723r 4  8D 10 40         sta FAMISTUDIO_APU_DMC_FREQ
001726r 4  C8               iny
001727r 4               
001727r 4               .if FAMISTUDIO_USE_DELTA_COUNTER
001727r 4                   lda famistudio_dmc_delta_counter
001727r 4                   bmi @read_dmc_initial_value
001727r 4                   sta FAMISTUDIO_APU_DMC_RAW
001727r 4                   lda #$ff
001727r 4                   sta famistudio_dmc_delta_counter
001727r 4                   bmi @start_dmc
001727r 4               @read_dmc_initial_value:
001727r 4               .endif
001727r 4               
001727r 4  B1 rr            lda (@sample_data_ptr),y ; Initial DMC counter
001729r 4  8D 11 40         sta FAMISTUDIO_APU_DMC_RAW
00172Cr 4               
00172Cr 4               @start_dmc:
00172Cr 4               .if FAMISTUDIO_USE_DPCM_BANKSWITCHING
00172Cr 4                   iny
00172Cr 4                   lda (@sample_data_ptr),y ; Bank number
00172Cr 4                   jsr famistudio_dpcm_bank_callback
00172Cr 4               .endif
00172Cr 4               
00172Cr 4  A9 1F            lda #%00011111 ; Start DMC
00172Er 4  8D 15 40         sta FAMISTUDIO_APU_SND_CHN
001731r 4               
001731r 4  60               rts
001732r 4               
001732r 4               ;======================================================================================================================
001732r 4               ; FAMISTUDIO_SAMPLE_PLAY_MUSIC (internal)
001732r 4               ;
001732r 4               ; Play DPCM sample, used by music player, could be used externally. Samples played for music have lower priority than
001732r 4               ; samples played by SFX.
001732r 4               ;
001732r 4               ; [in] a: Sample index, 1...63.
001732r 4               ;======================================================================================================================
001732r 4               
001732r 4               famistudio_music_sample_play:
001732r 4               
001732r 4  AE rr rr         ldx famistudio_dpcm_effect
001735r 4  F0 C9            beq sample_play
001737r 4  AA               tax
001738r 4  AD 15 40         lda FAMISTUDIO_APU_SND_CHN
00173Br 4  29 10            and #16
00173Dr 4  F0 01            beq @not_busy
00173Fr 4  60               rts
001740r 4               
001740r 4               @not_busy:
001740r 4  8D rr rr         sta famistudio_dpcm_effect
001743r 4  8A               txa
001744r 4  4C rr rr         jmp sample_play
001747r 4               
001747r 4               .endif
001747r 4               
001747r 4               .if FAMISTUDIO_CFG_SFX_SUPPORT
001747r 4               
001747r 4               ;======================================================================================================================
001747r 4               ; FAMISTUDIO_SFX_INIT (public)
001747r 4               ;
001747r 4               ; Initialize the sound effect player.
001747r 4               ;
001747r 4               ; [in] x: Sound effect data pointer (lo)
001747r 4               ; [in] y: Sound effect data pointer (hi)
001747r 4               ;======================================================================================================================
001747r 4               
001747r 4               famistudio_sfx_init:
001747r 4               
001747r 4                   @effect_list_ptr = famistudio_ptr0
001747r 4               
001747r 4  86 rr            stx @effect_list_ptr+0
001749r 4  84 rr            sty @effect_list_ptr+1
00174Br 4               
00174Br 4  A0 00            ldy #0
00174Dr 4               
00174Dr 4               .if FAMISTUDIO_DUAL_SUPPORT
00174Dr 4                   lda famistudio_pal_adjust ; Add 2 to the sound list pointer for PAL
00174Dr 4                   bne @ntsc
00174Dr 4                   iny
00174Dr 4                   iny
00174Dr 4               @ntsc:
00174Dr 4               .endif
00174Dr 4               
00174Dr 4  B1 rr            lda (@effect_list_ptr),y
00174Fr 4  8D rr rr         sta famistudio_sfx_addr_lo
001752r 4  C8               iny
001753r 4  B1 rr            lda (@effect_list_ptr),y
001755r 4  8D rr rr         sta famistudio_sfx_addr_hi
001758r 4               
001758r 4  A2 00            ldx #FAMISTUDIO_SFX_CH0
00175Ar 4               
00175Ar 4               @set_channels:
00175Ar 4  20 rr rr         jsr famistudio_sfx_clear_channel
00175Dr 4  8A               txa
00175Er 4  18               clc
00175Fr 4  69 0F            adc #FAMISTUDIO_SFX_STRUCT_SIZE
001761r 4  AA               tax
001762r 4  E0 1E            cpx #FAMISTUDIO_SFX_STRUCT_SIZE*FAMISTUDIO_CFG_SFX_STREAMS
001764r 4  D0 F4            bne @set_channels
001766r 4               
001766r 4  60               rts
001767r 4               
001767r 4               ;======================================================================================================================
001767r 4               ; FAMISTUDIO_SFX_CLEAR_CHANNEL (internal)
001767r 4               ;
001767r 4               ; Clears output buffer of a sound effect.
001767r 4               ;
001767r 4               ; [in] x: Offset of the sound effect stream.
001767r 4               ;======================================================================================================================
001767r 4               
001767r 4               famistudio_sfx_clear_channel:
001767r 4               
001767r 4  A9 00            lda #0
001769r 4  9D rr rr         sta famistudio_sfx_ptr_hi,x   ; This stops the effect
00176Cr 4  9D rr rr         sta famistudio_sfx_repeat,x
00176Fr 4  9D rr rr         sta famistudio_sfx_offset,x
001772r 4  9D rr rr         sta famistudio_sfx_buffer+6,x ; Mute triangle
001775r 4  A9 30            lda #$30
001777r 4  9D rr rr         sta famistudio_sfx_buffer+0,x ; Mute pulse1
00177Ar 4  9D rr rr         sta famistudio_sfx_buffer+3,x ; Mute pulse2
00177Dr 4  9D rr rr         sta famistudio_sfx_buffer+9,x ; Mute noise
001780r 4  60               rts
001781r 4               
001781r 4               ;======================================================================================================================
001781r 4               ; FAMISTUDIO_SFX_PLAY (public)
001781r 4               ;
001781r 4               ; Plays a sound effect.
001781r 4               ;
001781r 4               ; [in] a: Sound effect index (0...127)
001781r 4               ; [in] x: Offset of sound effect channel, should be FAMISTUDIO_SFX_CH0..FAMISTUDIO_SFX_CH3
001781r 4               ;======================================================================================================================
001781r 4               
001781r 4               famistudio_sfx_play:
001781r 4               
001781r 4                   @effect_data_ptr = famistudio_ptr0
001781r 4               
001781r 4  0A               asl a
001782r 4  A8               tay
001783r 4               
001783r 4  20 rr rr         jsr famistudio_sfx_clear_channel ; Stops the effect if it plays
001786r 4               
001786r 4  AD rr rr         lda famistudio_sfx_addr_lo
001789r 4  85 rr            sta @effect_data_ptr+0
00178Br 4  AD rr rr         lda famistudio_sfx_addr_hi
00178Er 4  85 rr            sta @effect_data_ptr+1
001790r 4               
001790r 4  B1 rr            lda (@effect_data_ptr),y
001792r 4  9D rr rr         sta famistudio_sfx_ptr_lo,x
001795r 4  C8               iny
001796r 4  B1 rr            lda (@effect_data_ptr),y
001798r 4  9D rr rr         sta famistudio_sfx_ptr_hi,x ; This write enables the effect
00179Br 4               
00179Br 4  60               rts
00179Cr 4               
00179Cr 4               ;======================================================================================================================
00179Cr 4               ; FAMISTUDIO_SFX_UPDATE (internal)
00179Cr 4               ;
00179Cr 4               ; Updates a single sound effect stream.
00179Cr 4               ;
00179Cr 4               ; [in] x: Offset of sound effect channel, should be FAMISTUDIO_SFX_CH0..FAMISTUDIO_SFX_CH3
00179Cr 4               ;======================================================================================================================
00179Cr 4               
00179Cr 4               famistudio_sfx_update:
00179Cr 4               
00179Cr 4                   @tmp = famistudio_r0
00179Cr 4                   @tmpx = famistudio_r1
00179Cr 4                   @effect_data_ptr = famistudio_ptr0
00179Cr 4               
00179Cr 4  BD rr rr         lda famistudio_sfx_repeat,x ; Check if repeat counter is not zero
00179Fr 4  F0 05            beq @no_repeat
0017A1r 4  DE rr rr         dec famistudio_sfx_repeat,x ; Decrement and return
0017A4r 4  D0 4B            bne @update_buf ; Just mix with output buffer
0017A6r 4               
0017A6r 4               @no_repeat:
0017A6r 4  BD rr rr         lda famistudio_sfx_ptr_hi,x ; Check if MSB of the pointer is not zero
0017A9r 4  D0 01            bne @sfx_active
0017ABr 4  60               rts ; Return otherwise, no active effect
0017ACr 4               
0017ACr 4               @sfx_active:
0017ACr 4  85 rr            sta @effect_data_ptr+1         ;load effect pointer into temp
0017AEr 4  BD rr rr         lda famistudio_sfx_ptr_lo,x
0017B1r 4  85 rr            sta @effect_data_ptr+0
0017B3r 4  BC rr rr         ldy famistudio_sfx_offset,x
0017B6r 4  18               clc
0017B7r 4               
0017B7r 4               @read_byte:
0017B7r 4  B1 rr            lda (@effect_data_ptr),y ; Read byte of effect
0017B9r 4  30 12            bmi @get_data ; If bit 7 is set, it is a register write
0017BBr 4  F0 31            beq @eof
0017BDr 4  C8               iny
0017BEr 4  D0 03            bne @store_repeat
0017C0r 4  20 rr rr         jsr @inc_sfx
0017C3r 4               @store_repeat:
0017C3r 4  9D rr rr         sta famistudio_sfx_repeat,x ; If bit 7 is reset, it is number of repeats
0017C6r 4  98               tya
0017C7r 4  9D rr rr         sta famistudio_sfx_offset,x
0017CAr 4  4C rr rr         jmp @update_buf
0017CDr 4               
0017CDr 4               @get_data:
0017CDr 4  C8               iny
0017CEr 4  D0 03            bne @get_data2
0017D0r 4  20 rr rr         jsr @inc_sfx
0017D3r 4               @get_data2:
0017D3r 4  86 rr            stx @tmp ; It is a register write
0017D5r 4  65 rr            adc @tmp ; Get offset in the effect output buffer
0017D7r 4  AA               tax
0017D8r 4  B1 rr            lda (@effect_data_ptr),y
0017DAr 4  C8               iny
0017DBr 4  D0 09            bne @write_buffer
0017DDr 4  86 rr            stx @tmpx
0017DFr 4  A6 rr            ldx @tmp
0017E1r 4  20 rr rr         jsr @inc_sfx
0017E4r 4  A6 rr            ldx @tmpx
0017E6r 4               @write_buffer:
0017E6r 4  9D rr rr         sta famistudio_sfx_buffer-128,x
0017E9r 4  A6 rr            ldx @tmp
0017EBr 4  4C rr rr         jmp @read_byte
0017EEr 4               
0017EEr 4               @eof:
0017EEr 4  9D rr rr         sta famistudio_sfx_ptr_hi,x ; Mark channel as inactive
0017F1r 4               
0017F1r 4               @update_buf:
0017F1r 4  AD rr rr         lda famistudio_output_buf ; Compare effect output buffer with main output buffer
0017F4r 4  29 0F            and #$0f ; If volume of pulse 1 of effect is higher than that of the main buffer, overwrite the main buffer value with the new one
0017F6r 4  85 rr            sta @tmp
0017F8r 4  BD rr rr         lda famistudio_sfx_buffer+0,x
0017FBr 4  29 0F            and #$0f
0017FDr 4  C5 rr            cmp @tmp
0017FFr 4  90 12            bcc @no_pulse1
001801r 4  BD rr rr         lda famistudio_sfx_buffer+0,x
001804r 4  8D rr rr         sta famistudio_output_buf+0
001807r 4  BD rr rr         lda famistudio_sfx_buffer+1,x
00180Ar 4  8D rr rr         sta famistudio_output_buf+1
00180Dr 4  BD rr rr         lda famistudio_sfx_buffer+2,x
001810r 4  8D rr rr         sta famistudio_output_buf+2
001813r 4               
001813r 4               @no_pulse1:
001813r 4  AD rr rr         lda famistudio_output_buf+3
001816r 4  29 0F            and #$0f
001818r 4  85 rr            sta @tmp
00181Ar 4  BD rr rr         lda famistudio_sfx_buffer+3,x
00181Dr 4  29 0F            and #$0f
00181Fr 4  C5 rr            cmp @tmp
001821r 4  90 12            bcc @no_pulse2
001823r 4  BD rr rr         lda famistudio_sfx_buffer+3,x
001826r 4  8D rr rr         sta famistudio_output_buf+3
001829r 4  BD rr rr         lda famistudio_sfx_buffer+4,x
00182Cr 4  8D rr rr         sta famistudio_output_buf+4
00182Fr 4  BD rr rr         lda famistudio_sfx_buffer+5,x
001832r 4  8D rr rr         sta famistudio_output_buf+5
001835r 4               
001835r 4               @no_pulse2:
001835r 4  BD rr rr         lda famistudio_sfx_buffer+6,x ; Overwrite triangle of main output buffer if it is active
001838r 4  F0 0F            beq @no_triangle
00183Ar 4  8D rr rr         sta famistudio_output_buf+6
00183Dr 4  BD rr rr         lda famistudio_sfx_buffer+7,x
001840r 4  8D rr rr         sta famistudio_output_buf+7
001843r 4  BD rr rr         lda famistudio_sfx_buffer+8,x
001846r 4  8D rr rr         sta famistudio_output_buf+8
001849r 4               
001849r 4               @no_triangle:
001849r 4  AD rr rr         lda famistudio_output_buf+9
00184Cr 4  29 0F            and #$0f
00184Er 4  85 rr            sta @tmp
001850r 4  BD rr rr         lda famistudio_sfx_buffer+9,x
001853r 4  29 0F            and #$0f
001855r 4  C5 rr            cmp @tmp
001857r 4  90 0C            bcc @no_noise
001859r 4  BD rr rr         lda famistudio_sfx_buffer+9,x
00185Cr 4  8D rr rr         sta famistudio_output_buf+9
00185Fr 4  BD rr rr         lda famistudio_sfx_buffer+10,x
001862r 4  8D rr rr         sta famistudio_output_buf+10
001865r 4               
001865r 4               @no_noise:
001865r 4  60               rts
001866r 4               
001866r 4               @inc_sfx:
001866r 4  E6 rr            inc @effect_data_ptr+1
001868r 4  FE rr rr         inc famistudio_sfx_ptr_hi,x
00186Br 4  60               rts
00186Cr 4               
00186Cr 4               .endif
00186Cr 4               
00186Cr 4               ; Dummy envelope used to initialize all channels with silence
00186Cr 4               famistudio_dummy_envelope:
00186Cr 4  C0 7F 00 00      .byte $c0,$7f,$00,$00
001870r 4               
001870r 4               famistudio_dummy_pitch_envelope:
001870r 4  00 C0 7F 00      .byte $00,$c0,$7f,$00,$01
001874r 4  01           
001875r 4               
001875r 4               ; Note tables
001875r 4               .if FAMISTUDIO_EXP_S5B
001875r 4               famistudio_exp_note_table_lsb:
001875r 4               famistudio_s5b_note_table_lsb:
001875r 4               .endif
001875r 4               famistudio_note_table_lsb:
001875r 4                   .if FAMISTUDIO_CFG_PAL_SUPPORT
001875r 4                       .byte $00
001875r 4                       .byte $68, $b6, $0e, $6f, $d9, $4b, $c6, $48, $d1, $60, $f6, $92 ; Octave 0
001875r 4                       .byte $34, $db, $86, $37, $ec, $a5, $62, $23, $e8, $b0, $7b, $49 ; Octave 1
001875r 4                       .byte $19, $ed, $c3, $9b, $75, $52, $31, $11, $f3, $d7, $bd, $a4 ; Octave 2
001875r 4                       .byte $8c, $76, $61, $4d, $3a, $29, $18, $08, $f9, $eb, $de, $d1 ; Octave 3
001875r 4                       .byte $c6, $ba, $b0, $a6, $9d, $94, $8b, $84, $7c, $75, $6e, $68 ; Octave 4
001875r 4                       .byte $62, $5d, $57, $52, $4e, $49, $45, $41, $3e, $3a, $37, $34 ; Octave 5
001875r 4                       .byte $31, $2e, $2b, $29, $26, $24, $22, $20, $1e, $1d, $1b, $19 ; Octave 6
001875r 4                       .byte $18, $16, $15, $14, $13, $12, $11, $10, $0f, $0e, $0d, $0c ; Octave 7
001875r 4                   .endif
001875r 4                   .if FAMISTUDIO_CFG_NTSC_SUPPORT
001875r 4  00                   .byte $00
001876r 4  5B 9C E6 3B          .byte $5b, $9c, $e6, $3b, $9a, $01, $72, $ea, $6a, $f1, $7f, $13 ; Octave 0
00187Ar 4  9A 01 72 EA  
00187Er 4  6A F1 7F 13  
001882r 4  AD 4D F3 9D          .byte $ad, $4d, $f3, $9d, $4c, $00, $b8, $74, $34, $f8, $bf, $89 ; Octave 1
001886r 4  4C 00 B8 74  
00188Ar 4  34 F8 BF 89  
00188Er 4  56 26 F9 CE          .byte $56, $26, $f9, $ce, $a6, $80, $5c, $3a, $1a, $fb, $df, $c4 ; Octave 2
001892r 4  A6 80 5C 3A  
001896r 4  1A FB DF C4  
00189Ar 4  AB 93 7C 67          .byte $ab, $93, $7c, $67, $52, $3f, $2d, $1c, $0c, $fd, $ef, $e1 ; Octave 3
00189Er 4  52 3F 2D 1C  
0018A2r 4  0C FD EF E1  
0018A6r 4  D5 C9 BD B3          .byte $d5, $c9, $bd, $b3, $a9, $9f, $96, $8e, $86, $7e, $77, $70 ; Octave 4
0018AAr 4  A9 9F 96 8E  
0018AEr 4  86 7E 77 70  
0018B2r 4  6A 64 5E 59          .byte $6a, $64, $5e, $59, $54, $4f, $4b, $46, $42, $3f, $3b, $38 ; Octave 5
0018B6r 4  54 4F 4B 46  
0018BAr 4  42 3F 3B 38  
0018BEr 4  34 31 2F 2C          .byte $34, $31, $2f, $2c, $29, $27, $25, $23, $21, $1f, $1d, $1b ; Octave 6
0018C2r 4  29 27 25 23  
0018C6r 4  21 1F 1D 1B  
0018CAr 4  1A 18 17 15          .byte $1a, $18, $17, $15, $14, $13, $12, $11, $10, $0f, $0e, $0d ; Octave 7
0018CEr 4  14 13 12 11  
0018D2r 4  10 0F 0E 0D  
0018D6r 4                   .endif
0018D6r 4               
0018D6r 4               .if FAMISTUDIO_EXP_S5B
0018D6r 4               famistudio_exp_note_table_msb:
0018D6r 4               famistudio_s5b_note_table_msb:
0018D6r 4               .endif
0018D6r 4               famistudio_note_table_msb:
0018D6r 4                   .if FAMISTUDIO_CFG_PAL_SUPPORT
0018D6r 4                       .byte $00
0018D6r 4                       .byte $0c, $0b, $0b, $0a, $09, $09, $08, $08, $07, $07, $06, $06 ; Octave 0
0018D6r 4                       .byte $06, $05, $05, $05, $04, $04, $04, $04, $03, $03, $03, $03 ; Octave 1
0018D6r 4                       .byte $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01, $01 ; Octave 2
0018D6r 4                       .byte $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00, $00 ; Octave 3
0018D6r 4                       .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 4
0018D6r 4                       .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 5
0018D6r 4                       .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 6
0018D6r 4                       .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 7
0018D6r 4                   .endif
0018D6r 4                   .if FAMISTUDIO_CFG_NTSC_SUPPORT
0018D6r 4  00                   .byte $00
0018D7r 4  0D 0C 0B 0B          .byte $0d, $0c, $0b, $0b, $0a, $0a, $09, $08, $08, $07, $07, $07 ; Octave 0
0018DBr 4  0A 0A 09 08  
0018DFr 4  08 07 07 07  
0018E3r 4  06 06 05 05          .byte $06, $06, $05, $05, $05, $05, $04, $04, $04, $03, $03, $03 ; Octave 1
0018E7r 4  05 05 04 04  
0018EBr 4  04 03 03 03  
0018EFr 4  03 03 02 02          .byte $03, $03, $02, $02, $02, $02, $02, $02, $02, $01, $01, $01 ; Octave 2
0018F3r 4  02 02 02 02  
0018F7r 4  02 01 01 01  
0018FBr 4  01 01 01 01          .byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $00, $00, $00 ; Octave 3
0018FFr 4  01 01 01 01  
001903r 4  01 00 00 00  
001907r 4  00 00 00 00          .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 4
00190Br 4  00 00 00 00  
00190Fr 4  00 00 00 00  
001913r 4  00 00 00 00          .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 5
001917r 4  00 00 00 00  
00191Br 4  00 00 00 00  
00191Fr 4  00 00 00 00          .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 6
001923r 4  00 00 00 00  
001927r 4  00 00 00 00  
00192Br 4  00 00 00 00          .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 7
00192Fr 4  00 00 00 00  
001933r 4  00 00 00 00  
001937r 4                   .endif
001937r 4               
001937r 4               .if FAMISTUDIO_EXP_VRC6
001937r 4               famistudio_exp_note_table_lsb:
001937r 4               famistudio_saw_note_table_lsb:
001937r 4                   .byte $00
001937r 4                   .byte $44, $69, $9a, $d6, $1e, $70, $cb, $30, $9e, $13, $91, $16 ; Octave 0
001937r 4                   .byte $a2, $34, $cc, $6b, $0e, $b7, $65, $18, $ce, $89, $48, $0a ; Octave 1
001937r 4                   .byte $d0, $99, $66, $35, $07, $db, $b2, $8b, $67, $44, $23, $05 ; Octave 2
001937r 4                   .byte $e8, $cc, $b2, $9a, $83, $6d, $59, $45, $33, $22, $11, $02 ; Octave 3
001937r 4                   .byte $f3, $e6, $d9, $cc, $c1, $b6, $ac, $a2, $99, $90, $88, $80 ; Octave 4
001937r 4                   .byte $79, $72, $6c, $66, $60, $5b, $55, $51, $4c, $48, $44, $40 ; Octave 5
001937r 4                   .byte $3c, $39, $35, $32, $2f, $2d, $2a, $28, $25, $23, $21, $1f ; Octave 6
001937r 4                   .byte $1e, $1c, $1a, $19, $17, $16, $15, $13, $12, $11, $10, $0f ; Octave 7
001937r 4               famistudio_exp_note_table_msb:
001937r 4               famistudio_saw_note_table_msb:
001937r 4                   .byte $00
001937r 4                   .byte $0f, $0e, $0d, $0c, $0c, $0b, $0a, $0a, $09, $09, $08, $08 ; Octave 0
001937r 4                   .byte $07, $07, $06, $06, $06, $05, $05, $05, $04, $04, $04, $04 ; Octave 1
001937r 4                   .byte $03, $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $02 ; Octave 2
001937r 4                   .byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; Octave 3
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 4
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 5
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 6
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 7
001937r 4               .endif
001937r 4               
001937r 4               .if FAMISTUDIO_EXP_VRC7
001937r 4               famistudio_exp_note_table_lsb:
001937r 4               famistudio_vrc7_note_table_lsb:
001937r 4                   .byte $00
001937r 4                   .byte $ac, $b7, $c2, $cd, $d9, $e6, $f4, $02, $12, $22, $33, $46 ; Octave 0
001937r 4                   .byte $58, $6e, $84, $9a, $b2, $cc, $e8, $04, $24, $44, $66, $8c ; Octave 1
001937r 4                   .byte $b0, $dc, $08, $34, $64, $98, $d0, $08, $48, $88, $cc, $18 ; Octave 2
001937r 4                   .byte $60, $b8, $10, $68, $c8, $30, $a0, $10, $90, $10, $98, $30 ; Octave 3
001937r 4                   .byte $c0, $70, $20, $d0, $90, $60, $40, $20, $20, $20, $30, $60 ; Octave 4
001937r 4                   .byte $80, $e0, $40, $a0, $20, $c0, $80, $40, $40, $40, $60, $c0 ; Octave 5
001937r 4                   .byte $00, $c0, $80, $40, $40, $80, $00, $80, $80, $80, $c0, $80 ; Octave 6
001937r 4                   .byte $00, $80, $00, $80, $80, $00, $00, $00, $00, $00, $80, $00 ; Octave 7
001937r 4               famistudio_exp_note_table_msb:
001937r 4               famistudio_vrc7_note_table_msb:
001937r 4                   .byte $00
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $01, $01, $01, $01, $01 ; Octave 0
001937r 4                   .byte $01, $01, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02 ; Octave 1
001937r 4                   .byte $02, $02, $03, $03, $03, $03, $03, $04, $04, $04, $04, $05 ; Octave 2
001937r 4                   .byte $05, $05, $06, $06, $06, $07, $07, $08, $08, $09, $09, $0a ; Octave 3
001937r 4                   .byte $0a, $0b, $0c, $0c, $0d, $0e, $0f, $10, $11, $12, $13, $14 ; Octave 4
001937r 4                   .byte $15, $16, $18, $19, $1b, $1c, $1e, $20, $22, $24, $26, $28 ; Octave 5
001937r 4                   .byte $2b, $2d, $30, $33, $36, $39, $3d, $40, $44, $48, $4c, $51 ; Octave 6
001937r 4                   .byte $56, $5b, $61, $66, $6c, $73, $7a, $81, $89, $91, $99, $a3 ; Octave 7
001937r 4               .endif
001937r 4               
001937r 4               .if FAMISTUDIO_EXP_EPSM
001937r 4               	.if FAMISTUDIO_EXP_EPSM_FM_CHN_CNT > 0
001937r 4               famistudio_epsm_note_table_lsb:
001937r 4                   .byte $00
001937r 4                   .byte $9a, $a3, $ad, $b7, $c2, $cd, $da, $e7, $f4, $03, $12, $23 ; Octave 0
001937r 4                   .byte $34, $46, $5a, $6e, $84, $9a, $b4, $ce, $e8, $06, $24, $46 ; Octave 1
001937r 4                   .byte $68, $8c, $b4, $dc, $08, $34, $68, $9c, $d0, $0c, $48, $8c ; Octave 2
001937r 4                   .byte $d0, $18, $68, $b8, $10, $68, $d0, $38, $a0, $18, $90, $18 ; Octave 3
001937r 4                   .byte $a0, $30, $d0, $70, $20, $d0, $a0, $70, $40, $30, $20, $30 ; Octave 4
001937r 4                   .byte $40, $60, $a0, $e0, $40, $a0, $40, $e0, $80, $60, $40, $60 ; Octave 5
001937r 4                   .byte $80, $c0, $40, $c0, $80, $40, $80, $c0, $00, $c0, $80, $c0 ; Octave 6
001937r 4                   .byte $00, $80, $80, $80, $00, $80, $00, $80, $00, $80, $00, $80 ; Octave 7
001937r 4               famistudio_epsm_note_table_msb:
001937r 4                   .byte $00
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01 ; Octave 0
001937r 4                   .byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $02 ; Octave 1
001937r 4                   .byte $02, $02, $02, $02, $03, $03, $03, $03, $03, $04, $04, $04 ; Octave 2
001937r 4                   .byte $04, $05, $05, $05, $06, $06, $06, $07, $07, $08, $08, $09 ; Octave 3
001937r 4                   .byte $09, $0a, $0a, $0b, $0c, $0c, $0d, $0e, $0f, $10, $11, $12 ; Octave 4
001937r 4                   .byte $13, $14, $15, $16, $18, $19, $1b, $1c, $1e, $20, $22, $24 ; Octave 5
001937r 4                   .byte $26, $28, $2b, $2d, $30, $33, $36, $39, $3d, $40, $44, $48 ; Octave 6
001937r 4                   .byte $4d, $51, $56, $5b, $61, $66, $6d, $73, $7a, $81, $89, $91 ; Octave 7
001937r 4               	.endif
001937r 4               famistudio_exp_note_table_lsb:
001937r 4               famistudio_epsm_s_note_table_lsb:
001937r 4                   .byte $00
001937r 4                   .byte $dd, $2f, $9a, $1c, $b3, $5f, $1d, $ee, $d0, $c1, $c2, $d2 ; Octave 0
001937r 4                   .byte $ee, $18, $4d, $8e, $da, $2f, $8f, $f7, $68, $e1, $61, $e9 ; Octave 1
001937r 4                   .byte $77, $0c, $a7, $47, $ed, $98, $47, $fc, $b4, $70, $31, $f4 ; Octave 2
001937r 4                   .byte $bc, $86, $53, $24, $f6, $cc, $a4, $7e, $5a, $38, $18, $fa ; Octave 3
001937r 4                   .byte $de, $c3, $aa, $92, $7b, $66, $52, $3f, $2d, $1c, $0c, $fd ; Octave 4
001937r 4                   .byte $ef, $e1, $d5, $c9, $be, $b3, $a9, $9f, $96, $8e, $86, $7f ; Octave 5
001937r 4                   .byte $77, $71, $6a, $64, $5f, $59, $54, $50, $4b, $47, $43, $3f ; Octave 6
001937r 4                   .byte $3c, $38, $35, $32, $2f, $2d, $2a, $28, $26, $24, $22, $20 ; Octave 7
001937r 4               famistudio_exp_note_table_msb:
001937r 4               famistudio_epsm_s_note_table_msb:
001937r 4                   .byte $00
001937r 4                   .byte $1d, $1c, $1a, $19, $17, $16, $15, $13, $12, $11, $10, $0f ; Octave 0
001937r 4                   .byte $0e, $0e, $0d, $0c, $0b, $0b, $0a, $09, $09, $08, $08, $07 ; Octave 1
001937r 4                   .byte $07, $07, $06, $06, $05, $05, $05, $04, $04, $04, $04, $03 ; Octave 2
001937r 4                   .byte $03, $03, $03, $03, $02, $02, $02, $02, $02, $02, $02, $01 ; Octave 3
001937r 4                   .byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $00 ; Octave 4
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 5
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 6
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 7
001937r 4               .endif
001937r 4               
001937r 4               .if FAMISTUDIO_EXP_FDS
001937r 4               famistudio_exp_note_table_lsb:
001937r 4               famistudio_fds_note_table_lsb:
001937r 4                   .byte $00
001937r 4                   .byte $13, $14, $16, $17, $18, $1a, $1b, $1d, $1e, $20, $22, $24 ; Octave 0
001937r 4                   .byte $26, $29, $2b, $2e, $30, $33, $36, $39, $3d, $40, $44, $48 ; Octave 1
001937r 4                   .byte $4d, $51, $56, $5b, $61, $66, $6c, $73, $7a, $81, $89, $91 ; Octave 2
001937r 4                   .byte $99, $a2, $ac, $b6, $c1, $cd, $d9, $e6, $f3, $02, $11, $21 ; Octave 3
001937r 4                   .byte $33, $45, $58, $6d, $82, $99, $b2, $cb, $e7, $04, $22, $43 ; Octave 4
001937r 4                   .byte $65, $8a, $b0, $d9, $04, $32, $63, $97, $cd, $07, $44, $85 ; Octave 5
001937r 4                   .byte $ca, $13, $60, $b2, $09, $65, $c6, $2d, $9b, $0e, $89, $0b ; Octave 6
001937r 4                   .byte $94, $26, $c1, $64, $12, $ca, $8c, $5b, $35, $1d, $12, $16 ; Octave 7
001937r 4               famistudio_exp_note_table_msb:
001937r 4               famistudio_fds_note_table_msb:
001937r 4                   .byte $00
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 0
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 1
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00 ; Octave 2
001937r 4                   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $01, $01, $01 ; Octave 3
001937r 4                   .byte $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $02 ; Octave 4
001937r 4                   .byte $02, $02, $02, $02, $03, $03, $03, $03, $03, $04, $04, $04 ; Octave 5
001937r 4                   .byte $04, $05, $05, $05, $06, $06, $06, $07, $07, $08, $08, $09 ; Octave 6
001937r 4                   .byte $09, $0a, $0a, $0b, $0c, $0c, $0d, $0e, $0f, $10, $11, $12 ; Octave 7
001937r 4               .endif
001937r 4               
001937r 4               .if FAMISTUDIO_EXP_N163
001937r 4               .if FAMISTUDIO_EXP_N163_CHN_CNT = 1
001937r 4                   famistudio_exp_note_table_lsb:
001937r 4                   famistudio_n163_note_table_lsb:
001937r 4                       .byte $00
001937r 4                       .byte $47,$4c,$50,$55,$5a,$5f,$65,$6b,$72,$78,$80,$87 ; Octave 0
001937r 4                       .byte $8f,$98,$a1,$aa,$b5,$bf,$cb,$d7,$e4,$f1,$00,$0f ; Octave 1
001937r 4                       .byte $1f,$30,$42,$55,$6a,$7f,$96,$ae,$c8,$e3,$00,$1e ; Octave 2
001937r 4                       .byte $3e,$60,$85,$ab,$d4,$ff,$2c,$5d,$90,$c6,$00,$3d ; Octave 3
001937r 4                       .byte $7d,$c1,$0a,$57,$a8,$fe,$59,$ba,$20,$8d,$00,$7a ; Octave 4
001937r 4                       .byte $fb,$83,$14,$ae,$50,$fd,$b3,$74,$41,$1a,$00,$f4 ; Octave 5
001937r 4                       .byte $f6,$07,$29,$5c,$a1,$fa,$67,$e9,$83,$35,$01,$e8 ; Octave 6
001937r 4                       .byte $ec,$0f,$52,$b8,$43,$f4,$ce,$d3,$06,$6a,$02,$d1 ; Octave 7
001937r 4                   famistudio_exp_note_table_msb:
001937r 4                   famistudio_n163_note_table_msb:
001937r 4                       .byte $00
001937r 4                       .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; Octave 0
001937r 4                       .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01 ; Octave 1
001937r 4                       .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02 ; Octave 2
001937r 4                       .byte $02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04 ; Octave 3
001937r 4                       .byte $04,$04,$05,$05,$05,$05,$06,$06,$07,$07,$08,$08 ; Octave 4
001937r 4                       .byte $08,$09,$0a,$0a,$0b,$0b,$0c,$0d,$0e,$0f,$10,$10 ; Octave 5
001937r 4                       .byte $11,$13,$14,$15,$16,$17,$19,$1a,$1c,$1e,$20,$21 ; Octave 6
001937r 4                       .byte $23,$26,$28,$2a,$2d,$2f,$32,$35,$39,$3c,$40,$43 ; Octave 7
001937r 4               .endif
001937r 4               .if FAMISTUDIO_EXP_N163_CHN_CNT = 2
001937r 4                   famistudio_exp_note_table_lsb:
001937r 4                   famistudio_n163_note_table_lsb:
001937r 4                       .byte $00
001937r 4                       .byte $8f,$98,$a1,$aa,$b5,$bf,$cb,$d7,$e4,$f1,$00,$0f ; Octave 0
001937r 4                       .byte $1f,$30,$42,$55,$6a,$7f,$96,$ae,$c8,$e3,$00,$1e ; Octave 1
001937r 4                       .byte $3e,$60,$85,$ab,$d4,$ff,$2c,$5d,$90,$c6,$00,$3d ; Octave 2
001937r 4                       .byte $7d,$c1,$0a,$57,$a8,$fe,$59,$ba,$20,$8d,$00,$7a ; Octave 3
001937r 4                       .byte $fb,$83,$14,$ae,$50,$fd,$b3,$74,$41,$1a,$00,$f4 ; Octave 4
001937r 4                       .byte $f6,$07,$29,$5c,$a1,$fa,$67,$e9,$83,$35,$01,$e8 ; Octave 5
001937r 4                       .byte $ec,$0f,$52,$b8,$43,$f4,$ce,$d3,$06,$6a,$02,$d1 ; Octave 6
001937r 4                       .byte $d9,$1f,$a5,$71,$86,$e8,$9c,$a7,$0d,$d5,$05,$a2 ; Octave 7
001937r 4                   famistudio_exp_note_table_msb:
001937r 4                   famistudio_n163_note_table_msb:
001937r 4                       .byte $00
001937r 4                       .byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01 ; Octave 0
001937r 4                       .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02 ; Octave 1
001937r 4                       .byte $02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04 ; Octave 2
001937r 4                       .byte $04,$04,$05,$05,$05,$05,$06,$06,$07,$07,$08,$08 ; Octave 3
001937r 4                       .byte $08,$09,$0a,$0a,$0b,$0b,$0c,$0d,$0e,$0f,$10,$10 ; Octave 4
001937r 4                       .byte $11,$13,$14,$15,$16,$17,$19,$1a,$1c,$1e,$20,$21 ; Octave 5
001937r 4                       .byte $23,$26,$28,$2a,$2d,$2f,$32,$35,$39,$3c,$40,$43 ; Octave 6
001937r 4                       .byte $47,$4c,$50,$55,$5a,$5f,$65,$6b,$72,$78,$80,$87 ; Octave 7
001937r 4               .endif
001937r 4               .if FAMISTUDIO_EXP_N163_CHN_CNT = 3
001937r 4                   famistudio_exp_note_table_lsb:
001937r 4                   famistudio_n163_note_table_lsb:
001937r 4                       .byte $00
001937r 4                       .byte $d7,$e4,$f1,$00,$0f,$1f,$30,$42,$56,$6a,$80,$96 ; Octave 0
001937r 4                       .byte $af,$c8,$e3,$00,$1f,$3f,$61,$85,$ac,$d5,$00,$2d ; Octave 1
001937r 4                       .byte $5e,$91,$c7,$01,$3e,$7e,$c3,$0b,$58,$aa,$00,$5b ; Octave 2
001937r 4                       .byte $bc,$22,$8f,$02,$7c,$fd,$86,$17,$b1,$54,$00,$b7 ; Octave 3
001937r 4                       .byte $78,$45,$1f,$05,$f9,$fb,$0d,$2f,$62,$a8,$01,$6e ; Octave 4
001937r 4                       .byte $f1,$8b,$3e,$0a,$f2,$f7,$1a,$5e,$c5,$50,$02,$dc ; Octave 5
001937r 4                       .byte $e3,$17,$7c,$15,$e4,$ee,$35,$bd,$8a,$a0,$04,$b9 ; Octave 6
001937r 4                       .byte $c6,$2e,$f8,$2a,$c9,$dc,$6a,$7a,$14,$40,$08,$73 ; Octave 7
001937r 4                   famistudio_exp_note_table_msb:
001937r 4                   famistudio_n163_note_table_msb:
001937r 4                       .byte $00
001937r 4                       .byte $00,$00,$00,$01,$01,$01,$01,$01,$01,$01,$01,$01 ; Octave 0
001937r 4                       .byte $01,$01,$01,$02,$02,$02,$02,$02,$02,$02,$03,$03 ; Octave 1
001937r 4                       .byte $03,$03,$03,$04,$04,$04,$04,$05,$05,$05,$06,$06 ; Octave 2
001937r 4                       .byte $06,$07,$07,$08,$08,$08,$09,$0a,$0a,$0b,$0c,$0c ; Octave 3
001937r 4                       .byte $0d,$0e,$0f,$10,$10,$11,$13,$14,$15,$16,$18,$19 ; Octave 4
001937r 4                       .byte $1a,$1c,$1e,$20,$21,$23,$26,$28,$2a,$2d,$30,$32 ; Octave 5
001937r 4                       .byte $35,$39,$3c,$40,$43,$47,$4c,$50,$55,$5a,$60,$65 ; Octave 6
001937r 4                       .byte $6b,$72,$78,$80,$87,$8f,$98,$a1,$ab,$b5,$c0,$cb ; Octave 7
001937r 4               .endif
001937r 4               .if FAMISTUDIO_EXP_N163_CHN_CNT = 4
001937r 4                   famistudio_exp_note_table_lsb:
001937r 4                   famistudio_n163_note_table_lsb:
001937r 4                       .byte $00
001937r 4                       .byte $1f,$30,$42,$55,$6a,$7f,$96,$ae,$c8,$e3,$00,$1e ; Octave 0
001937r 4                       .byte $3e,$60,$85,$ab,$d4,$ff,$2c,$5d,$90,$c6,$00,$3d ; Octave 1
001937r 4                       .byte $7d,$c1,$0a,$57,$a8,$fe,$59,$ba,$20,$8d,$00,$7a ; Octave 2
001937r 4                       .byte $fb,$83,$14,$ae,$50,$fd,$b3,$74,$41,$1a,$00,$f4 ; Octave 3
001937r 4                       .byte $f6,$07,$29,$5c,$a1,$fa,$67,$e9,$83,$35,$01,$e8 ; Octave 4
001937r 4                       .byte $ec,$0f,$52,$b8,$43,$f4,$ce,$d3,$06,$6a,$02,$d1 ; Octave 5
001937r 4                       .byte $d9,$1f,$a5,$71,$86,$e8,$9c,$a7,$0d,$d5,$05,$a2 ; Octave 6
001937r 4                       .byte $b2,$3e,$4b,$e3,$0c,$d0,$38,$4e,$1b,$ab,$ff,$ff ; Octave 7
001937r 4                   famistudio_exp_note_table_msb:
001937r 4                   famistudio_n163_note_table_msb:
001937r 4                       .byte $00
001937r 4                       .byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02 ; Octave 0
001937r 4                       .byte $02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04 ; Octave 1
001937r 4                       .byte $04,$04,$05,$05,$05,$05,$06,$06,$07,$07,$08,$08 ; Octave 2
001937r 4                       .byte $08,$09,$0a,$0a,$0b,$0b,$0c,$0d,$0e,$0f,$10,$10 ; Octave 3
001937r 4                       .byte $11,$13,$14,$15,$16,$17,$19,$1a,$1c,$1e,$20,$21 ; Octave 4
001937r 4                       .byte $23,$26,$28,$2a,$2d,$2f,$32,$35,$39,$3c,$40,$43 ; Octave 5
001937r 4                       .byte $47,$4c,$50,$55,$5a,$5f,$65,$6b,$72,$78,$80,$87 ; Octave 6
001937r 4                       .byte $8f,$98,$a1,$aa,$b5,$bf,$cb,$d7,$e4,$f1,$ff,$ff ; Octave 7
001937r 4               .endif
001937r 4               .if FAMISTUDIO_EXP_N163_CHN_CNT = 5
001937r 4                   famistudio_exp_note_table_lsb:
001937r 4                   famistudio_n163_note_table_lsb:
001937r 4                       .byte $00
001937r 4                       .byte $67,$7c,$93,$ab,$c4,$df,$fc,$1a,$3a,$5c,$80,$a6 ; Octave 0
001937r 4                       .byte $ce,$f9,$26,$56,$89,$bf,$f8,$34,$74,$b8,$00,$4c ; Octave 1
001937r 4                       .byte $9c,$f2,$4c,$ac,$12,$7e,$f0,$69,$e9,$70,$00,$98 ; Octave 2
001937r 4                       .byte $39,$e4,$99,$59,$24,$fc,$e0,$d2,$d2,$e1,$00,$31 ; Octave 3
001937r 4                       .byte $73,$c9,$33,$b3,$49,$f8,$c0,$a4,$a4,$c2,$01,$62 ; Octave 4
001937r 4                       .byte $e7,$93,$67,$67,$93,$f1,$81,$48,$48,$85,$03,$c5 ; Octave 5
001937r 4                       .byte $cf,$26,$cf,$ce,$27,$e2,$03,$90,$91,$0b,$06,$8a ; Octave 6
001937r 4                       .byte $9f,$4d,$9e,$9c,$4f,$c4,$06,$ff,$ff,$ff,$ff,$ff ; Octave 7
001937r 4                   famistudio_exp_note_table_msb:
001937r 4                   famistudio_n163_note_table_msb:
001937r 4                       .byte $00
001937r 4                       .byte $01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02 ; Octave 0
001937r 4                       .byte $02,$02,$03,$03,$03,$03,$03,$04,$04,$04,$05,$05 ; Octave 1
001937r 4                       .byte $05,$05,$06,$06,$07,$07,$07,$08,$08,$09,$0a,$0a ; Octave 2
001937r 4                       .byte $0b,$0b,$0c,$0d,$0e,$0e,$0f,$10,$11,$12,$14,$15 ; Octave 3
001937r 4                       .byte $16,$17,$19,$1a,$1c,$1d,$1f,$21,$23,$25,$28,$2a ; Octave 4
001937r 4                       .byte $2c,$2f,$32,$35,$38,$3b,$3f,$43,$47,$4b,$50,$54 ; Octave 5
001937r 4                       .byte $59,$5f,$64,$6a,$71,$77,$7f,$86,$8e,$97,$a0,$a9 ; Octave 6
001937r 4                       .byte $b3,$be,$c9,$d5,$e2,$ef,$fe,$ff,$ff,$ff,$ff,$ff ; Octave 7
001937r 4               .endif
001937r 4               .if FAMISTUDIO_EXP_N163_CHN_CNT = 6
001937r 4                   famistudio_exp_note_table_lsb:
001937r 4                   famistudio_n163_note_table_lsb:
001937r 4                       .byte $00
001937r 4                       .byte $af,$c8,$e3,$00,$1f,$3f,$61,$85,$ac,$d5,$00,$2d ; Octave 0
001937r 4                       .byte $5e,$91,$c7,$01,$3e,$7e,$c3,$0b,$58,$aa,$00,$5b ; Octave 1
001937r 4                       .byte $bc,$22,$8f,$02,$7c,$fd,$86,$17,$b1,$54,$00,$b7 ; Octave 2
001937r 4                       .byte $78,$45,$1f,$05,$f9,$fb,$0d,$2f,$62,$a8,$01,$6e ; Octave 3
001937r 4                       .byte $f1,$8b,$3e,$0a,$f2,$f7,$1a,$5e,$c5,$50,$02,$dc ; Octave 4
001937r 4                       .byte $e3,$17,$7c,$15,$e4,$ee,$35,$bd,$8a,$a0,$04,$b9 ; Octave 5
001937r 4                       .byte $c6,$2e,$f8,$2a,$c9,$dc,$6a,$7a,$14,$40,$08,$73 ; Octave 6
001937r 4                       .byte $8c,$5d,$f1,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ; Octave 7
001937r 4                   famistudio_exp_note_table_msb:
001937r 4                   famistudio_n163_note_table_msb:
001937r 4                       .byte $00
001937r 4                       .byte $01,$01,$01,$02,$02,$02,$02,$02,$02,$02,$03,$03 ; Octave 0
001937r 4                       .byte $03,$03,$03,$04,$04,$04,$04,$05,$05,$05,$06,$06 ; Octave 1
001937r 4                       .byte $06,$07,$07,$08,$08,$08,$09,$0a,$0a,$0b,$0c,$0c ; Octave 2
001937r 4                       .byte $0d,$0e,$0f,$10,$10,$11,$13,$14,$15,$16,$18,$19 ; Octave 3
001937r 4                       .byte $1a,$1c,$1e,$20,$21,$23,$26,$28,$2a,$2d,$30,$32 ; Octave 4
001937r 4                       .byte $35,$39,$3c,$40,$43,$47,$4c,$50,$55,$5a,$60,$65 ; Octave 5
001937r 4                       .byte $6b,$72,$78,$80,$87,$8f,$98,$a1,$ab,$b5,$c0,$cb ; Octave 6
001937r 4                       .byte $d7,$e4,$f1,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ; Octave 7
001937r 4               .endif
001937r 4               .if FAMISTUDIO_EXP_N163_CHN_CNT = 7
001937r 4                   famistudio_exp_note_table_lsb:
001937r 4                   famistudio_n163_note_table_lsb:
001937r 4                       .byte $00
001937r 4                       .byte $f6,$14,$34,$56,$79,$9f,$c7,$f1,$1e,$4d,$80,$b5 ; Octave 0
001937r 4                       .byte $ed,$29,$69,$ac,$f3,$3e,$8e,$e3,$3c,$9b,$00,$6a ; Octave 1
001937r 4                       .byte $db,$53,$d2,$58,$e6,$7d,$1d,$c6,$79,$37,$00,$d5 ; Octave 2
001937r 4                       .byte $b7,$a6,$a4,$b0,$cd,$fa,$3a,$8c,$f3,$6e,$01,$ab ; Octave 3
001937r 4                       .byte $6f,$4d,$48,$61,$9a,$f5,$74,$19,$e6,$dd,$02,$56 ; Octave 4
001937r 4                       .byte $de,$9b,$91,$c3,$35,$eb,$e8,$32,$cc,$bb,$04,$ad ; Octave 5
001937r 4                       .byte $bc,$36,$22,$86,$6b,$d6,$d1,$64,$98,$76,$09,$5b ; Octave 6
001937r 4                       .byte $79,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ; Octave 7
001937r 4                   famistudio_exp_note_table_msb:
001937r 4                   famistudio_n163_note_table_msb:
001937r 4                       .byte $00
001937r 4                       .byte $01,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03,$03 ; Octave 0
001937r 4                       .byte $03,$04,$04,$04,$04,$05,$05,$05,$06,$06,$07,$07 ; Octave 1
001937r 4                       .byte $07,$08,$08,$09,$09,$0a,$0b,$0b,$0c,$0d,$0e,$0e ; Octave 2
001937r 4                       .byte $0f,$10,$11,$12,$13,$14,$16,$17,$18,$1a,$1c,$1d ; Octave 3
001937r 4                       .byte $1f,$21,$23,$25,$27,$29,$2c,$2f,$31,$34,$38,$3b ; Octave 4
001937r 4                       .byte $3e,$42,$46,$4a,$4f,$53,$58,$5e,$63,$69,$70,$76 ; Octave 5
001937r 4                       .byte $7d,$85,$8d,$95,$9e,$a7,$b1,$bc,$c7,$d3,$e0,$ed ; Octave 6
001937r 4                       .byte $fb,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ; Octave 7
001937r 4               .endif
001937r 4               .if FAMISTUDIO_EXP_N163_CHN_CNT = 8
001937r 4                   famistudio_exp_note_table_lsb:
001937r 4                   famistudio_n163_note_table_lsb:
001937r 4                       .byte $00
001937r 4                       .byte $3e,$60,$85,$ab,$d4,$ff,$2c,$5d,$90,$c6,$00,$3d ; Octave 0
001937r 4                       .byte $7d,$c1,$0a,$57,$a8,$fe,$59,$ba,$20,$8d,$00,$7a ; Octave 1
001937r 4                       .byte $fb,$83,$14,$ae,$50,$fd,$b3,$74,$41,$1a,$00,$f4 ; Octave 2
001937r 4                       .byte $f6,$07,$29,$5c,$a1,$fa,$67,$e9,$83,$35,$01,$e8 ; Octave 3
001937r 4                       .byte $ec,$0f,$52,$b8,$43,$f4,$ce,$d3,$06,$6a,$02,$d1 ; Octave 4
001937r 4                       .byte $d9,$1f,$a5,$71,$86,$e8,$9c,$a7,$0d,$d5,$05,$a2 ; Octave 5
001937r 4                       .byte $b2,$3e,$4b,$e3,$0c,$d0,$38,$4e,$1b,$ab,$ff,$ff ; Octave 6
001937r 4                       .byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ; Octave 7
001937r 4                   famistudio_exp_note_table_msb:
001937r 4                   famistudio_n163_note_table_msb:
001937r 4                       .byte $00
001937r 4                       .byte $02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$04,$04 ; Octave 0
001937r 4                       .byte $04,$04,$05,$05,$05,$05,$06,$06,$07,$07,$08,$08 ; Octave 1
001937r 4                       .byte $08,$09,$0a,$0a,$0b,$0b,$0c,$0d,$0e,$0f,$10,$10 ; Octave 2
001937r 4                       .byte $11,$13,$14,$15,$16,$17,$19,$1a,$1c,$1e,$20,$21 ; Octave 3
001937r 4                       .byte $23,$26,$28,$2a,$2d,$2f,$32,$35,$39,$3c,$40,$43 ; Octave 4
001937r 4                       .byte $47,$4c,$50,$55,$5a,$5f,$65,$6b,$72,$78,$80,$87 ; Octave 5
001937r 4                       .byte $8f,$98,$a1,$aa,$b5,$bf,$cb,$d7,$e4,$f1,$ff,$ff ; Octave 6
001937r 4                       .byte $ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff ; Octave 7
001937r 4               .endif
001937r 4               .endif
001937r 4               
001937r 4               ; For a given channel, returns the index of the volume envelope.
001937r 4               famistudio_channel_env:
001937r 4               famistudio_channel_to_volume_env:
001937r 4  00               .byte FAMISTUDIO_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001938r 4  03               .byte FAMISTUDIO_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
001939r 4  06               .byte FAMISTUDIO_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Ar 4  08               .byte FAMISTUDIO_CH3_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Br 4  FF               .byte $ff
00193Cr 4               .if FAMISTUDIO_EXP_VRC6
00193Cr 4                   .byte FAMISTUDIO_VRC6_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_VRC6_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_VRC6_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_VRC7
00193Cr 4                   .byte FAMISTUDIO_VRC7_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_VRC7_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_VRC7_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_VRC7_CH3_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_VRC7_CH4_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_VRC7_CH5_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_FDS
00193Cr 4                   .byte FAMISTUDIO_FDS_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_MMC5
00193Cr 4                   .byte FAMISTUDIO_MMC5_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_MMC5_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_N163
00193Cr 4                   .byte FAMISTUDIO_N163_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_N163_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_N163_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_N163_CH3_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_N163_CH4_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_N163_CH5_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_N163_CH6_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_N163_CH7_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_S5B
00193Cr 4                   .byte FAMISTUDIO_S5B_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_S5B_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4                   .byte FAMISTUDIO_S5B_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_EPSM
00193Cr 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 0
00193Cr 4                   .byte FAMISTUDIO_EPSM_CH0_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 1
00193Cr 4                   .byte FAMISTUDIO_EPSM_CH1_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 2
00193Cr 4                   .byte FAMISTUDIO_EPSM_CH2_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 3
00193Cr 4                   .byte FAMISTUDIO_EPSM_CH3_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 4
00193Cr 4                   .byte FAMISTUDIO_EPSM_CH4_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 5
00193Cr 4                   .byte FAMISTUDIO_EPSM_CH5_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 6
00193Cr 4                   .byte FAMISTUDIO_EPSM_CH6_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 7
00193Cr 4                   .byte FAMISTUDIO_EPSM_CH7_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 8
00193Cr 4                   .byte FAMISTUDIO_EPSM_CH8_ENVS+FAMISTUDIO_ENV_VOLUME_OFF
00193Cr 4               .endif
00193Cr 4               .endif
00193Cr 4               
00193Cr 4               .if FAMISTUDIO_USE_ARPEGGIO
00193Cr 4               ; For a given channel, returns the index of the arpeggio envelope.
00193Cr 4               famistudio_channel_to_arpeggio_env:
00193Cr 4  01               .byte FAMISTUDIO_CH0_ENVS+FAMISTUDIO_ENV_NOTE_OFF
00193Dr 4  04               .byte FAMISTUDIO_CH1_ENVS+FAMISTUDIO_ENV_NOTE_OFF
00193Er 4  07               .byte FAMISTUDIO_CH2_ENVS+FAMISTUDIO_ENV_NOTE_OFF
00193Fr 4  09               .byte FAMISTUDIO_CH3_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001940r 4  FF               .byte $ff
001941r 4               .if FAMISTUDIO_EXP_VRC6
001941r 4                   .byte FAMISTUDIO_VRC6_CH0_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_VRC6_CH1_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_VRC6_CH2_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_VRC7
001941r 4                   .byte FAMISTUDIO_VRC7_CH0_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_VRC7_CH1_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_VRC7_CH2_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_VRC7_CH3_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_VRC7_CH4_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_VRC7_CH5_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_FDS
001941r 4                   .byte FAMISTUDIO_FDS_CH0_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_MMC5
001941r 4                   .byte FAMISTUDIO_MMC5_CH0_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_MMC5_CH1_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_N163
001941r 4                   .byte FAMISTUDIO_N163_CH0_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_N163_CH1_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_N163_CH2_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_N163_CH3_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_N163_CH4_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_N163_CH5_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_N163_CH6_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_N163_CH7_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_S5B
001941r 4                   .byte FAMISTUDIO_S5B_CH0_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_S5B_CH1_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4                   .byte FAMISTUDIO_S5B_CH2_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 0
001941r 4                   .byte FAMISTUDIO_EPSM_CH0_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 1
001941r 4                   .byte FAMISTUDIO_EPSM_CH1_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 2
001941r 4                   .byte FAMISTUDIO_EPSM_CH2_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 3
001941r 4                   .byte FAMISTUDIO_EPSM_CH3_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 4
001941r 4                   .byte FAMISTUDIO_EPSM_CH4_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 5
001941r 4                   .byte FAMISTUDIO_EPSM_CH5_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 6
001941r 4                   .byte FAMISTUDIO_EPSM_CH6_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 7
001941r 4                   .byte FAMISTUDIO_EPSM_CH7_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 8
001941r 4                   .byte FAMISTUDIO_EPSM_CH8_ENVS+FAMISTUDIO_ENV_NOTE_OFF
001941r 4               .endif ; FAMISTUDIO_EXP_EPSM_ENV_CNT > 8
001941r 4               .endif ; FAMISTUDIO_EXP_EPSM
001941r 4               .endif ; FAMISTUDIO_USE_ARPEGGIO
001941r 4               
001941r 4               .if FAMISTUDIO_USE_SLIDE_NOTES
001941r 4               famistudio_channel_to_slide:
001941r 4               ; This table will only be defined if we use noise slides, otherwise identical to "famistudio_channel_to_pitch_env".
001941r 4               .if FAMISTUDIO_USE_NOISE_SLIDE_NOTES
001941r 4                   .byte $00
001941r 4                   .byte $01
001941r 4                   .byte $02
001941r 4                   .byte FAMISTUDIO_NOISE_SLIDE_INDEX ; Keep the noise slide at the end so the pitch envelopes/slides are in sync.
001941r 4                   .byte $ff ; no slide for DPCM
001941r 4               .if FAMISTUDIO_EXP_VRC6
001941r 4                   .byte FAMISTUDIO_VRC6_CH0_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_VRC6_CH1_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_VRC6_CH2_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_VRC7
001941r 4                   .byte FAMISTUDIO_VRC7_CH0_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_VRC7_CH1_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_VRC7_CH2_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_VRC7_CH3_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_VRC7_CH4_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_VRC7_CH5_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_FDS
001941r 4                   .byte FAMISTUDIO_FDS_CH0_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_MMC5
001941r 4                   .byte FAMISTUDIO_MMC5_CH0_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_MMC5_CH1_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_N163
001941r 4                   .byte FAMISTUDIO_N163_CH0_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_N163_CH1_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_N163_CH2_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_N163_CH3_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_N163_CH4_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_N163_CH5_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_N163_CH6_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_N163_CH7_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_S5B
001941r 4                   .byte FAMISTUDIO_S5B_CH0_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_S5B_CH1_PITCH_ENV_IDX
001941r 4                   .byte FAMISTUDIO_S5B_CH2_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 0
001941r 4                   .byte FAMISTUDIO_EPSM_CH0_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 1
001941r 4                   .byte FAMISTUDIO_EPSM_CH1_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 2
001941r 4                   .byte FAMISTUDIO_EPSM_CH2_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 3
001941r 4                   .byte FAMISTUDIO_EPSM_CH3_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 4
001941r 4                   .byte FAMISTUDIO_EPSM_CH4_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 5
001941r 4                   .byte FAMISTUDIO_EPSM_CH5_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 6
001941r 4                   .byte FAMISTUDIO_EPSM_CH6_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 7
001941r 4                   .byte FAMISTUDIO_EPSM_CH7_PITCH_ENV_IDX
001941r 4               .endif
001941r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 8
001941r 4                   .byte FAMISTUDIO_EPSM_CH8_PITCH_ENV_IDX
001941r 4               .endif ; FAMISTUDIO_EXP_EPSM_ENV_CNT > 8
001941r 4               .endif ; FAMISTUDIO_EXP_EPSM
001941r 4               .endif ; FAMISTUDIO_USE_NOISE_SLIDE_NOTES
001941r 4               
001941r 4               .endif ; FAMISTUDIO_USE_SLIDE_NOTES
001941r 4               
001941r 4               ; For a given channel, returns the index of the pitch envelope.
001941r 4               famistudio_channel_to_pitch_env:
001941r 4  00               .byte $00
001942r 4  01               .byte $01
001943r 4  02               .byte $02
001944r 4  FF               .byte $ff ; no pitch envelopes for noise
001945r 4  FF               .byte $ff ; no pitch envelopes slide for DPCM
001946r 4               .if FAMISTUDIO_EXP_VRC6
001946r 4                   .byte FAMISTUDIO_VRC6_CH0_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_VRC6_CH1_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_VRC6_CH2_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_VRC7
001946r 4                   .byte FAMISTUDIO_VRC7_CH0_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_VRC7_CH1_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_VRC7_CH2_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_VRC7_CH3_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_VRC7_CH4_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_VRC7_CH5_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_FDS
001946r 4                   .byte FAMISTUDIO_FDS_CH0_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_MMC5
001946r 4                   .byte FAMISTUDIO_MMC5_CH0_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_MMC5_CH1_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_N163
001946r 4                   .byte FAMISTUDIO_N163_CH0_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_N163_CH1_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_N163_CH2_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_N163_CH3_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_N163_CH4_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_N163_CH5_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_N163_CH6_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_N163_CH7_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_S5B
001946r 4                   .byte FAMISTUDIO_S5B_CH0_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_S5B_CH1_PITCH_ENV_IDX
001946r 4                   .byte FAMISTUDIO_S5B_CH2_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_EPSM
001946r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 0
001946r 4                   .byte FAMISTUDIO_EPSM_CH0_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 1
001946r 4                   .byte FAMISTUDIO_EPSM_CH1_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 2
001946r 4                   .byte FAMISTUDIO_EPSM_CH2_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 3
001946r 4                   .byte FAMISTUDIO_EPSM_CH3_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 4
001946r 4                   .byte FAMISTUDIO_EPSM_CH4_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 5
001946r 4                   .byte FAMISTUDIO_EPSM_CH5_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 6
001946r 4                   .byte FAMISTUDIO_EPSM_CH6_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 7
001946r 4                   .byte FAMISTUDIO_EPSM_CH7_PITCH_ENV_IDX
001946r 4               .endif
001946r 4               .if FAMISTUDIO_EXP_EPSM_ENV_CNT > 8
001946r 4                   .byte FAMISTUDIO_EPSM_CH8_PITCH_ENV_IDX
001946r 4               .endif ; FAMISTUDIO_EXP_EPSM_ENV_CNT > 8
001946r 4               .endif ; FAMISTUDIO_EXP_EPSM
001946r 4               
001946r 4               .if FAMISTUDIO_USE_DUTYCYCLE_EFFECT
001946r 4               ; For a given channel, returns the index of the duty cycle in the "famistudio_duty_cycle" array.
001946r 4               famistudio_channel_to_dutycycle:
001946r 4  00               .byte $00
001947r 4  01               .byte $01
001948r 4  FF               .byte $ff
001949r 4  02               .byte $02
00194Ar 4  FF               .byte $ff
00194Br 4               .if FAMISTUDIO_EXP_VRC6
00194Br 4                   .byte FAMISTUDIO_VRC6_CH0_DUTY_IDX
00194Br 4                   .byte FAMISTUDIO_VRC6_CH1_DUTY_IDX
00194Br 4                   .byte FAMISTUDIO_VRC6_CH2_DUTY_IDX
00194Br 4               .endif
00194Br 4               .if FAMISTUDIO_EXP_MMC5
00194Br 4                   .byte FAMISTUDIO_MMC5_CH0_DUTY_IDX
00194Br 4                   .byte FAMISTUDIO_MMC5_CH1_DUTY_IDX
00194Br 4               .endif
00194Br 4               
00194Br 4               ; For a given channel, returns the index of the duty cycle envelope.
00194Br 4               famistudio_channel_to_duty_env:
00194Br 4  02               .byte FAMISTUDIO_CH0_ENVS+FAMISTUDIO_ENV_DUTY_OFF
00194Cr 4  05               .byte FAMISTUDIO_CH1_ENVS+FAMISTUDIO_ENV_DUTY_OFF
00194Dr 4  FF               .byte $ff
00194Er 4  0A               .byte FAMISTUDIO_CH3_ENVS+FAMISTUDIO_ENV_DUTY_OFF
00194Fr 4  FF               .byte $ff
001950r 4               .if FAMISTUDIO_EXP_VRC6
001950r 4                   .byte FAMISTUDIO_VRC6_CH0_ENVS+FAMISTUDIO_ENV_DUTY_OFF
001950r 4                   .byte FAMISTUDIO_VRC6_CH1_ENVS+FAMISTUDIO_ENV_DUTY_OFF
001950r 4                   .byte FAMISTUDIO_VRC6_CH2_ENVS+FAMISTUDIO_ENV_DUTY_OFF
001950r 4               .endif
001950r 4               .if FAMISTUDIO_EXP_MMC5
001950r 4                   .byte FAMISTUDIO_MMC5_CH0_ENVS+FAMISTUDIO_ENV_DUTY_OFF
001950r 4                   .byte FAMISTUDIO_MMC5_CH1_ENVS+FAMISTUDIO_ENV_DUTY_OFF
001950r 4               .endif
001950r 4               .endif
001950r 4               
001950r 4               ; Duty lookup table.
001950r 4               famistudio_duty_lookup:
001950r 4  30               .byte $30
001951r 4  70               .byte $70
001952r 4  B0               .byte $b0
001953r 4  F0               .byte $f0
001954r 4               
001954r 4               .if FAMISTUDIO_EXP_VRC6
001954r 4               ; Duty lookup table for VRC6.
001954r 4               famistudio_vrc6_duty_lookup:
001954r 4                   .byte $00
001954r 4                   .byte $10
001954r 4                   .byte $20
001954r 4                   .byte $30
001954r 4                   .byte $40
001954r 4                   .byte $50
001954r 4                   .byte $60
001954r 4                   .byte $70
001954r 4               .endif
001954r 4               
001954r 4               .if FAMISTUDIO_USE_PHASE_RESET
001954r 4               ; For a given channel, returns the bit mask to set in the phase reset byte
001954r 4               famistudio_channel_to_phase_reset_mask:
001954r 4                   .byte $01
001954r 4                   .byte $02
001954r 4               .if !FAMISTUDIO_EXP_NONE
001954r 4                   .byte $ff
001954r 4                   .byte $ff
001954r 4                   .byte $ff
001954r 4               .if FAMISTUDIO_EXP_VRC6
001954r 4                   .byte $04
001954r 4                   .byte $08
001954r 4                   .byte $10
001954r 4               .endif
001954r 4               .if FAMISTUDIO_EXP_FDS
001954r 4                   .byte $80
001954r 4               .endif
001954r 4               .if FAMISTUDIO_EXP_MMC5
001954r 4                   .byte $20
001954r 4                   .byte $40
001954r 4               .endif
001954r 4               .if FAMISTUDIO_EXP_N163
001954r 4                   .byte $01
001954r 4                   .byte $02
001954r 4                   .byte $04
001954r 4                   .byte $08
001954r 4                   .byte $10
001954r 4                   .byte $20
001954r 4                   .byte $40
001954r 4                   .byte $80
001954r 4               .endif
001954r 4               .endif
001954r 4               .endif
001954r 4               
001954r 4               .if !FAMISTUDIO_USE_FAMITRACKER_TEMPO
001954r 4               famistudio_tempo_frame_lookup:
001954r 4                   .byte $01, $02 ; NTSC -> NTSC, NTSC -> PAL
001954r 4                   .byte $00, $01 ; PAL  -> NTSC, PAL  -> PAL
001954r 4               .endif
001954r 4               
001954r 4               .if FAMISTUDIO_CFG_SMOOTH_VIBRATO
001954r 4               ; lookup table for the 2 registers we need to set for smooth vibrato.
001954r 4               ; Index 0 decrement the hi-period, index 2 increments. Index 1 is unused.
001954r 4               famistudio_smooth_vibrato_period_lo_lookup:
001954r 4  00 00 FF         .byte $00, $00, $ff
001957r 4               famistudio_smooth_vibrato_sweep_lookup:
001957r 4  8F 00 87         .byte $8f, $00, $87
00195Ar 4               .endif
00195Ar 4               
00195Ar 4               .if FAMISTUDIO_USE_VOLUME_TRACK
00195Ar 4               
00195Ar 4               ; Precomputed volume multiplication table (rounded but never to zero unless one of the value is zero).
00195Ar 4               ; Load the 2 volumes in the lo/hi nibble and fetch.
00195Ar 4               
00195Ar 4               famistudio_volume_table:
00195Ar 4  00 00 00 00      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
00195Er 4  00 00 00 00  
001962r 4  00 00 00 00  
00196Ar 4  00 01 01 01      .byte $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
00196Er 4  01 01 01 01  
001972r 4  01 01 01 01  
00197Ar 4  00 01 01 01      .byte $00, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $02, $02, $02, $02
00197Er 4  01 01 01 01  
001982r 4  01 01 01 01  
00198Ar 4  00 01 01 01      .byte $00, $01, $01, $01, $01, $01, $01, $01, $02, $02, $02, $02, $02, $03, $03, $03
00198Er 4  01 01 01 01  
001992r 4  02 02 02 02  
00199Ar 4  00 01 01 01      .byte $00, $01, $01, $01, $01, $01, $02, $02, $02, $02, $03, $03, $03, $03, $04, $04
00199Er 4  01 01 02 02  
0019A2r 4  02 02 03 03  
0019AAr 4  00 01 01 01      .byte $00, $01, $01, $01, $01, $02, $02, $02, $03, $03, $03, $04, $04, $04, $05, $05
0019AEr 4  01 02 02 02  
0019B2r 4  03 03 03 04  
0019BAr 4  00 01 01 01      .byte $00, $01, $01, $01, $02, $02, $02, $03, $03, $04, $04, $04, $05, $05, $06, $06
0019BEr 4  02 02 02 03  
0019C2r 4  03 04 04 04  
0019CAr 4  00 01 01 01      .byte $00, $01, $01, $01, $02, $02, $03, $03, $04, $04, $05, $05, $06, $06, $07, $07
0019CEr 4  02 02 03 03  
0019D2r 4  04 04 05 05  
0019DAr 4  00 01 01 02      .byte $00, $01, $01, $02, $02, $03, $03, $04, $04, $05, $05, $06, $06, $07, $07, $08
0019DEr 4  02 03 03 04  
0019E2r 4  04 05 05 06  
0019EAr 4  00 01 01 02      .byte $00, $01, $01, $02, $02, $03, $04, $04, $05, $05, $06, $07, $07, $08, $08, $09
0019EEr 4  02 03 04 04  
0019F2r 4  05 05 06 07  
0019FAr 4  00 01 01 02      .byte $00, $01, $01, $02, $03, $03, $04, $05, $05, $06, $07, $07, $08, $09, $09, $0a
0019FEr 4  03 03 04 05  
001A02r 4  05 06 07 07  
001A0Ar 4  00 01 01 02      .byte $00, $01, $01, $02, $03, $04, $04, $05, $06, $07, $07, $08, $09, $0a, $0a, $0b
001A0Er 4  03 04 04 05  
001A12r 4  06 07 07 08  
001A1Ar 4  00 01 02 02      .byte $00, $01, $02, $02, $03, $04, $05, $06, $06, $07, $08, $09, $0a, $0a, $0b, $0c
001A1Er 4  03 04 05 06  
001A22r 4  06 07 08 09  
001A2Ar 4  00 01 02 03      .byte $00, $01, $02, $03, $03, $04, $05, $06, $07, $08, $09, $0a, $0a, $0b, $0c, $0d
001A2Er 4  03 04 05 06  
001A32r 4  07 08 09 0A  
001A3Ar 4  00 01 02 03      .byte $00, $01, $02, $03, $04, $05, $06, $07, $07, $08, $09, $0a, $0b, $0c, $0d, $0e
001A3Er 4  04 05 06 07  
001A42r 4  07 08 09 0A  
001A4Ar 4  00 01 02 03      .byte $00, $01, $02, $03, $04, $05, $06, $07, $08, $09, $0a, $0b, $0c, $0d, $0e, $0f
001A4Er 4  04 05 06 07  
001A52r 4  08 09 0A 0B  
001A5Ar 4               
001A5Ar 4               .endif
001A5Ar 4               
001A5Ar 4               
001A5Ar 4               .if FAMISTUDIO_EXP_EPSM
001A5Ar 4               ; Mapping for the channel id of the rhythm channel, to the RAM offset for it
001A5Ar 4               ; If the user disables various channels, then we want to save on the ram for them
001A5Ar 4               ; by just not reserving it, so this maps from channel ID to the new RAM offset for the channel
001A5Ar 4               ; The end result should be a table that looks like this if you have channel 2, 3, and 5 enabled
001A5Ar 4               ; .byte $ff, $00, $01, $ff, $02, $ff
001A5Ar 4               EPSM_CHANNEL1_RHYTHM_OFFSET = -1 + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN1_ENABLE
001A5Ar 4               EPSM_CHANNEL2_RHYTHM_OFFSET = EPSM_CHANNEL1_RHYTHM_OFFSET + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN2_ENABLE
001A5Ar 4               EPSM_CHANNEL3_RHYTHM_OFFSET = EPSM_CHANNEL2_RHYTHM_OFFSET + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN3_ENABLE
001A5Ar 4               EPSM_CHANNEL4_RHYTHM_OFFSET = EPSM_CHANNEL3_RHYTHM_OFFSET + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN4_ENABLE
001A5Ar 4               EPSM_CHANNEL5_RHYTHM_OFFSET = EPSM_CHANNEL4_RHYTHM_OFFSET + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN5_ENABLE
001A5Ar 4               EPSM_CHANNEL6_RHYTHM_OFFSET = EPSM_CHANNEL5_RHYTHM_OFFSET + FAMISTUDIO_EXP_EPSM_RHYTHM_CHN6_ENABLE
001A5Ar 4               
001A5Ar 4               famistudio_rhythm_lut:
001A5Ar 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CHN1_ENABLE
001A5Ar 4                   .byte .lobyte(EPSM_CHANNEL1_RHYTHM_OFFSET)
001A5Ar 4               .else
001A5Ar 4                   .byte $ff
001A5Ar 4               .endif
001A5Ar 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CHN2_ENABLE
001A5Ar 4                   .byte .lobyte(EPSM_CHANNEL2_RHYTHM_OFFSET)
001A5Ar 4               .else
001A5Ar 4                   .byte $ff
001A5Ar 4               .endif
001A5Ar 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CHN3_ENABLE
001A5Ar 4                   .byte .lobyte(EPSM_CHANNEL3_RHYTHM_OFFSET)
001A5Ar 4               .else
001A5Ar 4                   .byte $ff
001A5Ar 4               .endif
001A5Ar 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CHN4_ENABLE
001A5Ar 4                   .byte .lobyte(EPSM_CHANNEL4_RHYTHM_OFFSET)
001A5Ar 4               .else
001A5Ar 4                   .byte $ff
001A5Ar 4               .endif
001A5Ar 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CHN5_ENABLE
001A5Ar 4                   .byte .lobyte(EPSM_CHANNEL5_RHYTHM_OFFSET)
001A5Ar 4               .else
001A5Ar 4                   .byte $ff
001A5Ar 4               .endif
001A5Ar 4               .if FAMISTUDIO_EXP_EPSM_RHYTHM_CHN6_ENABLE
001A5Ar 4                   .byte .lobyte(EPSM_CHANNEL6_RHYTHM_OFFSET)
001A5Ar 4               .else
001A5Ar 4                   .byte $ff
001A5Ar 4               .endif
001A5Ar 4               .endif
001A5Ar 4               ; ======================================================================================================================
001A5Ar 4               ; Alternative entry points for calling from c code
001A5Ar 4               ;
001A5Ar 4               ; Notes: the C function definitions use __fastcall__ meaning they will put the
001A5Ar 4               ; last parameter in a register before the call according to the rules laid out
001A5Ar 4               ; in the documentation here: https://cc65.github.io/doc/cc65-intern.html
001A5Ar 4               ; and here: https://github.com/cc65/wiki/wiki/Parameter-passing-and-calling-conventions
001A5Ar 4               ; and here: https://github.com/cc65/wiki/wiki/Parameter-and-return-stacks
001A5Ar 4               ; ======================================================================================================================
001A5Ar 4               .if FAMISTUDIO_CFG_C_BINDINGS
001A5Ar 4               
001A5Ar 4               ; Required to fetch the extra parameter from the C stack
001A5Ar 4               .import popa
001A5Ar 4               
001A5Ar 4               .export _famistudio_init
001A5Ar 4               _famistudio_init:
001A5Ar 4                   ; A = ptr[lo]; X = ptr[hi]; SP[0] = platform
001A5Ar 4                   @tmp = famistudio_r0
001A5Ar 4                   stx @tmp
001A5Ar 4                   tax
001A5Ar 4                   ; Note that the C stack 'popa' function uses Y as scratch
001A5Ar 4                   jsr popa
001A5Ar 4                   ldy @tmp
001A5Ar 4                   jmp famistudio_init
001A5Ar 4               
001A5Ar 4               
001A5Ar 4               ; A = song_index; So we can safely re-export the symbol
001A5Ar 4               .export _famistudio_music_play=famistudio_music_play
001A5Ar 4               ; A = mode; safe to re-export the symbol as well
001A5Ar 4               .export _famistudio_music_pause=famistudio_music_pause
001A5Ar 4               
001A5Ar 4               ; No parameters so its safe to re-export
001A5Ar 4               .export _famistudio_music_stop=famistudio_music_stop
001A5Ar 4               .export _famistudio_update=famistudio_update
001A5Ar 4               
001A5Ar 4               .if FAMISTUDIO_CFG_SFX_SUPPORT
001A5Ar 4               
001A5Ar 4               .export _famistudio_sfx_init
001A5Ar 4               .export _famistudio_sfx_play
001A5Ar 4               .export _famistudio_sfx_sample_play
001A5Ar 4               
001A5Ar 4               _famistudio_sfx_init:
001A5Ar 4                   ; A = ptr[lo]; X = ptr[hi]
001A5Ar 4                   @tmp = famistudio_r0
001A5Ar 4                   stx @tmp
001A5Ar 4                   ldy @tmp
001A5Ar 4                   tax
001A5Ar 4                   jmp famistudio_sfx_init
001A5Ar 4               
001A5Ar 4               _famistudio_sfx_play:
001A5Ar 4                   ; A = offset; SP[0] = index
001A5Ar 4                   tax
001A5Ar 4                   jsr popa
001A5Ar 4                   jmp famistudio_sfx_play
001A5Ar 4               
001A5Ar 4               ; A = sample_index; So we can safely re-export the symbol
001A5Ar 4               .export _famistudio_sfx_sample_play=famistudio_sfx_sample_play
001A5Ar 4               
001A5Ar 4               .endif
001A5Ar 4               .endif
001A5Ar 4               
001A5Ar 4               
001A5Ar 3               ;.include "famistudio_null.asm"
001A5Ar 3               
001A5Ar 3               ; SFX from the FamiStudio Demo
001A5Ar 3               .include "sfx.asm"
001A5Ar 4               
001A5Ar 4               game_sfx:
001A5Ar 4  rr rr        	.word @ntsc
001A5Cr 4  rr rr        	.word @ntsc
001A5Er 4               @ntsc:
001A5Er 4  rr rr        	.word @sfx_ntsc_sfx_dash    ; dash
001A60r 4  rr rr        	.word @sfx_ntsc_mushroom
001A62r 4  rr rr        	.word @sfx_ntsc_click       ; jump
001A64r 4  rr rr        	.word @sfx_ntsc_sfx_death   ; death
001A66r 4  rr rr        	.word @sfx_ntsc_coin        ; strawberry collect
001A68r 4               
001A68r 4               ; TODO: BORROWED FROM some kind of mega man game. Provide original version ASAP.
001A68r 4               ;@sfx_ntsc_megamanhit:
001A68r 4               ;	.byte $84,$b3,$85,$04,$83,$ff,$8a,$0a,$89,$3f,$01,$84,$f3,$8a,$0b,$01
001A68r 4               ;	.byte $84,$32,$85,$05,$89,$f0,$01,$83,$f0,$01,$84,$07,$85,$01,$83,$f8
001A68r 4               ;	.byte $8a,$09,$89,$37,$01,$84,$2d,$8a,$08,$89,$3f,$01,$84,$53,$8a,$07
001A68r 4               ;	.byte $01,$84,$79,$8a,$06,$01,$84,$9f,$8a,$05,$01,$84,$c5,$8a,$04,$01
001A68r 4               ;	.byte $84,$eb,$8a,$03,$01,$84,$11,$85,$02,$8a,$02,$01,$84,$37,$8a,$01
001A68r 4               ;	.byte $01,$84,$5c,$8a,$00,$01,$8a,$0f,$01,$83,$f0,$00
001A68r 4               
001A68r 4               ; TODO: BORROWED FROM SMB1. Provide original version ASAP.
001A68r 4               @sfx_ntsc_mushroom:
001A68r 4  84 D5 85 00  	.byte $84,$d5,$85,$00,$83,$7d,$89,$f0,$02,$84,$1c,$85,$01,$02,$84,$d5
001A6Cr 4  83 7D 89 F0  
001A70r 4  02 84 1C 85  
001A78r 4  85 00 02 84  	.byte $85,$00,$02,$84,$a9,$02,$84,$8e,$02,$84,$6a,$02,$84,$8e,$02,$84
001A7Cr 4  A9 02 84 8E  
001A80r 4  02 84 6A 02  
001A88r 4  0C 85 01 02  	.byte $0c,$85,$01,$02,$84,$d5,$85,$00,$02,$84,$b3,$02,$84,$86,$02,$84
001A8Cr 4  84 D5 85 00  
001A90r 4  02 84 B3 02  
001A98r 4  B3 02 84 86  	.byte $b3,$02,$84,$86,$02,$84,$6a,$02,$84,$59,$02,$84,$42,$02,$84,$59
001A9Cr 4  02 84 6A 02  
001AA0r 4  84 59 02 84  
001AA8r 4  02 84 EF 02  	.byte $02,$84,$ef,$02,$84,$bd,$02,$84,$9f,$02,$84,$77,$02,$84,$9f,$02
001AACr 4  84 BD 02 84  
001AB0r 4  9F 02 84 77  
001AB8r 4  84 77 02 84  	.byte $84,$77,$02,$84,$5e,$02,$84,$4f,$02,$84,$3b,$02,$84,$4f,$01,$00
001ABCr 4  5E 02 84 4F  
001AC0r 4  02 84 3B 02  
001AC8r 4               
001AC8r 4               ; TODO: BORROWED FROM FAMIDASH. Provide original version ASAP.
001AC8r 4               ;@sfx_ntsc_death:
001AC8r 4               ;	.byte $87,$d5,$88,$00,$86,$8f,$8a,$08,$89,$3f,$01,$87,$fd,$8a,$04,$89
001AC8r 4               ;	.byte $3e,$01,$86,$80,$01,$89,$3d,$01,$8a,$05,$89,$3c,$02,$8a,$06,$89
001AC8r 4               ;	.byte $3b,$01,$89,$3a,$01,$8a,$07,$01,$89,$39,$01,$8a,$08,$89,$38,$02
001AC8r 4               ;	.byte $8a,$09,$89,$37,$01,$89,$36,$01,$8a,$0a,$01,$89,$35,$01,$8a,$0b
001AC8r 4               ;	.byte $89,$34,$01,$8a,$0c,$01,$8a,$0d,$89,$33,$01,$8a,$0e,$89,$32,$01
001AC8r 4               ;	.byte $8a,$0f,$01,$00
001AC8r 4               
001AC8r 4               ; TODO: BORROWED FROM FAMIDASH. Provide original version ASAP.
001AC8r 4               @sfx_ntsc_coin:
001AC8r 4  81 E1 82 00  	.byte $81,$e1,$82,$00,$80,$3a,$89,$f0,$02,$81,$70,$80,$38,$02,$80,$37
001ACCr 4  80 3A 89 F0  
001AD0r 4  02 81 70 80  
001AD8r 4  02 80 36 02  	.byte $02,$80,$36,$02,$80,$35,$04,$80,$34,$04,$80,$33,$06,$80,$32,$08
001ADCr 4  80 35 04 80  
001AE0r 4  34 04 80 33  
001AE8r 4  80 31 09 00  	.byte $80,$31,$09,$00
001AECr 4               
001AECr 4               ; TODO: BORROWED FROM FAMIDASH. Provide original version ASAP.
001AECr 4               @sfx_ntsc_click:
001AECr 4  8A 0B 89 3F  	.byte $8a,$0b,$89,$3f,$01,$89,$35,$00
001AF0r 4  01 89 35 00  
001AF4r 4               
001AF4r 4               @sfx_ntsc_sfx_dash:
001AF4r 4  87 9A 88 01  	.byte $87,$9a,$88,$01,$86,$8f,$8a,$07,$89,$3a,$01,$87,$89,$8a,$06,$01
001AF8r 4  86 8F 8A 07  
001AFCr 4  89 3A 01 87  
001B04r 4  87 78 8A 05  	.byte $87,$78,$8a,$05,$01,$87,$67,$8a,$04,$01,$87,$0c,$8a,$03,$89,$3e
001B08r 4  01 87 67 8A  
001B0Cr 4  04 01 87 0C  
001B14r 4  01 87 1B 89  	.byte $01,$87,$1b,$89,$3d,$01,$87,$2a,$89,$3c,$01,$87,$39,$01,$87,$48
001B18r 4  3D 01 87 2A  
001B1Cr 4  89 3C 01 87  
001B24r 4  89 3B 01 87  	.byte $89,$3b,$01,$87,$57,$89,$3a,$01,$87,$66,$89,$39,$01,$87,$75,$01
001B28r 4  57 89 3A 01  
001B2Cr 4  87 66 89 39  
001B34r 4  87 84 89 38  	.byte $87,$84,$89,$38,$01,$87,$93,$89,$37,$01,$86,$80,$89,$36,$02,$89
001B38r 4  01 87 93 89  
001B3Cr 4  37 01 86 80  
001B44r 4  35 01 89 34  	.byte $35,$01,$89,$34,$01,$89,$33,$02,$89,$32,$01,$89,$31,$01,$00
001B48r 4  01 89 33 02  
001B4Cr 4  89 32 01 89  
001B53r 4               
001B53r 4               @sfx_ntsc_sfx_death:
001B53r 4  87 C5 88 00  	.byte $87,$c5,$88,$00,$86,$8f,$8a,$00,$89,$3f,$01,$87,$05,$88,$01,$01
001B57r 4  86 8F 8A 00  
001B5Br 4  89 3F 01 87  
001B63r 4  87 44 01 87  	.byte $87,$44,$01,$87,$84,$01,$84,$3a,$85,$00,$83,$7e,$87,$e6,$88,$00
001B67r 4  84 01 84 3A  
001B6Br 4  85 00 83 7E  
001B73r 4  8A 0A 89 3E  	.byte $8a,$0a,$89,$3e,$01,$84,$40,$83,$70,$87,$f7,$89,$3d,$01,$84,$46
001B77r 4  01 84 40 83  
001B7Br 4  70 87 F7 89  
001B83r 4  83 7C 87 08  	.byte $83,$7c,$87,$08,$88,$01,$89,$3c,$01,$84,$4c,$83,$70,$87,$19,$89
001B87r 4  88 01 89 3C  
001B8Br 4  01 84 4C 83  
001B93r 4  3B 01 84 52  	.byte $3b,$01,$84,$52,$83,$7a,$87,$2a,$89,$3a,$01,$84,$58,$83,$70,$87
001B97r 4  83 7A 87 2A  
001B9Br 4  89 3A 01 84  
001BA3r 4  3B 89 39 01  	.byte $3b,$89,$39,$01,$84,$5e,$83,$78,$87,$4c,$89,$38,$01,$84,$64,$83
001BA7r 4  84 5E 83 78  
001BABr 4  87 4C 89 38  
001BB3r 4  70 87 5D 01  	.byte $70,$87,$5d,$01,$84,$6a,$83,$77,$87,$6e,$89,$37,$01,$84,$70,$83
001BB7r 4  84 6A 83 77  
001BBBr 4  87 6E 89 37  
001BC3r 4  70 87 7F 89  	.byte $70,$87,$7f,$89,$36,$01,$84,$76,$83,$75,$87,$90,$89,$35,$01,$84
001BC7r 4  36 01 84 76  
001BCBr 4  83 75 87 90  
001BD3r 4  7C 83 70 87  	.byte $7c,$83,$70,$87,$a1,$89,$34,$01,$84,$82,$83,$73,$87,$b2,$89,$33
001BD7r 4  A1 89 34 01  
001BDBr 4  84 82 83 73  
001BE3r 4  01 84 88 83  	.byte $01,$84,$88,$83,$70,$87,$c3,$89,$32,$01,$84,$8e,$83,$71,$87,$d4
001BE7r 4  70 87 C3 89  
001BEBr 4  32 01 84 8E  
001BF3r 4  89 31 01 83  	.byte $89,$31,$01,$83,$70,$87,$df,$01,$84,$51,$83,$74,$87,$3e,$89,$34
001BF7r 4  70 87 DF 01  
001BFBr 4  84 51 83 74  
001C03r 4  01 84 57 83  	.byte $01,$84,$57,$83,$70,$87,$4f,$01,$84,$5d,$83,$74,$87,$60,$01,$84
001C07r 4  70 87 4F 01  
001C0Br 4  84 5D 83 74  
001C13r 4  63 83 70 87  	.byte $63,$83,$70,$87,$71,$01,$84,$69,$83,$73,$87,$82,$89,$33,$01,$84
001C17r 4  71 01 84 69  
001C1Br 4  83 73 87 82  
001C23r 4  6F 83 70 87  	.byte $6f,$83,$70,$87,$93,$01,$84,$75,$83,$73,$87,$a4,$01,$84,$7b,$83
001C27r 4  93 01 84 75  
001C2Br 4  83 73 87 A4  
001C33r 4  70 87 B5 01  	.byte $70,$87,$b5,$01,$84,$81,$83,$72,$87,$c6,$89,$32,$01,$84,$87,$83
001C37r 4  84 81 83 72  
001C3Br 4  87 C6 89 32  
001C43r 4  70 87 D7 01  	.byte $70,$87,$d7,$01,$84,$8d,$83,$72,$87,$e8,$01,$84,$93,$83,$70,$87
001C47r 4  84 8D 83 72  
001C4Br 4  87 E8 01 84  
001C53r 4  F9 01 84 99  	.byte $f9,$01,$84,$99,$83,$71,$87,$0a,$88,$02,$89,$31,$01,$84,$9f,$83
001C57r 4  83 71 87 0A  
001C5Br 4  88 02 89 31  
001C63r 4  70 87 1B 01  	.byte $70,$87,$1b,$01,$84,$a5,$83,$71,$87,$2c,$01,$84,$ab,$83,$70,$87
001C67r 4  84 A5 83 71  
001C6Br 4  87 2C 01 84  
001C73r 4  3A 01 84 B1  	.byte $3a,$01,$84,$b1,$86,$80,$00
001C77r 4  86 80 00     
001C7Ar 4               
001C7Ar 3               
001C7Ar 3               ; ** SUBROUTINE: aud_run
001C7Ar 3               ; desc: Run a 1/60 tick of the audio engine.
001C7Ar 3               aud_run = famistudio_update
001C7Ar 3               
001C7Ar 3               ; ** SUBROUTINE: aud_init
001C7Ar 3               ; desc: Initializes the audio engine.
001C7Ar 3               aud_init:
001C7Ar 3  A9 01        	lda #1 ; NTSC
001C7Cr 3  A2 00        	ldx #0 ; no music data yet
001C7Er 3  A0 00        	ldy #0
001C80r 3  4C rr rr     	jmp famistudio_init
001C83r 3               
001C83r 3               ; ** SUBROUTINE: aud_load_sfx
001C83r 3               ; desc: Loads the sound effect table.
001C83r 3               aud_load_sfx:
001C83r 3  A2 rr        	ldx #<game_sfx
001C85r 3  A0 rr        	ldy #>game_sfx
001C87r 3  4C rr rr     	jmp famistudio_sfx_init
001C8Ar 3               
001C8Ar 3               ; ** SUBROUTINE: aud_reset
001C8Ar 3               ; desc: Removes all music from playback.
001C8Ar 3               aud_reset:
001C8Ar 3  A2 rr        	ldx #<music_data_blank
001C8Cr 3  A0 rr        	ldy #>music_data_blank
001C8Er 3  A9 01        	lda #1
001C90r 3  4C rr rr     	jmp famistudio_init
001C93r 3               
001C93r 3               .include "blank.asm"
001C93r 4               ; Copyright (C) 2024 iProgramInCpp.
001C93r 4               
001C93r 4               ; This is music data that only contains one song that plays nothing.
001C93r 4               ; This file is for the FamiStudio Sound Engine and was generated by FamiStudio
001C93r 4               
001C93r 4               .if FAMISTUDIO_CFG_C_BINDINGS
001C93r 4               .export _music_data_blank=music_data_blank
001C93r 4               .endif
001C93r 4               
001C93r 4               music_data_blank:
001C93r 4  01           	.byte 1
001C94r 4  rr rr        	.word @instruments
001C96r 4  rr rr        	.word @samples-4
001C98r 4               ; 00 : blank
001C98r 4  rr rr        	.word @song0ch0
001C9Ar 4  rr rr        	.word @song0ch1
001C9Cr 4  rr rr        	.word @song0ch2
001C9Er 4  rr rr        	.word @song0ch3
001CA0r 4  rr rr        	.word @song0ch4
001CA2r 4  33 01 00 01  	.word 307,256
001CA6r 4               
001CA6r 4               .export music_data_blank
001CA6r 4               .global FAMISTUDIO_DPCM_PTR
001CA6r 4               
001CA6r 4               @instruments:
001CA6r 4               
001CA6r 4               @env0:
001CA6r 4  00 C0 7F 00  	.byte $00,$c0,$7f,$00,$02
001CAAr 4  02           
001CABr 4               @env1:
001CABr 4  C0 7F 00 01  	.byte $c0,$7f,$00,$01
001CAFr 4               @env2:
001CAFr 4  7F 00 00     	.byte $7f,$00,$00
001CB2r 4               
001CB2r 4               @samples:
001CB2r 4               
001CB2r 4               @song0ch0:
001CB2r 4  46 0A        	.byte $46, $0a
001CB4r 4               @song0ch0loop:
001CB4r 4  9F 42        	.byte $9f, $42
001CB6r 4  rr rr        	.word @song0ch0loop
001CB8r 4               @song0ch1:
001CB8r 4               @song0ch1loop:
001CB8r 4  9F 42        	.byte $9f, $42
001CBAr 4  rr rr        	.word @song0ch1loop
001CBCr 4               @song0ch2:
001CBCr 4               @song0ch2loop:
001CBCr 4  9F 42        	.byte $9f, $42
001CBEr 4  rr rr        	.word @song0ch2loop
001CC0r 4               @song0ch3:
001CC0r 4               @song0ch3loop:
001CC0r 4  9F 42        	.byte $9f, $42
001CC2r 4  rr rr        	.word @song0ch3loop
001CC4r 4               @song0ch4:
001CC4r 4               @song0ch4loop:
001CC4r 4  9F 42        	.byte $9f, $42
001CC6r 4  rr rr        	.word @song0ch4loop
001CC8r 4               
001CC8r 3               
001CC8r 2               .include "nmi.asm"
001CC8r 3               ; Copyright (C) 2024 iProgramInCpp
001CC8r 3               
001CC8r 3               ; ** NMI
001CC8r 3               nmi_:
001CC8r 3  E6 rr        	inc nmicount
001CCAr 3  8D 00 E0     	sta mmc3_irqdi  ; disable IRQ for this frame
001CCDr 3  48           	pha
001CCEr 3  8A           	txa
001CCFr 3  48           	pha
001CD0r 3  98           	tya
001CD1r 3  48           	pha
001CD2r 3               
001CD2r 3  A5 rr        	lda nmienable
001CD4r 3  F0 0F        	beq @onlyAudioPlease ; if NMIs are softly disabled, then ONLY run audio
001CD6r 3               
001CD6r 3  20 rr rr     	jsr nmi_check_flags
001CD9r 3  20 rr rr     	jsr nmi_check_gamemodes
001CDCr 3               
001CDCr 3  20 rr rr     	jsr nmi_scrollsplit
001CDFr 3  20 rr rr     	jsr oam_dma_and_read_cont
001CE2r 3  20 rr rr     	jsr nmi_anims_update
001CE5r 3               
001CE5r 3               @onlyAudioPlease:
001CE5r 3  20 rr rr     	jsr aud_run
001CE8r 3               
001CE8r 3  68           	pla
001CE9r 3  A8           	tay
001CEAr 3  68           	pla
001CEBr 3  AA           	tax
001CECr 3  68           	pla
001CEDr 3  40           	rti
001CEEr 3               
001CEEr 3               nmi_check_flags:
001CEEr 3  A9 40        	lda #nc_flushcol
001CF0r 3  24 rr        	bit nmictrl
001CF2r 3  F0 07        	beq @tryPal
001CF4r 3               
001CF4r 3  45 rr        	eor nmictrl
001CF6r 3  85 rr        	sta nmictrl
001CF8r 3  20 rr rr     	jsr h_flush_col_r
001CFBr 3               
001CFBr 3               @tryPal:
001CFBr 3  A9 80        	lda #nc_flshpalv
001CFDr 3  24 rr        	bit nmictrl
001CFFr 3  F0 07        	beq @tryRow
001D01r 3               
001D01r 3  45 rr        	eor nmictrl
001D03r 3  85 rr        	sta nmictrl
001D05r 3  20 rr rr     	jsr h_flush_pal_r
001D08r 3               
001D08r 3               @tryRow:
001D08r 3  A9 10        	lda #nc_flushrow
001D0Ar 3  24 rr        	bit nmictrl
001D0Cr 3  F0 07        	beq @tryHPal
001D0Er 3               
001D0Er 3  45 rr        	eor nmictrl
001D10r 3  85 rr        	sta nmictrl
001D12r 3  20 rr rr     	jsr h_flush_row_u
001D15r 3               
001D15r 3               @tryHPal:
001D15r 3  A9 20        	lda #nc_flushpal
001D17r 3  24 rr        	bit nmictrl
001D19r 3  F0 07        	beq @tryClearEnq
001D1Br 3               
001D1Br 3  45 rr        	eor nmictrl
001D1Dr 3  85 rr        	sta nmictrl
001D1Fr 3  20 rr rr     	jsr h_flush_pal_u
001D22r 3               
001D22r 3               @tryClearEnq:
001D22r 3  A9 08        	lda #nc_clearenq
001D24r 3  24 rr        	bit nmictrl
001D26r 3  F0 07        	beq @tryClearCol
001D28r 3               
001D28r 3  45 rr        	eor nmictrl
001D2Ar 3  85 rr        	sta nmictrl
001D2Cr 3  20 rr rr     	jsr h_enqueued_clear
001D2Fr 3               
001D2Fr 3               @tryClearCol:
001D2Fr 3  A9 01        	lda #nc2_clrcol
001D31r 3  24 rr        	bit nmictrl2
001D33r 3  F0 07        	beq @trySetICr
001D35r 3               
001D35r 3  45 rr        	eor nmictrl2
001D37r 3  85 rr        	sta nmictrl2
001D39r 3  20 rr rr     	jsr h_clear_2cols
001D3Cr 3               
001D3Cr 3               @trySetICr:
001D3Cr 3  A9 02        	lda #nc2_setl0ic
001D3Er 3  24 rr        	bit nmictrl2
001D40r 3  F0 07        	beq @end
001D42r 3               
001D42r 3  45 rr        	eor nmictrl2
001D44r 3  85 rr        	sta nmictrl2
001D46r 3  20 rr rr     	jsr level0_nmi_set_icr
001D49r 3               
001D49r 3               @end:
001D49r 3  A9 01        	lda #nc_turnon
001D4Br 3  24 rr        	bit nmictrl
001D4Dr 3  F0 09        	beq @noTurnOn
001D4Fr 3               
001D4Fr 3               	; turn on bit is set, set PPUMASK to the default
001D4Fr 3  45 rr        	eor nmictrl
001D51r 3  85 rr        	sta nmictrl
001D53r 3  A9 1E        	lda #def_ppu_msk
001D55r 3  8D 01 20     	sta ppu_mask
001D58r 3               
001D58r 3               @noTurnOn:
001D58r 3  60           	rts
001D59r 3               
001D59r 3               nmi_check_gamemodes:
001D59r 3  A5 rr        	lda gamemode
001D5Br 3  F0 0C        	beq @return
001D5Dr 3  C9 02        	cmp #gm_titletra
001D5Fr 3  F0 46        	beq @titleTra
001D61r 3  C9 03        	cmp #gm_overwld
001D63r 3  F0 05        	beq @overwld
001D65r 3  C9 04        	cmp #gm_prologue
001D67r 3  F0 0E        	beq @prologue
001D69r 3               @return:
001D69r 3  60           	rts
001D6Ar 3               
001D6Ar 3               @overwld:
001D6Ar 3  A9 02        	lda #nc_updlvlnm
001D6Cr 3  24 rr        	bit nmictrl
001D6Er 3  F0 F9        	beq @return
001D70r 3  45 rr        	eor nmictrl
001D72r 3  85 rr        	sta nmictrl
001D74r 3  4C rr rr     	jmp ow_draw_level_name
001D77r 3               
001D77r 3               @prologue:
001D77r 3  A9 04        	lda #nc_prolclr
001D79r 3  24 rr        	bit nmictrl
001D7Br 3  F0 18        	beq @prol_dontClear
001D7Dr 3  45 rr        	eor nmictrl
001D7Fr 3  85 rr        	sta nmictrl
001D81r 3  A6 rr        	ldx pl_ppuaddr
001D83r 3  A4 rr        	ldy pl_ppuaddr+1
001D85r 3  8C 06 20     	sty ppu_addr
001D88r 3  8E 06 20     	stx ppu_addr
001D8Br 3               
001D8Br 3  A9 00        	lda #0
001D8Dr 3  A0 20        	ldy #32
001D8Fr 3  8D 07 20     :	sta ppu_data
001D92r 3  88           	dey
001D93r 3  D0 FA        	bne :-
001D95r 3               
001D95r 3               @prol_dontClear:
001D95r 3  A6 rr        	ldx pl_ppuaddr+1
001D97r 3  F0 D0        	beq @return       ; nothing to write
001D99r 3  A4 rr        	ldy pl_ppuaddr
001D9Br 3  8E 06 20     	stx ppu_addr
001D9Er 3  8C 06 20     	sty ppu_addr
001DA1r 3  A6 rr        	ldx pl_ppudata
001DA3r 3  8E 07 20     	stx ppu_data
001DA6r 3  60           	rts
001DA7r 3               
001DA7r 3               @titleTra:
001DA7r 3  A5 rr        	lda tl_timer
001DA9r 3  29 08        	and #$08
001DABr 3  4A           	lsr
001DACr 3  4A           	lsr
001DADr 3  4A           	lsr
001DAEr 3  A0 3F        	ldy #$3F
001DB0r 3  A2 01        	ldx #$01
001DB2r 3  20 rr rr     	jsr ppu_loadaddr
001DB5r 3  A8           	tay
001DB6r 3  B9 rr rr     	lda alt_colors, y
001DB9r 3  8D 07 20     	sta ppu_data
001DBCr 3  B9 rr rr     	lda alt_colors+2, y
001DBFr 3  8D 07 20     	sta ppu_data
001DC2r 3  B9 rr rr     	lda alt_colors+4, y
001DC5r 3  8D 07 20     	sta ppu_data
001DC8r 3  60           	rts
001DC9r 3               
001DC9r 3               ; ** SUBROUTINE: nmi_anims_update
001DC9r 3               ; desc: Selects the correct graphics banks during gameplay.
001DC9r 3               ;
001DC9r 3               ; question: Why is this near the END of the NMI routine, where it can potentially spill out of vblank?
001DC9r 3               ; answer:   Because updating MMC3 banks is always safe.  Even updating CHR banks is safe.  The only problem
001DC9r 3               ;           is tearing, but it only happens when the NMI routine takes too long, and the artifact will likely
001DC9r 3               ;           stay off in overscan anyway.
001DC9r 3               nmi_anims_update:
001DC9r 3  A5 rr        	lda scrollsplit
001DCBr 3  D0 2A        	bne nmi_anims_scrollsplit
001DCDr 3               
001DCDr 3               nmi_anims_normal:
001DCDr 3  A4 rr        	ldy spr0_bknum
001DCFr 3  A9 02        	lda #mmc3bk_spr0
001DD1r 3  20 rr rr     	jsr mmc3_set_bank_nmi
001DD4r 3               
001DD4r 3  A4 rr        	ldy spr3_bknum
001DD6r 3  A9 05        	lda #mmc3bk_spr3
001DD8r 3  20 rr rr     	jsr mmc3_set_bank_nmi
001DDBr 3               
001DDBr 3  A4 rr        	ldy spr1_bknum
001DDDr 3  A9 03        	lda #mmc3bk_spr1
001DDFr 3  20 rr rr     	jsr mmc3_set_bank_nmi
001DE2r 3               
001DE2r 3  A4 rr        	ldy spr2_bknum
001DE4r 3  A9 04        	lda #mmc3bk_spr2
001DE6r 3  20 rr rr     	jsr mmc3_set_bank_nmi
001DE9r 3               
001DE9r 3  A4 rr        	ldy bg0_bknum
001DEBr 3  A9 00        	lda #mmc3bk_bg0
001DEDr 3  20 rr rr     	jsr mmc3_set_bank_nmi
001DF0r 3               
001DF0r 3  A4 rr        	ldy bg1_bknum
001DF2r 3  A9 01        	lda #mmc3bk_bg1
001DF4r 3  4C rr rr     	jmp mmc3_set_bank_nmi
001DF7r 3               
001DF7r 3               nmi_anims_scrollsplit:
001DF7r 3  A4 rr        	ldy bg0_bkspl
001DF9r 3  A9 00        	lda #mmc3bk_bg0
001DFBr 3  20 rr rr     	jsr mmc3_set_bank_nmi
001DFEr 3               
001DFEr 3  A4 rr        	ldy bg1_bkspl
001E00r 3  A9 01        	lda #mmc3bk_bg1
001E02r 3  20 rr rr     	jsr mmc3_set_bank_nmi
001E05r 3               
001E05r 3  A4 rr        	ldy spr0_bkspl
001E07r 3  A9 02        	lda #mmc3bk_spr0
001E09r 3  20 rr rr     	jsr mmc3_set_bank_nmi
001E0Cr 3               
001E0Cr 3  A4 rr        	ldy spr1_bkspl
001E0Er 3  A9 03        	lda #mmc3bk_spr1
001E10r 3  20 rr rr     	jsr mmc3_set_bank_nmi
001E13r 3               
001E13r 3  A4 rr        	ldy spr2_bkspl
001E15r 3  A9 04        	lda #mmc3bk_spr2
001E17r 3  20 rr rr     	jsr mmc3_set_bank_nmi
001E1Ar 3               
001E1Ar 3  A4 rr        	ldy spr3_bkspl
001E1Cr 3  A9 05        	lda #mmc3bk_spr3
001E1Er 3  4C rr rr     	jmp mmc3_set_bank_nmi
001E21r 3               
001E21r 3               
001E21r 3               ; ** SUBROUTINE: nmi_scrollsplit
001E21r 3               ; desc: Determines if the scroll should be split.
001E21r 3               ; NOTE NOTE NOTE: AVOID LAG AT ALL COSTS WHILE A SCROLL SPLIT TAKES PLACE!
001E21r 3               ; ELSE YOU WILL SEE GRAPHICS GLITCHES!
001E21r 3               nmi_scrollsplit:
001E21r 3  A5 rr        	lda scrollsplit
001E23r 3  F0 1C        	beq @normalScrolling
001E25r 3               
001E25r 3  A5 rr        	lda ctl_flags
001E27r 3  8D 00 20     	sta ppu_ctrl   ; ctl_flags notably does NOT set X-high, Y-high. they're controlled separately
001E2Ar 3  A9 00        	lda #0
001E2Cr 3  8D 05 20     	sta ppu_scroll
001E2Fr 3  8D 05 20     	sta ppu_scroll
001E32r 3               
001E32r 3  8D 00 E0     	sta mmc3_irqdi  ; disable IRQ
001E35r 3  A5 rr        	lda scrollsplit
001E37r 3  8D 00 C0     	sta mmc3_irqla  ; latch
001E3Ar 3  8D 01 C0     	sta mmc3_irqrl  ; reload
001E3Dr 3  8D 01 E0     	sta mmc3_irqen  ; enable IRQs!
001E40r 3  60           	rts
001E41r 3               
001E41r 3               @normalScrolling:
001E41r 3  A5 rr        	lda scroll_flags
001E43r 3  05 rr        	ora ctl_flags
001E45r 3  8D 00 20     	sta ppu_ctrl
001E48r 3  A5 rr        	lda scroll_x
001E4Ar 3  8D 05 20     	sta ppu_scroll
001E4Dr 3  A5 rr        	lda scroll_y
001E4Fr 3  8D 05 20     	sta ppu_scroll
001E52r 3  8D 00 E0     	sta mmc3_irqdi  ; disable IRQ for this frame
001E55r 3  60           	rts
001E56r 3               
001E56r 2               .include "irq.asm"
001E56r 3               ; Copyright (C) 2024 iProgramInCpp
001E56r 3               
001E56r 3               ; ** IRQ
001E56r 3               ; thanks NESDev Wiki for providing an example of loopy's scroll method
001E56r 3               irq:
001E56r 3  48           	pha
001E57r 3  8A           	txa
001E58r 3  48           	pha
001E59r 3  98           	tya
001E5Ar 3  48           	pha
001E5Br 3  8D 00 E0     	sta mmc3_irqdi
001E5Er 3               
001E5Er 3  A5 rr        	lda gamemode       ; 3 cycles
001E60r 3  D0 2B        	bne @otherGameMode ; 2 cycles if gamemode == 0
001E62r 3               
001E62r 3  A5 rr        	lda scroll_flags   ; bits 0 and 1 control the high name table address
001E64r 3  0A           	asl
001E65r 3  0A           	asl
001E66r 3  8D 06 20     	sta ppu_addr       ; nametable number << 2 to ppu_addr.
001E69r 3               
001E69r 3               	; push the Y position to the ppu_scroll
001E69r 3  A5 rr        	lda scroll_y
001E6Br 3  8D 05 20     	sta ppu_scroll
001E6Er 3               
001E6Er 3               	; prepare the 2 latter writes. we reuse scroll_x to hold (y & $f8) << 2.
001E6Er 3  29 F8        	and #%11111000
001E70r 3  0A           	asl
001E71r 3  0A           	asl
001E72r 3  A6 rr        	ldx scroll_x
001E74r 3  85 rr        	sta scroll_x
001E76r 3               
001E76r 3               	; ((y & $f8) << 2) | (x >> 3) in A for ppu_addr later
001E76r 3  8A           	txa
001E77r 3  4A           	lsr
001E78r 3  4A           	lsr
001E79r 3  4A           	lsr
001E7Ar 3  05 rr        	ora scroll_x
001E7Cr 3               
001E7Cr 3               	; carefully timed code!
001E7Cr 3  A0 07        	ldy #$7
001E7Er 3  88           :	dey        ; 2 cycles
001E7Fr 3  D0 FD        	bne :-     ; 2 cycles (if branch succeeds)
001E81r 3  EA           	nop
001E82r 3               
001E82r 3               	; the last two ppu writes MUST happen during horizontal blank
001E82r 3  8E 05 20     	stx ppu_scroll
001E85r 3  8D 06 20     	sta ppu_addr
001E88r 3               
001E88r 3               	; restore scroll_x. not sure if this is needed
001E88r 3  86 rr        	stx scroll_x
001E8Ar 3               
001E8Ar 3  20 rr rr     	jsr nmi_anims_normal
001E8Dr 3               
001E8Dr 3               @otherGameMode:
001E8Dr 3  68           	pla
001E8Er 3  A8           	tay
001E8Fr 3  68           	pla
001E90r 3  AA           	tax
001E91r 3  68           	pla
001E92r 3  40           	rti
001E93r 3               
001E93r 2               
001E93r 2               ; I know this belongs in GAME and not in MAIN, but I want to take some load off of GAME.
001E93r 2               ;
001E93r 2               ; Note: The LR row must match the L row because gm_defaultdir requires it.
001E93r 2               dash_table:
001E93r 2  00 00 00 00  	.byte $00, $00, $00, $00 ; ----
001E97r 2  04 00 00 00  	.byte $04, $00, $00, $00 ; ---R
001E9Br 2  FC 00 00 00  	.byte $FC, $00, $00, $00 ; --L-
001E9Fr 2  FC 00 00 00  	.byte $FC, $00, $00, $00 ; --LR
001EA3r 2               
001EA3r 2  00 00 04 00  	.byte $00, $00, $04, $00 ; -D--
001EA7r 2  02 D4 02 D4  	.byte $02, $D4, $02, $D4 ; -D-R
001EABr 2  FD 2C 02 D4  	.byte $FD, $2C, $02, $D4 ; -DL-
001EAFr 2  FD 2C 02 D4  	.byte $FD, $2C, $02, $D4 ; -DLR
001EB3r 2               
001EB3r 2  00 00 FC 00  	.byte $00, $00, $FC, $00 ; U---
001EB7r 2  04 00 FD 24  	.byte $04, $00, $FD, $24 ; U--R
001EBBr 2  FD 24 FD 24  	.byte $FD, $24, $FD, $24 ; U-L-
001EBFr 2  FD 24 FD 24  	.byte $FD, $24, $FD, $24 ; U-LR
001EC3r 2               
001EC3r 2  00 00 00 00  	.byte $00, $00, $00, $00 ; UD--
001EC7r 2  04 00 00 00  	.byte $04, $00, $00, $00 ; UD-R
001ECBr 2  FC 00 00 00  	.byte $FC, $00, $00, $00 ; UDL-
001ECFr 2  FC 00 00 00  	.byte $FC, $00, $00, $00 ; UDLR
001ED3r 2               
001ED3r 2               init_palette:
001ED3r 2  0F 20 10 00  	.byte $0f,$20,$10,$00 ; grey tiles
001ED7r 2  0F 37 16 06  	.byte $0f,$37,$16,$06 ; brown tiles
001EDBr 2  0F 20 21 11  	.byte $0f,$20,$21,$11 ; blue tiles
001EDFr 2  0F 39 29 19  	.byte $0f,$39,$29,$19 ; green tiles
001EE3r 2  0F 37 14 21  	.byte $0f,$37,$14,$21 ; player sprite colors
001EE7r 2  0F 36 16 06  	.byte $0f,$36,$16,$06 ; red/strawberry sprite
001EEBr 2  0F 20 21 11  	.byte $0f,$20,$21,$11 ; blue sprite
001EEFr 2  0F 30 29 09  	.byte $0f,$30,$29,$09 ; green/refill sprite
001EF3r 2               owld_palette:
001EF3r 2  0F 0C 01 00  	.byte $0f,$0c,$01,$00
001EF7r 2  0F 0C 10 30  	.byte $0f,$0c,$10,$30
001EFBr 2  0F 0C 00 10  	.byte $0f,$0c,$00,$10
001EFFr 2  0F 00 10 30  	.byte $0f,$00,$10,$30
001F03r 2  0F 37 14 21  	.byte $0f,$37,$14,$21 ; player sprite colors
001F07r 2  0F 36 16 06  	.byte $0f,$36,$16,$06 ; red/strawberry sprite
001F0Br 2  0F 31 21 01  	.byte $0f,$31,$21,$01 ; blue sprite
001F0Fr 2  0F 30 29 09  	.byte $0f,$30,$29,$09 ; green/refill sprite
001F13r 2               
001F13r 2               .segment "PRG_VECS"
000000r 2  rr rr        	.word nmi_
000002r 2  rr rr        	.word reset
000004r 2  rr rr        	.word irq
000006r 2               
000006r 1               .include "prg_ttle.asm"
000006r 2               ; Copyright (C) 2024 iProgramInCpp
000006r 2               
000006r 2               .segment "PRG_TTLE"
000000r 2               
000000r 2               	.include "title/title.asm"
000000r 3               tscr_canvas:
000000r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000004r 3  80 80 80 80  
000008r 3  80 80 80 80  
000010r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000014r 3  80 80 80 80  
000018r 3  80 80 80 80  
000020r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000024r 3  80 80 80 80  
000028r 3  80 80 80 80  
000030r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000034r 3  80 80 80 80  
000038r 3  80 80 80 80  
000040r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000044r 3  80 80 80 80  
000048r 3  80 80 80 80  
000050r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000054r 3  80 80 80 80  
000058r 3  80 80 80 80  
000060r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000064r 3  80 80 80 80  
000068r 3  80 80 80 80  
000070r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000074r 3  80 80 80 80  
000078r 3  80 80 80 80  
000080r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000084r 3  80 80 80 80  
000088r 3  80 80 80 80  
000090r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000094r 3  80 80 80 80  
000098r 3  80 80 80 80  
0000A0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0000A4r 3  80 80 80 80  
0000A8r 3  80 80 80 80  
0000B0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0000B4r 3  80 80 80 80  
0000B8r 3  80 80 80 80  
0000C0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0000C4r 3  80 80 80 80  
0000C8r 3  80 80 80 80  
0000D0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0000D4r 3  80 80 80 80  
0000D8r 3  80 80 80 80  
0000E0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0000E4r 3  80 80 80 80  
0000E8r 3  80 80 80 80  
0000F0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0000F4r 3  80 80 80 80  
0000F8r 3  80 80 80 80  
000100r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$81
000104r 3  80 80 80 80  
000108r 3  80 80 80 80  
000110r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000114r 3  80 80 80 80  
000118r 3  80 80 80 80  
000120r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$82
000124r 3  80 80 80 80  
000128r 3  80 80 80 80  
000130r 3  83 80 80 80  	.byte $83,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000134r 3  80 80 80 80  
000138r 3  80 80 80 80  
000140r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$84,$85
000144r 3  80 80 80 80  
000148r 3  80 80 80 80  
000150r 3  86 87 80 80  	.byte $86,$87,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000154r 3  80 80 80 80  
000158r 3  80 80 80 80  
000160r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$88,$89,$8a
000164r 3  80 80 80 80  
000168r 3  80 80 80 80  
000170r 3  8B 8C 80 80  	.byte $8b,$8c,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000174r 3  80 80 80 80  
000178r 3  80 80 80 80  
000180r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$8d,$8e,$80
000184r 3  80 80 80 80  
000188r 3  80 80 80 80  
000190r 3  8F 90 91 80  	.byte $8f,$90,$91,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000194r 3  80 80 80 80  
000198r 3  80 80 80 80  
0001A0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$92,$93,$94,$92,$95,$96,$97,$98,$94,$92
0001A4r 3  80 80 92 93  
0001A8r 3  94 92 95 96  
0001B0r 3  99 9A 9B 93  	.byte $99,$9a,$9b,$93,$9c,$92,$93,$94,$92,$93,$80,$80,$80,$80,$80,$80
0001B4r 3  9C 92 93 94  
0001B8r 3  92 93 80 80  
0001C0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$9d,$9e,$9f,$a0,$9e,$a1,$a2,$a3,$80,$a4,$9e
0001C4r 3  80 9D 9E 9F  
0001C8r 3  A0 9E A1 A2  
0001D0r 3  A5 A6 A7 A8  	.byte $a5,$a6,$a7,$a8,$a9,$9f,$aa,$ab,$9e,$a5,$ac,$80,$80,$80,$80,$80
0001D4r 3  A9 9F AA AB  
0001D8r 3  9E A5 AC 80  
0001E0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$ad,$ae,$af,$b0,$b1,$b2,$b3,$b4,$b5,$b6,$b7
0001E4r 3  80 AD AE AF  
0001E8r 3  B0 B1 B2 B3  
0001F0r 3  B8 B9 BA BB  	.byte $b8,$b9,$ba,$bb,$bc,$bd,$be,$ad,$b7,$b8,$80,$80,$80,$80,$80,$80
0001F4r 3  BC BD BE AD  
0001F8r 3  B7 B8 80 80  
000200r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$bf,$c0,$c1,$c2,$c3,$c0,$c4,$c0,$c0,$c5,$c0
000204r 3  80 BF C0 C1  
000208r 3  C2 C3 C0 C4  
000210r 3  C0 C6 C0 C7  	.byte $c0,$c6,$c0,$c7,$c8,$c9,$ca,$cb,$cc,$cd,$ce,$80,$80,$80,$80,$80
000214r 3  C8 C9 CA CB  
000218r 3  CC CD CE 80  
000220r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$cf,$d0,$d1,$d2,$d3,$80,$80,$80,$80,$80,$80
000224r 3  80 CF D0 D1  
000228r 3  D2 D3 80 80  
000230r 3  80 80 80 D4  	.byte $80,$80,$80,$d4,$d5,$d6,$d7,$d8,$d9,$da,$80,$80,$80,$80,$80,$80
000234r 3  D5 D6 D7 D8  
000238r 3  D9 DA 80 80  
000240r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$db,$dc,$dd,$80,$de,$df,$80,$80,$80,$80,$80
000244r 3  80 DB DC DD  
000248r 3  80 DE DF 80  
000250r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$e0,$e1,$e2,$e3,$80,$80,$80,$80,$80,$80
000254r 3  80 80 E0 E1  
000258r 3  E2 E3 80 80  
000260r 3  80 80 80 80  	.byte $80,$80,$80,$80,$e4,$e5,$e6,$80,$e7,$e8,$e9,$ea,$80,$80,$80,$80
000264r 3  E4 E5 E6 80  
000268r 3  E7 E8 E9 EA  
000270r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$eb,$ec,$ed,$80,$80,$80,$80,$80
000274r 3  80 80 80 80  
000278r 3  EB EC ED 80  
000280r 3  80 EE EF F0  	.byte $80,$ee,$ef,$f0,$f1,$f2,$f3,$f4,$f5,$80,$80,$f6,$80,$80,$80,$80
000284r 3  F1 F2 F3 F4  
000288r 3  F5 80 80 F6  
000290r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$f7,$f8,$f9,$fa,$80,$80,$80
000294r 3  80 80 80 80  
000298r 3  80 F7 F8 F9  
0002A0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$e1,$80,$fb,$80,$80,$80,$80,$80,$80,$80,$80,$80
0002A4r 3  E1 80 FB 80  
0002A8r 3  80 80 80 80  
0002B0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$fc,$80,$80,$80
0002B4r 3  80 80 80 80  
0002B8r 3  80 80 80 80  
0002C0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0002C4r 3  80 80 80 80  
0002C8r 3  80 80 80 80  
0002D0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0002D4r 3  80 80 80 80  
0002D8r 3  80 80 80 80  
0002E0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0002E4r 3  80 80 80 80  
0002E8r 3  80 80 80 80  
0002F0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0002F4r 3  80 80 80 80  
0002F8r 3  80 80 80 80  
000300r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000304r 3  80 80 80 80  
000308r 3  80 80 80 80  
000310r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000314r 3  80 80 80 80  
000318r 3  80 80 80 80  
000320r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000324r 3  80 80 80 80  
000328r 3  80 80 80 80  
000330r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000334r 3  80 80 80 80  
000338r 3  80 80 80 80  
000340r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000344r 3  80 80 80 80  
000348r 3  80 80 80 80  
000350r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000354r 3  80 80 80 80  
000358r 3  80 80 80 80  
000360r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000364r 3  80 80 80 80  
000368r 3  80 80 80 80  
000370r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000374r 3  80 80 80 80  
000378r 3  80 80 80 80  
000380r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000384r 3  80 80 80 80  
000388r 3  80 80 80 80  
000390r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
000394r 3  80 80 80 80  
000398r 3  80 80 80 80  
0003A0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0003A4r 3  80 80 80 80  
0003A8r 3  80 80 80 80  
0003B0r 3  80 80 80 80  	.byte $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80
0003B4r 3  80 80 80 80  
0003B8r 3  80 80 80 80  
0003C0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003C4r 3  00 00 00 00  
0003C8r 3  00 00 00 00  
0003D0r 3  00 00 00 F4  	.byte $00,$00,$00,$f4,$33,$00,$00,$00,$00,$aa,$fe,$b7,$ad,$aa,$aa,$00
0003D4r 3  33 00 00 00  
0003D8r 3  00 AA FE B7  
0003E0r 3  00 5A DA 0A  	.byte $00,$5a,$da,$0a,$0a,$8e,$9b,$00,$06,$05,$09,$00,$00,$00,$0a,$02
0003E4r 3  0A 8E 9B 00  
0003E8r 3  06 05 09 00  
0003F0r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0003F4r 3  00 00 00 00  
0003F8r 3  00 00 00 00  
000400r 3               
000400r 3               
000400r 2               	.include "title/mountain.asm"
000400r 3               
000400r 3               MTN_data:
000400r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000404r 3  00 00 00 00  
000408r 3  00 00 00 01  
00041Ar 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$03,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00041Er 3  00 00 00 00  
000422r 3  00 00 02 03  
000434r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$06,$07,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000438r 3  00 00 00 00  
00043Cr 3  00 00 05 06  
00044Er 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$09,$0a,$0b,$0c,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000452r 3  00 00 00 00  
000456r 3  00 08 09 0A  
000468r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$0e,$0a,$0f,$10,$00,$00,$00,$11,$12,$00,$00,$00,$00,$00,$00,$00
00046Cr 3  00 00 00 00  
000470r 3  00 0D 0E 0A  
000482r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$14,$15,$0f,$16,$00,$00,$08,$17,$18,$00,$00,$00,$00,$00,$00,$00
000486r 3  00 00 00 00  
00048Ar 3  00 13 14 15  
00049Cr 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$19,$1a,$1b,$1c,$00,$00,$1d,$0e,$0f,$1e,$00,$00,$00,$00,$00,$00
0004A0r 3  00 00 00 00  
0004A4r 3  00 13 19 1A  
0004B6r 3  FD 1F 20 6D  	.byte $fd,$1f,$20,$6d,$23,$23,$23,$23,$24,$13,$19,$25,$26,$1c,$27,$23,$28,$14,$0f,$10,$23,$20,$29,$2a,$2b,$fe
0004BAr 3  23 23 23 23  
0004BEr 3  24 13 19 25  
0004D0r 3  FD 1F 2C 2D  	.byte $fd,$1f,$2c,$2d,$1f,$1f,$1f,$2e,$13,$13,$2f,$f0,$f1,$f2,$f3,$f4,$f5,$f6,$0f,$16,$f7,$f7,$f8,$f9,$3a,$fe
0004D4r 3  1F 1F 1F 2E  
0004D8r 3  13 13 2F F0  
0004EAr 3  FD 3B 3B 3C  	.byte $fd,$3b,$3b,$3c,$1f,$1f,$f7,$3d,$0f,$3a,$1c,$3e,$3f,$40,$e0,$e1,$e2,$e3,$e4,$0f,$e5,$e6,$e7,$e8,$e9,$fe
0004EEr 3  1F 1F F7 3D  
0004F2r 3  0F 3A 1C 3E  
000504r 3  FD F7 F7 F7  	.byte $fd,$f7,$f7,$f7,$f7,$ea,$eb,$ec,$0f,$3a,$ed,$3f,$3f,$ee,$fa,$9a,$66,$21,$0f,$0f,$84,$cd,$ef,$dd,$2b,$fe
000508r 3  F7 EA EB EC  
00050Cr 3  0F 3A ED 3F  
00051Er 3  FD DE DF DF  	.byte $fd,$de,$df,$df,$22,$5b,$5c,$5d,$5e,$5f,$60,$3f,$3f,$61,$62,$63,$64,$65,$0f,$67,$68,$69,$6a,$6b,$6c,$fe
000522r 3  22 5B 5C 5D  
000526r 3  5E 5F 60 3F  
000538r 3  FD 1F 6E 6F  	.byte $fd,$1f,$6e,$6f,$70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f,$80,$81,$82,$83,$1f,$fe
00053Cr 3  70 71 72 73  
000540r 3  74 75 76 77  
000552r 3  FD 3C 85 86  	.byte $fd,$3c,$85,$86,$87,$88,$f7,$89,$8a,$8b,$8c,$3a,$3a,$0f,$8d,$8e,$66,$8f,$90,$7f,$7f,$91,$92,$93,$94,$fe
000556r 3  87 88 F7 89  
00055Ar 3  8A 8B 8C 3A  
00056Cr 3  FD 95 F7 1F  	.byte $fd,$95,$f7,$1f,$96,$97,$83,$f7,$98,$98,$99,$3a,$3a,$0f,$9b,$9c,$9d,$9e,$9f,$a0,$a1,$a2,$a3,$a4,$a5,$fe
000570r 3  96 97 83 F7  
000574r 3  98 98 99 3A  
000586r 3  FD A6 3A A7  	.byte $fd,$a6,$3a,$a7,$f7,$a8,$a9,$aa,$ab,$ac,$ad,$ae,$0f,$0f,$9b,$af,$b0,$8a,$8b,$b1,$b2,$b3,$f7,$29,$29,$fe
00058Ar 3  F7 A8 A9 AA  
00058Er 3  AB AC AD AE  
0005A0r 3  FD F7 B4 B5  	.byte $fd,$f7,$b4,$b5,$f7,$f7,$83,$f7,$b6,$0f,$b7,$f7,$b8,$b9,$ba,$bb,$bc,$bd,$f7,$be,$bf,$c0,$a9,$c1,$c2,$fe
0005A4r 3  F7 F7 83 F7  
0005A8r 3  B6 0F B7 F7  
0005BAr 3  FD C3 C3 C3  	.byte $fd,$c3,$c3,$c3,$c3,$c3,$c3,$c4,$c5,$c6,$3a,$c4,$3a,$c7,$c8,$c9,$c7,$ca,$f7,$de,$cb,$de,$cc,$1f,$0f,$fe
0005BEr 3  C3 C3 C3 C4  
0005C2r 3  C5 C6 3A C4  
0005D4r 3  FD 3A 3A 3A  	.byte $fd,$3a,$3a,$3a,$3a,$cc,$ce,$cf,$d0,$d1,$d2,$d3,$d4,$d5,$d6,$d7,$d8,$3a,$d9,$1f,$1f,$da,$db,$cc,$dc,$fe
0005D8r 3  3A CC CE CF  
0005DCr 3  D0 D1 D2 D3  
0005EEr 3  00 FF FF FF  	.byte $00,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$ff,$00
0005F2r 3  FF FF FF FF  
0005F6r 3  FF FF FF FF  
000608r 3               
000608r 3               
000608r 3               MTN_attr:
000608r 3  00 00 00 00  	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$55,$55,$55,$55,$05,$00
00060Cr 3  00 00 00 00  
000610r 3  00 05 55 55  
000618r 3  00 00 00 54  	.byte $00,$00,$00,$54,$00,$00,$00,$00,$00,$00,$00,$55,$51,$51,$00,$00
00061Cr 3  00 00 00 00  
000620r 3  00 00 00 55  
000628r 3  00 00 84 55  	.byte $00,$00,$84,$55,$a5,$75,$a8,$00,$00,$00,$84,$69,$aa,$ff,$21,$00
00062Cr 3  A5 75 A8 00  
000630r 3  00 00 84 69  
000638r 3  00 00 08 0A  	.byte $00,$00,$08,$0a,$02,$0a,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00063Cr 3  02 0A 00 00  
000640r 3  00 00 00 00  
000648r 3               
000648r 2               
000648r 2               title_palette:
000648r 2  0F 30 10 2D  	.incbin "title/title.pal"
00064Cr 2  0F 30 11 2D  
000650r 2  0F 30 32 2D  
000658r 2               	; sprite palettes
000658r 2  0F 37 14 21  	.byte $0f,$37,$14,$21
00065Cr 2  0F 36 16 06  	.byte $0f,$36,$16,$06
000660r 2  0F 20 21 11  	.byte $0f,$20,$21,$11
000664r 2  0F 30 29 09  	.byte $0f,$30,$29,$09
000668r 2               
000668r 2  50 52 45 53  logo_pressstart: .byte "PRESS START"
00066Cr 2  53 20 53 54  
000670r 2  41 52 54     
000673r 2  60 61 62 63  logo_iprogram:   .byte $60,$61,$62,$63,$64,$65,$66
000677r 2  64 65 66     
00067Ar 2               
00067Ar 1               .include "prg_dial.asm"
00067Ar 2               ; Copyright (C) 2024 iProgramInCpp
00067Ar 2               
00067Ar 2               .segment "DLGRAM"
000000r 2  xx xx xx xx  d_old_attrs: .res 16  ; copied from VRAM in an NMI
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
000010r 2               
000010r 2               .segment "DLGTEMP"
000000r 2  xx xx xx xx  d_old_tiles: .res 512 ; copied from VRAM in an NMI
000004r 2  xx xx xx xx  
000008r 2  xx xx xx xx  
000200r 2               
000200r 2               .segment "PRG_DIAL"
000000r 2               .include "d_macros.asm"
000000r 3               ; Copyright (C) 2024 iProgramInCpp
000000r 3               
000000r 3               ; These are defines and macros useful for dialog.
000000r 3               
000000r 3               ; NOTES:
000000r 3               ; * Celeste defines an "anchor" for dialog. This game will have all dialog pinned to the
000000r 3               ;   top. This is usually the case in the original as well, except for some dialog in Ch.3.
000000r 3               
000000r 3               ; ## OPCODES ##
000000r 3               DOP_wait    = $00  ; Wait N frames
000000r 3               DOP_1line   = $01  ; One line of dialog
000000r 3               DOP_2line   = $02  ; Two lines of dialog
000000r 3               DOP_3line   = $03  ; Three lines of dialog
000000r 3               DOP_speaker = $04  ; Change speaker
000000r 3               DOP_dirent  = $05  ; Change facing direction of Entity
000000r 3               DOP_dirplr  = $06  ; Change facing direction of Player
000000r 3               DOP_walkplr = $07  ; Walk to position
000000r 3               DOP_walkent = $08  ; Walk to position (entity)
000000r 3               DOP_express = $09  ; Change expression
000000r 3               DOP_trigger = $0A  ; Trip a hardcoded trigger
000000r 3               
000000r 3               DOP_end     = $FF  ; Finish dialog
000000r 3               
000000r 3               ; ## SPEAKERS ##
000000r 3               ; NOTE: These double as characters you can use. When one of these characters is encountered
000000r 3               ; in the string stream, the name of the character is placed instead of the character.
000000r 3               SPK_madeline = $00
000000r 3               SPK_granny   = $01
000000r 3               SPK_theo     = $02
000000r 3               SPK_badeline = $03
000000r 3               SPK_ex       = $04
000000r 3               SPK_mom      = $05
000000r 3               SPK_oshiro   = $06
000000r 3               
000000r 3               ; Define a dialog line
000000r 3               .macro line name, text
000000r 3               name:
000000r 3               	.byte .strlen(text), text
000000r 3               .endmacro
000000r 3               
000000r 3               ; Wait N frames
000000r 3               ; desc: Close the dialog, wait N frames, and then open it back up
000000r 3               .macro wait n
000000r 3               	.byte DOP_wait, n
000000r 3               .endmacro
000000r 3               
000000r 3               ; 1 line dialog
000000r 3               .macro dialog1 line1
000000r 3               	.byte DOP_1line
000000r 3               	.word line1
000000r 3               .endmacro
000000r 3               
000000r 3               ; 2 line dialog
000000r 3               .macro dialog2 line1, line2
000000r 3               	.byte DOP_2line
000000r 3               	.word line1, line2
000000r 3               .endmacro
000000r 3               
000000r 3               ; 3 line dialog
000000r 3               .macro dialog3 line1, line2, line3
000000r 3               	.byte DOP_3line
000000r 3               	.word line1, line2, line3
000000r 3               .endmacro
000000r 3               
000000r 3               ; Change Speaker
000000r 3               ; desc: This changes the current speaker, and the CHR bank where their portrait resides.
000000r 3               .macro speaker spkr
000000r 3               	.byte DOP_speaker, spkr
000000r 3               .endmacro
000000r 3               
000000r 3               ; Change facing of Entity
000000r 3               ; desc: Changes the facing of the currently spoken-to entity.  This is 0 for facing right,
000000r 3               ;       and 1 for facing left.
000000r 3               .macro face_ent facing
000000r 3               	.byte DOP_dirent, facing
000000r 3               .endmacro
000000r 3               
000000r 3               ; Change facing of Player
000000r 3               ; desc: Changes the facing of Madeline.  This is 0 for facing right,
000000r 3               ;       and 1 for facing left.
000000r 3               .macro face_player facing
000000r 3               	.byte DOP_dirplr, facing
000000r 3               .endmacro
000000r 3               
000000r 3               ; Walk to position
000000r 3               ; desc: Walks the player to a position.
000000r 3               .macro walk_player px, py
000000r 3               	.byte DOP_walkplr, px, py
000000r 3               .endmacro
000000r 3               
000000r 3               ; Walk to position (entity)
000000r 3               ; desc: Walks the spoken-to entity to a position.
000000r 3               .macro walk_entity px, py
000000r 3               	.byte DOP_walkent, px, py
000000r 3               .endmacro
000000r 3               
000000r 3               ; Change expression
000000r 3               ; desc: Changes the expression of the character.  Whatever the expression the number
000000r 3               ;       defines, depends on the character, and how its portrait table is set up.
000000r 3               .macro expression expid
000000r 3               	.byte DOP_express, expid
000000r 3               .endmacro
000000r 3               
000000r 3               ; Trip a hardcoded trigger
000000r 3               ; desc: Some entities may have hardcoded triggers. This trips one of them.
000000r 3               .macro trigger trigid
000000r 3               	.byte DOP_trigger, trigid
000000r 3               .endmacro
000000r 3               
000000r 3               ; Finish dialog
000000r 3               .macro end
000000r 3               	.byte DOP_end
000000r 3               .endmacro
000000r 3               
000000r 2               .include "d_test.asm"    ; piece of test dialog
000000r 3               ; Copyright (C) 2024 iProgramInCpp
000000r 3               
000000r 3               ch0_granny:
000000r 3  04 00        	speaker     SPK_madeline
000002r 3  01 rr rr     	dialog1     @d0
000005r 3               
000005r 3  05 01        	face_ent    1
000007r 3               
000007r 3               	; walk
000007r 3  09 00        	expression  0
000009r 3  02 rr rr rr  	dialog2     @d1, @d2
00000Dr 3  rr           
00000Er 3               
00000Er 3  04 01        	speaker     SPK_granny
000010r 3  02 rr rr rr  	dialog2     @d3, @d4
000014r 3  rr           
000015r 3               
000015r 3               	; walk
000015r 3  04 00        	speaker     SPK_madeline
000017r 3  06 01        	face_player 1
000019r 3  05 00        	face_ent    0
00001Br 3  02 rr rr rr  	dialog2     @d5, @d6
00001Fr 3  rr           
000020r 3               
000020r 3  0A 00        	trigger     0              ; "haha"
000022r 3  00 1E        	wait        30             ; half a sec
000024r 3  04 01        	speaker     SPK_granny
000026r 3  02 rr rr rr  	dialog2     @d7, @d8
00002Ar 3  rr           
00002Br 3               
00002Br 3  04 00        	speaker     SPK_madeline
00002Dr 3  01 rr rr     	dialog1     @d9
000030r 3               
000030r 3  09 01        	expression  1
000032r 3  02 rr rr rr  	dialog2     @d10, @d11
000036r 3  rr           
000037r 3               
000037r 3  0A 01        	trigger     1              ; stop laughing
000039r 3  04 01        	speaker     SPK_granny
00003Br 3  01 rr rr     	dialog1     @d12
00003Er 3  02 rr rr rr  	dialog2     @d13, @d14
000042r 3  rr           
000043r 3               
000043r 3  01 rr rr     	dialog1     @d15
000046r 3  01 rr rr     	dialog1     @d16
000049r 3               
000049r 3  00 1E        	wait        30
00004Br 3  04 00        	speaker     SPK_madeline
00004Dr 3  01 rr rr     	dialog1     @d17
000050r 3               
000050r 3  FF           	end
000051r 3               
000051r 3  11 45 78 63  	line @d0, "Excuse me, ma'am?"
000055r 3  75 73 65 20  
000059r 3  6D 65 2C 20  
000063r 3  1F 54 68 65  	line @d1, "The sign out front is busted..."
000067r 3  20 73 69 67  
00006Br 3  6E 20 6F 75  
000083r 3  1B 69 73 20  	line @d2, "is this the Mountain trail?"
000087r 3  74 68 69 73  
00008Br 3  20 74 68 65  
00009Fr 3  14 59 6F 75  	line @d3, "You're almost there."
0000A3r 3  27 72 65 20  
0000A7r 3  61 6C 6D 6F  
0000B4r 3  1C 49 74 27  	line @d4, "It's just across the bridge."
0000B8r 3  73 20 6A 75  
0000BCr 3  73 74 20 61  
0000D1r 3  2E 42 79 20  	line @d5, "By the way, you should call someone about your"
0000D5r 3  74 68 65 20  
0000D9r 3  77 61 79 2C  
000100r 3  30 64 72 69  	line @d6, "driveway. The ridge collapsed and I nearly died."
000104r 3  76 65 77 61  
000108r 3  79 2E 20 54  
000131r 3  23 49 66 20  	line @d7, "If my \"driveway\" almost did you in,"
000135r 3  6D 79 20 22  
000139r 3  64 72 69 76  
000155r 3  29 74 68 65  	line @d8, "the Mountain might be a bit much for you."
000159r 3  20 4D 6F 75  
00015Dr 3  6E 74 61 69  
00017Fr 3  03 2E 2E 2E  	line @d9, "..."
000183r 3  20 57 65 6C  	line @d10,"Well, if an old bat like you can"
000187r 3  6C 2C 20 69  
00018Br 3  66 20 61 6E  
0001A4r 3  27 73 75 72  	line @d11,"survive out here, I think I'll be fine."
0001A8r 3  76 69 76 65  
0001ACr 3  20 6F 75 74  
0001CCr 3  0E 53 75 69  	line @d12,"Suit yourself."
0001D0r 3  74 20 79 6F  
0001D4r 3  75 72 73 65  
0001DBr 3  14 42 75 74  	line @d13,"But you should know,"
0001DFr 3  20 79 6F 75  
0001E3r 3  20 73 68 6F  
0001F0r 3  24 43 65 6C  	line @d14,"Celeste Mountain is a strange place."
0001F4r 3  65 73 74 65  
0001F8r 3  20 4D 6F 75  
000215r 3  15 59 6F 75  	line @d15,"You might see things."
000219r 3  20 6D 69 67  
00021Dr 3  68 74 20 73  
00022Br 3  1E 54 68 69  	line @d16,"Things you ain't ready to see."
00022Fr 3  6E 67 73 20  
000233r 3  79 6F 75 20  
00024Ar 3  1B 59 6F 75  	line @d17,"You should seek help, lady."
00024Er 3  20 73 68 6F  
000252r 3  75 6C 64 20  
000266r 3               
000266r 2               .include "d_update.asm"
000266r 3               ; Copyright (C) 2024 iProgramInCpp
000266r 3               
000266r 3               ;  This code belongs in the PRG_DIAL segment
000266r 3               dlg_update_d:
000266r 3  60           	rts
000267r 3               
000267r 2               
000267r 1               
000267r 1               ; NOTE(iProgram): Keep this up to date with LEVELEDITOR\MainGame.cs (public string bankNumbers[])
000267r 1               .segment "CHR_SPR00"
000000r 1  00 00 00 00  .incbin  "chr/sp_player.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               .segment "CHR_SPR01"
000000r 1  00 00 00 00  .incbin  "chr/sprites.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               
001000r 1               .segment "CHR_BGTTL"
000000r 1  00 00 00 00  .incbin  "chr/b_title.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               
001000r 1               .segment "CHR_BGOWD"
000000r 1  00 00 00 00  .incbin  "chr/b_overw.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               
001000r 1               .segment "CHR_SPOWD"
000000r 1  00 00 00 00  .incbin  "chr/sp_overw.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               
001000r 1               .segment "CHR_BG000"
000000r 1  00 00 00 00  .incbin  "chr/b_lvl0.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               
001000r 1               .segment "CHR_BG001"
000000r 1  00 00 00 00  .incbin  "chr/b_lvl1.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               
001000r 1               ; Main dialog tiles
001000r 1               .segment "CHR_DMAIN"
000000r 1  00 00 00 00  .incbin  "chr/d_main.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               ; Madeline dialog frames
001000r 1               .segment "CHR_DMADE"
000000r 1  00 00 00 00  .incbin  "chr/d_made.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               ; Theo dialog frames
001000r 1               .segment "CHR_DTHEO"
000000r 1  00 00 00 00  .incbin  "chr/d_theo.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
001000r 1               ; Granny dialog frames
001000r 1               .segment "CHR_DGRAN"
000000r 1  00 00 00 00  .incbin  "chr/d_gran.chr"
000004r 1  00 00 00 00  
000008r 1  00 00 00 00  
000000r 1               

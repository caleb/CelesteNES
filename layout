MEMORY
{
	# NES 2.0 header.
	INES:     start=$0000, size=$0010, fill=yes, fillval=$00;
	
	# RAM
	ZEROPAGE: start=$0000, size=$0100, type=rw, file="";
	OAMBUF:   start=$0200, size=$0100, type=rw, file="";
	ENTITIES: start=$0300, size=$0100, type=rw, file="";
	PLTRACES: start=$0400, size=$0080, type=rw, file="";
	# $80 bytes spare
	DRAWTEMP: start=$0500, size=$0100, type=rw, file="";
	FMSRAM:   start=$0600, size=$0100, type=rw, file="";
	# $700 PAGE spare
	
	CARTWRAM: start=$6000, size=$0800, type=rw, file="";
	
	# NOTE: It's actually possible to have 64 PRG banks and 32 CHR banks.
	# Currently we only use 16 banks of PRG space because it's enough.
	# Once we start work on Farewell it may no longer be enough.
	
	##### PRG ROM #####
	
	# Main Level Data
	#
	# Each chapter gets 8 KB of level data space.
	PRG_LVL0: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$00;
	PRG_LVL1: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$01;
	PRG_LVL2: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$02;
	PRG_LVL3: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$03;
	PRG_LVL4: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$04;
	PRG_LVL5: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$05;
	PRG_LVL6: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$06;
	PRG_LVL7: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$07;
	PRG_LVL8: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$08;
	PRG_LVL9: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$09;
	
	# Data shared between several levels (entity code, etc)
	#
	# For 8 chapters, this would comfortably be 4096 bytes per level,
	# assuming no code sharing is performed.
	PRG_LVLA: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$0A;
	PRG_LVLB: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$0B;
	PRG_LVLC: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$0C;
	PRG_LVLD: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$0D;
	
	# Game Engine and Core
	PRG_GAME: start=$8000, size=$2000, fill=yes, fillval=$00, bank=$0E;
	PRG_MAIN: start=$E000, size=$1F00, fill=yes, fillval=$00, bank=$0F;
	PRG_PALS: start=$FF00, size=$00FA, fill=yes, fillval=$00, bank=$0F;
	PRG_VECS: start=$FFFA, size=$0006, fill=yes, fillval=$00, bank=$0F;
	
	##### CHR ROM #####
	## Sprites ##
	
	# Player Sprites
	CHR_SPR00: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$00;
	CHR_SPR01: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$04;
	CHR_SPR02: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$08;
	CHR_SPR03: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$0C;
	CHR_SPOWD: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$10;
	
	## Backgrounds ##
	CHR_BGTTL: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$14;
	CHR_BGOWD: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$18;
	CHR_BG000: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$1C;
	CHR_BG001: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$20;
	CHR_BG002: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$24;
	CHR_BG003: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$28;
	CHR_BG004: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$2C;
	CHR_BG005: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$30;
	# CHR_BG006: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$34;
	# CHR_BG007: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$38;
	# CHR_BG008: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$3C;
	
	## Dialog Pattern Tables ##
	CHR_DMADE: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$34;
	CHR_DTHEO: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$38;
	CHR_DGRAN: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$3C;
}

SEGMENTS
{
	INES:     load = INES,     type = ro;
	ZEROPAGE: load = ZEROPAGE, type = zp;
	OAMBUF:   load = OAMBUF,   type = bss, align = $100;
	ENTITIES: load = ENTITIES, type = bss, align = $100;
	PLTRACES: load = PLTRACES, type = bss;
	DRAWTEMP: load = DRAWTEMP, type = bss;
	FMSRAM:   load = FMSRAM,   type = bss;
	CARTWRAM: load = CARTWRAM, type = bss;
	PRG_LVL0: load = PRG_LVL0, type = ro, align=$100;
	PRG_LVL1: load = PRG_LVL1, type = ro, align=$100;
	PRG_LVL2: load = PRG_LVL2, type = ro, align=$100;
	PRG_LVL3: load = PRG_LVL3, type = ro, align=$100;
	PRG_LVL4: load = PRG_LVL4, type = ro, align=$100;
	PRG_LVL5: load = PRG_LVL5, type = ro, align=$100;
	PRG_LVL6: load = PRG_LVL6, type = ro, align=$100;
	PRG_LVL7: load = PRG_LVL7, type = ro, align=$100;
	PRG_LVL8: load = PRG_LVL8, type = ro, align=$100;
	PRG_LVL9: load = PRG_LVL9, type = ro, align=$100;
	PRG_LVLA: load = PRG_LVLA, type = ro, align=$100;
	PRG_LVLB: load = PRG_LVLB, type = ro, align=$100;
	PRG_LVLC: load = PRG_LVLC, type = ro, align=$100;
	PRG_LVLD: load = PRG_LVLD, type = ro, align=$100;
	PRG_GAME: load = PRG_GAME, type = ro;
	PRG_MAIN: load = PRG_MAIN, type = ro;
	PRG_PALS: load = PRG_PALS, type = ro;
	PRG_VECS: load = PRG_VECS, type = ro;
	CHR_SPR00: load = CHR_SPR00, type = ro;
	CHR_SPR01: load = CHR_SPR01, type = ro;
	CHR_SPR02: load = CHR_SPR02, type = ro;
	CHR_SPR03: load = CHR_SPR03, type = ro;
	CHR_SPOWD: load = CHR_SPOWD, type = ro;
	CHR_BGTTL: load = CHR_BGTTL, type = ro;
	CHR_BGOWD: load = CHR_BGOWD, type = ro;
	CHR_BG000: load = CHR_BG000, type = ro;
	CHR_BG001: load = CHR_BG001, type = ro;
	CHR_BG002: load = CHR_BG002, type = ro;
	CHR_BG003: load = CHR_BG003, type = ro;
	CHR_BG004: load = CHR_BG004, type = ro;
	CHR_DMADE: load = CHR_DMADE, type = ro;
	CHR_DTHEO: load = CHR_DTHEO, type = ro;
	CHR_DGRAN: load = CHR_DGRAN, type = ro;
}

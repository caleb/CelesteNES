MEMORY
{
	# NES 2.0 header.
	INES:     start=$0000, size=$0010, fill=yes, fillval=$00;
	
	# System WRAM
	#
	# NOTE: DLGTEMP and DRAWTEMP are stored in the same place because 
	# the first half DRAWTEMP is not being used while DLGTEMP is being used.
	#
	# the second half is, though, because it contains the loaded attribute data
	# of the current level which we will need to restore
	ZEROPAGE: start=$0000, size=$0100, type=rw, file="";
	OAMBUF:   start=$0200, size=$0100, type=rw, file="";
	ENTITIES: start=$0300, size=$0100, type=rw, file="";
	PLTRACES: start=$0400, size=$00C0, type=rw, file="";
	DLGRAM:   start=$04C0, size=$0040, type=rw, file="";
	DRAWTEMP: start=$0500, size=$0200, type=rw, file="";
	FMSRAM:   start=$0700, size=$0100, type=rw, file="";
	
	AREASPC:  start=$6000, size=$0800, type=rw, file="";
	DLGTEMP:  start=$6800, size=$0800, type=rw, file="";
	
	# NOTE: It's actually possible to have 64 PRG banks and 32 CHR banks.
	# Currently we only use 16 banks of PRG space because it's enough.
	# Once we start work on Farewell it may no longer be enough.
	
	##### PRG ROM #####
	
	# Main Level Data
	#
	# Each chapter gets 8 KB of level data space.
	PRG_LVL0A: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$00;
	PRG_LVL1A: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$01;
	PRG_LVL2A: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$02;
	PRG_LVL3A: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$03;
	PRG_LVL4A: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$04;
	PRG_LVL5A: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$05;
	PRG_LVL0B: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$06;
	PRG_LVL1B: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$07;
	PRG_LVL2B: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$08;
	PRG_LVL3B: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$09;
	PRG_LVL4B: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$0A;
	PRG_LVL5B: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$0B;
	
	PRG_DIAL: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$0C;
	PRG_TTLE: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$0D;
	
	# Game Engine and Core
	PRG_GAME: start=$8000, size=$2000, fill=yes, fillval=$00, bank=$0E;
	PRG_MAIN: start=$E000, size=$1FFA, fill=yes, fillval=$00, bank=$0F;
	PRG_VECS: start=$FFFA, size=$0006, fill=yes, fillval=$00, bank=$0F;
	
	##### CHR ROM #####
	## Sprites ##
	
	# Player Sprites
	CHR_SPMAD: start=$0000, size=$0800, fill=yes, fillval=$FF, bank=$00;
	CHR_SPGEN: start=$0800, size=$0800, fill=yes, fillval=$FF, bank=$02;
	CHR_SPANI: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$04;
	CHR_SPR02: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$08;
	CHR_SPR03: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$0C;
	CHR_SPOWD: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$10;
	
	## Backgrounds ##
	CHR_BGTTL: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$14;
	CHR_BGOWD: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$18;
	CHR_BG000: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$1C;
	CHR_BG001: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$20;
	CHR_BG002: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$24;
	CHR_BG003: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$28;
	CHR_BG004: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$2C;
	CHR_BG005: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$30;
	CHR_BG006: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$34;
	CHR_BG007: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$38;
	CHR_BG008: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$3C;
	
	CHR_UN000: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$40;
	CHR_UN001: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$44;
	CHR_UN002: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$48;
	CHR_UN003: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$4C;
	CHR_UN004: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$50;
	CHR_UN005: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$54;
	CHR_UN006: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$58;
	CHR_UN007: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$5C;
	CHR_UN008: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$60;
	CHR_UN009: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$64;
	CHR_UN010: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$68;
	
	## Dialog Pattern Tables ##
	CHR_DCNTR: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$6C;
	CHR_DMAIN: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$70;
	CHR_DMADE: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$74;
	CHR_DTHEO: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$78;
	CHR_DGRAN: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$7C;
}

SEGMENTS
{
	INES:      load = INES,      type = ro;
	ZEROPAGE:  load = ZEROPAGE,  type = zp;
	OAMBUF:    load = OAMBUF,    type = bss, align = $100;
	ENTITIES:  load = ENTITIES,  type = bss, align = $100;
	PLTRACES:  load = PLTRACES,  type = bss;
	DLGRAM:    load = DLGRAM,    type = bss;
	DRAWTEMP:  load = DRAWTEMP,  type = bss;
	FMSRAM:    load = FMSRAM,    type = bss;
	AREASPC:   load = AREASPC,   type = bss;
	DLGTEMP:   load = DLGTEMP,   type = bss, align = $100;
	PRG_LVL0A: load = PRG_LVL0A, type = ro, align=$100;
	PRG_LVL1A: load = PRG_LVL1A, type = ro, align=$100;
	PRG_LVL2A: load = PRG_LVL2A, type = ro, align=$100;
	PRG_LVL3A: load = PRG_LVL3A, type = ro, align=$100;
	PRG_LVL4A: load = PRG_LVL4A, type = ro, align=$100;
	PRG_LVL5A: load = PRG_LVL5A, type = ro, align=$100;
	PRG_LVL0B: load = PRG_LVL0B, type = ro, align=$100;
	PRG_LVL1B: load = PRG_LVL1B, type = ro, align=$100;
	PRG_LVL2B: load = PRG_LVL2B, type = ro, align=$100;
	PRG_LVL3B: load = PRG_LVL3B, type = ro, align=$100;
	PRG_LVL4B: load = PRG_LVL4B, type = ro, align=$100;
	PRG_LVL5B: load = PRG_LVL5B, type = ro, align=$100;
	PRG_DIAL:  load = PRG_DIAL,  type = ro, align=$100;
	PRG_TTLE:  load = PRG_TTLE,  type = ro, align=$100;
	PRG_GAME:  load = PRG_GAME,  type = ro, align=$100;
	PRG_MAIN:  load = PRG_MAIN,  type = ro, align=$100;
	PRG_VECS:  load = PRG_VECS,  type = ro;
	
	CHR_SPMAD: load = CHR_SPMAD, type = ro;
	CHR_SPGEN: load = CHR_SPGEN, type = ro;
	CHR_SPANI: load = CHR_SPANI, type = ro;
	CHR_SPR02: load = CHR_SPR02, type = ro;
	CHR_SPR03: load = CHR_SPR03, type = ro;
	CHR_SPOWD: load = CHR_SPOWD, type = ro;
	CHR_BGTTL: load = CHR_BGTTL, type = ro;
	CHR_BGOWD: load = CHR_BGOWD, type = ro;
	CHR_BG000: load = CHR_BG000, type = ro;
	CHR_BG001: load = CHR_BG001, type = ro;
	CHR_BG002: load = CHR_BG002, type = ro;
	CHR_BG003: load = CHR_BG003, type = ro;
	CHR_BG004: load = CHR_BG004, type = ro;
	CHR_BG005: load = CHR_BG005, type = ro;
	CHR_BG006: load = CHR_BG006, type = ro;
	CHR_BG007: load = CHR_BG007, type = ro;
	CHR_BG008: load = CHR_BG008, type = ro;
	CHR_UN000: load = CHR_UN000, type = ro;
	CHR_UN001: load = CHR_UN001, type = ro;
	CHR_UN002: load = CHR_UN002, type = ro;
	CHR_UN003: load = CHR_UN003, type = ro;
	CHR_UN004: load = CHR_UN004, type = ro;
	CHR_UN005: load = CHR_UN005, type = ro;
	CHR_UN006: load = CHR_UN006, type = ro;
	CHR_UN007: load = CHR_UN007, type = ro;
	CHR_UN008: load = CHR_UN008, type = ro;
	CHR_UN009: load = CHR_UN009, type = ro;
	CHR_UN010: load = CHR_UN010, type = ro;
	CHR_DCNTR: load = CHR_DCNTR, type = ro;
	CHR_DMAIN: load = CHR_DMAIN, type = ro;
	CHR_DMADE: load = CHR_DMADE, type = ro;
	CHR_DTHEO: load = CHR_DTHEO, type = ro;
	CHR_DGRAN: load = CHR_DGRAN, type = ro;
}

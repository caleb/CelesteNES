MEMORY
{
	# NES 2.0 header.
	INES:     start=$0000, size=$0010, fill=yes, fillval=$00;
	
	# System WRAM
	#
	# NOTE: DLGTEMP and DRAWTEMP are stored in the same place because 
	# the first half DRAWTEMP is not being used while DLGTEMP is being used.
	#
	# the second half is, though, because it contains the loaded attribute data
	# of the current level which we will need to restore
	ZEROPAGE: start=$0000, size=$0100, type=rw, file="";
	OAMBUF:   start=$0200, size=$0100, type=rw, file="";
	ENTITIES: start=$0300, size=$0100, type=rw, file="";
	PLTRACES: start=$0400, size=$0080, type=rw, file="";
	DLGRAM:   start=$0480, size=$0080, type=rw, file="";
	MORERAM:  start=$0500, size=$005C, type=rw, file="";
	DRAWTEMP: start=$055C, size=$01A4, type=rw, file="";
	FMSRAM:   start=$0700, size=$00DA, type=rw, file="";
	LASTRAM:  start=$07D7, size=$0026, type=rw, file="";
	
	AREASPC:  start=$6000, size=$0800, type=rw, file="";
	DLGTEMP:  start=$6800, size=$0400, type=rw, file="";
	AREAPAL:  start=$6C00, size=$0200, type=rw, file="";
	SAVEFILE: start=$6E00, size=$0200, type=rw, file="";
	AREAXTRA: start=$7000, size=$0F00, type=rw, file="";
	BGFXRAM:  start=$7F00, size=$0100, type=rw, file="";
	
	# Advanced Trace
	ADVTRACE: start=$6800, size=$0240, type=rw, file="";
	
	# NOTE: It's actually possible to have 64 PRG banks and 32 CHR banks.
	# Currently we only use 16 banks of PRG space because it's enough.
	# Once we start work on Farewell it may no longer be enough.
	
	##### PRG ROM #####
	
	# Main Level Data
	#
	# Each chapter gets 8 KB of level data space.
	PRG_LVL0A: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$00;
	PRG_LVL1A: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$01;
	PRG_LVL1B: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$02;
	PRG_LVL1C: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$03;
	PRG_LVL1D: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$04;
	PRG_LVL2A: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$05;
	PRG_LVL2B: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$06;
	PRG_LVL2C: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$07;
	PRG_LVL2D: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$08;
	PRG_LVL2E: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$09;
	
	PRG_PAUS: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$0A;
	PRG_XTRA: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$0B;
	PRG_DIAL: start=$A000, size=$2000, fill=yes, fillval=$00, bank=$0C;
	PRG_TTLE: start=$C000, size=$2000, fill=yes, fillval=$00, bank=$0D;
	
	# Game Engine and Core
	PRG_GAME: start=$8000, size=$2000, fill=yes, fillval=$00, bank=$0E;
	PRG_MAIN: start=$E000, size=$1FFA, fill=yes, fillval=$00, bank=$0F;
	PRG_VECS: start=$FFFA, size=$0006, fill=yes, fillval=$00, bank=$0F;
	
	##### CHR ROM #####
	## Sprites ##
	
	## Global Sprite Banks ##
	CHR_SPMAD: start=$0000, size=$0800, fill=yes, fillval=$FF, bank=$00; # Madeline sprites (2 banks)
	CHR_DPLDI: start=$1000, size=$0400, fill=yes, fillval=$FF, bank=$02; # Player death particles bank
	CHR_SPGEN: start=$0800, size=$0400, fill=yes, fillval=$FF, bank=$03; # Generic sprites
	CHR_SPANI: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$04; # Animated sprites (4 banks)
	
	## Level Specific Sprite Banks ##
	CHR_SLVL0: start=$0000, size=$0400, fill=yes, fillval=$FF, bank=$08; # Level 0 sprite bank (Granny+Bird)
	CHR_SLV0B: start=$0C00, size=$0400, fill=yes, fillval=$FF, bank=$09; # Level 0 sprite bank (Bird tutorial)
	CHR_SLVL1: start=$0000, size=$0400, fill=yes, fillval=$FF, bank=$0A; # Level 1 sprite bank (zip mover)
	CHR_SLV1B: start=$0000, size=$0400, fill=yes, fillval=$FF, bank=$0B; # Level 1 sprite bank (tall zip mover)
	CHR_SLV1C: start=$0000, size=$0400, fill=yes, fillval=$FF, bank=$0C; # Level 2 sprite bank (payphone)
	CHR_SLVL2: start=$0000, size=$0400, fill=yes, fillval=$FF, bank=$0D; # Level 2 sprite bank (campfire, falling blocks)
	CHR_SLV2B: start=$0000, size=$0400, fill=yes, fillval=$FF, bank=$0E; # Level 2 sprite bank (extra Badeline actions)
	CHR_PAPH3: start=$1000, size=$0400, fill=yes, fillval=$FF, bank=$0F; # Level 2 Payphone animation (8)
	CHR_PAPH1: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$10; # Level 2 Payphone animation (0,1,2,3)
	CHR_PAPH2: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$14; # Level 2 Payphone animation (4,5,6,7)
	CHR_SLV2L: start=$1000, size=$0800, fill=yes, fillval=$FF, bank=$18; # Level 2 Mirror Badeline
	CHR_SLV2N: start=$1000, size=$0400, fill=yes, fillval=$FF, bank=$1A; # Level 2 Generic bank clone with different stars
	CHR_PAPH4: start=$0000, size=$0400, fill=yes, fillval=$FF, bank=$1B; # Level 2 Payphone animation (9)
	
	## Level Tilesets ##
	CHR_BGTTL: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$1C; # Title screen
	CHR_BGOWD: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$20; # Overworld screen
	CHR_BG000: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$24; # Level 0
	CHR_BG001: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$28; # Level 1
	CHR_BG002: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$2C; # Level 2 (main)
	CHR_BG003: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$30; # Level 2 (additional prop tiles [lvl2, lvl2b])
	CHR_BG004: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$34; # Level 2 (dream block in different states)
	CHR_BG005: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$38; # Level 2 (dream block in different states)
	CHR_BG006: start=$1000, size=$0800, fill=yes, fillval=$FF, bank=$3C; # Level 2 (dream block in different states)
	CHR_UN102: start=$1000, size=$0800, fill=yes, fillval=$FF, bank=$3E; #      <<<<< UNUSED (2 banks)
	
	## Complete Screens ##
	CHR_LV1CA: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$40; # Level 1 Complete A
	CHR_LV1CB: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$44; # Level 1 Complete B
	CHR_LV2CA: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$48; # Level 2 Complete A
	CHR_LV2CB: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$4C; # Level 2 Complete B
	CHR_SL1CO: start=$1000, size=$0800, fill=yes, fillval=$FF, bank=$50; # Level 1 Complete Sprites
	CHR_SL2CO: start=$1000, size=$0800, fill=yes, fillval=$FF, bank=$52; # Level 2 Complete Sprites
	
	## User Interface ##
	CHR_SPOWD: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$54; # Overworld sprites
	CHR_PAUSE: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$58; # Pause graphics
	CHR_PCARD: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$5C; # Postcard text bank
	CHR_OPTNS: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$60; # Options text bank
	
	## Dialog Pattern Tables ##
	CHR_DMAIN: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$68; # Dialog text font (unused)
	CHR_DCNTR: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$6C; # Binary counting pattern for text rendering
	CHR_DMOME: start=$0000, size=$1000, fill=yes, fillval=$FF, bank=$64; # Mom/Ex dialog portraits (No, not Momeline)
	CHR_DBADE: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$70; # Badeline dialog portraits
	CHR_DMADE: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$74; # Madeline dialog portraits
	CHR_DTHEO: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$78; # Theo dialog portraits (unused for now)
	CHR_DGRAN: start=$1000, size=$1000, fill=yes, fillval=$FF, bank=$7C; # Granny dialog portraits
}

SEGMENTS
{
	INES:      load = INES,      type = ro;
	ZEROPAGE:  load = ZEROPAGE,  type = zp;
	OAMBUF:    load = OAMBUF,    type = bss, align = $100;
	ENTITIES:  load = ENTITIES,  type = bss, align = $100;
	PLTRACES:  load = PLTRACES,  type = bss;
	DLGRAM:    load = DLGRAM,    type = bss;
	MORERAM:   load = MORERAM,   type = bss;
	DRAWTEMP:  load = DRAWTEMP,  type = bss;
	FMSRAM:    load = FMSRAM,    type = bss;
	LASTRAM:   load = LASTRAM,   type = bss;
	AREASPC:   load = AREASPC,   type = bss;
	DLGTEMP:   load = DLGTEMP,   type = bss, align = $100;
	AREAPAL:   load = AREAPAL,   type = bss, align = $100;
	SAVEFILE:  load = SAVEFILE,  type = bss, align = $100;
	AREAXTRA:  load = AREAXTRA,  type = bss, align = $100;
	ADVTRACE:  load = ADVTRACE,  type = bss, align = $100;
	BGFXRAM:   load = BGFXRAM,   type = bss, align = $100;
	PRG_LVL0A: load = PRG_LVL0A, type = ro, align=$100;
	PRG_LVL1A: load = PRG_LVL1A, type = ro, align=$100;
	PRG_LVL1B: load = PRG_LVL1B, type = ro, align=$100;
	PRG_LVL1C: load = PRG_LVL1C, type = ro, align=$100;
	PRG_LVL1D: load = PRG_LVL1D, type = ro, align=$100;
	PRG_LVL2A: load = PRG_LVL2A, type = ro, align=$100;
	PRG_LVL2B: load = PRG_LVL2B, type = ro, align=$100;
	PRG_LVL2C: load = PRG_LVL2C, type = ro, align=$100;
	PRG_LVL2D: load = PRG_LVL2D, type = ro, align=$100;
	PRG_LVL2E: load = PRG_LVL2E, type = ro, align=$100;
	PRG_PAUS:  load = PRG_PAUS,  type = ro, align=$100;
	PRG_XTRA:  load = PRG_XTRA,  type = ro, align=$100;
	PRG_DIAL:  load = PRG_DIAL,  type = ro, align=$100;
	PRG_TTLE:  load = PRG_TTLE,  type = ro, align=$100;
	PRG_GAME:  load = PRG_GAME,  type = ro, align=$100;
	PRG_MAIN:  load = PRG_MAIN,  type = ro, align=$100;
	PRG_VECS:  load = PRG_VECS,  type = ro;
	
	CHR_SPMAD: load = CHR_SPMAD, type = ro;
	CHR_DPLDI: load = CHR_DPLDI, type = ro;
	CHR_SPGEN: load = CHR_SPGEN, type = ro;
	CHR_SPANI: load = CHR_SPANI, type = ro;
	CHR_SLVL0: load = CHR_SLVL0, type = ro;
	CHR_SLV0B: load = CHR_SLV0B, type = ro;
	CHR_SLVL1: load = CHR_SLVL1, type = ro;
	CHR_SLV1B: load = CHR_SLV1B, type = ro;
	CHR_SLV1C: load = CHR_SLV1C, type = ro;
	CHR_SLVL2: load = CHR_SLVL2, type = ro;
	CHR_SLV2B: load = CHR_SLV2B, type = ro;
	CHR_PAPH3: load = CHR_PAPH3, type = ro;
	CHR_PAPH1: load = CHR_PAPH1, type = ro;
	CHR_PAPH2: load = CHR_PAPH2, type = ro;
	CHR_SLV2L: load = CHR_SLV2L, type = ro;
	CHR_SLV2N: load = CHR_SLV2N, type = ro;
	CHR_PAPH4: load = CHR_PAPH4, type = ro;
	CHR_BGTTL: load = CHR_BGTTL, type = ro;
	CHR_BGOWD: load = CHR_BGOWD, type = ro;
	CHR_BG000: load = CHR_BG000, type = ro;
	CHR_BG001: load = CHR_BG001, type = ro;
	CHR_BG002: load = CHR_BG002, type = ro;
	CHR_BG003: load = CHR_BG003, type = ro;
	CHR_BG004: load = CHR_BG004, type = ro;
	CHR_BG005: load = CHR_BG005, type = ro;
	CHR_BG006: load = CHR_BG006, type = ro;
	CHR_UN102: load = CHR_UN102, type = ro;
	CHR_LV1CA: load = CHR_LV1CA, type = ro;
	CHR_LV1CB: load = CHR_LV1CB, type = ro;
	CHR_LV2CA: load = CHR_LV2CA, type = ro;
	CHR_LV2CB: load = CHR_LV2CB, type = ro;
	CHR_SL1CO: load = CHR_SL1CO, type = ro;
	CHR_SL2CO: load = CHR_SL2CO, type = ro;
	CHR_SPOWD: load = CHR_SPOWD, type = ro;
	CHR_PAUSE: load = CHR_PAUSE, type = ro;
	CHR_PCARD: load = CHR_PCARD, type = ro;
	CHR_OPTNS: load = CHR_OPTNS, type = ro;
	CHR_DMAIN: load = CHR_DMAIN, type = ro;
	CHR_DCNTR: load = CHR_DCNTR, type = ro;
	CHR_DMOME: load = CHR_DMOME, type = ro;
	CHR_DBADE: load = CHR_DBADE, type = ro;
	CHR_DMADE: load = CHR_DMADE, type = ro;
	CHR_DTHEO: load = CHR_DTHEO, type = ro;
	CHR_DGRAN: load = CHR_DGRAN, type = ro;
}
